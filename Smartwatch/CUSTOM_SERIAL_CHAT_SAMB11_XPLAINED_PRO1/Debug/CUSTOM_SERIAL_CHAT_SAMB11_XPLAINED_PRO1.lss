
CUSTOM_SERIAL_CHAT_SAMB11_XPLAINED_PRO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b7fc  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  100137fc  100137fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004970  10013868  10013868  00013868  2**2
                  ALLOC
  3 .stack        00000800  100181d8  100181d8  00013868  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00013868  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00013890  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029659  00000000  00000000  00013944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036be  00000000  00000000  0003cf9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007465  00000000  00000000  0004065b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000880  00000000  00000000  00047ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000918  00000000  00000000  00048340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022965  00000000  00000000  00048c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000de05  00000000  00000000  0006b5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0013e55b  00000000  00000000  000793c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001fa0  00000000  00000000  001b7920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100137fc 	.word	0x100137fc
10008068:	100137fc 	.word	0x100137fc
1000806c:	10013868 	.word	0x10013868
10008070:	100181d8 	.word	0x100181d8
10008074:	10013868 	.word	0x10013868
10008078:	10013800 	.word	0x10013800
1000807c:	1001386c 	.word	0x1001386c
10008080:	1001109d 	.word	0x1001109d
10008084:	1000c859 	.word	0x1000c859

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10013868 	.word	0x10013868
100080a8:	00000000 	.word	0x00000000
100080ac:	100137fc 	.word	0x100137fc

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	1001386c 	.word	0x1001386c
100080dc:	100137fc 	.word	0x100137fc
100080e0:	100137fc 	.word	0x100137fc
100080e4:	00000000 	.word	0x00000000

100080e8 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
100080e8:	230c      	movs	r3, #12
100080ea:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
100080ec:	2300      	movs	r3, #0
100080ee:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
100080f0:	7083      	strb	r3, [r0, #2]
}
100080f2:	4770      	bx	lr

100080f4 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
100080f4:	2301      	movs	r3, #1
100080f6:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
100080f8:	2300      	movs	r3, #0
100080fa:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
100080fc:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
100080fe:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
10008100:	3381      	adds	r3, #129	; 0x81
10008102:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
10008104:	3b77      	subs	r3, #119	; 0x77
10008106:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
10008108:	3301      	adds	r3, #1
1000810a:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000810c:	3301      	adds	r3, #1
1000810e:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
10008110:	3301      	adds	r3, #1
10008112:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
10008114:	3b0b      	subs	r3, #11
10008116:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
10008118:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000811a:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000811c:	6243      	str	r3, [r0, #36]	; 0x24
};
1000811e:	4770      	bx	lr

10008120 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
10008120:	b530      	push	{r4, r5, lr}
10008122:	b083      	sub	sp, #12
10008124:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
10008126:	780b      	ldrb	r3, [r1, #0]
10008128:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000812a:	784b      	ldrb	r3, [r1, #1]
1000812c:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000812e:	788b      	ldrb	r3, [r1, #2]
10008130:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10008132:	ad01      	add	r5, sp, #4
10008134:	0028      	movs	r0, r5
10008136:	4b07      	ldr	r3, [pc, #28]	; (10008154 <spi_attach_slave+0x34>)
10008138:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000813a:	2301      	movs	r3, #1
1000813c:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000813e:	7820      	ldrb	r0, [r4, #0]
10008140:	0029      	movs	r1, r5
10008142:	4b05      	ldr	r3, [pc, #20]	; (10008158 <spi_attach_slave+0x38>)
10008144:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
10008146:	7820      	ldrb	r0, [r4, #0]
10008148:	2101      	movs	r1, #1
1000814a:	4b04      	ldr	r3, [pc, #16]	; (1000815c <spi_attach_slave+0x3c>)
1000814c:	4798      	blx	r3
}
1000814e:	b003      	add	sp, #12
10008150:	bd30      	pop	{r4, r5, pc}
10008152:	46c0      	nop			; (mov r8, r8)
10008154:	10008fe9 	.word	0x10008fe9
10008158:	10008ff9 	.word	0x10008ff9
1000815c:	100091b1 	.word	0x100091b1

10008160 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
10008160:	6803      	ldr	r3, [r0, #0]

#if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
10008162:	4a0a      	ldr	r2, [pc, #40]	; (1000818c <spi_enable+0x2c>)
10008164:	4293      	cmp	r3, r2
10008166:	d105      	bne.n	10008174 <spi_enable+0x14>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008168:	4a09      	ldr	r2, [pc, #36]	; (10008190 <spi_enable+0x30>)
1000816a:	2110      	movs	r1, #16
1000816c:	6011      	str	r1, [r2, #0]
1000816e:	3110      	adds	r1, #16
10008170:	6011      	str	r1, [r2, #0]
10008172:	e007      	b.n	10008184 <spi_enable+0x24>
		NVIC_EnableIRQ(SPI0_RX_IRQn);
		NVIC_EnableIRQ(SPI0_TX_IRQn);
	} else if(spi_module == SPI1) {
10008174:	4a07      	ldr	r2, [pc, #28]	; (10008194 <spi_enable+0x34>)
10008176:	4293      	cmp	r3, r2
10008178:	d104      	bne.n	10008184 <spi_enable+0x24>
1000817a:	4a05      	ldr	r2, [pc, #20]	; (10008190 <spi_enable+0x30>)
1000817c:	2140      	movs	r1, #64	; 0x40
1000817e:	6011      	str	r1, [r2, #0]
10008180:	3140      	adds	r1, #64	; 0x40
10008182:	6011      	str	r1, [r2, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
10008184:	2201      	movs	r2, #1
10008186:	761a      	strb	r2, [r3, #24]
}
10008188:	4770      	bx	lr
1000818a:	46c0      	nop			; (mov r8, r8)
1000818c:	40006000 	.word	0x40006000
10008190:	e000e100 	.word	0xe000e100
10008194:	40007000 	.word	0x40007000

10008198 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
10008198:	b510      	push	{r4, lr}
	Spi *const spi_module = (module->hw);
1000819a:	6803      	ldr	r3, [r0, #0]

#  if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
1000819c:	4a17      	ldr	r2, [pc, #92]	; (100081fc <spi_disable+0x64>)
1000819e:	4293      	cmp	r3, r2
100081a0:	d106      	bne.n	100081b0 <spi_disable+0x18>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100081a2:	4917      	ldr	r1, [pc, #92]	; (10008200 <spi_disable+0x68>)
100081a4:	2280      	movs	r2, #128	; 0x80
100081a6:	2410      	movs	r4, #16
100081a8:	508c      	str	r4, [r1, r2]
100081aa:	3410      	adds	r4, #16
100081ac:	508c      	str	r4, [r1, r2]
100081ae:	e007      	b.n	100081c0 <spi_disable+0x28>
		NVIC_DisableIRQ(SPI0_RX_IRQn);
		NVIC_DisableIRQ(SPI0_TX_IRQn);
	} else if(spi_module == SPI1) {
100081b0:	4a14      	ldr	r2, [pc, #80]	; (10008204 <spi_disable+0x6c>)
100081b2:	4293      	cmp	r3, r2
100081b4:	d104      	bne.n	100081c0 <spi_disable+0x28>
100081b6:	4912      	ldr	r1, [pc, #72]	; (10008200 <spi_disable+0x68>)
100081b8:	2280      	movs	r2, #128	; 0x80
100081ba:	2440      	movs	r4, #64	; 0x40
100081bc:	508c      	str	r4, [r1, r2]
100081be:	508a      	str	r2, [r1, r2]
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
100081c0:	2200      	movs	r2, #0
100081c2:	761a      	strb	r2, [r3, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
100081c4:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
100081c6:	4a0d      	ldr	r2, [pc, #52]	; (100081fc <spi_disable+0x64>)
100081c8:	4293      	cmp	r3, r2
100081ca:	d109      	bne.n	100081e0 <spi_disable+0x48>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
100081cc:	2041      	movs	r0, #65	; 0x41
100081ce:	4c0e      	ldr	r4, [pc, #56]	; (10008208 <spi_disable+0x70>)
100081d0:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
100081d2:	2026      	movs	r0, #38	; 0x26
100081d4:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
100081d6:	2038      	movs	r0, #56	; 0x38
100081d8:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
100081da:	2001      	movs	r0, #1
100081dc:	47a0      	blx	r4
100081de:	e00b      	b.n	100081f8 <spi_disable+0x60>
	} else if (spi_module == (void *)SPI1) {
100081e0:	4a08      	ldr	r2, [pc, #32]	; (10008204 <spi_disable+0x6c>)
100081e2:	4293      	cmp	r3, r2
100081e4:	d108      	bne.n	100081f8 <spi_disable+0x60>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
100081e6:	2042      	movs	r0, #66	; 0x42
100081e8:	4c07      	ldr	r4, [pc, #28]	; (10008208 <spi_disable+0x70>)
100081ea:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
100081ec:	2027      	movs	r0, #39	; 0x27
100081ee:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
100081f0:	2039      	movs	r0, #57	; 0x39
100081f2:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
100081f4:	2002      	movs	r0, #2
100081f6:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
100081f8:	bd10      	pop	{r4, pc}
100081fa:	46c0      	nop			; (mov r8, r8)
100081fc:	40006000 	.word	0x40006000
10008200:	e000e100 	.word	0xe000e100
10008204:	40007000 	.word	0x40007000
10008208:	100097c1 	.word	0x100097c1

1000820c <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000820c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000820e:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
10008210:	4b09      	ldr	r3, [pc, #36]	; (10008238 <spi_reset+0x2c>)
10008212:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
10008214:	4b09      	ldr	r3, [pc, #36]	; (1000823c <spi_reset+0x30>)
10008216:	429c      	cmp	r4, r3
10008218:	d105      	bne.n	10008226 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000821a:	2001      	movs	r0, #1
1000821c:	4c08      	ldr	r4, [pc, #32]	; (10008240 <spi_reset+0x34>)
1000821e:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
10008220:	2038      	movs	r0, #56	; 0x38
10008222:	47a0      	blx	r4
10008224:	e007      	b.n	10008236 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
10008226:	4b07      	ldr	r3, [pc, #28]	; (10008244 <spi_reset+0x38>)
10008228:	429c      	cmp	r4, r3
1000822a:	d104      	bne.n	10008236 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000822c:	2002      	movs	r0, #2
1000822e:	4c04      	ldr	r4, [pc, #16]	; (10008240 <spi_reset+0x34>)
10008230:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
10008232:	2039      	movs	r0, #57	; 0x39
10008234:	47a0      	blx	r4
	}
}
10008236:	bd10      	pop	{r4, pc}
10008238:	10008199 	.word	0x10008199
1000823c:	40006000 	.word	0x40006000
10008240:	10009b2d 	.word	0x10009b2d
10008244:	40007000 	.word	0x40007000

10008248 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
10008248:	b5f0      	push	{r4, r5, r6, r7, lr}
1000824a:	4657      	mov	r7, sl
1000824c:	4646      	mov	r6, r8
1000824e:	b4c0      	push	{r6, r7}
10008250:	b083      	sub	sp, #12
10008252:	0005      	movs	r5, r0
10008254:	4688      	mov	r8, r1
10008256:	0016      	movs	r6, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
10008258:	6029      	str	r1, [r5, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000825a:	7e0b      	ldrb	r3, [r1, #24]
1000825c:	07db      	lsls	r3, r3, #31
1000825e:	d501      	bpl.n	10008264 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10008260:	2300      	movs	r3, #0
10008262:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
10008264:	0028      	movs	r0, r5
10008266:	4b5e      	ldr	r3, [pc, #376]	; (100083e0 <spi_init+0x198>)
10008268:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000826a:	682b      	ldr	r3, [r5, #0]

	if (spi_module == (void *)SPI0) {
1000826c:	4a5d      	ldr	r2, [pc, #372]	; (100083e4 <spi_init+0x19c>)
1000826e:	4293      	cmp	r3, r2
10008270:	d109      	bne.n	10008286 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
10008272:	2041      	movs	r0, #65	; 0x41
10008274:	4c5c      	ldr	r4, [pc, #368]	; (100083e8 <spi_init+0x1a0>)
10008276:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
10008278:	2026      	movs	r0, #38	; 0x26
1000827a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000827c:	2038      	movs	r0, #56	; 0x38
1000827e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
10008280:	2001      	movs	r0, #1
10008282:	47a0      	blx	r4
10008284:	e00b      	b.n	1000829e <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
10008286:	4a59      	ldr	r2, [pc, #356]	; (100083ec <spi_init+0x1a4>)
10008288:	4293      	cmp	r3, r2
1000828a:	d122      	bne.n	100082d2 <spi_init+0x8a>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000828c:	2042      	movs	r0, #66	; 0x42
1000828e:	4c56      	ldr	r4, [pc, #344]	; (100083e8 <spi_init+0x1a0>)
10008290:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
10008292:	2027      	movs	r0, #39	; 0x27
10008294:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
10008296:	2039      	movs	r0, #57	; 0x39
10008298:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000829a:	2002      	movs	r0, #2
1000829c:	47a0      	blx	r4

	spi_reset(module);
	_spi_clock_enable(module);

#if SPI_CALLBACK_MODE == true
	if (module->hw == SPI0) {
1000829e:	682b      	ldr	r3, [r5, #0]
100082a0:	4a50      	ldr	r2, [pc, #320]	; (100083e4 <spi_init+0x19c>)
100082a2:	4293      	cmp	r3, r2
100082a4:	d109      	bne.n	100082ba <spi_init+0x72>
		_spi_instances[0] = module;
100082a6:	4b52      	ldr	r3, [pc, #328]	; (100083f0 <spi_init+0x1a8>)
100082a8:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_SPIRX0_INDEX, (uint32_t)spi_rx0_isr_handler);
100082aa:	4952      	ldr	r1, [pc, #328]	; (100083f4 <spi_init+0x1ac>)
100082ac:	2014      	movs	r0, #20
100082ae:	4c52      	ldr	r4, [pc, #328]	; (100083f8 <spi_init+0x1b0>)
100082b0:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_SPITX0_INDEX, (uint32_t)spi_tx0_isr_handler);
100082b2:	4952      	ldr	r1, [pc, #328]	; (100083fc <spi_init+0x1b4>)
100082b4:	2015      	movs	r0, #21
100082b6:	47a0      	blx	r4
100082b8:	e00b      	b.n	100082d2 <spi_init+0x8a>
	} else if (module->hw == SPI1) {
100082ba:	4a4c      	ldr	r2, [pc, #304]	; (100083ec <spi_init+0x1a4>)
100082bc:	4293      	cmp	r3, r2
100082be:	d108      	bne.n	100082d2 <spi_init+0x8a>
		_spi_instances[1] = module;
100082c0:	4b4b      	ldr	r3, [pc, #300]	; (100083f0 <spi_init+0x1a8>)
100082c2:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_SPIRX1_INDEX, (uint32_t)spi_rx1_isr_handler);
100082c4:	494e      	ldr	r1, [pc, #312]	; (10008400 <spi_init+0x1b8>)
100082c6:	2016      	movs	r0, #22
100082c8:	4c4b      	ldr	r4, [pc, #300]	; (100083f8 <spi_init+0x1b0>)
100082ca:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_SPITX1_INDEX, (uint32_t)spi_tx1_isr_handler);
100082cc:	494d      	ldr	r1, [pc, #308]	; (10008404 <spi_init+0x1bc>)
100082ce:	2017      	movs	r0, #23
100082d0:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
100082d2:	a801      	add	r0, sp, #4
100082d4:	4b4c      	ldr	r3, [pc, #304]	; (10008408 <spi_init+0x1c0>)
100082d6:	4798      	blx	r3
100082d8:	0034      	movs	r4, r6
100082da:	3408      	adds	r4, #8
100082dc:	2318      	movs	r3, #24
100082de:	469a      	mov	sl, r3
100082e0:	44b2      	add	sl, r6
100082e2:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
100082e4:	6820      	ldr	r0, [r4, #0]
100082e6:	1c43      	adds	r3, r0, #1
100082e8:	d011      	beq.n	1000830e <spi_init+0xc6>
			if (config->mode == SPI_MODE_MASTER) {
100082ea:	7833      	ldrb	r3, [r6, #0]
100082ec:	2b01      	cmp	r3, #1
100082ee:	d102      	bne.n	100082f6 <spi_init+0xae>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
100082f0:	466a      	mov	r2, sp
100082f2:	7113      	strb	r3, [r2, #4]
100082f4:	e003      	b.n	100082fe <spi_init+0xb6>
			} else if (config->mode == SPI_MODE_SLAVE) {
100082f6:	2b00      	cmp	r3, #0
100082f8:	d101      	bne.n	100082fe <spi_init+0xb6>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
100082fa:	466a      	mov	r2, sp
100082fc:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
100082fe:	b2c0      	uxtb	r0, r0
10008300:	a901      	add	r1, sp, #4
10008302:	4b42      	ldr	r3, [pc, #264]	; (1000840c <spi_init+0x1c4>)
10008304:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
10008306:	8a39      	ldrh	r1, [r7, #16]
10008308:	7838      	ldrb	r0, [r7, #0]
1000830a:	4b41      	ldr	r3, [pc, #260]	; (10008410 <spi_init+0x1c8>)
1000830c:	4798      	blx	r3
1000830e:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
10008310:	4554      	cmp	r4, sl
10008312:	d1e6      	bne.n	100082e2 <spi_init+0x9a>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008314:	78f3      	ldrb	r3, [r6, #3]
10008316:	4642      	mov	r2, r8
10008318:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000831a:	7833      	ldrb	r3, [r6, #0]
1000831c:	2b01      	cmp	r3, #1
1000831e:	d100      	bne.n	10008322 <spi_init+0xda>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
10008320:	7713      	strb	r3, [r2, #28]
	/* Temporary variables */
	uint8_t i;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
10008322:	2300      	movs	r3, #0
10008324:	60ab      	str	r3, [r5, #8]
10008326:	60eb      	str	r3, [r5, #12]
10008328:	612b      	str	r3, [r5, #16]
1000832a:	616b      	str	r3, [r5, #20]
	}
	module->tx_buffer_ptr              = NULL;
1000832c:	61eb      	str	r3, [r5, #28]
	module->rx_buffer_ptr              = NULL;
1000832e:	61ab      	str	r3, [r5, #24]
	module->remaining_tx_buffer_length = 0x0000;
10008330:	2200      	movs	r2, #0
10008332:	84ab      	strh	r3, [r5, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
10008334:	842b      	strh	r3, [r5, #32]
	module->registered_callback        = 0x00;
10008336:	3326      	adds	r3, #38	; 0x26
10008338:	54ea      	strb	r2, [r5, r3]
	module->enabled_callback           = 0x00;
1000833a:	3301      	adds	r3, #1
1000833c:	54ea      	strb	r2, [r5, r3]
	module->status                     = STATUS_OK;
1000833e:	3301      	adds	r3, #1
10008340:	54ea      	strb	r2, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
10008342:	3b25      	subs	r3, #37	; 0x25
10008344:	71eb      	strb	r3, [r5, #7]
	module->locked                     = 0;
10008346:	712a      	strb	r2, [r5, #4]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
10008348:	682b      	ldr	r3, [r5, #0]

	module->mode  = config->mode;
1000834a:	7832      	ldrb	r2, [r6, #0]
1000834c:	716a      	strb	r2, [r5, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000834e:	7832      	ldrb	r2, [r6, #0]
10008350:	2a01      	cmp	r2, #1
10008352:	d101      	bne.n	10008358 <spi_init+0x110>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
10008354:	7932      	ldrb	r2, [r6, #4]
10008356:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
10008358:	7872      	ldrb	r2, [r6, #1]
1000835a:	2a04      	cmp	r2, #4
1000835c:	d104      	bne.n	10008368 <spi_init+0x120>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000835e:	2124      	movs	r1, #36	; 0x24
10008360:	5c58      	ldrb	r0, [r3, r1]
10008362:	4302      	orrs	r2, r0
10008364:	545a      	strb	r2, [r3, r1]
10008366:	e004      	b.n	10008372 <spi_init+0x12a>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
10008368:	2124      	movs	r1, #36	; 0x24
1000836a:	5c5a      	ldrb	r2, [r3, r1]
1000836c:	2004      	movs	r0, #4
1000836e:	4382      	bics	r2, r0
10008370:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
10008372:	78b2      	ldrb	r2, [r6, #2]
10008374:	2a01      	cmp	r2, #1
10008376:	d01a      	beq.n	100083ae <spi_init+0x166>
10008378:	2a00      	cmp	r2, #0
1000837a:	d004      	beq.n	10008386 <spi_init+0x13e>
1000837c:	2a02      	cmp	r2, #2
1000837e:	d00c      	beq.n	1000839a <spi_init+0x152>
10008380:	2a03      	cmp	r2, #3
10008382:	d01e      	beq.n	100083c2 <spi_init+0x17a>
10008384:	e026      	b.n	100083d4 <spi_init+0x18c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10008386:	2224      	movs	r2, #36	; 0x24
10008388:	5c99      	ldrb	r1, [r3, r2]
1000838a:	2002      	movs	r0, #2
1000838c:	4381      	bics	r1, r0
1000838e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10008390:	5c99      	ldrb	r1, [r3, r2]
10008392:	3801      	subs	r0, #1
10008394:	4381      	bics	r1, r0
10008396:	5499      	strb	r1, [r3, r2]
10008398:	e01c      	b.n	100083d4 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000839a:	2224      	movs	r2, #36	; 0x24
1000839c:	5c98      	ldrb	r0, [r3, r2]
1000839e:	2102      	movs	r1, #2
100083a0:	4301      	orrs	r1, r0
100083a2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
100083a4:	5c99      	ldrb	r1, [r3, r2]
100083a6:	2001      	movs	r0, #1
100083a8:	4381      	bics	r1, r0
100083aa:	5499      	strb	r1, [r3, r2]
100083ac:	e012      	b.n	100083d4 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
100083ae:	2224      	movs	r2, #36	; 0x24
100083b0:	5c99      	ldrb	r1, [r3, r2]
100083b2:	2002      	movs	r0, #2
100083b4:	4381      	bics	r1, r0
100083b6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
100083b8:	5c98      	ldrb	r0, [r3, r2]
100083ba:	2101      	movs	r1, #1
100083bc:	4301      	orrs	r1, r0
100083be:	5499      	strb	r1, [r3, r2]
100083c0:	e008      	b.n	100083d4 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
100083c2:	2224      	movs	r2, #36	; 0x24
100083c4:	5c98      	ldrb	r0, [r3, r2]
100083c6:	2102      	movs	r1, #2
100083c8:	4301      	orrs	r1, r0
100083ca:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
100083cc:	5c98      	ldrb	r0, [r3, r2]
100083ce:	2101      	movs	r1, #1
100083d0:	4301      	orrs	r1, r0
100083d2:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
100083d4:	2000      	movs	r0, #0
100083d6:	b003      	add	sp, #12
100083d8:	bc0c      	pop	{r2, r3}
100083da:	4690      	mov	r8, r2
100083dc:	469a      	mov	sl, r3
100083de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100083e0:	1000820d 	.word	0x1000820d
100083e4:	40006000 	.word	0x40006000
100083e8:	10009465 	.word	0x10009465
100083ec:	40007000 	.word	0x40007000
100083f0:	10015330 	.word	0x10015330
100083f4:	100084b9 	.word	0x100084b9
100083f8:	10009f95 	.word	0x10009f95
100083fc:	100085e5 	.word	0x100085e5
10008400:	100086e9 	.word	0x100086e9
10008404:	10008815 	.word	0x10008815
10008408:	10008fe9 	.word	0x10008fe9
1000840c:	10008ff9 	.word	0x10008ff9
10008410:	10009289 	.word	0x10009289

10008414 <spi_write>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Spi *const spi_module = (module->hw);
10008414:	6803      	ldr	r3, [r0, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10008416:	7a1a      	ldrb	r2, [r3, #8]
	Spi *const spi_module = (module->hw);

	/* Check if the data register has been copied to the shift register */
	if (!_spi_is_ready_to_write(spi_module)) {
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
10008418:	2005      	movs	r0, #5
	Assert(module->hw);

	Spi *const spi_module = (module->hw);

	/* Check if the data register has been copied to the shift register */
	if (!_spi_is_ready_to_write(spi_module)) {
1000841a:	07d2      	lsls	r2, r2, #31
1000841c:	d501      	bpl.n	10008422 <spi_write+0xe>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->TRANSMIT_DATA.reg = tx_data & SPI_TRANSMIT_DATA_MASK;
1000841e:	7019      	strb	r1, [r3, #0]

	return STATUS_OK;
10008420:	2000      	movs	r0, #0
}
10008422:	4770      	bx	lr

10008424 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
10008424:	b5f0      	push	{r4, r5, r6, r7, lr}
10008426:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
10008428:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000842a:	2600      	movs	r6, #0
1000842c:	466d      	mov	r5, sp
1000842e:	71ee      	strb	r6, [r5, #7]
10008430:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
10008432:	2c00      	cmp	r4, #0
10008434:	d034      	beq.n	100084a0 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
10008436:	2900      	cmp	r1, #0
10008438:	d104      	bne.n	10008444 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000843a:	0029      	movs	r1, r5
1000843c:	7980      	ldrb	r0, [r0, #6]
1000843e:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
10008440:	2701      	movs	r7, #1
10008442:	e00b      	b.n	1000845c <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
10008444:	2a00      	cmp	r2, #0
10008446:	d005      	beq.n	10008454 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008448:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000844a:	2b00      	cmp	r3, #0
1000844c:	d029      	beq.n	100084a2 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000844e:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10008450:	2700      	movs	r7, #0
10008452:	e003      	b.n	1000845c <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
10008454:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10008456:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
10008458:	466a      	mov	r2, sp
1000845a:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000845c:	2528      	movs	r5, #40	; 0x28
1000845e:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
10008460:	07c0      	lsls	r0, r0, #31
10008462:	d4fc      	bmi.n	1000845e <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
10008464:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
10008466:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
10008468:	2b00      	cmp	r3, #0
1000846a:	d014      	beq.n	10008496 <spi_transceive_buffer_wait+0x72>
1000846c:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000846e:	4278      	negs	r0, r7
10008470:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
10008472:	4270      	negs	r0, r6
10008474:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10008476:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
10008478:	07c0      	lsls	r0, r0, #31
1000847a:	d5fc      	bpl.n	10008476 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000847c:	7808      	ldrb	r0, [r1, #0]
1000847e:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
10008480:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
10008482:	07c0      	lsls	r0, r0, #31
10008484:	d5fc      	bpl.n	10008480 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
10008486:	7920      	ldrb	r0, [r4, #4]
10008488:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000848a:	3501      	adds	r5, #1
1000848c:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000848e:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
10008490:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
10008492:	42ab      	cmp	r3, r5
10008494:	d1ef      	bne.n	10008476 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
10008496:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
10008498:	06db      	lsls	r3, r3, #27
1000849a:	d5fc      	bpl.n	10008496 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000849c:	2000      	movs	r0, #0
1000849e:	e000      	b.n	100084a2 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
100084a0:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
100084a2:	b003      	add	sp, #12
100084a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100084a6:	46c0      	nop			; (mov r8, r8)

100084a8 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
100084a8:	b510      	push	{r4, lr}
100084aa:	0013      	movs	r3, r2
	return spi_transceive_buffer_wait(module, tx_data, NULL, length);
100084ac:	2200      	movs	r2, #0
100084ae:	4c01      	ldr	r4, [pc, #4]	; (100084b4 <spi_write_buffer_wait+0xc>)
100084b0:	47a0      	blx	r4
}
100084b2:	bd10      	pop	{r4, pc}
100084b4:	10008425 	.word	0x10008425

100084b8 <spi_rx0_isr_handler>:
	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
}

void spi_rx0_isr_handler(void)
{
100084b8:	b510      	push	{r4, lr}
	struct spi_module *module = _spi_instances[0];
100084ba:	4b48      	ldr	r3, [pc, #288]	; (100085dc <spi_rx0_isr_handler+0x124>)
100084bc:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
100084be:	6823      	ldr	r3, [r4, #0]
100084c0:	7b1a      	ldrb	r2, [r3, #12]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
100084c2:	2130      	movs	r1, #48	; 0x30
100084c4:	5c59      	ldrb	r1, [r3, r1]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100084c6:	400a      	ands	r2, r1
100084c8:	07d2      	lsls	r2, r2, #31
100084ca:	d400      	bmi.n	100084ce <spi_rx0_isr_handler+0x16>
100084cc:	e085      	b.n	100085da <spi_rx0_isr_handler+0x122>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
100084ce:	7b1a      	ldrb	r2, [r3, #12]
100084d0:	0692      	lsls	r2, r2, #26
100084d2:	d523      	bpl.n	1000851c <spi_rx0_isr_handler+0x64>
			if (module->dir != SPI_DIRECTION_WRITE) {
100084d4:	79e2      	ldrb	r2, [r4, #7]
100084d6:	2a01      	cmp	r2, #1
100084d8:	d01d      	beq.n	10008516 <spi_rx0_isr_handler+0x5e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
100084da:	211e      	movs	r1, #30
100084dc:	2228      	movs	r2, #40	; 0x28
100084de:	54a1      	strb	r1, [r4, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
100084e0:	3a25      	subs	r2, #37	; 0x25
100084e2:	71e2      	strb	r2, [r4, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
100084e4:	3112      	adds	r1, #18
100084e6:	5c5a      	ldrb	r2, [r3, r1]
100084e8:	2021      	movs	r0, #33	; 0x21
100084ea:	4382      	bics	r2, r0
100084ec:	545a      	strb	r2, [r3, r1]
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
100084ee:	2327      	movs	r3, #39	; 0x27
100084f0:	5ce3      	ldrb	r3, [r4, r3]
100084f2:	071b      	lsls	r3, r3, #28
100084f4:	d50f      	bpl.n	10008516 <spi_rx0_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
100084f6:	2326      	movs	r3, #38	; 0x26

				module->hw->RX_INTERRUPT_MASK.reg &=
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
100084f8:	5ce3      	ldrb	r3, [r4, r3]
100084fa:	071b      	lsls	r3, r3, #28
100084fc:	d50b      	bpl.n	10008516 <spi_rx0_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
100084fe:	221e      	movs	r2, #30
10008500:	2328      	movs	r3, #40	; 0x28
10008502:	54e2      	strb	r2, [r4, r3]
					module->hw->RX_INTERRUPT_MASK.reg &=
10008504:	6821      	ldr	r1, [r4, #0]
10008506:	3212      	adds	r2, #18
10008508:	5c8b      	ldrb	r3, [r1, r2]
1000850a:	3801      	subs	r0, #1
1000850c:	4383      	bics	r3, r0
1000850e:	548b      	strb	r3, [r1, r2]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
10008510:	0020      	movs	r0, r4
10008512:	6963      	ldr	r3, [r4, #20]
10008514:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
10008516:	6823      	ldr	r3, [r4, #0]
10008518:	791b      	ldrb	r3, [r3, #4]
1000851a:	e05e      	b.n	100085da <spi_rx0_isr_handler+0x122>
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
1000851c:	79e2      	ldrb	r2, [r4, #7]
1000851e:	2a01      	cmp	r2, #1
10008520:	d113      	bne.n	1000854a <spi_rx0_isr_handler+0x92>
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->RECEIVE_DATA.reg;
10008522:	791a      	ldrb	r2, [r3, #4]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
10008524:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10008526:	3a01      	subs	r2, #1
10008528:	b292      	uxth	r2, r2
1000852a:	8462      	strh	r2, [r4, #34]	; 0x22
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
1000852c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
1000852e:	b292      	uxth	r2, r2
10008530:	2a00      	cmp	r2, #0
10008532:	d152      	bne.n	100085da <spi_rx0_isr_handler+0x122>
					module->hw->RX_INTERRUPT_MASK.reg &=
10008534:	2130      	movs	r1, #48	; 0x30
10008536:	5c5a      	ldrb	r2, [r3, r1]
10008538:	2020      	movs	r0, #32
1000853a:	4382      	bics	r2, r0
1000853c:	545a      	strb	r2, [r3, r1]
						~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
1000853e:	2200      	movs	r2, #0
10008540:	2328      	movs	r3, #40	; 0x28
10008542:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
10008544:	3b25      	subs	r3, #37	; 0x25
10008546:	71e3      	strb	r3, [r4, #7]
10008548:	e047      	b.n	100085da <spi_rx0_isr_handler+0x122>
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	uint16_t received_data = (spi_hw->RECEIVE_DATA.reg & SPI_RECEIVE_DATA_MASK);
1000854a:	791b      	ldrb	r3, [r3, #4]
1000854c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000854e:	69a2      	ldr	r2, [r4, #24]
10008550:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008552:	69a3      	ldr	r3, [r4, #24]
10008554:	3301      	adds	r3, #1
10008556:	61a3      	str	r3, [r4, #24]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008558:	8c23      	ldrh	r3, [r4, #32]
1000855a:	3b01      	subs	r3, #1
1000855c:	b29b      	uxth	r3, r3
1000855e:	8423      	strh	r3, [r4, #32]
						//(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
					//}
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
10008560:	8c23      	ldrh	r3, [r4, #32]
10008562:	b29b      	uxth	r3, r3
10008564:	2b00      	cmp	r3, #0
10008566:	d138      	bne.n	100085da <spi_rx0_isr_handler+0x122>
					if(module->dir == SPI_DIRECTION_READ) {
10008568:	79e3      	ldrb	r3, [r4, #7]
1000856a:	2b00      	cmp	r3, #0
1000856c:	d114      	bne.n	10008598 <spi_rx0_isr_handler+0xe0>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000856e:	3327      	adds	r3, #39	; 0x27
10008570:	5ce3      	ldrb	r3, [r4, r3]
10008572:	079b      	lsls	r3, r3, #30
10008574:	d531      	bpl.n	100085da <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
10008576:	2326      	movs	r3, #38	; 0x26
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
10008578:	5ce3      	ldrb	r3, [r4, r3]
1000857a:	079b      	lsls	r3, r3, #30
1000857c:	d52d      	bpl.n	100085da <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
1000857e:	2200      	movs	r2, #0
10008580:	2328      	movs	r3, #40	; 0x28
10008582:	54e2      	strb	r2, [r4, r3]
							module->hw->RX_INTERRUPT_MASK.reg &=
10008584:	6821      	ldr	r1, [r4, #0]
10008586:	3230      	adds	r2, #48	; 0x30
10008588:	5c8b      	ldrb	r3, [r1, r2]
1000858a:	2001      	movs	r0, #1
1000858c:	4383      	bics	r3, r0
1000858e:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
10008590:	68e3      	ldr	r3, [r4, #12]
10008592:	0020      	movs	r0, r4
10008594:	4798      	blx	r3
10008596:	e020      	b.n	100085da <spi_rx0_isr_handler+0x122>
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
10008598:	79e3      	ldrb	r3, [r4, #7]
1000859a:	2b02      	cmp	r3, #2
1000859c:	d11d      	bne.n	100085da <spi_rx0_isr_handler+0x122>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000859e:	3325      	adds	r3, #37	; 0x25
100085a0:	5ce3      	ldrb	r3, [r4, r3]
100085a2:	075b      	lsls	r3, r3, #29
100085a4:	d519      	bpl.n	100085da <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
100085a6:	2326      	movs	r3, #38	; 0x26
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
100085a8:	5ce3      	ldrb	r3, [r4, r3]
100085aa:	075b      	lsls	r3, r3, #29
100085ac:	d515      	bpl.n	100085da <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
								module->hw->RX_INTERRUPT_MASK.reg &=
100085ae:	6821      	ldr	r1, [r4, #0]
100085b0:	2230      	movs	r2, #48	; 0x30
100085b2:	5c8b      	ldrb	r3, [r1, r2]
100085b4:	2001      	movs	r0, #1
100085b6:	4383      	bics	r3, r0
100085b8:	548b      	strb	r3, [r1, r2]
										~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
								if (flag_direction_both[0]) {
100085ba:	4b09      	ldr	r3, [pc, #36]	; (100085e0 <spi_rx0_isr_handler+0x128>)
100085bc:	781b      	ldrb	r3, [r3, #0]
100085be:	2b00      	cmp	r3, #0
100085c0:	d008      	beq.n	100085d4 <spi_rx0_isr_handler+0x11c>
									module->status = STATUS_OK;
100085c2:	2300      	movs	r3, #0
100085c4:	3a08      	subs	r2, #8
100085c6:	54a3      	strb	r3, [r4, r2]
									flag_direction_both[0] = false;
100085c8:	4a05      	ldr	r2, [pc, #20]	; (100085e0 <spi_rx0_isr_handler+0x128>)
100085ca:	7013      	strb	r3, [r2, #0]
									(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
100085cc:	6923      	ldr	r3, [r4, #16]
100085ce:	0020      	movs	r0, r4
100085d0:	4798      	blx	r3
100085d2:	e002      	b.n	100085da <spi_rx0_isr_handler+0x122>
								} else {
									flag_direction_both[0] = true;
100085d4:	2201      	movs	r2, #1
100085d6:	4b02      	ldr	r3, [pc, #8]	; (100085e0 <spi_rx0_isr_handler+0x128>)
100085d8:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
100085da:	bd10      	pop	{r4, pc}
100085dc:	10015330 	.word	0x10015330
100085e0:	10013884 	.word	0x10013884

100085e4 <spi_tx0_isr_handler>:

void spi_tx0_isr_handler(void)
{
100085e4:	b570      	push	{r4, r5, r6, lr}
	struct spi_module *module = _spi_instances[0];
100085e6:	4b3d      	ldr	r3, [pc, #244]	; (100086dc <spi_tx0_isr_handler+0xf8>)
100085e8:	6818      	ldr	r0, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100085ea:	6802      	ldr	r2, [r0, #0]
100085ec:	7a13      	ldrb	r3, [r2, #8]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
100085ee:	212c      	movs	r1, #44	; 0x2c
100085f0:	5c51      	ldrb	r1, [r2, r1]
100085f2:	400b      	ands	r3, r1

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
100085f4:	07d9      	lsls	r1, r3, #31
100085f6:	d536      	bpl.n	10008666 <spi_tx0_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
100085f8:	7941      	ldrb	r1, [r0, #5]
100085fa:	2901      	cmp	r1, #1
100085fc:	d133      	bne.n	10008666 <spi_tx0_isr_handler+0x82>
			(module->dir == SPI_DIRECTION_READ)) {
100085fe:	79c1      	ldrb	r1, [r0, #7]
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
10008600:	2900      	cmp	r1, #0
10008602:	d113      	bne.n	1000862c <spi_tx0_isr_handler+0x48>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write dummy byte */
	spi_hw->TRANSMIT_DATA.reg = dummy_write;
10008604:	4936      	ldr	r1, [pc, #216]	; (100086e0 <spi_tx0_isr_handler+0xfc>)
10008606:	7809      	ldrb	r1, [r1, #0]
10008608:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
1000860a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
1000860c:	3a01      	subs	r2, #1
1000860e:	b292      	uxth	r2, r2
10008610:	8442      	strh	r2, [r0, #34]	; 0x22
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
10008612:	8c42      	ldrh	r2, [r0, #34]	; 0x22
10008614:	b292      	uxth	r2, r2
10008616:	2a00      	cmp	r2, #0
10008618:	d105      	bne.n	10008626 <spi_tx0_isr_handler+0x42>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000861a:	6804      	ldr	r4, [r0, #0]
1000861c:	212c      	movs	r1, #44	; 0x2c
1000861e:	5c62      	ldrb	r2, [r4, r1]
10008620:	2501      	movs	r5, #1
10008622:	43aa      	bics	r2, r5
10008624:	5462      	strb	r2, [r4, r1]
					~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
10008626:	7942      	ldrb	r2, [r0, #5]
10008628:	2a01      	cmp	r2, #1
1000862a:	d11c      	bne.n	10008666 <spi_tx0_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
1000862c:	79c2      	ldrb	r2, [r0, #7]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
1000862e:	2a00      	cmp	r2, #0
10008630:	d019      	beq.n	10008666 <spi_tx0_isr_handler+0x82>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
10008632:	69c2      	ldr	r2, [r0, #28]
10008634:	7811      	ldrb	r1, [r2, #0]
10008636:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10008638:	3201      	adds	r2, #1
1000863a:	61c2      	str	r2, [r0, #28]

	/* Write the data to send*/
	spi_hw->TRANSMIT_DATA.reg = data_to_send & SPI_TRANSMIT_DATA_MASK;
1000863c:	6802      	ldr	r2, [r0, #0]
1000863e:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10008640:	8c82      	ldrh	r2, [r0, #36]	; 0x24
10008642:	3a01      	subs	r2, #1
10008644:	b292      	uxth	r2, r2
10008646:	8482      	strh	r2, [r0, #36]	; 0x24
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
10008648:	8c82      	ldrh	r2, [r0, #36]	; 0x24
1000864a:	b292      	uxth	r2, r2
1000864c:	2a00      	cmp	r2, #0
1000864e:	d10a      	bne.n	10008666 <spi_tx0_isr_handler+0x82>
				module->hw->TX_INTERRUPT_MASK.reg &=
10008650:	6804      	ldr	r4, [r0, #0]
10008652:	322c      	adds	r2, #44	; 0x2c
10008654:	5ca1      	ldrb	r1, [r4, r2]
10008656:	2501      	movs	r5, #1
10008658:	43a9      	bics	r1, r5
1000865a:	54a1      	strb	r1, [r4, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
1000865c:	6804      	ldr	r4, [r0, #0]
1000865e:	5ca5      	ldrb	r5, [r4, r2]
10008660:	2110      	movs	r1, #16
10008662:	4329      	orrs	r1, r5
10008664:	54a1      	strb	r1, [r4, r2]
						SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10008666:	06db      	lsls	r3, r3, #27
10008668:	d536      	bpl.n	100086d8 <spi_tx0_isr_handler+0xf4>
		if (module->dir == SPI_DIRECTION_WRITE) {
1000866a:	79c3      	ldrb	r3, [r0, #7]
1000866c:	2b01      	cmp	r3, #1
1000866e:	d113      	bne.n	10008698 <spi_tx0_isr_handler+0xb4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
10008670:	3326      	adds	r3, #38	; 0x26
10008672:	5cc3      	ldrb	r3, [r0, r3]
10008674:	07db      	lsls	r3, r3, #31
10008676:	d52f      	bpl.n	100086d8 <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
10008678:	2326      	movs	r3, #38	; 0x26
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
1000867a:	5cc3      	ldrb	r3, [r0, r3]
1000867c:	07db      	lsls	r3, r3, #31
1000867e:	d52b      	bpl.n	100086d8 <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
					module->status = STATUS_OK;
10008680:	2200      	movs	r2, #0
10008682:	2328      	movs	r3, #40	; 0x28
10008684:	54c2      	strb	r2, [r0, r3]
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
10008686:	6801      	ldr	r1, [r0, #0]
10008688:	322c      	adds	r2, #44	; 0x2c
1000868a:	5c8b      	ldrb	r3, [r1, r2]
1000868c:	2410      	movs	r4, #16
1000868e:	43a3      	bics	r3, r4
10008690:	548b      	strb	r3, [r1, r2]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
10008692:	6883      	ldr	r3, [r0, #8]
10008694:	4798      	blx	r3
10008696:	e01f      	b.n	100086d8 <spi_tx0_isr_handler+0xf4>
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
10008698:	79c3      	ldrb	r3, [r0, #7]
1000869a:	2b02      	cmp	r3, #2
1000869c:	d11c      	bne.n	100086d8 <spi_tx0_isr_handler+0xf4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000869e:	3325      	adds	r3, #37	; 0x25
100086a0:	5cc3      	ldrb	r3, [r0, r3]
100086a2:	075b      	lsls	r3, r3, #29
100086a4:	d518      	bpl.n	100086d8 <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
100086a6:	2326      	movs	r3, #38	; 0x26
					module->hw->TX_INTERRUPT_MASK.reg &=
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
100086a8:	5cc3      	ldrb	r3, [r0, r3]
100086aa:	075b      	lsls	r3, r3, #29
100086ac:	d514      	bpl.n	100086d8 <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
100086ae:	6801      	ldr	r1, [r0, #0]
100086b0:	222c      	movs	r2, #44	; 0x2c
100086b2:	5c8b      	ldrb	r3, [r1, r2]
100086b4:	2410      	movs	r4, #16
100086b6:	43a3      	bics	r3, r4
100086b8:	548b      	strb	r3, [r1, r2]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					if (flag_direction_both[0]) {
100086ba:	4b0a      	ldr	r3, [pc, #40]	; (100086e4 <spi_tx0_isr_handler+0x100>)
100086bc:	781b      	ldrb	r3, [r3, #0]
100086be:	2b00      	cmp	r3, #0
100086c0:	d007      	beq.n	100086d2 <spi_tx0_isr_handler+0xee>
						module->status = STATUS_OK;
100086c2:	2300      	movs	r3, #0
100086c4:	3a04      	subs	r2, #4
100086c6:	5483      	strb	r3, [r0, r2]
						flag_direction_both[0] = false;
100086c8:	4a06      	ldr	r2, [pc, #24]	; (100086e4 <spi_tx0_isr_handler+0x100>)
100086ca:	7013      	strb	r3, [r2, #0]
						(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
100086cc:	6903      	ldr	r3, [r0, #16]
100086ce:	4798      	blx	r3
100086d0:	e002      	b.n	100086d8 <spi_tx0_isr_handler+0xf4>
					} else {
						flag_direction_both[0] = true;
100086d2:	2201      	movs	r2, #1
100086d4:	4b03      	ldr	r3, [pc, #12]	; (100086e4 <spi_tx0_isr_handler+0x100>)
100086d6:	701a      	strb	r2, [r3, #0]
					}
			}
		}
	}
}
100086d8:	bd70      	pop	{r4, r5, r6, pc}
100086da:	46c0      	nop			; (mov r8, r8)
100086dc:	10015330 	.word	0x10015330
100086e0:	10013886 	.word	0x10013886
100086e4:	10013884 	.word	0x10013884

100086e8 <spi_rx1_isr_handler>:

void spi_rx1_isr_handler(void)
{
100086e8:	b510      	push	{r4, lr}
	struct spi_module *module = _spi_instances[1];
100086ea:	4b48      	ldr	r3, [pc, #288]	; (1000880c <spi_rx1_isr_handler+0x124>)
100086ec:	685c      	ldr	r4, [r3, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
100086ee:	6823      	ldr	r3, [r4, #0]
100086f0:	7b1a      	ldrb	r2, [r3, #12]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
100086f2:	2130      	movs	r1, #48	; 0x30
100086f4:	5c59      	ldrb	r1, [r3, r1]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100086f6:	400a      	ands	r2, r1
100086f8:	07d2      	lsls	r2, r2, #31
100086fa:	d400      	bmi.n	100086fe <spi_rx1_isr_handler+0x16>
100086fc:	e085      	b.n	1000880a <spi_rx1_isr_handler+0x122>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
100086fe:	7b1a      	ldrb	r2, [r3, #12]
10008700:	0692      	lsls	r2, r2, #26
10008702:	d523      	bpl.n	1000874c <spi_rx1_isr_handler+0x64>
			if (module->dir != SPI_DIRECTION_WRITE) {
10008704:	79e2      	ldrb	r2, [r4, #7]
10008706:	2a01      	cmp	r2, #1
10008708:	d01d      	beq.n	10008746 <spi_rx1_isr_handler+0x5e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
1000870a:	211e      	movs	r1, #30
1000870c:	2228      	movs	r2, #40	; 0x28
1000870e:	54a1      	strb	r1, [r4, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
10008710:	3a25      	subs	r2, #37	; 0x25
10008712:	71e2      	strb	r2, [r4, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
10008714:	3112      	adds	r1, #18
10008716:	5c5a      	ldrb	r2, [r3, r1]
10008718:	2021      	movs	r0, #33	; 0x21
1000871a:	4382      	bics	r2, r0
1000871c:	545a      	strb	r2, [r3, r1]
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
1000871e:	2327      	movs	r3, #39	; 0x27
10008720:	5ce3      	ldrb	r3, [r4, r3]
10008722:	071b      	lsls	r3, r3, #28
10008724:	d50f      	bpl.n	10008746 <spi_rx1_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
10008726:	2326      	movs	r3, #38	; 0x26

				module->hw->RX_INTERRUPT_MASK.reg &=
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10008728:	5ce3      	ldrb	r3, [r4, r3]
1000872a:	071b      	lsls	r3, r3, #28
1000872c:	d50b      	bpl.n	10008746 <spi_rx1_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
1000872e:	221e      	movs	r2, #30
10008730:	2328      	movs	r3, #40	; 0x28
10008732:	54e2      	strb	r2, [r4, r3]
					module->hw->RX_INTERRUPT_MASK.reg &=
10008734:	6821      	ldr	r1, [r4, #0]
10008736:	3212      	adds	r2, #18
10008738:	5c8b      	ldrb	r3, [r1, r2]
1000873a:	3801      	subs	r0, #1
1000873c:	4383      	bics	r3, r0
1000873e:	548b      	strb	r3, [r1, r2]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
10008740:	0020      	movs	r0, r4
10008742:	6963      	ldr	r3, [r4, #20]
10008744:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
10008746:	6823      	ldr	r3, [r4, #0]
10008748:	791b      	ldrb	r3, [r3, #4]
1000874a:	e05e      	b.n	1000880a <spi_rx1_isr_handler+0x122>
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
1000874c:	79e2      	ldrb	r2, [r4, #7]
1000874e:	2a01      	cmp	r2, #1
10008750:	d113      	bne.n	1000877a <spi_rx1_isr_handler+0x92>
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->RECEIVE_DATA.reg;
10008752:	791a      	ldrb	r2, [r3, #4]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
10008754:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10008756:	3a01      	subs	r2, #1
10008758:	b292      	uxth	r2, r2
1000875a:	8462      	strh	r2, [r4, #34]	; 0x22
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
1000875c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
1000875e:	b292      	uxth	r2, r2
10008760:	2a00      	cmp	r2, #0
10008762:	d152      	bne.n	1000880a <spi_rx1_isr_handler+0x122>
					module->hw->RX_INTERRUPT_MASK.reg &=
10008764:	2130      	movs	r1, #48	; 0x30
10008766:	5c5a      	ldrb	r2, [r3, r1]
10008768:	2020      	movs	r0, #32
1000876a:	4382      	bics	r2, r0
1000876c:	545a      	strb	r2, [r3, r1]
							~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
1000876e:	2200      	movs	r2, #0
10008770:	2328      	movs	r3, #40	; 0x28
10008772:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
10008774:	3b25      	subs	r3, #37	; 0x25
10008776:	71e3      	strb	r3, [r4, #7]
10008778:	e047      	b.n	1000880a <spi_rx1_isr_handler+0x122>
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	uint16_t received_data = (spi_hw->RECEIVE_DATA.reg & SPI_RECEIVE_DATA_MASK);
1000877a:	791b      	ldrb	r3, [r3, #4]
1000877c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000877e:	69a2      	ldr	r2, [r4, #24]
10008780:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008782:	69a3      	ldr	r3, [r4, #24]
10008784:	3301      	adds	r3, #1
10008786:	61a3      	str	r3, [r4, #24]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008788:	8c23      	ldrh	r3, [r4, #32]
1000878a:	3b01      	subs	r3, #1
1000878c:	b29b      	uxth	r3, r3
1000878e:	8423      	strh	r3, [r4, #32]
					module->status = STATUS_OK;
					module->dir = SPI_DIRECTION_IDLE;
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
10008790:	8c23      	ldrh	r3, [r4, #32]
10008792:	b29b      	uxth	r3, r3
10008794:	2b00      	cmp	r3, #0
10008796:	d138      	bne.n	1000880a <spi_rx1_isr_handler+0x122>
					if(module->dir == SPI_DIRECTION_READ) {
10008798:	79e3      	ldrb	r3, [r4, #7]
1000879a:	2b00      	cmp	r3, #0
1000879c:	d114      	bne.n	100087c8 <spi_rx1_isr_handler+0xe0>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000879e:	3327      	adds	r3, #39	; 0x27
100087a0:	5ce3      	ldrb	r3, [r4, r3]
100087a2:	079b      	lsls	r3, r3, #30
100087a4:	d531      	bpl.n	1000880a <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
100087a6:	2326      	movs	r3, #38	; 0x26
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
100087a8:	5ce3      	ldrb	r3, [r4, r3]
100087aa:	079b      	lsls	r3, r3, #30
100087ac:	d52d      	bpl.n	1000880a <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
100087ae:	2200      	movs	r2, #0
100087b0:	2328      	movs	r3, #40	; 0x28
100087b2:	54e2      	strb	r2, [r4, r3]
							module->hw->RX_INTERRUPT_MASK.reg &=
100087b4:	6821      	ldr	r1, [r4, #0]
100087b6:	3230      	adds	r2, #48	; 0x30
100087b8:	5c8b      	ldrb	r3, [r1, r2]
100087ba:	2001      	movs	r0, #1
100087bc:	4383      	bics	r3, r0
100087be:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
100087c0:	68e3      	ldr	r3, [r4, #12]
100087c2:	0020      	movs	r0, r4
100087c4:	4798      	blx	r3
100087c6:	e020      	b.n	1000880a <spi_rx1_isr_handler+0x122>
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
100087c8:	79e3      	ldrb	r3, [r4, #7]
100087ca:	2b02      	cmp	r3, #2
100087cc:	d11d      	bne.n	1000880a <spi_rx1_isr_handler+0x122>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
100087ce:	3325      	adds	r3, #37	; 0x25
100087d0:	5ce3      	ldrb	r3, [r4, r3]
100087d2:	075b      	lsls	r3, r3, #29
100087d4:	d519      	bpl.n	1000880a <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
100087d6:	2326      	movs	r3, #38	; 0x26
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
100087d8:	5ce3      	ldrb	r3, [r4, r3]
100087da:	075b      	lsls	r3, r3, #29
100087dc:	d515      	bpl.n	1000880a <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
							module->hw->RX_INTERRUPT_MASK.reg &=
100087de:	6821      	ldr	r1, [r4, #0]
100087e0:	2230      	movs	r2, #48	; 0x30
100087e2:	5c8b      	ldrb	r3, [r1, r2]
100087e4:	2001      	movs	r0, #1
100087e6:	4383      	bics	r3, r0
100087e8:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							if (flag_direction_both[1]) {
100087ea:	4b09      	ldr	r3, [pc, #36]	; (10008810 <spi_rx1_isr_handler+0x128>)
100087ec:	785b      	ldrb	r3, [r3, #1]
100087ee:	2b00      	cmp	r3, #0
100087f0:	d008      	beq.n	10008804 <spi_rx1_isr_handler+0x11c>
								module->status = STATUS_OK;
100087f2:	2300      	movs	r3, #0
100087f4:	3a08      	subs	r2, #8
100087f6:	54a3      	strb	r3, [r4, r2]
								flag_direction_both[1] = false;
100087f8:	4a05      	ldr	r2, [pc, #20]	; (10008810 <spi_rx1_isr_handler+0x128>)
100087fa:	7053      	strb	r3, [r2, #1]
								(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
100087fc:	6923      	ldr	r3, [r4, #16]
100087fe:	0020      	movs	r0, r4
10008800:	4798      	blx	r3
10008802:	e002      	b.n	1000880a <spi_rx1_isr_handler+0x122>
							} else {
								flag_direction_both[1] = true;
10008804:	2201      	movs	r2, #1
10008806:	4b02      	ldr	r3, [pc, #8]	; (10008810 <spi_rx1_isr_handler+0x128>)
10008808:	705a      	strb	r2, [r3, #1]
					}
				}
			}
		}
	}
}
1000880a:	bd10      	pop	{r4, pc}
1000880c:	10015330 	.word	0x10015330
10008810:	10013884 	.word	0x10013884

10008814 <spi_tx1_isr_handler>:

void spi_tx1_isr_handler(void)
{
10008814:	b570      	push	{r4, r5, r6, lr}
	struct spi_module *module = _spi_instances[1];
10008816:	4b3d      	ldr	r3, [pc, #244]	; (1000890c <spi_tx1_isr_handler+0xf8>)
10008818:	6858      	ldr	r0, [r3, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000881a:	6802      	ldr	r2, [r0, #0]
1000881c:	7a13      	ldrb	r3, [r2, #8]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
1000881e:	212c      	movs	r1, #44	; 0x2c
10008820:	5c51      	ldrb	r1, [r2, r1]
10008822:	400b      	ands	r3, r1

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
10008824:	07d9      	lsls	r1, r3, #31
10008826:	d536      	bpl.n	10008896 <spi_tx1_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
10008828:	7941      	ldrb	r1, [r0, #5]
1000882a:	2901      	cmp	r1, #1
1000882c:	d133      	bne.n	10008896 <spi_tx1_isr_handler+0x82>
		(module->dir == SPI_DIRECTION_READ)) {
1000882e:	79c1      	ldrb	r1, [r0, #7]
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
10008830:	2900      	cmp	r1, #0
10008832:	d113      	bne.n	1000885c <spi_tx1_isr_handler+0x48>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write dummy byte */
	spi_hw->TRANSMIT_DATA.reg = dummy_write;
10008834:	4936      	ldr	r1, [pc, #216]	; (10008910 <spi_tx1_isr_handler+0xfc>)
10008836:	7809      	ldrb	r1, [r1, #0]
10008838:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
1000883a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
1000883c:	3a01      	subs	r2, #1
1000883e:	b292      	uxth	r2, r2
10008840:	8442      	strh	r2, [r0, #34]	; 0x22
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
		(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
10008842:	8c42      	ldrh	r2, [r0, #34]	; 0x22
10008844:	b292      	uxth	r2, r2
10008846:	2a00      	cmp	r2, #0
10008848:	d105      	bne.n	10008856 <spi_tx1_isr_handler+0x42>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000884a:	6804      	ldr	r4, [r0, #0]
1000884c:	212c      	movs	r1, #44	; 0x2c
1000884e:	5c62      	ldrb	r2, [r4, r1]
10008850:	2501      	movs	r5, #1
10008852:	43aa      	bics	r2, r5
10008854:	5462      	strb	r2, [r4, r1]
				~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
10008856:	7942      	ldrb	r2, [r0, #5]
10008858:	2a01      	cmp	r2, #1
1000885a:	d11c      	bne.n	10008896 <spi_tx1_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
1000885c:	79c2      	ldrb	r2, [r0, #7]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
1000885e:	2a00      	cmp	r2, #0
10008860:	d019      	beq.n	10008896 <spi_tx1_isr_handler+0x82>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
10008862:	69c2      	ldr	r2, [r0, #28]
10008864:	7811      	ldrb	r1, [r2, #0]
10008866:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10008868:	3201      	adds	r2, #1
1000886a:	61c2      	str	r2, [r0, #28]

	/* Write the data to send*/
	spi_hw->TRANSMIT_DATA.reg = data_to_send & SPI_TRANSMIT_DATA_MASK;
1000886c:	6802      	ldr	r2, [r0, #0]
1000886e:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10008870:	8c82      	ldrh	r2, [r0, #36]	; 0x24
10008872:	3a01      	subs	r2, #1
10008874:	b292      	uxth	r2, r2
10008876:	8482      	strh	r2, [r0, #36]	; 0x24
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
10008878:	8c82      	ldrh	r2, [r0, #36]	; 0x24
1000887a:	b292      	uxth	r2, r2
1000887c:	2a00      	cmp	r2, #0
1000887e:	d10a      	bne.n	10008896 <spi_tx1_isr_handler+0x82>
				module->hw->TX_INTERRUPT_MASK.reg &=
10008880:	6804      	ldr	r4, [r0, #0]
10008882:	322c      	adds	r2, #44	; 0x2c
10008884:	5ca1      	ldrb	r1, [r4, r2]
10008886:	2501      	movs	r5, #1
10008888:	43a9      	bics	r1, r5
1000888a:	54a1      	strb	r1, [r4, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
1000888c:	6804      	ldr	r4, [r0, #0]
1000888e:	5ca5      	ldrb	r5, [r4, r2]
10008890:	2110      	movs	r1, #16
10008892:	4329      	orrs	r1, r5
10008894:	54a1      	strb	r1, [r4, r2]
				SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10008896:	06db      	lsls	r3, r3, #27
10008898:	d536      	bpl.n	10008908 <spi_tx1_isr_handler+0xf4>
		if (module->dir == SPI_DIRECTION_WRITE) {
1000889a:	79c3      	ldrb	r3, [r0, #7]
1000889c:	2b01      	cmp	r3, #1
1000889e:	d113      	bne.n	100088c8 <spi_tx1_isr_handler+0xb4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
100088a0:	3326      	adds	r3, #38	; 0x26
100088a2:	5cc3      	ldrb	r3, [r0, r3]
100088a4:	07db      	lsls	r3, r3, #31
100088a6:	d52f      	bpl.n	10008908 <spi_tx1_isr_handler+0xf4>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
100088a8:	2326      	movs	r3, #38	; 0x26
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
100088aa:	5cc3      	ldrb	r3, [r0, r3]
100088ac:	07db      	lsls	r3, r3, #31
100088ae:	d52b      	bpl.n	10008908 <spi_tx1_isr_handler+0xf4>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
				module->status = STATUS_OK;
100088b0:	2200      	movs	r2, #0
100088b2:	2328      	movs	r3, #40	; 0x28
100088b4:	54c2      	strb	r2, [r0, r3]
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
100088b6:	6801      	ldr	r1, [r0, #0]
100088b8:	322c      	adds	r2, #44	; 0x2c
100088ba:	5c8b      	ldrb	r3, [r1, r2]
100088bc:	2410      	movs	r4, #16
100088be:	43a3      	bics	r3, r4
100088c0:	548b      	strb	r3, [r1, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
100088c2:	6883      	ldr	r3, [r0, #8]
100088c4:	4798      	blx	r3
100088c6:	e01f      	b.n	10008908 <spi_tx1_isr_handler+0xf4>
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
100088c8:	79c3      	ldrb	r3, [r0, #7]
100088ca:	2b02      	cmp	r3, #2
100088cc:	d11c      	bne.n	10008908 <spi_tx1_isr_handler+0xf4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
100088ce:	3325      	adds	r3, #37	; 0x25
100088d0:	5cc3      	ldrb	r3, [r0, r3]
100088d2:	075b      	lsls	r3, r3, #29
100088d4:	d518      	bpl.n	10008908 <spi_tx1_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
100088d6:	2326      	movs	r3, #38	; 0x26
				module->hw->TX_INTERRUPT_MASK.reg &=
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
100088d8:	5cc3      	ldrb	r3, [r0, r3]
100088da:	075b      	lsls	r3, r3, #29
100088dc:	d514      	bpl.n	10008908 <spi_tx1_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
100088de:	6801      	ldr	r1, [r0, #0]
100088e0:	222c      	movs	r2, #44	; 0x2c
100088e2:	5c8b      	ldrb	r3, [r1, r2]
100088e4:	2410      	movs	r4, #16
100088e6:	43a3      	bics	r3, r4
100088e8:	548b      	strb	r3, [r1, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				if (flag_direction_both[1]) {
100088ea:	4b0a      	ldr	r3, [pc, #40]	; (10008914 <spi_tx1_isr_handler+0x100>)
100088ec:	785b      	ldrb	r3, [r3, #1]
100088ee:	2b00      	cmp	r3, #0
100088f0:	d007      	beq.n	10008902 <spi_tx1_isr_handler+0xee>
					module->status = STATUS_OK;
100088f2:	2300      	movs	r3, #0
100088f4:	3a04      	subs	r2, #4
100088f6:	5483      	strb	r3, [r0, r2]
					flag_direction_both[1] = false;
100088f8:	4a06      	ldr	r2, [pc, #24]	; (10008914 <spi_tx1_isr_handler+0x100>)
100088fa:	7053      	strb	r3, [r2, #1]
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
100088fc:	6903      	ldr	r3, [r0, #16]
100088fe:	4798      	blx	r3
10008900:	e002      	b.n	10008908 <spi_tx1_isr_handler+0xf4>
				} else {
					flag_direction_both[1] = true;
10008902:	2201      	movs	r2, #1
10008904:	4b03      	ldr	r3, [pc, #12]	; (10008914 <spi_tx1_isr_handler+0x100>)
10008906:	705a      	strb	r2, [r3, #1]
				}
			}
		}
	}
}
10008908:	bd70      	pop	{r4, r5, r6, pc}
1000890a:	46c0      	nop			; (mov r8, r8)
1000890c:	10015330 	.word	0x10015330
10008910:	10013886 	.word	0x10013886
10008914:	10013884 	.word	0x10013884

10008918 <draw_pixel>:
const uint8_t BLUE	  = 0x20;
const uint8_t MAGENTA = 0xA0;
const uint8_t CYAN	  = 0x60;

static void draw_pixel(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t color) // Write single pixel to frameBuffer
{
10008918:	b530      	push	{r4, r5, lr}
	uint8_t bit_offset = (x*3)&0x07;
1000891a:	004c      	lsls	r4, r1, #1
1000891c:	190c      	adds	r4, r1, r4
1000891e:	2507      	movs	r5, #7
10008920:	402c      	ands	r4, r5
	frameBuffer[y][(x*3)>>3] = (frameBuffer[y][(x*3)>>3] & ~(0xE0>>bit_offset)) | (color>>bit_offset);
10008922:	0055      	lsls	r5, r2, #1
10008924:	18aa      	adds	r2, r5, r2
10008926:	0112      	lsls	r2, r2, #4
10008928:	1880      	adds	r0, r0, r2
1000892a:	004a      	lsls	r2, r1, #1
1000892c:	1851      	adds	r1, r2, r1
1000892e:	10c9      	asrs	r1, r1, #3
10008930:	25e0      	movs	r5, #224	; 0xe0
10008932:	4125      	asrs	r5, r4
10008934:	5c42      	ldrb	r2, [r0, r1]
10008936:	43aa      	bics	r2, r5
10008938:	001d      	movs	r5, r3
1000893a:	4125      	asrs	r5, r4
1000893c:	432a      	orrs	r2, r5
1000893e:	5442      	strb	r2, [r0, r1]
	if (bit_offset > 5)
10008940:	2c05      	cmp	r4, #5
10008942:	d90a      	bls.n	1000895a <draw_pixel+0x42>
	{
		frameBuffer[y][((x*3)>>3)+1] = (frameBuffer[y][((x*3)>>3)+1] & (0xFF>>(bit_offset-5))) | (color << (8-bit_offset));
10008944:	3101      	adds	r1, #1
10008946:	1f65      	subs	r5, r4, #5
10008948:	22ff      	movs	r2, #255	; 0xff
1000894a:	412a      	asrs	r2, r5
1000894c:	5c45      	ldrb	r5, [r0, r1]
1000894e:	402a      	ands	r2, r5
10008950:	2508      	movs	r5, #8
10008952:	1b2c      	subs	r4, r5, r4
10008954:	40a3      	lsls	r3, r4
10008956:	4313      	orrs	r3, r2
10008958:	5443      	strb	r3, [r0, r1]
	}
}
1000895a:	bd30      	pop	{r4, r5, pc}

1000895c <delay_us>:
	config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
	dualtimer_init(&config_dualtimer);
}

static void delay_us(uint32_t time)
{
1000895c:	b510      	push	{r4, lr}
	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG, time*26);
1000895e:	231a      	movs	r3, #26
10008960:	4343      	muls	r3, r0
10008962:	001a      	movs	r2, r3
10008964:	2100      	movs	r1, #0
10008966:	2000      	movs	r0, #0
10008968:	4b03      	ldr	r3, [pc, #12]	; (10008978 <delay_us+0x1c>)
1000896a:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER1)){}
1000896c:	4c03      	ldr	r4, [pc, #12]	; (1000897c <delay_us+0x20>)
1000896e:	2000      	movs	r0, #0
10008970:	47a0      	blx	r4
10008972:	2800      	cmp	r0, #0
10008974:	d1fb      	bne.n	1000896e <delay_us+0x12>
}
10008976:	bd10      	pop	{r4, pc}
10008978:	10008e81 	.word	0x10008e81
1000897c:	10008e6d 	.word	0x10008e6d

10008980 <draw_string>:
		}
	}
}

void draw_string(char* string, uint8_t length, uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color)
{
10008980:	b5f0      	push	{r4, r5, r6, r7, lr}
10008982:	465f      	mov	r7, fp
10008984:	4656      	mov	r6, sl
10008986:	464d      	mov	r5, r9
10008988:	4644      	mov	r4, r8
1000898a:	b4f0      	push	{r4, r5, r6, r7}
1000898c:	b093      	sub	sp, #76	; 0x4c
1000898e:	900d      	str	r0, [sp, #52]	; 0x34
10008990:	9111      	str	r1, [sp, #68]	; 0x44
10008992:	9201      	str	r2, [sp, #4]
10008994:	469a      	mov	sl, r3
10008996:	ab1c      	add	r3, sp, #112	; 0x70
10008998:	781b      	ldrb	r3, [r3, #0]
1000899a:	0018      	movs	r0, r3
1000899c:	9306      	str	r3, [sp, #24]
1000899e:	ab1d      	add	r3, sp, #116	; 0x74
100089a0:	781a      	ldrb	r2, [r3, #0]
100089a2:	9203      	str	r2, [sp, #12]
100089a4:	ab1e      	add	r3, sp, #120	; 0x78
100089a6:	781a      	ldrb	r2, [r3, #0]
100089a8:	9202      	str	r2, [sp, #8]
	for(uint8_t cursor = x, i = 0 ; i < length ; i++)
100089aa:	1e0b      	subs	r3, r1, #0
100089ac:	d100      	bne.n	100089b0 <draw_string+0x30>
100089ae:	e146      	b.n	10008c3e <draw_string+0x2be>
100089b0:	3b01      	subs	r3, #1
100089b2:	b2db      	uxtb	r3, r3
100089b4:	3301      	adds	r3, #1
100089b6:	9310      	str	r3, [sp, #64]	; 0x40
100089b8:	2300      	movs	r3, #0
100089ba:	930c      	str	r3, [sp, #48]	; 0x30
	}
}

static void draw_char(char c,uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color) // Write single character to frameBuffer
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
100089bc:	4ba3      	ldr	r3, [pc, #652]	; (10008c4c <draw_string+0x2cc>)
100089be:	781b      	ldrb	r3, [r3, #0]
100089c0:	9308      	str	r3, [sp, #32]
100089c2:	1e5a      	subs	r2, r3, #1
100089c4:	4193      	sbcs	r3, r2
100089c6:	b2db      	uxtb	r3, r3
100089c8:	930f      	str	r3, [sp, #60]	; 0x3c
100089ca:	0fc3      	lsrs	r3, r0, #31
100089cc:	2700      	movs	r7, #0
100089ce:	217f      	movs	r1, #127	; 0x7f
100089d0:	4281      	cmp	r1, r0
100089d2:	417b      	adcs	r3, r7
100089d4:	b2db      	uxtb	r3, r3
100089d6:	930e      	str	r3, [sp, #56]	; 0x38

void draw_string(char* string, uint8_t length, uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color)
{
	for(uint8_t cursor = x, i = 0 ; i < length ; i++)
	{
		draw_char(string[i], frameBuffer, cursor, y, font_color, bg_color);
100089d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100089da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100089dc:	5c9b      	ldrb	r3, [r3, r2]
	}
}

static void draw_char(char c,uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color) // Write single character to frameBuffer
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
100089de:	9a06      	ldr	r2, [sp, #24]
100089e0:	9207      	str	r2, [sp, #28]
100089e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
100089e4:	2900      	cmp	r1, #0
100089e6:	d100      	bne.n	100089ea <draw_string+0x6a>
100089e8:	e0e1      	b.n	10008bae <draw_string+0x22e>
100089ea:	990e      	ldr	r1, [sp, #56]	; 0x38
100089ec:	2900      	cmp	r1, #0
100089ee:	d100      	bne.n	100089f2 <draw_string+0x72>
100089f0:	e0dd      	b.n	10008bae <draw_string+0x22e>
100089f2:	9200      	str	r2, [sp, #0]
100089f4:	0039      	movs	r1, r7
	{
		if (microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits < 9)
100089f6:	4a95      	ldr	r2, [pc, #596]	; (10008c4c <draw_string+0x2cc>)
100089f8:	7852      	ldrb	r2, [r2, #1]
100089fa:	1a9b      	subs	r3, r3, r2
100089fc:	009b      	lsls	r3, r3, #2
100089fe:	001a      	movs	r2, r3
10008a00:	930a      	str	r3, [sp, #40]	; 0x28
10008a02:	4893      	ldr	r0, [pc, #588]	; (10008c50 <draw_string+0x2d0>)
10008a04:	5c1b      	ldrb	r3, [r3, r0]
10008a06:	469b      	mov	fp, r3
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits) & ((x + bit_offset) < 128) ; bit_offset++)
10008a08:	0018      	movs	r0, r3
10008a0a:	1e43      	subs	r3, r0, #1
10008a0c:	4198      	sbcs	r0, r3
10008a0e:	9009      	str	r0, [sp, #36]	; 0x24
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + bit_offset, y + line_count, font_color);
10008a10:	4b8f      	ldr	r3, [pc, #572]	; (10008c50 <draw_string+0x2d0>)
10008a12:	4694      	mov	ip, r2
10008a14:	4463      	add	r3, ip
10008a16:	3302      	adds	r3, #2
10008a18:	930b      	str	r3, [sp, #44]	; 0x2c

static void draw_char(char c,uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color) // Write single character to frameBuffer
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
	{
		if (microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits < 9)
10008a1a:	465b      	mov	r3, fp
10008a1c:	2b08      	cmp	r3, #8
10008a1e:	d904      	bls.n	10008a2a <draw_string+0xaa>
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
			}
		} 
		else
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < 8) & ((x + bit_offset) < 128) ; bit_offset++)
10008a20:	46d0      	mov	r8, sl
10008a22:	4653      	mov	r3, sl
10008a24:	2b7f      	cmp	r3, #127	; 0x7f
10008a26:	dd3b      	ble.n	10008aa0 <draw_string+0x120>
10008a28:	e0ab      	b.n	10008b82 <draw_string+0x202>
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
	{
		if (microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits < 9)
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits) & ((x + bit_offset) < 128) ; bit_offset++)
10008a2a:	46d0      	mov	r8, sl
10008a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008a2e:	2b00      	cmp	r3, #0
10008a30:	d100      	bne.n	10008a34 <draw_string+0xb4>
10008a32:	e0a6      	b.n	10008b82 <draw_string+0x202>
10008a34:	4653      	mov	r3, sl
10008a36:	0fdb      	lsrs	r3, r3, #31
10008a38:	4652      	mov	r2, sl
10008a3a:	207f      	movs	r0, #127	; 0x7f
10008a3c:	4290      	cmp	r0, r2
10008a3e:	417b      	adcs	r3, r7
10008a40:	b2db      	uxtb	r3, r3
10008a42:	2b00      	cmp	r3, #0
10008a44:	d100      	bne.n	10008a48 <draw_string+0xc8>
10008a46:	e09c      	b.n	10008b82 <draw_string+0x202>
10008a48:	4655      	mov	r5, sl
10008a4a:	003c      	movs	r4, r7
10008a4c:	003a      	movs	r2, r7
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + bit_offset, y + line_count, font_color);
10008a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10008a50:	881b      	ldrh	r3, [r3, #0]
10008a52:	4880      	ldr	r0, [pc, #512]	; (10008c54 <draw_string+0x2d4>)
10008a54:	1841      	adds	r1, r0, r1
10008a56:	5ccb      	ldrb	r3, [r1, r3]
10008a58:	4699      	mov	r9, r3
10008a5a:	2380      	movs	r3, #128	; 0x80
10008a5c:	4113      	asrs	r3, r2
10008a5e:	464a      	mov	r2, r9
10008a60:	4213      	tst	r3, r2
10008a62:	d006      	beq.n	10008a72 <draw_string+0xf2>
10008a64:	9b03      	ldr	r3, [sp, #12]
10008a66:	9a00      	ldr	r2, [sp, #0]
10008a68:	0029      	movs	r1, r5
10008a6a:	9801      	ldr	r0, [sp, #4]
10008a6c:	4e7a      	ldr	r6, [pc, #488]	; (10008c58 <draw_string+0x2d8>)
10008a6e:	47b0      	blx	r6
10008a70:	e005      	b.n	10008a7e <draw_string+0xfe>
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
10008a72:	9b02      	ldr	r3, [sp, #8]
10008a74:	9a00      	ldr	r2, [sp, #0]
10008a76:	0029      	movs	r1, r5
10008a78:	9801      	ldr	r0, [sp, #4]
10008a7a:	4e77      	ldr	r6, [pc, #476]	; (10008c58 <draw_string+0x2d8>)
10008a7c:	47b0      	blx	r6
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
	{
		if (microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits < 9)
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits) & ((x + bit_offset) < 128) ; bit_offset++)
10008a7e:	3401      	adds	r4, #1
10008a80:	b2e4      	uxtb	r4, r4
10008a82:	0022      	movs	r2, r4
10008a84:	3501      	adds	r5, #1
10008a86:	b2ed      	uxtb	r5, r5
10008a88:	4643      	mov	r3, r8
10008a8a:	18e1      	adds	r1, r4, r3
10008a8c:	0fcb      	lsrs	r3, r1, #31
10008a8e:	207f      	movs	r0, #127	; 0x7f
10008a90:	4288      	cmp	r0, r1
10008a92:	417b      	adcs	r3, r7
10008a94:	b2db      	uxtb	r3, r3
10008a96:	2b00      	cmp	r3, #0
10008a98:	d073      	beq.n	10008b82 <draw_string+0x202>
10008a9a:	455c      	cmp	r4, fp
10008a9c:	d3dd      	bcc.n	10008a5a <draw_string+0xda>
10008a9e:	e070      	b.n	10008b82 <draw_string+0x202>
		} 
		else
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < 8) & ((x + bit_offset) < 128) ; bit_offset++)
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count*2] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + bit_offset, y + line_count, font_color);
10008aa0:	0049      	lsls	r1, r1, #1
10008aa2:	4655      	mov	r5, sl
10008aa4:	003c      	movs	r4, r7
10008aa6:	003a      	movs	r2, r7
10008aa8:	4b69      	ldr	r3, [pc, #420]	; (10008c50 <draw_string+0x2d0>)
10008aaa:	980a      	ldr	r0, [sp, #40]	; 0x28
10008aac:	4684      	mov	ip, r0
10008aae:	4463      	add	r3, ip
10008ab0:	885b      	ldrh	r3, [r3, #2]
10008ab2:	185b      	adds	r3, r3, r1
10008ab4:	0019      	movs	r1, r3
10008ab6:	9305      	str	r3, [sp, #20]
10008ab8:	4b66      	ldr	r3, [pc, #408]	; (10008c54 <draw_string+0x2d4>)
10008aba:	5c5b      	ldrb	r3, [r3, r1]
10008abc:	4699      	mov	r9, r3
10008abe:	9b05      	ldr	r3, [sp, #20]
10008ac0:	9304      	str	r3, [sp, #16]
10008ac2:	2380      	movs	r3, #128	; 0x80
10008ac4:	4113      	asrs	r3, r2
10008ac6:	464a      	mov	r2, r9
10008ac8:	4213      	tst	r3, r2
10008aca:	d006      	beq.n	10008ada <draw_string+0x15a>
10008acc:	9b03      	ldr	r3, [sp, #12]
10008ace:	9a00      	ldr	r2, [sp, #0]
10008ad0:	0029      	movs	r1, r5
10008ad2:	9801      	ldr	r0, [sp, #4]
10008ad4:	4e60      	ldr	r6, [pc, #384]	; (10008c58 <draw_string+0x2d8>)
10008ad6:	47b0      	blx	r6
10008ad8:	e005      	b.n	10008ae6 <draw_string+0x166>
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
10008ada:	9b02      	ldr	r3, [sp, #8]
10008adc:	9a00      	ldr	r2, [sp, #0]
10008ade:	0029      	movs	r1, r5
10008ae0:	9801      	ldr	r0, [sp, #4]
10008ae2:	4e5d      	ldr	r6, [pc, #372]	; (10008c58 <draw_string+0x2d8>)
10008ae4:	47b0      	blx	r6
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
			}
		} 
		else
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < 8) & ((x + bit_offset) < 128) ; bit_offset++)
10008ae6:	3401      	adds	r4, #1
10008ae8:	b2e4      	uxtb	r4, r4
10008aea:	0022      	movs	r2, r4
10008aec:	3501      	adds	r5, #1
10008aee:	b2ed      	uxtb	r5, r5
10008af0:	4643      	mov	r3, r8
10008af2:	18e1      	adds	r1, r4, r3
10008af4:	0fcb      	lsrs	r3, r1, #31
10008af6:	207f      	movs	r0, #127	; 0x7f
10008af8:	4288      	cmp	r0, r1
10008afa:	417b      	adcs	r3, r7
10008afc:	b2db      	uxtb	r3, r3
10008afe:	2b00      	cmp	r3, #0
10008b00:	d006      	beq.n	10008b10 <draw_string+0x190>
10008b02:	2307      	movs	r3, #7
10008b04:	0039      	movs	r1, r7
10008b06:	42a3      	cmp	r3, r4
10008b08:	4179      	adcs	r1, r7
10008b0a:	b2cb      	uxtb	r3, r1
10008b0c:	2b00      	cmp	r3, #0
10008b0e:	d1d6      	bne.n	10008abe <draw_string+0x13e>
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count*2] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + bit_offset, y + line_count, font_color);
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
			}
			for (uint8_t bit_offset = 0 ; (bit_offset < microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits - 8) & ((x + bit_offset) < 128) ; bit_offset++)
10008b10:	465d      	mov	r5, fp
10008b12:	3d08      	subs	r5, #8
10008b14:	2d00      	cmp	r5, #0
10008b16:	dd34      	ble.n	10008b82 <draw_string+0x202>
10008b18:	4654      	mov	r4, sl
10008b1a:	3408      	adds	r4, #8
10008b1c:	b2e4      	uxtb	r4, r4
10008b1e:	003b      	movs	r3, r7
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count*2 + 1] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + 8 + bit_offset, y + line_count, font_color);
10008b20:	4a4c      	ldr	r2, [pc, #304]	; (10008c54 <draw_string+0x2d4>)
10008b22:	9904      	ldr	r1, [sp, #16]
10008b24:	468c      	mov	ip, r1
10008b26:	4462      	add	r2, ip
10008b28:	7852      	ldrb	r2, [r2, #1]
10008b2a:	4691      	mov	r9, r2
10008b2c:	4642      	mov	r2, r8
10008b2e:	46a8      	mov	r8, r5
10008b30:	0015      	movs	r5, r2
10008b32:	2280      	movs	r2, #128	; 0x80
10008b34:	411a      	asrs	r2, r3
10008b36:	0013      	movs	r3, r2
10008b38:	464a      	mov	r2, r9
10008b3a:	4213      	tst	r3, r2
10008b3c:	d006      	beq.n	10008b4c <draw_string+0x1cc>
10008b3e:	9b03      	ldr	r3, [sp, #12]
10008b40:	9a00      	ldr	r2, [sp, #0]
10008b42:	0021      	movs	r1, r4
10008b44:	9801      	ldr	r0, [sp, #4]
10008b46:	4e44      	ldr	r6, [pc, #272]	; (10008c58 <draw_string+0x2d8>)
10008b48:	47b0      	blx	r6
10008b4a:	e005      	b.n	10008b58 <draw_string+0x1d8>
				else draw_pixel(frameBuffer, x + 8 + bit_offset, y + line_count, bg_color);
10008b4c:	9b02      	ldr	r3, [sp, #8]
10008b4e:	9a00      	ldr	r2, [sp, #0]
10008b50:	0021      	movs	r1, r4
10008b52:	9801      	ldr	r0, [sp, #4]
10008b54:	4e40      	ldr	r6, [pc, #256]	; (10008c58 <draw_string+0x2d8>)
10008b56:	47b0      	blx	r6
			for (uint8_t bit_offset = 0 ; (bit_offset < 8) & ((x + bit_offset) < 128) ; bit_offset++)
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count*2] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + bit_offset, y + line_count, font_color);
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
			}
			for (uint8_t bit_offset = 0 ; (bit_offset < microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits - 8) & ((x + bit_offset) < 128) ; bit_offset++)
10008b58:	4653      	mov	r3, sl
10008b5a:	1ae3      	subs	r3, r4, r3
10008b5c:	3b07      	subs	r3, #7
10008b5e:	b2db      	uxtb	r3, r3
10008b60:	3401      	adds	r4, #1
10008b62:	b2e4      	uxtb	r4, r4
10008b64:	1959      	adds	r1, r3, r5
10008b66:	0fca      	lsrs	r2, r1, #31
10008b68:	207f      	movs	r0, #127	; 0x7f
10008b6a:	4288      	cmp	r0, r1
10008b6c:	417a      	adcs	r2, r7
10008b6e:	b2d2      	uxtb	r2, r2
10008b70:	2a00      	cmp	r2, #0
10008b72:	d006      	beq.n	10008b82 <draw_string+0x202>
10008b74:	2201      	movs	r2, #1
10008b76:	4543      	cmp	r3, r8
10008b78:	db00      	blt.n	10008b7c <draw_string+0x1fc>
10008b7a:	2200      	movs	r2, #0
10008b7c:	b2d2      	uxtb	r2, r2
10008b7e:	2a00      	cmp	r2, #0
10008b80:	d1d7      	bne.n	10008b32 <draw_string+0x1b2>
10008b82:	9a00      	ldr	r2, [sp, #0]
10008b84:	9906      	ldr	r1, [sp, #24]
10008b86:	1a53      	subs	r3, r2, r1
10008b88:	3301      	adds	r3, #1
10008b8a:	b2db      	uxtb	r3, r3
	}
}

static void draw_char(char c,uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color) // Write single character to frameBuffer
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
10008b8c:	0019      	movs	r1, r3
10008b8e:	3201      	adds	r2, #1
10008b90:	b2d2      	uxtb	r2, r2
10008b92:	9200      	str	r2, [sp, #0]
10008b94:	9a07      	ldr	r2, [sp, #28]
10008b96:	1898      	adds	r0, r3, r2
10008b98:	0fc2      	lsrs	r2, r0, #31
10008b9a:	247f      	movs	r4, #127	; 0x7f
10008b9c:	4284      	cmp	r4, r0
10008b9e:	417a      	adcs	r2, r7
10008ba0:	b2d2      	uxtb	r2, r2
10008ba2:	2a00      	cmp	r2, #0
10008ba4:	d003      	beq.n	10008bae <draw_string+0x22e>
10008ba6:	9a08      	ldr	r2, [sp, #32]
10008ba8:	4293      	cmp	r3, r2
10008baa:	d200      	bcs.n	10008bae <draw_string+0x22e>
10008bac:	e735      	b.n	10008a1a <draw_string+0x9a>
void draw_string(char* string, uint8_t length, uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color)
{
	for(uint8_t cursor = x, i = 0 ; i < length ; i++)
	{
		draw_char(string[i], frameBuffer, cursor, y, font_color, bg_color);
		cursor += microsoftSansSerif_8ptDescriptors[string[i] - microsoftSansSerif_8ptFontInfo.startChar].widthBits;
10008bae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10008bb0:	990c      	ldr	r1, [sp, #48]	; 0x30
10008bb2:	5c53      	ldrb	r3, [r2, r1]
10008bb4:	4a25      	ldr	r2, [pc, #148]	; (10008c4c <draw_string+0x2cc>)
10008bb6:	7852      	ldrb	r2, [r2, #1]
10008bb8:	1a9b      	subs	r3, r3, r2
10008bba:	009b      	lsls	r3, r3, #2
10008bbc:	4a24      	ldr	r2, [pc, #144]	; (10008c50 <draw_string+0x2d0>)
10008bbe:	5c9c      	ldrb	r4, [r3, r2]
10008bc0:	4454      	add	r4, sl
10008bc2:	b2e3      	uxtb	r3, r4
10008bc4:	1e1e      	subs	r6, r3, #0
		if(cursor < 127)
10008bc6:	2e7e      	cmp	r6, #126	; 0x7e
10008bc8:	d839      	bhi.n	10008c3e <draw_string+0x2be>
		{
			for(uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT) & (i < (length - 1)) ; line_count++)
10008bca:	9b11      	ldr	r3, [sp, #68]	; 0x44
10008bcc:	3b01      	subs	r3, #1
10008bce:	2201      	movs	r2, #1
10008bd0:	4299      	cmp	r1, r3
10008bd2:	db00      	blt.n	10008bd6 <draw_string+0x256>
10008bd4:	2200      	movs	r2, #0
10008bd6:	b2d3      	uxtb	r3, r2
10008bd8:	4698      	mov	r8, r3
10008bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008bdc:	4642      	mov	r2, r8
10008bde:	4213      	tst	r3, r2
10008be0:	d022      	beq.n	10008c28 <draw_string+0x2a8>
10008be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008be4:	2b00      	cmp	r3, #0
10008be6:	d01f      	beq.n	10008c28 <draw_string+0x2a8>
10008be8:	003d      	movs	r5, r7
			{
				draw_pixel(frameBuffer, cursor, y + line_count, bg_color);
10008bea:	4c1b      	ldr	r4, [pc, #108]	; (10008c58 <draw_string+0x2d8>)
10008bec:	9b07      	ldr	r3, [sp, #28]
10008bee:	4699      	mov	r9, r3
10008bf0:	9b06      	ldr	r3, [sp, #24]
10008bf2:	469a      	mov	sl, r3
10008bf4:	9b08      	ldr	r3, [sp, #32]
10008bf6:	469b      	mov	fp, r3
10008bf8:	4653      	mov	r3, sl
10008bfa:	195a      	adds	r2, r3, r5
10008bfc:	b2d2      	uxtb	r2, r2
10008bfe:	9b02      	ldr	r3, [sp, #8]
10008c00:	0031      	movs	r1, r6
10008c02:	9801      	ldr	r0, [sp, #4]
10008c04:	47a0      	blx	r4
	{
		draw_char(string[i], frameBuffer, cursor, y, font_color, bg_color);
		cursor += microsoftSansSerif_8ptDescriptors[string[i] - microsoftSansSerif_8ptFontInfo.startChar].widthBits;
		if(cursor < 127)
		{
			for(uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT) & (i < (length - 1)) ; line_count++)
10008c06:	3501      	adds	r5, #1
10008c08:	b2ed      	uxtb	r5, r5
10008c0a:	464b      	mov	r3, r9
10008c0c:	18ea      	adds	r2, r5, r3
10008c0e:	0fd3      	lsrs	r3, r2, #31
10008c10:	217f      	movs	r1, #127	; 0x7f
10008c12:	4291      	cmp	r1, r2
10008c14:	417b      	adcs	r3, r7
10008c16:	b2db      	uxtb	r3, r3
10008c18:	2b00      	cmp	r3, #0
10008c1a:	d005      	beq.n	10008c28 <draw_string+0x2a8>
10008c1c:	455d      	cmp	r5, fp
10008c1e:	419b      	sbcs	r3, r3
10008c20:	425b      	negs	r3, r3
10008c22:	4642      	mov	r2, r8
10008c24:	4213      	tst	r3, r2
10008c26:	d1e7      	bne.n	10008bf8 <draw_string+0x278>
			{
				draw_pixel(frameBuffer, cursor, y + line_count, bg_color);
			}
			cursor++;
10008c28:	0034      	movs	r4, r6
10008c2a:	3401      	adds	r4, #1
10008c2c:	b2e3      	uxtb	r3, r4
10008c2e:	469a      	mov	sl, r3
10008c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008c32:	3301      	adds	r3, #1
10008c34:	930c      	str	r3, [sp, #48]	; 0x30
	}
}

void draw_string(char* string, uint8_t length, uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color)
{
	for(uint8_t cursor = x, i = 0 ; i < length ; i++)
10008c36:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008c38:	429a      	cmp	r2, r3
10008c3a:	d000      	beq.n	10008c3e <draw_string+0x2be>
10008c3c:	e6cc      	b.n	100089d8 <draw_string+0x58>
			}
			cursor++;
		}
		else return;
	}
}
10008c3e:	b013      	add	sp, #76	; 0x4c
10008c40:	bc3c      	pop	{r2, r3, r4, r5}
10008c42:	4690      	mov	r8, r2
10008c44:	4699      	mov	r9, r3
10008c46:	46a2      	mov	sl, r4
10008c48:	46ab      	mov	fp, r5
10008c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008c4c:	10012330 	.word	0x10012330
10008c50:	100127cc 	.word	0x100127cc
10008c54:	1001233c 	.word	0x1001233c
10008c58:	10008919 	.word	0x10008919

10008c5c <Setup>:
	spi_enable(&(module->LCD_spi_master_instance));
	//! [enable]
}

void Setup(LCDSPIModule* module)
{
10008c5c:	b530      	push	{r4, r5, lr}
10008c5e:	b08d      	sub	sp, #52	; 0x34
10008c60:	0005      	movs	r5, r0
	//! [slave_config]
	struct spi_slave_inst_config slave_dev_config;
	//! [slave_config]
	/* Configure and initialize software device instance of peripheral slave */
	//! [slave_conf_defaults]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
10008c62:	ac01      	add	r4, sp, #4
10008c64:	0020      	movs	r0, r4
10008c66:	4b14      	ldr	r3, [pc, #80]	; (10008cb8 <Setup+0x5c>)
10008c68:	4798      	blx	r3
	//! [slave_conf_defaults]
	//! [ss_pin]
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
10008c6a:	2310      	movs	r3, #16
10008c6c:	7023      	strb	r3, [r4, #0]
	//! [ss_pin]
	//! [slave_init]
	spi_attach_slave(&(module->LCD_slave), &slave_dev_config);
10008c6e:	0028      	movs	r0, r5
10008c70:	302c      	adds	r0, #44	; 0x2c
10008c72:	0021      	movs	r1, r4
10008c74:	4b11      	ldr	r3, [pc, #68]	; (10008cbc <Setup+0x60>)
10008c76:	4798      	blx	r3
	//! [slave_init]
	/* Configure, initialize and enable SPI module */
	//! [conf_defaults]
	spi_get_config_defaults(&config_spi_master);
10008c78:	ac02      	add	r4, sp, #8
10008c7a:	0020      	movs	r0, r4
10008c7c:	4b10      	ldr	r3, [pc, #64]	; (10008cc0 <Setup+0x64>)
10008c7e:	4798      	blx	r3
	//! [conf_defaults]
	//! [transfer_mode]
	config_spi_master.transfer_mode = CONF_SPI_TRANSFER_MODE;
10008c80:	2300      	movs	r3, #0
10008c82:	70a3      	strb	r3, [r4, #2]
	//! [transfer_mode]
	//! [clock_divider]
	config_spi_master.clock_divider = 154;
10008c84:	339a      	adds	r3, #154	; 0x9a
10008c86:	7123      	strb	r3, [r4, #4]
	//! [clock_divider]
	/* Configure pad 0 */
	//! [sck]
	config_spi_master.pin_number_pad[0] = CONF_SPI_PIN_SCK;
10008c88:	3b89      	subs	r3, #137	; 0x89
10008c8a:	60a3      	str	r3, [r4, #8]
	config_spi_master.pinmux_sel_pad[0] = CONF_SPI_MUX_SCK;
10008c8c:	3b0d      	subs	r3, #13
10008c8e:	61a3      	str	r3, [r4, #24]
	//! [sck]
	/* Configure pad 1 */
	//! [mosi]
	config_spi_master.pin_number_pad[1] = CONF_SPI_PIN_MOSI;
10008c90:	2213      	movs	r2, #19
10008c92:	60e2      	str	r2, [r4, #12]
	config_spi_master.pinmux_sel_pad[1] = CONF_SPI_MUX_MOSI;
10008c94:	61e3      	str	r3, [r4, #28]
	//! [mosi]
	/* Configure pad 2 */
	//! [ssn]
	config_spi_master.pin_number_pad[2] = PINMUX_UNUSED;
10008c96:	3a14      	subs	r2, #20
10008c98:	6122      	str	r2, [r4, #16]
	config_spi_master.pinmux_sel_pad[2] = PINMUX_UNUSED;
10008c9a:	6222      	str	r2, [r4, #32]
	//! [ssn]
	/* Configure pad 3 */
	//! [miso]
	config_spi_master.pin_number_pad[3] = CONF_SPI_PIN_MISO;
10008c9c:	3213      	adds	r2, #19
10008c9e:	6162      	str	r2, [r4, #20]
	config_spi_master.pinmux_sel_pad[3] = CONF_SPI_MUX_MISO;
10008ca0:	6263      	str	r3, [r4, #36]	; 0x24
	//! [miso]
	//! [init]
	spi_init(&(module->LCD_spi_master_instance), CONF_SPI, &config_spi_master);
10008ca2:	0022      	movs	r2, r4
10008ca4:	4907      	ldr	r1, [pc, #28]	; (10008cc4 <Setup+0x68>)
10008ca6:	0028      	movs	r0, r5
10008ca8:	4b07      	ldr	r3, [pc, #28]	; (10008cc8 <Setup+0x6c>)
10008caa:	4798      	blx	r3
	//! [init]

	//! [enable]
	spi_enable(&(module->LCD_spi_master_instance));
10008cac:	0028      	movs	r0, r5
10008cae:	4b07      	ldr	r3, [pc, #28]	; (10008ccc <Setup+0x70>)
10008cb0:	4798      	blx	r3

void Setup(LCDSPIModule* module)
{
	configure_spi_master(module);

}
10008cb2:	b00d      	add	sp, #52	; 0x34
10008cb4:	bd30      	pop	{r4, r5, pc}
10008cb6:	46c0      	nop			; (mov r8, r8)
10008cb8:	100080e9 	.word	0x100080e9
10008cbc:	10008121 	.word	0x10008121
10008cc0:	100080f5 	.word	0x100080f5
10008cc4:	40007000 	.word	0x40007000
10008cc8:	10008249 	.word	0x10008249
10008ccc:	10008161 	.word	0x10008161

10008cd0 <Transfer>:
		}
	}
}

void Transfer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t startLine, uint8_t endLine, LCDSPIModule* module)
{
10008cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10008cd2:	465f      	mov	r7, fp
10008cd4:	464e      	mov	r6, r9
10008cd6:	4645      	mov	r5, r8
10008cd8:	b4e0      	push	{r5, r6, r7}
10008cda:	b082      	sub	sp, #8
10008cdc:	4681      	mov	r9, r0
10008cde:	000d      	movs	r5, r1
10008ce0:	4690      	mov	r8, r2
10008ce2:	001c      	movs	r4, r3
10008ce4:	9301      	str	r3, [sp, #4]
	//generate_color_test_pattern(frameBuffer);

	//! [select_slave]
	gpio_pin_set_output_level(PIN_LP_GPIO_16, true);
10008ce6:	2101      	movs	r1, #1
10008ce8:	2010      	movs	r0, #16
10008cea:	4b2a      	ldr	r3, [pc, #168]	; (10008d94 <Transfer+0xc4>)
10008cec:	4798      	blx	r3
	//! [select_slave]

	//! [delay]
	delay_us(5); //tsSCS
10008cee:	2005      	movs	r0, #5
10008cf0:	4b29      	ldr	r3, [pc, #164]	; (10008d98 <Transfer+0xc8>)
10008cf2:	4798      	blx	r3
	//! [delay]

	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0
10008cf4:	9400      	str	r4, [sp, #0]
10008cf6:	2180      	movs	r1, #128	; 0x80
10008cf8:	0020      	movs	r0, r4
10008cfa:	4b28      	ldr	r3, [pc, #160]	; (10008d9c <Transfer+0xcc>)
10008cfc:	4798      	blx	r3

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
10008cfe:	3d01      	subs	r5, #1
10008d00:	b2ed      	uxtb	r5, r5
10008d02:	4545      	cmp	r5, r8
10008d04:	d231      	bcs.n	10008d6a <Transfer+0x9a>
	res = res | ((foo & 0x02) << 5);
	res = res | ((foo & 0x04) << 3);
	res = res | ((foo & 0x08) << 1);
	res = res | ((foo & 0x10) >> 1);
	res = res | ((foo & 0x20) >> 3);
	res = res | ((foo & 0x40) >> 5);
10008d06:	2340      	movs	r3, #64	; 0x40
10008d08:	469b      	mov	fp, r3
	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
	{
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
10008d0a:	4f24      	ldr	r7, [pc, #144]	; (10008d9c <Transfer+0xcc>)
		spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
10008d0c:	4e24      	ldr	r6, [pc, #144]	; (10008da0 <Transfer+0xd0>)
	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
	{
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
10008d0e:	1c6c      	adds	r4, r5, #1
10008d10:	b2e4      	uxtb	r4, r4
	res = res | ((foo & 0x02) << 5);
	res = res | ((foo & 0x04) << 3);
	res = res | ((foo & 0x08) << 1);
	res = res | ((foo & 0x10) >> 1);
	res = res | ((foo & 0x20) >> 3);
	res = res | ((foo & 0x40) >> 5);
10008d12:	0163      	lsls	r3, r4, #5
10008d14:	4659      	mov	r1, fp
10008d16:	4019      	ands	r1, r3
10008d18:	00e2      	lsls	r2, r4, #3
10008d1a:	2320      	movs	r3, #32
10008d1c:	4013      	ands	r3, r2
10008d1e:	430b      	orrs	r3, r1
10008d20:	01e2      	lsls	r2, r4, #7
10008d22:	4313      	orrs	r3, r2
10008d24:	0062      	lsls	r2, r4, #1
10008d26:	2110      	movs	r1, #16
10008d28:	400a      	ands	r2, r1
10008d2a:	4313      	orrs	r3, r2
10008d2c:	1062      	asrs	r2, r4, #1
10008d2e:	3908      	subs	r1, #8
10008d30:	400a      	ands	r2, r1
10008d32:	4313      	orrs	r3, r2
10008d34:	10e2      	asrs	r2, r4, #3
10008d36:	3904      	subs	r1, #4
10008d38:	400a      	ands	r2, r1
10008d3a:	4313      	orrs	r3, r2
10008d3c:	1162      	asrs	r2, r4, #5
10008d3e:	3902      	subs	r1, #2
10008d40:	400a      	ands	r2, r1
10008d42:	4313      	orrs	r3, r2
10008d44:	b2db      	uxtb	r3, r3
	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
	{
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
10008d46:	09e1      	lsrs	r1, r4, #7
10008d48:	4319      	orrs	r1, r3
10008d4a:	9800      	ldr	r0, [sp, #0]
10008d4c:	47b8      	blx	r7
		spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
10008d4e:	0069      	lsls	r1, r5, #1
10008d50:	1949      	adds	r1, r1, r5
10008d52:	0109      	lsls	r1, r1, #4
10008d54:	4449      	add	r1, r9
10008d56:	2230      	movs	r2, #48	; 0x30
10008d58:	9d00      	ldr	r5, [sp, #0]
10008d5a:	0028      	movs	r0, r5
10008d5c:	47b0      	blx	r6
		spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
10008d5e:	2100      	movs	r1, #0
10008d60:	0028      	movs	r0, r5
10008d62:	47b8      	blx	r7
	//! [delay]

	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
10008d64:	0025      	movs	r5, r4
10008d66:	45a0      	cmp	r8, r4
10008d68:	d8d1      	bhi.n	10008d0e <Transfer+0x3e>
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
		spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
		spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
	}

	spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
10008d6a:	2100      	movs	r1, #0
10008d6c:	9801      	ldr	r0, [sp, #4]
10008d6e:	4b0b      	ldr	r3, [pc, #44]	; (10008d9c <Transfer+0xcc>)
10008d70:	4798      	blx	r3
	//! [write]
	//! [delay]
	delay_us(220);
10008d72:	20dc      	movs	r0, #220	; 0xdc
10008d74:	4c08      	ldr	r4, [pc, #32]	; (10008d98 <Transfer+0xc8>)
10008d76:	47a0      	blx	r4
	//! [delay]
	//! [deselect_slave]
	gpio_pin_set_output_level(PIN_LP_GPIO_16, false);
10008d78:	2100      	movs	r1, #0
10008d7a:	2010      	movs	r0, #16
10008d7c:	4b05      	ldr	r3, [pc, #20]	; (10008d94 <Transfer+0xc4>)
10008d7e:	4798      	blx	r3
	//! [deselect_slave]
	delay_us(1000);
10008d80:	20fa      	movs	r0, #250	; 0xfa
10008d82:	0080      	lsls	r0, r0, #2
10008d84:	47a0      	blx	r4
}
10008d86:	b002      	add	sp, #8
10008d88:	bc1c      	pop	{r2, r3, r4}
10008d8a:	4690      	mov	r8, r2
10008d8c:	4699      	mov	r9, r3
10008d8e:	46a3      	mov	fp, r4
10008d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008d92:	46c0      	nop			; (mov r8, r8)
10008d94:	100091b1 	.word	0x100091b1
10008d98:	1000895d 	.word	0x1000895d
10008d9c:	10008415 	.word	0x10008415
10008da0:	100084a9 	.word	0x100084a9

10008da4 <ClearDisplay>:
	//! [deselect_slave]
	delay_us(1000);
}

void ClearDisplay(LCDSPIModule* module)
{
10008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008da6:	0007      	movs	r7, r0
	//! [select_slave]
	//spi_select_slave(&(module->LCD_spi_master_instance), &(module->LCD_slave), false);
	gpio_pin_set_output_level(PIN_LP_GPIO_16, true);
10008da8:	2101      	movs	r1, #1
10008daa:	2010      	movs	r0, #16
10008dac:	4d0a      	ldr	r5, [pc, #40]	; (10008dd8 <ClearDisplay+0x34>)
10008dae:	47a8      	blx	r5
	//! [select_slave]

	//! [delay]
	delay_us(5);
10008db0:	2005      	movs	r0, #5
10008db2:	4c0a      	ldr	r4, [pc, #40]	; (10008ddc <ClearDisplay+0x38>)
10008db4:	47a0      	blx	r4
	//! [delay]

	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x20);// M0=0 M1=0 M2=1 DMY=0
10008db6:	2120      	movs	r1, #32
10008db8:	0038      	movs	r0, r7
10008dba:	4e09      	ldr	r6, [pc, #36]	; (10008de0 <ClearDisplay+0x3c>)
10008dbc:	47b0      	blx	r6
	spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
10008dbe:	2100      	movs	r1, #0
10008dc0:	0038      	movs	r0, r7
10008dc2:	47b0      	blx	r6
	//! [write]
	//! [delay]
	delay_us(170);
10008dc4:	20aa      	movs	r0, #170	; 0xaa
10008dc6:	47a0      	blx	r4
	//! [delay]
	//! [deselect_slave]
	//spi_select_slave(&(module->LCD_spi_master_instance), &(module->LCD_slave), true);
	gpio_pin_set_output_level(PIN_LP_GPIO_16, false);
10008dc8:	2100      	movs	r1, #0
10008dca:	2010      	movs	r0, #16
10008dcc:	47a8      	blx	r5
	//! [deselect_slave]
	delay_us(1000);
10008dce:	20fa      	movs	r0, #250	; 0xfa
10008dd0:	0080      	lsls	r0, r0, #2
10008dd2:	47a0      	blx	r4
}
10008dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008dd6:	46c0      	nop			; (mov r8, r8)
10008dd8:	100091b1 	.word	0x100091b1
10008ddc:	1000895d 	.word	0x1000895d
10008de0:	10008415 	.word	0x10008415

10008de4 <ClearBuffer>:

void ClearBuffer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
10008de4:	23c0      	movs	r3, #192	; 0xc0
10008de6:	015b      	lsls	r3, r3, #5
10008de8:	18c1      	adds	r1, r0, r3
	for(uint8_t i=0;i<FRAME_HEIGHT;i++)
		for(uint8_t j=0;j<FRAME_WIDTH;j++)
			frameBuffer[i][j] = 0xFF;
10008dea:	22ff      	movs	r2, #255	; 0xff
10008dec:	e006      	b.n	10008dfc <ClearBuffer+0x18>
10008dee:	7002      	strb	r2, [r0, #0]
10008df0:	3001      	adds	r0, #1
}

void ClearBuffer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
	for(uint8_t i=0;i<FRAME_HEIGHT;i++)
		for(uint8_t j=0;j<FRAME_WIDTH;j++)
10008df2:	4298      	cmp	r0, r3
10008df4:	d1fb      	bne.n	10008dee <ClearBuffer+0xa>
10008df6:	0018      	movs	r0, r3
	delay_us(1000);
}

void ClearBuffer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
	for(uint8_t i=0;i<FRAME_HEIGHT;i++)
10008df8:	4299      	cmp	r1, r3
10008dfa:	d002      	beq.n	10008e02 <ClearBuffer+0x1e>
10008dfc:	0003      	movs	r3, r0
10008dfe:	3330      	adds	r3, #48	; 0x30
10008e00:	e7f5      	b.n	10008dee <ClearBuffer+0xa>
		for(uint8_t j=0;j<FRAME_WIDTH;j++)
			frameBuffer[i][j] = 0xFF;

10008e02:	4770      	bx	lr

10008e04 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008e04:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10008e06:	4b0d      	ldr	r3, [pc, #52]	; (10008e3c <dualtimer_isr_handler+0x38>)
10008e08:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008e0a:	2b00      	cmp	r3, #0
10008e0c:	d007      	beq.n	10008e1e <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008e0e:	2201      	movs	r2, #1
10008e10:	4b0a      	ldr	r3, [pc, #40]	; (10008e3c <dualtimer_isr_handler+0x38>)
10008e12:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008e14:	4b0a      	ldr	r3, [pc, #40]	; (10008e40 <dualtimer_isr_handler+0x3c>)
10008e16:	681b      	ldr	r3, [r3, #0]
10008e18:	2b00      	cmp	r3, #0
10008e1a:	d000      	beq.n	10008e1e <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008e1c:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008e1e:	2334      	movs	r3, #52	; 0x34
10008e20:	4a06      	ldr	r2, [pc, #24]	; (10008e3c <dualtimer_isr_handler+0x38>)
10008e22:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008e24:	2b00      	cmp	r3, #0
10008e26:	d007      	beq.n	10008e38 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008e28:	2101      	movs	r1, #1
10008e2a:	232c      	movs	r3, #44	; 0x2c
10008e2c:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008e2e:	4b05      	ldr	r3, [pc, #20]	; (10008e44 <dualtimer_isr_handler+0x40>)
10008e30:	681b      	ldr	r3, [r3, #0]
10008e32:	2b00      	cmp	r3, #0
10008e34:	d000      	beq.n	10008e38 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10008e36:	4798      	blx	r3
	}
}
10008e38:	bd10      	pop	{r4, pc}
10008e3a:	46c0      	nop			; (mov r8, r8)
10008e3c:	40001000 	.word	0x40001000
10008e40:	10013888 	.word	0x10013888
10008e44:	1001388c 	.word	0x1001388c

10008e48 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008e48:	2301      	movs	r3, #1
10008e4a:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008e4c:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008e4e:	2202      	movs	r2, #2
10008e50:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008e52:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008e54:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008e56:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008e58:	2200      	movs	r2, #0
10008e5a:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008e5c:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008e5e:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008e60:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008e62:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008e64:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
10008e66:	7602      	strb	r2, [r0, #24]
}
10008e68:	4770      	bx	lr
10008e6a:	46c0      	nop			; (mov r8, r8)

10008e6c <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008e6c:	2800      	cmp	r0, #0
10008e6e:	d102      	bne.n	10008e76 <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
10008e70:	4b02      	ldr	r3, [pc, #8]	; (10008e7c <dualtimer_get_value+0x10>)
10008e72:	6858      	ldr	r0, [r3, #4]
10008e74:	e001      	b.n	10008e7a <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
10008e76:	4b01      	ldr	r3, [pc, #4]	; (10008e7c <dualtimer_get_value+0x10>)
10008e78:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
10008e7a:	4770      	bx	lr
10008e7c:	40001000 	.word	0x40001000

10008e80 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10008e80:	2800      	cmp	r0, #0
10008e82:	d107      	bne.n	10008e94 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008e84:	2900      	cmp	r1, #0
10008e86:	d102      	bne.n	10008e8e <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
10008e88:	4b06      	ldr	r3, [pc, #24]	; (10008ea4 <dualtimer_set_counter+0x24>)
10008e8a:	601a      	str	r2, [r3, #0]
10008e8c:	e009      	b.n	10008ea2 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
10008e8e:	4b05      	ldr	r3, [pc, #20]	; (10008ea4 <dualtimer_set_counter+0x24>)
10008e90:	619a      	str	r2, [r3, #24]
10008e92:	e006      	b.n	10008ea2 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008e94:	2900      	cmp	r1, #0
10008e96:	d102      	bne.n	10008e9e <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10008e98:	4b02      	ldr	r3, [pc, #8]	; (10008ea4 <dualtimer_set_counter+0x24>)
10008e9a:	621a      	str	r2, [r3, #32]
10008e9c:	e001      	b.n	10008ea2 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008e9e:	4b01      	ldr	r3, [pc, #4]	; (10008ea4 <dualtimer_set_counter+0x24>)
10008ea0:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10008ea2:	4770      	bx	lr
10008ea4:	40001000 	.word	0x40001000

10008ea8 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008ea8:	2800      	cmp	r0, #0
10008eaa:	d105      	bne.n	10008eb8 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008eac:	4a06      	ldr	r2, [pc, #24]	; (10008ec8 <dualtimer_enable+0x20>)
10008eae:	7a11      	ldrb	r1, [r2, #8]
10008eb0:	2380      	movs	r3, #128	; 0x80
10008eb2:	430b      	orrs	r3, r1
10008eb4:	7213      	strb	r3, [r2, #8]
10008eb6:	e005      	b.n	10008ec4 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008eb8:	4903      	ldr	r1, [pc, #12]	; (10008ec8 <dualtimer_enable+0x20>)
10008eba:	2228      	movs	r2, #40	; 0x28
10008ebc:	5c88      	ldrb	r0, [r1, r2]
10008ebe:	2380      	movs	r3, #128	; 0x80
10008ec0:	4303      	orrs	r3, r0
10008ec2:	548b      	strb	r3, [r1, r2]
	}
}
10008ec4:	4770      	bx	lr
10008ec6:	46c0      	nop			; (mov r8, r8)
10008ec8:	40001000 	.word	0x40001000

10008ecc <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10008ecc:	b570      	push	{r4, r5, r6, lr}
10008ece:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008ed0:	2004      	movs	r0, #4
10008ed2:	4b39      	ldr	r3, [pc, #228]	; (10008fb8 <dualtimer_init+0xec>)
10008ed4:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008ed6:	7823      	ldrb	r3, [r4, #0]
10008ed8:	2b00      	cmp	r3, #0
10008eda:	d102      	bne.n	10008ee2 <dualtimer_init+0x16>
10008edc:	7b23      	ldrb	r3, [r4, #12]
10008ede:	2b00      	cmp	r3, #0
10008ee0:	d065      	beq.n	10008fae <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008ee2:	4936      	ldr	r1, [pc, #216]	; (10008fbc <dualtimer_init+0xf0>)
10008ee4:	68ca      	ldr	r2, [r1, #12]
10008ee6:	2320      	movs	r3, #32
10008ee8:	4313      	orrs	r3, r2
10008eea:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008eec:	7e22      	ldrb	r2, [r4, #24]
10008eee:	698b      	ldr	r3, [r1, #24]
10008ef0:	2003      	movs	r0, #3
10008ef2:	4002      	ands	r2, r0
10008ef4:	0112      	lsls	r2, r2, #4
10008ef6:	302d      	adds	r0, #45	; 0x2d
10008ef8:	4383      	bics	r3, r0
10008efa:	4313      	orrs	r3, r2
10008efc:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008efe:	7823      	ldrb	r3, [r4, #0]
10008f00:	2b00      	cmp	r3, #0
10008f02:	d026      	beq.n	10008f52 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008f04:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008f06:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008f08:	2b00      	cmp	r3, #0
10008f0a:	d003      	beq.n	10008f14 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008f0c:	3b02      	subs	r3, #2
10008f0e:	425d      	negs	r5, r3
10008f10:	415d      	adcs	r5, r3
10008f12:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10008f14:	78a2      	ldrb	r2, [r4, #2]
10008f16:	0052      	lsls	r2, r2, #1
10008f18:	2502      	movs	r5, #2
10008f1a:	402a      	ands	r2, r5
10008f1c:	78e3      	ldrb	r3, [r4, #3]
10008f1e:	009b      	lsls	r3, r3, #2
10008f20:	350a      	adds	r5, #10
10008f22:	402b      	ands	r3, r5
10008f24:	431a      	orrs	r2, r3
10008f26:	0015      	movs	r5, r2
10008f28:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008f2a:	7923      	ldrb	r3, [r4, #4]
10008f2c:	2b00      	cmp	r3, #0
10008f2e:	d001      	beq.n	10008f34 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008f30:	2320      	movs	r3, #32
10008f32:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008f34:	4b22      	ldr	r3, [pc, #136]	; (10008fc0 <dualtimer_init+0xf4>)
10008f36:	68a2      	ldr	r2, [r4, #8]
10008f38:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008f3a:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008f3c:	491f      	ldr	r1, [pc, #124]	; (10008fbc <dualtimer_init+0xf0>)
10008f3e:	22c4      	movs	r2, #196	; 0xc4
10008f40:	0052      	lsls	r2, r2, #1
10008f42:	5c88      	ldrb	r0, [r1, r2]
10008f44:	2301      	movs	r3, #1
10008f46:	4303      	orrs	r3, r0
10008f48:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
10008f4a:	2000      	movs	r0, #0
10008f4c:	4b1d      	ldr	r3, [pc, #116]	; (10008fc4 <dualtimer_init+0xf8>)
10008f4e:	4798      	blx	r3
10008f50:	e000      	b.n	10008f54 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008f52:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008f54:	7b23      	ldrb	r3, [r4, #12]
10008f56:	2b00      	cmp	r3, #0
10008f58:	d029      	beq.n	10008fae <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008f5a:	7b63      	ldrb	r3, [r4, #13]
10008f5c:	2b00      	cmp	r3, #0
10008f5e:	d005      	beq.n	10008f6c <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008f60:	2b01      	cmp	r3, #1
10008f62:	d005      	beq.n	10008f70 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008f64:	2b02      	cmp	r3, #2
10008f66:	d104      	bne.n	10008f72 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
10008f68:	2540      	movs	r5, #64	; 0x40
10008f6a:	e002      	b.n	10008f72 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008f6c:	2501      	movs	r5, #1
10008f6e:	e000      	b.n	10008f72 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008f70:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008f72:	7ba3      	ldrb	r3, [r4, #14]
10008f74:	005b      	lsls	r3, r3, #1
10008f76:	2102      	movs	r1, #2
10008f78:	4019      	ands	r1, r3
10008f7a:	7be2      	ldrb	r2, [r4, #15]
10008f7c:	0092      	lsls	r2, r2, #2
10008f7e:	230c      	movs	r3, #12
10008f80:	4013      	ands	r3, r2
10008f82:	430b      	orrs	r3, r1
10008f84:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008f86:	7c23      	ldrb	r3, [r4, #16]
10008f88:	2b00      	cmp	r3, #0
10008f8a:	d001      	beq.n	10008f90 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008f8c:	2320      	movs	r3, #32
10008f8e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008f90:	6962      	ldr	r2, [r4, #20]
10008f92:	4b0b      	ldr	r3, [pc, #44]	; (10008fc0 <dualtimer_init+0xf4>)
10008f94:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10008f96:	2228      	movs	r2, #40	; 0x28
10008f98:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
10008f9a:	4908      	ldr	r1, [pc, #32]	; (10008fbc <dualtimer_init+0xf0>)
10008f9c:	3261      	adds	r2, #97	; 0x61
10008f9e:	32ff      	adds	r2, #255	; 0xff
10008fa0:	5c88      	ldrb	r0, [r1, r2]
10008fa2:	2302      	movs	r3, #2
10008fa4:	4303      	orrs	r3, r0
10008fa6:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
10008fa8:	2001      	movs	r0, #1
10008faa:	4b06      	ldr	r3, [pc, #24]	; (10008fc4 <dualtimer_init+0xf8>)
10008fac:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10008fae:	4906      	ldr	r1, [pc, #24]	; (10008fc8 <dualtimer_init+0xfc>)
10008fb0:	201e      	movs	r0, #30
10008fb2:	4b06      	ldr	r3, [pc, #24]	; (10008fcc <dualtimer_init+0x100>)
10008fb4:	4798      	blx	r3
}
10008fb6:	bd70      	pop	{r4, r5, r6, pc}
10008fb8:	10009b2d 	.word	0x10009b2d
10008fbc:	4000b000 	.word	0x4000b000
10008fc0:	40001000 	.word	0x40001000
10008fc4:	10008ea9 	.word	0x10008ea9
10008fc8:	10008e05 	.word	0x10008e05
10008fcc:	10009f95 	.word	0x10009f95

10008fd0 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10008fd0:	2800      	cmp	r0, #0
10008fd2:	d102      	bne.n	10008fda <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
10008fd4:	4b02      	ldr	r3, [pc, #8]	; (10008fe0 <dualtimer_register_callback+0x10>)
10008fd6:	6019      	str	r1, [r3, #0]
10008fd8:	e001      	b.n	10008fde <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008fda:	4b02      	ldr	r3, [pc, #8]	; (10008fe4 <dualtimer_register_callback+0x14>)
10008fdc:	6019      	str	r1, [r3, #0]
	}
}
10008fde:	4770      	bx	lr
10008fe0:	10013888 	.word	0x10013888
10008fe4:	1001388c 	.word	0x1001388c

10008fe8 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008fe8:	2300      	movs	r3, #0
10008fea:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008fec:	2201      	movs	r2, #1
10008fee:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008ff0:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008ff2:	70c3      	strb	r3, [r0, #3]
}
10008ff4:	4770      	bx	lr
10008ff6:	46c0      	nop			; (mov r8, r8)

10008ff8 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008ff8:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
10008ffa:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008ffc:	2801      	cmp	r0, #1
10008ffe:	d800      	bhi.n	10009002 <gpio_pin_set_config+0xa>
10009000:	e0c8      	b.n	10009194 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10009002:	2807      	cmp	r0, #7
10009004:	d809      	bhi.n	1000901a <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009006:	4d64      	ldr	r5, [pc, #400]	; (10009198 <gpio_pin_set_config+0x1a0>)
10009008:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000900a:	3b10      	subs	r3, #16
1000900c:	4003      	ands	r3, r0
1000900e:	009b      	lsls	r3, r3, #2
10009010:	2407      	movs	r4, #7
10009012:	409c      	lsls	r4, r3
10009014:	43a2      	bics	r2, r4
10009016:	646a      	str	r2, [r5, #68]	; 0x44
10009018:	e029      	b.n	1000906e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000901a:	280f      	cmp	r0, #15
1000901c:	d809      	bhi.n	10009032 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000901e:	4d5e      	ldr	r5, [pc, #376]	; (10009198 <gpio_pin_set_config+0x1a0>)
10009020:	6caa      	ldr	r2, [r5, #72]	; 0x48
10009022:	2307      	movs	r3, #7
10009024:	4003      	ands	r3, r0
10009026:	009b      	lsls	r3, r3, #2
10009028:	2407      	movs	r4, #7
1000902a:	409c      	lsls	r4, r3
1000902c:	43a2      	bics	r2, r4
1000902e:	64aa      	str	r2, [r5, #72]	; 0x48
10009030:	e01d      	b.n	1000906e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
10009032:	2817      	cmp	r0, #23
10009034:	d809      	bhi.n	1000904a <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009036:	4d58      	ldr	r5, [pc, #352]	; (10009198 <gpio_pin_set_config+0x1a0>)
10009038:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000903a:	2307      	movs	r3, #7
1000903c:	4003      	ands	r3, r0
1000903e:	009b      	lsls	r3, r3, #2
10009040:	2407      	movs	r4, #7
10009042:	409c      	lsls	r4, r3
10009044:	43a2      	bics	r2, r4
10009046:	64ea      	str	r2, [r5, #76]	; 0x4c
10009048:	e011      	b.n	1000906e <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000904a:	0003      	movs	r3, r0
1000904c:	3b2c      	subs	r3, #44	; 0x2c
1000904e:	2b03      	cmp	r3, #3
10009050:	d80d      	bhi.n	1000906e <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
10009052:	4d52      	ldr	r5, [pc, #328]	; (1000919c <gpio_pin_set_config+0x1a4>)
10009054:	2482      	movs	r4, #130	; 0x82
10009056:	00e4      	lsls	r4, r4, #3
10009058:	5d2a      	ldrb	r2, [r5, r4]
1000905a:	0712      	lsls	r2, r2, #28
1000905c:	2601      	movs	r6, #1
1000905e:	409e      	lsls	r6, r3
10009060:	0f12      	lsrs	r2, r2, #28
10009062:	5d2b      	ldrb	r3, [r5, r4]
10009064:	43b2      	bics	r2, r6
10009066:	260f      	movs	r6, #15
10009068:	43b3      	bics	r3, r6
1000906a:	4313      	orrs	r3, r2
1000906c:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000906e:	0003      	movs	r3, r0
10009070:	3b1d      	subs	r3, #29
10009072:	2b02      	cmp	r3, #2
10009074:	d829      	bhi.n	100090ca <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
10009076:	784b      	ldrb	r3, [r1, #1]
10009078:	2b01      	cmp	r3, #1
1000907a:	d108      	bne.n	1000908e <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000907c:	4d47      	ldr	r5, [pc, #284]	; (1000919c <gpio_pin_set_config+0x1a4>)
1000907e:	7d2b      	ldrb	r3, [r5, #20]
10009080:	241f      	movs	r4, #31
10009082:	1a24      	subs	r4, r4, r0
10009084:	2201      	movs	r2, #1
10009086:	40a2      	lsls	r2, r4
10009088:	4393      	bics	r3, r2
1000908a:	752b      	strb	r3, [r5, #20]
1000908c:	e008      	b.n	100090a0 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000908e:	4c43      	ldr	r4, [pc, #268]	; (1000919c <gpio_pin_set_config+0x1a4>)
10009090:	7d25      	ldrb	r5, [r4, #20]
10009092:	221f      	movs	r2, #31
10009094:	1a12      	subs	r2, r2, r0
10009096:	2301      	movs	r3, #1
10009098:	4093      	lsls	r3, r2
1000909a:	432b      	orrs	r3, r5
1000909c:	b2db      	uxtb	r3, r3
1000909e:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
100090a0:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100090a2:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
100090a4:	2a00      	cmp	r2, #0
100090a6:	d075      	beq.n	10009194 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
100090a8:	493c      	ldr	r1, [pc, #240]	; (1000919c <gpio_pin_set_config+0x1a4>)
100090aa:	880c      	ldrh	r4, [r1, #0]
100090ac:	221f      	movs	r2, #31
100090ae:	1a10      	subs	r0, r2, r0
100090b0:	0080      	lsls	r0, r0, #2
100090b2:	3301      	adds	r3, #1
100090b4:	4083      	lsls	r3, r0
100090b6:	4323      	orrs	r3, r4
100090b8:	b29b      	uxth	r3, r3
100090ba:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
100090bc:	4a38      	ldr	r2, [pc, #224]	; (100091a0 <gpio_pin_set_config+0x1a8>)
100090be:	7811      	ldrb	r1, [r2, #0]
100090c0:	2302      	movs	r3, #2
100090c2:	430b      	orrs	r3, r1
100090c4:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100090c6:	2300      	movs	r3, #0
100090c8:	e064      	b.n	10009194 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
100090ca:	780a      	ldrb	r2, [r1, #0]
100090cc:	2a00      	cmp	r2, #0
100090ce:	d140      	bne.n	10009152 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
100090d0:	280f      	cmp	r0, #15
100090d2:	d808      	bhi.n	100090e6 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
100090d4:	2301      	movs	r3, #1
100090d6:	4083      	lsls	r3, r0
100090d8:	b29b      	uxth	r3, r3
100090da:	4a32      	ldr	r2, [pc, #200]	; (100091a4 <gpio_pin_set_config+0x1ac>)
100090dc:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100090de:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
100090e0:	281f      	cmp	r0, #31
100090e2:	d857      	bhi.n	10009194 <gpio_pin_set_config+0x19c>
100090e4:	e012      	b.n	1000910c <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
100090e6:	281f      	cmp	r0, #31
100090e8:	d807      	bhi.n	100090fa <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
100090ea:	220f      	movs	r2, #15
100090ec:	4002      	ands	r2, r0
100090ee:	2301      	movs	r3, #1
100090f0:	4093      	lsls	r3, r2
100090f2:	b29b      	uxth	r3, r3
100090f4:	4a2c      	ldr	r2, [pc, #176]	; (100091a8 <gpio_pin_set_config+0x1b0>)
100090f6:	8293      	strh	r3, [r2, #20]
100090f8:	e008      	b.n	1000910c <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
100090fa:	230f      	movs	r3, #15
100090fc:	4018      	ands	r0, r3
100090fe:	3b0e      	subs	r3, #14
10009100:	4083      	lsls	r3, r0
10009102:	b29b      	uxth	r3, r3
10009104:	4a29      	ldr	r2, [pc, #164]	; (100091ac <gpio_pin_set_config+0x1b4>)
10009106:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10009108:	2300      	movs	r3, #0
1000910a:	e043      	b.n	10009194 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000910c:	784b      	ldrb	r3, [r1, #1]
1000910e:	2b01      	cmp	r3, #1
10009110:	d00c      	beq.n	1000912c <gpio_pin_set_config+0x134>
10009112:	2b00      	cmp	r3, #0
10009114:	d002      	beq.n	1000911c <gpio_pin_set_config+0x124>
10009116:	2b02      	cmp	r3, #2
10009118:	d010      	beq.n	1000913c <gpio_pin_set_config+0x144>
1000911a:	e03a      	b.n	10009192 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000911c:	491e      	ldr	r1, [pc, #120]	; (10009198 <gpio_pin_set_config+0x1a0>)
1000911e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10009120:	2301      	movs	r3, #1
10009122:	4083      	lsls	r3, r0
10009124:	4313      	orrs	r3, r2
10009126:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10009128:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000912a:	e033      	b.n	10009194 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000912c:	491a      	ldr	r1, [pc, #104]	; (10009198 <gpio_pin_set_config+0x1a0>)
1000912e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10009130:	2201      	movs	r2, #1
10009132:	4082      	lsls	r2, r0
10009134:	4393      	bics	r3, r2
10009136:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10009138:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000913a:	e02b      	b.n	10009194 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000913c:	4b16      	ldr	r3, [pc, #88]	; (10009198 <gpio_pin_set_config+0x1a0>)
1000913e:	6d59      	ldr	r1, [r3, #84]	; 0x54
10009140:	2201      	movs	r2, #1
10009142:	4082      	lsls	r2, r0
10009144:	4311      	orrs	r1, r2
10009146:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10009148:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000914a:	4391      	bics	r1, r2
1000914c:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000914e:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10009150:	e020      	b.n	10009194 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10009152:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
10009154:	2a01      	cmp	r2, #1
10009156:	d11d      	bne.n	10009194 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
10009158:	280f      	cmp	r0, #15
1000915a:	d806      	bhi.n	1000916a <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000915c:	3301      	adds	r3, #1
1000915e:	4083      	lsls	r3, r0
10009160:	b29b      	uxth	r3, r3
10009162:	4a10      	ldr	r2, [pc, #64]	; (100091a4 <gpio_pin_set_config+0x1ac>)
10009164:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10009166:	2300      	movs	r3, #0
10009168:	e014      	b.n	10009194 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000916a:	281f      	cmp	r0, #31
1000916c:	d808      	bhi.n	10009180 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000916e:	230f      	movs	r3, #15
10009170:	4018      	ands	r0, r3
10009172:	3b0e      	subs	r3, #14
10009174:	4083      	lsls	r3, r0
10009176:	b29b      	uxth	r3, r3
10009178:	4a0b      	ldr	r2, [pc, #44]	; (100091a8 <gpio_pin_set_config+0x1b0>)
1000917a:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000917c:	2300      	movs	r3, #0
1000917e:	e009      	b.n	10009194 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
10009180:	230f      	movs	r3, #15
10009182:	4018      	ands	r0, r3
10009184:	3b0e      	subs	r3, #14
10009186:	4083      	lsls	r3, r0
10009188:	b29b      	uxth	r3, r3
1000918a:	4a08      	ldr	r2, [pc, #32]	; (100091ac <gpio_pin_set_config+0x1b4>)
1000918c:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000918e:	2300      	movs	r3, #0
10009190:	e000      	b.n	10009194 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
10009192:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
10009194:	0018      	movs	r0, r3
10009196:	bd70      	pop	{r4, r5, r6, pc}
10009198:	4000b000 	.word	0x4000b000
1000919c:	4000f000 	.word	0x4000f000
100091a0:	4000e000 	.word	0x4000e000
100091a4:	40010000 	.word	0x40010000
100091a8:	40011000 	.word	0x40011000
100091ac:	40013000 	.word	0x40013000

100091b0 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
100091b0:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
100091b2:	280f      	cmp	r0, #15
100091b4:	d810      	bhi.n	100091d8 <gpio_pin_set_output_level+0x28>
		if(level) {
100091b6:	2900      	cmp	r1, #0
100091b8:	d007      	beq.n	100091ca <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
100091ba:	4a1d      	ldr	r2, [pc, #116]	; (10009230 <gpio_pin_set_output_level+0x80>)
100091bc:	8891      	ldrh	r1, [r2, #4]
100091be:	2301      	movs	r3, #1
100091c0:	4083      	lsls	r3, r0
100091c2:	430b      	orrs	r3, r1
100091c4:	b29b      	uxth	r3, r3
100091c6:	8093      	strh	r3, [r2, #4]
100091c8:	e031      	b.n	1000922e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
100091ca:	4919      	ldr	r1, [pc, #100]	; (10009230 <gpio_pin_set_output_level+0x80>)
100091cc:	888b      	ldrh	r3, [r1, #4]
100091ce:	2201      	movs	r2, #1
100091d0:	4082      	lsls	r2, r0
100091d2:	4393      	bics	r3, r2
100091d4:	808b      	strh	r3, [r1, #4]
100091d6:	e02a      	b.n	1000922e <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
100091d8:	281f      	cmp	r0, #31
100091da:	d814      	bhi.n	10009206 <gpio_pin_set_output_level+0x56>
		if(level) {
100091dc:	2900      	cmp	r1, #0
100091de:	d009      	beq.n	100091f4 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
100091e0:	4914      	ldr	r1, [pc, #80]	; (10009234 <gpio_pin_set_output_level+0x84>)
100091e2:	888c      	ldrh	r4, [r1, #4]
100091e4:	220f      	movs	r2, #15
100091e6:	4010      	ands	r0, r2
100091e8:	2301      	movs	r3, #1
100091ea:	4083      	lsls	r3, r0
100091ec:	4323      	orrs	r3, r4
100091ee:	b29b      	uxth	r3, r3
100091f0:	808b      	strh	r3, [r1, #4]
100091f2:	e01c      	b.n	1000922e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
100091f4:	490f      	ldr	r1, [pc, #60]	; (10009234 <gpio_pin_set_output_level+0x84>)
100091f6:	888b      	ldrh	r3, [r1, #4]
100091f8:	220f      	movs	r2, #15
100091fa:	4010      	ands	r0, r2
100091fc:	3a0e      	subs	r2, #14
100091fe:	4082      	lsls	r2, r0
10009200:	4393      	bics	r3, r2
10009202:	808b      	strh	r3, [r1, #4]
10009204:	e013      	b.n	1000922e <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
10009206:	2900      	cmp	r1, #0
10009208:	d009      	beq.n	1000921e <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000920a:	490b      	ldr	r1, [pc, #44]	; (10009238 <gpio_pin_set_output_level+0x88>)
1000920c:	888c      	ldrh	r4, [r1, #4]
1000920e:	220f      	movs	r2, #15
10009210:	4010      	ands	r0, r2
10009212:	2301      	movs	r3, #1
10009214:	4083      	lsls	r3, r0
10009216:	4323      	orrs	r3, r4
10009218:	b29b      	uxth	r3, r3
1000921a:	808b      	strh	r3, [r1, #4]
1000921c:	e007      	b.n	1000922e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000921e:	4906      	ldr	r1, [pc, #24]	; (10009238 <gpio_pin_set_output_level+0x88>)
10009220:	888b      	ldrh	r3, [r1, #4]
10009222:	220f      	movs	r2, #15
10009224:	4010      	ands	r0, r2
10009226:	3a0e      	subs	r2, #14
10009228:	4082      	lsls	r2, r0
1000922a:	4393      	bics	r3, r2
1000922c:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000922e:	bd10      	pop	{r4, pc}
10009230:	40010000 	.word	0x40010000
10009234:	40011000 	.word	0x40011000
10009238:	40013000 	.word	0x40013000

1000923c <gpio_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle.
 */
void gpio_pin_toggle_output_level(const uint8_t gpio_pin)
{
	if (gpio_pin < 16) {
1000923c:	280f      	cmp	r0, #15
1000923e:	d807      	bhi.n	10009250 <gpio_pin_toggle_output_level+0x14>
		GPIO0->DATAOUT.reg ^= (1 << gpio_pin);
10009240:	4a0e      	ldr	r2, [pc, #56]	; (1000927c <gpio_pin_toggle_output_level+0x40>)
10009242:	8891      	ldrh	r1, [r2, #4]
10009244:	2301      	movs	r3, #1
10009246:	4083      	lsls	r3, r0
10009248:	404b      	eors	r3, r1
1000924a:	b29b      	uxth	r3, r3
1000924c:	8093      	strh	r3, [r2, #4]
1000924e:	e014      	b.n	1000927a <gpio_pin_toggle_output_level+0x3e>
	} else if (gpio_pin < 32) {
10009250:	281f      	cmp	r0, #31
10009252:	d809      	bhi.n	10009268 <gpio_pin_toggle_output_level+0x2c>
		GPIO1->DATAOUT.reg ^= (1 << (gpio_pin % 16));
10009254:	4a0a      	ldr	r2, [pc, #40]	; (10009280 <gpio_pin_toggle_output_level+0x44>)
10009256:	8891      	ldrh	r1, [r2, #4]
10009258:	230f      	movs	r3, #15
1000925a:	4018      	ands	r0, r3
1000925c:	3b0e      	subs	r3, #14
1000925e:	4083      	lsls	r3, r0
10009260:	404b      	eors	r3, r1
10009262:	b29b      	uxth	r3, r3
10009264:	8093      	strh	r3, [r2, #4]
10009266:	e008      	b.n	1000927a <gpio_pin_toggle_output_level+0x3e>
	} else {
		GPIO2->DATAOUT.reg ^= (1 << (gpio_pin % 16));
10009268:	4a06      	ldr	r2, [pc, #24]	; (10009284 <gpio_pin_toggle_output_level+0x48>)
1000926a:	8891      	ldrh	r1, [r2, #4]
1000926c:	230f      	movs	r3, #15
1000926e:	4018      	ands	r0, r3
10009270:	3b0e      	subs	r3, #14
10009272:	4083      	lsls	r3, r0
10009274:	404b      	eors	r3, r1
10009276:	b29b      	uxth	r3, r3
10009278:	8093      	strh	r3, [r2, #4]
	}
}
1000927a:	4770      	bx	lr
1000927c:	40010000 	.word	0x40010000
10009280:	40011000 	.word	0x40011000
10009284:	40013000 	.word	0x40013000

10009288 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10009288:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000928a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000928c:	23ff      	movs	r3, #255	; 0xff
1000928e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10009290:	2807      	cmp	r0, #7
10009292:	d833      	bhi.n	100092fc <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009294:	4a4e      	ldr	r2, [pc, #312]	; (100093d0 <gpio_pinmux_cofiguration+0x148>)
10009296:	6c54      	ldr	r4, [r2, #68]	; 0x44
10009298:	3bf8      	subs	r3, #248	; 0xf8
1000929a:	4003      	ands	r3, r0
1000929c:	009b      	lsls	r3, r3, #2
1000929e:	2607      	movs	r6, #7
100092a0:	409e      	lsls	r6, r3
100092a2:	43b4      	bics	r4, r6
100092a4:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100092a6:	6c54      	ldr	r4, [r2, #68]	; 0x44
100092a8:	000e      	movs	r6, r1
100092aa:	409e      	lsls	r6, r3
100092ac:	0033      	movs	r3, r6
100092ae:	4323      	orrs	r3, r4
100092b0:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
100092b2:	2901      	cmp	r1, #1
100092b4:	d000      	beq.n	100092b8 <gpio_pinmux_cofiguration+0x30>
100092b6:	e08a      	b.n	100093ce <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
100092b8:	2803      	cmp	r0, #3
100092ba:	d80f      	bhi.n	100092dc <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100092bc:	0011      	movs	r1, r2
100092be:	22d0      	movs	r2, #208	; 0xd0
100092c0:	0052      	lsls	r2, r2, #1
100092c2:	588c      	ldr	r4, [r1, r2]
100092c4:	2303      	movs	r3, #3
100092c6:	4018      	ands	r0, r3
100092c8:	00c0      	lsls	r0, r0, #3
100092ca:	333c      	adds	r3, #60	; 0x3c
100092cc:	4083      	lsls	r3, r0
100092ce:	439c      	bics	r4, r3
100092d0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100092d2:	588b      	ldr	r3, [r1, r2]
100092d4:	4085      	lsls	r5, r0
100092d6:	431d      	orrs	r5, r3
100092d8:	508d      	str	r5, [r1, r2]
100092da:	e078      	b.n	100093ce <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100092dc:	493c      	ldr	r1, [pc, #240]	; (100093d0 <gpio_pinmux_cofiguration+0x148>)
100092de:	22d2      	movs	r2, #210	; 0xd2
100092e0:	0052      	lsls	r2, r2, #1
100092e2:	588c      	ldr	r4, [r1, r2]
100092e4:	2303      	movs	r3, #3
100092e6:	4018      	ands	r0, r3
100092e8:	00c0      	lsls	r0, r0, #3
100092ea:	333c      	adds	r3, #60	; 0x3c
100092ec:	4083      	lsls	r3, r0
100092ee:	439c      	bics	r4, r3
100092f0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100092f2:	588b      	ldr	r3, [r1, r2]
100092f4:	4085      	lsls	r5, r0
100092f6:	431d      	orrs	r5, r3
100092f8:	508d      	str	r5, [r1, r2]
100092fa:	e068      	b.n	100093ce <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
100092fc:	280f      	cmp	r0, #15
100092fe:	d832      	bhi.n	10009366 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009300:	4a33      	ldr	r2, [pc, #204]	; (100093d0 <gpio_pinmux_cofiguration+0x148>)
10009302:	6c94      	ldr	r4, [r2, #72]	; 0x48
10009304:	2307      	movs	r3, #7
10009306:	4003      	ands	r3, r0
10009308:	009b      	lsls	r3, r3, #2
1000930a:	2607      	movs	r6, #7
1000930c:	409e      	lsls	r6, r3
1000930e:	43b4      	bics	r4, r6
10009310:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10009312:	6c94      	ldr	r4, [r2, #72]	; 0x48
10009314:	000e      	movs	r6, r1
10009316:	409e      	lsls	r6, r3
10009318:	0033      	movs	r3, r6
1000931a:	4323      	orrs	r3, r4
1000931c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000931e:	2901      	cmp	r1, #1
10009320:	d155      	bne.n	100093ce <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10009322:	280b      	cmp	r0, #11
10009324:	d80f      	bhi.n	10009346 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009326:	0011      	movs	r1, r2
10009328:	22d4      	movs	r2, #212	; 0xd4
1000932a:	0052      	lsls	r2, r2, #1
1000932c:	588c      	ldr	r4, [r1, r2]
1000932e:	2303      	movs	r3, #3
10009330:	4018      	ands	r0, r3
10009332:	00c0      	lsls	r0, r0, #3
10009334:	333c      	adds	r3, #60	; 0x3c
10009336:	4083      	lsls	r3, r0
10009338:	439c      	bics	r4, r3
1000933a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000933c:	588b      	ldr	r3, [r1, r2]
1000933e:	4085      	lsls	r5, r0
10009340:	431d      	orrs	r5, r3
10009342:	508d      	str	r5, [r1, r2]
10009344:	e043      	b.n	100093ce <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009346:	4922      	ldr	r1, [pc, #136]	; (100093d0 <gpio_pinmux_cofiguration+0x148>)
10009348:	22d6      	movs	r2, #214	; 0xd6
1000934a:	0052      	lsls	r2, r2, #1
1000934c:	588c      	ldr	r4, [r1, r2]
1000934e:	2303      	movs	r3, #3
10009350:	4018      	ands	r0, r3
10009352:	00c0      	lsls	r0, r0, #3
10009354:	333c      	adds	r3, #60	; 0x3c
10009356:	4083      	lsls	r3, r0
10009358:	439c      	bics	r4, r3
1000935a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000935c:	588b      	ldr	r3, [r1, r2]
1000935e:	4085      	lsls	r5, r0
10009360:	431d      	orrs	r5, r3
10009362:	508d      	str	r5, [r1, r2]
10009364:	e033      	b.n	100093ce <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
10009366:	2817      	cmp	r0, #23
10009368:	d831      	bhi.n	100093ce <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000936a:	4a19      	ldr	r2, [pc, #100]	; (100093d0 <gpio_pinmux_cofiguration+0x148>)
1000936c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000936e:	2307      	movs	r3, #7
10009370:	4003      	ands	r3, r0
10009372:	009b      	lsls	r3, r3, #2
10009374:	2607      	movs	r6, #7
10009376:	409e      	lsls	r6, r3
10009378:	43b4      	bics	r4, r6
1000937a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000937c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000937e:	000e      	movs	r6, r1
10009380:	409e      	lsls	r6, r3
10009382:	0033      	movs	r3, r6
10009384:	4323      	orrs	r3, r4
10009386:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10009388:	2901      	cmp	r1, #1
1000938a:	d120      	bne.n	100093ce <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000938c:	2813      	cmp	r0, #19
1000938e:	d80f      	bhi.n	100093b0 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009390:	0011      	movs	r1, r2
10009392:	22d8      	movs	r2, #216	; 0xd8
10009394:	0052      	lsls	r2, r2, #1
10009396:	588c      	ldr	r4, [r1, r2]
10009398:	2303      	movs	r3, #3
1000939a:	4018      	ands	r0, r3
1000939c:	00c0      	lsls	r0, r0, #3
1000939e:	333c      	adds	r3, #60	; 0x3c
100093a0:	4083      	lsls	r3, r0
100093a2:	439c      	bics	r4, r3
100093a4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100093a6:	588b      	ldr	r3, [r1, r2]
100093a8:	4085      	lsls	r5, r0
100093aa:	431d      	orrs	r5, r3
100093ac:	508d      	str	r5, [r1, r2]
100093ae:	e00e      	b.n	100093ce <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100093b0:	4a07      	ldr	r2, [pc, #28]	; (100093d0 <gpio_pinmux_cofiguration+0x148>)
100093b2:	23da      	movs	r3, #218	; 0xda
100093b4:	005b      	lsls	r3, r3, #1
100093b6:	58d1      	ldr	r1, [r2, r3]
100093b8:	2403      	movs	r4, #3
100093ba:	4020      	ands	r0, r4
100093bc:	00c0      	lsls	r0, r0, #3
100093be:	343c      	adds	r4, #60	; 0x3c
100093c0:	4084      	lsls	r4, r0
100093c2:	43a1      	bics	r1, r4
100093c4:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100093c6:	58d1      	ldr	r1, [r2, r3]
100093c8:	4085      	lsls	r5, r0
100093ca:	430d      	orrs	r5, r1
100093cc:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
100093ce:	bd70      	pop	{r4, r5, r6, pc}
100093d0:	4000b000 	.word	0x4000b000

100093d4 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
100093d4:	2801      	cmp	r0, #1
100093d6:	d00d      	beq.n	100093f4 <system_clock_config+0x20>
100093d8:	2800      	cmp	r0, #0
100093da:	d002      	beq.n	100093e2 <system_clock_config+0xe>
100093dc:	2802      	cmp	r0, #2
100093de:	d01c      	beq.n	1000941a <system_clock_config+0x46>
100093e0:	e02e      	b.n	10009440 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
100093e2:	4a18      	ldr	r2, [pc, #96]	; (10009444 <system_clock_config+0x70>)
100093e4:	6990      	ldr	r0, [r2, #24]
100093e6:	230c      	movs	r3, #12
100093e8:	4303      	orrs	r3, r0
100093ea:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
100093ec:	4a16      	ldr	r2, [pc, #88]	; (10009448 <system_clock_config+0x74>)
100093ee:	4b17      	ldr	r3, [pc, #92]	; (1000944c <system_clock_config+0x78>)
100093f0:	601a      	str	r2, [r3, #0]
			break;
100093f2:	e01a      	b.n	1000942a <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
100093f4:	4b13      	ldr	r3, [pc, #76]	; (10009444 <system_clock_config+0x70>)
100093f6:	6998      	ldr	r0, [r3, #24]
100093f8:	2208      	movs	r2, #8
100093fa:	4302      	orrs	r2, r0
100093fc:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
100093fe:	699a      	ldr	r2, [r3, #24]
10009400:	2004      	movs	r0, #4
10009402:	4382      	bics	r2, r0
10009404:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10009406:	4a12      	ldr	r2, [pc, #72]	; (10009450 <system_clock_config+0x7c>)
10009408:	6853      	ldr	r3, [r2, #4]
1000940a:	2080      	movs	r0, #128	; 0x80
1000940c:	0300      	lsls	r0, r0, #12
1000940e:	4303      	orrs	r3, r0
10009410:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10009412:	4a10      	ldr	r2, [pc, #64]	; (10009454 <system_clock_config+0x80>)
10009414:	4b0d      	ldr	r3, [pc, #52]	; (1000944c <system_clock_config+0x78>)
10009416:	601a      	str	r2, [r3, #0]
			break;
10009418:	e007      	b.n	1000942a <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000941a:	4a0a      	ldr	r2, [pc, #40]	; (10009444 <system_clock_config+0x70>)
1000941c:	6993      	ldr	r3, [r2, #24]
1000941e:	200c      	movs	r0, #12
10009420:	4383      	bics	r3, r0
10009422:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10009424:	4a08      	ldr	r2, [pc, #32]	; (10009448 <system_clock_config+0x74>)
10009426:	4b09      	ldr	r3, [pc, #36]	; (1000944c <system_clock_config+0x78>)
10009428:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000942a:	4b06      	ldr	r3, [pc, #24]	; (10009444 <system_clock_config+0x70>)
1000942c:	699a      	ldr	r2, [r3, #24]
1000942e:	2003      	movs	r0, #3
10009430:	4382      	bics	r2, r0
10009432:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
10009434:	699a      	ldr	r2, [r3, #24]
10009436:	4001      	ands	r1, r0
10009438:	4311      	orrs	r1, r2
1000943a:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000943c:	2000      	movs	r0, #0
1000943e:	e000      	b.n	10009442 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10009440:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
10009442:	4770      	bx	lr
10009444:	4000b000 	.word	0x4000b000
10009448:	018cba80 	.word	0x018cba80
1000944c:	10015338 	.word	0x10015338
10009450:	4000f000 	.word	0x4000f000
10009454:	001e8480 	.word	0x001e8480

10009458 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10009458:	4b01      	ldr	r3, [pc, #4]	; (10009460 <system_clock_get_value+0x8>)
1000945a:	6818      	ldr	r0, [r3, #0]
}
1000945c:	4770      	bx	lr
1000945e:	46c0      	nop			; (mov r8, r8)
10009460:	10015338 	.word	0x10015338

10009464 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10009464:	b500      	push	{lr}
	switch (peripheral) {
10009466:	2835      	cmp	r0, #53	; 0x35
10009468:	d900      	bls.n	1000946c <system_clock_peripheral_enable+0x8>
1000946a:	e1a2      	b.n	100097b2 <system_clock_peripheral_enable+0x34e>
1000946c:	0080      	lsls	r0, r0, #2
1000946e:	4bd2      	ldr	r3, [pc, #840]	; (100097b8 <system_clock_peripheral_enable+0x354>)
10009470:	581b      	ldr	r3, [r3, r0]
10009472:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009474:	4ad1      	ldr	r2, [pc, #836]	; (100097bc <system_clock_peripheral_enable+0x358>)
10009476:	68d1      	ldr	r1, [r2, #12]
10009478:	2302      	movs	r3, #2
1000947a:	430b      	orrs	r3, r1
1000947c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000947e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
10009480:	e198      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009482:	4ace      	ldr	r2, [pc, #824]	; (100097bc <system_clock_peripheral_enable+0x358>)
10009484:	68d1      	ldr	r1, [r2, #12]
10009486:	2304      	movs	r3, #4
10009488:	430b      	orrs	r3, r1
1000948a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000948c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000948e:	e191      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009490:	4aca      	ldr	r2, [pc, #808]	; (100097bc <system_clock_peripheral_enable+0x358>)
10009492:	68d1      	ldr	r1, [r2, #12]
10009494:	2308      	movs	r3, #8
10009496:	430b      	orrs	r3, r1
10009498:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000949a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000949c:	e18a      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000949e:	4ac7      	ldr	r2, [pc, #796]	; (100097bc <system_clock_peripheral_enable+0x358>)
100094a0:	68d1      	ldr	r1, [r2, #12]
100094a2:	2310      	movs	r3, #16
100094a4:	430b      	orrs	r3, r1
100094a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
100094aa:	e183      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094ac:	4ac3      	ldr	r2, [pc, #780]	; (100097bc <system_clock_peripheral_enable+0x358>)
100094ae:	68d1      	ldr	r1, [r2, #12]
100094b0:	2320      	movs	r3, #32
100094b2:	430b      	orrs	r3, r1
100094b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
100094b8:	e17c      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094ba:	4ac0      	ldr	r2, [pc, #768]	; (100097bc <system_clock_peripheral_enable+0x358>)
100094bc:	68d1      	ldr	r1, [r2, #12]
100094be:	2380      	movs	r3, #128	; 0x80
100094c0:	430b      	orrs	r3, r1
100094c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
100094c6:	e175      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094c8:	4abc      	ldr	r2, [pc, #752]	; (100097bc <system_clock_peripheral_enable+0x358>)
100094ca:	68d3      	ldr	r3, [r2, #12]
100094cc:	2180      	movs	r1, #128	; 0x80
100094ce:	0049      	lsls	r1, r1, #1
100094d0:	430b      	orrs	r3, r1
100094d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
100094d6:	e16d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094d8:	4ab8      	ldr	r2, [pc, #736]	; (100097bc <system_clock_peripheral_enable+0x358>)
100094da:	68d3      	ldr	r3, [r2, #12]
100094dc:	2180      	movs	r1, #128	; 0x80
100094de:	0109      	lsls	r1, r1, #4
100094e0:	430b      	orrs	r3, r1
100094e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
100094e6:	e165      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094e8:	4ab4      	ldr	r2, [pc, #720]	; (100097bc <system_clock_peripheral_enable+0x358>)
100094ea:	68d3      	ldr	r3, [r2, #12]
100094ec:	2180      	movs	r1, #128	; 0x80
100094ee:	0149      	lsls	r1, r1, #5
100094f0:	430b      	orrs	r3, r1
100094f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
100094f6:	e15d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094f8:	4ab0      	ldr	r2, [pc, #704]	; (100097bc <system_clock_peripheral_enable+0x358>)
100094fa:	68d3      	ldr	r3, [r2, #12]
100094fc:	2180      	movs	r1, #128	; 0x80
100094fe:	0189      	lsls	r1, r1, #6
10009500:	430b      	orrs	r3, r1
10009502:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009504:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
10009506:	e155      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009508:	4aac      	ldr	r2, [pc, #688]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000950a:	68d3      	ldr	r3, [r2, #12]
1000950c:	2180      	movs	r1, #128	; 0x80
1000950e:	01c9      	lsls	r1, r1, #7
10009510:	430b      	orrs	r3, r1
10009512:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009514:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
10009516:	e14d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009518:	4aa8      	ldr	r2, [pc, #672]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000951a:	68d3      	ldr	r3, [r2, #12]
1000951c:	2180      	movs	r1, #128	; 0x80
1000951e:	0209      	lsls	r1, r1, #8
10009520:	430b      	orrs	r3, r1
10009522:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009524:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
10009526:	e145      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009528:	4aa4      	ldr	r2, [pc, #656]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000952a:	68d3      	ldr	r3, [r2, #12]
1000952c:	2180      	movs	r1, #128	; 0x80
1000952e:	0249      	lsls	r1, r1, #9
10009530:	430b      	orrs	r3, r1
10009532:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009534:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
10009536:	e13d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009538:	4aa0      	ldr	r2, [pc, #640]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000953a:	68d3      	ldr	r3, [r2, #12]
1000953c:	2180      	movs	r1, #128	; 0x80
1000953e:	0289      	lsls	r1, r1, #10
10009540:	430b      	orrs	r3, r1
10009542:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009544:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10009546:	e135      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009548:	4a9c      	ldr	r2, [pc, #624]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000954a:	68d3      	ldr	r3, [r2, #12]
1000954c:	2180      	movs	r1, #128	; 0x80
1000954e:	02c9      	lsls	r1, r1, #11
10009550:	430b      	orrs	r3, r1
10009552:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009554:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10009556:	e12d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009558:	4a98      	ldr	r2, [pc, #608]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000955a:	68d3      	ldr	r3, [r2, #12]
1000955c:	2180      	movs	r1, #128	; 0x80
1000955e:	0309      	lsls	r1, r1, #12
10009560:	430b      	orrs	r3, r1
10009562:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009564:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10009566:	e125      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009568:	4a94      	ldr	r2, [pc, #592]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000956a:	68d3      	ldr	r3, [r2, #12]
1000956c:	2180      	movs	r1, #128	; 0x80
1000956e:	0349      	lsls	r1, r1, #13
10009570:	430b      	orrs	r3, r1
10009572:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009574:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10009576:	e11d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009578:	4a90      	ldr	r2, [pc, #576]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000957a:	68d3      	ldr	r3, [r2, #12]
1000957c:	2180      	movs	r1, #128	; 0x80
1000957e:	0389      	lsls	r1, r1, #14
10009580:	430b      	orrs	r3, r1
10009582:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009584:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10009586:	e115      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009588:	4a8c      	ldr	r2, [pc, #560]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000958a:	68d3      	ldr	r3, [r2, #12]
1000958c:	2180      	movs	r1, #128	; 0x80
1000958e:	03c9      	lsls	r1, r1, #15
10009590:	430b      	orrs	r3, r1
10009592:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009594:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10009596:	e10d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009598:	4a88      	ldr	r2, [pc, #544]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000959a:	68d3      	ldr	r3, [r2, #12]
1000959c:	2180      	movs	r1, #128	; 0x80
1000959e:	0409      	lsls	r1, r1, #16
100095a0:	430b      	orrs	r3, r1
100095a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
100095a6:	e105      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100095a8:	4a84      	ldr	r2, [pc, #528]	; (100097bc <system_clock_peripheral_enable+0x358>)
100095aa:	68d3      	ldr	r3, [r2, #12]
100095ac:	2180      	movs	r1, #128	; 0x80
100095ae:	0449      	lsls	r1, r1, #17
100095b0:	430b      	orrs	r3, r1
100095b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
100095b6:	e0fd      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100095b8:	4a80      	ldr	r2, [pc, #512]	; (100097bc <system_clock_peripheral_enable+0x358>)
100095ba:	68d3      	ldr	r3, [r2, #12]
100095bc:	2180      	movs	r1, #128	; 0x80
100095be:	0489      	lsls	r1, r1, #18
100095c0:	430b      	orrs	r3, r1
100095c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
100095c6:	e0f5      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100095c8:	4a7c      	ldr	r2, [pc, #496]	; (100097bc <system_clock_peripheral_enable+0x358>)
100095ca:	68d3      	ldr	r3, [r2, #12]
100095cc:	2180      	movs	r1, #128	; 0x80
100095ce:	04c9      	lsls	r1, r1, #19
100095d0:	430b      	orrs	r3, r1
100095d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
100095d6:	e0ed      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100095d8:	4a78      	ldr	r2, [pc, #480]	; (100097bc <system_clock_peripheral_enable+0x358>)
100095da:	68d3      	ldr	r3, [r2, #12]
100095dc:	2180      	movs	r1, #128	; 0x80
100095de:	0509      	lsls	r1, r1, #20
100095e0:	430b      	orrs	r3, r1
100095e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
100095e6:	e0e5      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100095e8:	4a74      	ldr	r2, [pc, #464]	; (100097bc <system_clock_peripheral_enable+0x358>)
100095ea:	68d3      	ldr	r3, [r2, #12]
100095ec:	2180      	movs	r1, #128	; 0x80
100095ee:	0549      	lsls	r1, r1, #21
100095f0:	430b      	orrs	r3, r1
100095f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
100095f6:	e0dd      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100095f8:	4a70      	ldr	r2, [pc, #448]	; (100097bc <system_clock_peripheral_enable+0x358>)
100095fa:	68d3      	ldr	r3, [r2, #12]
100095fc:	2180      	movs	r1, #128	; 0x80
100095fe:	0589      	lsls	r1, r1, #22
10009600:	430b      	orrs	r3, r1
10009602:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009604:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
10009606:	e0d5      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009608:	4a6c      	ldr	r2, [pc, #432]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000960a:	68d3      	ldr	r3, [r2, #12]
1000960c:	2180      	movs	r1, #128	; 0x80
1000960e:	05c9      	lsls	r1, r1, #23
10009610:	430b      	orrs	r3, r1
10009612:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009614:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10009616:	e0cd      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009618:	4a68      	ldr	r2, [pc, #416]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000961a:	6911      	ldr	r1, [r2, #16]
1000961c:	2301      	movs	r3, #1
1000961e:	430b      	orrs	r3, r1
10009620:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009622:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
10009624:	e0c6      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009626:	4a65      	ldr	r2, [pc, #404]	; (100097bc <system_clock_peripheral_enable+0x358>)
10009628:	6911      	ldr	r1, [r2, #16]
1000962a:	2302      	movs	r3, #2
1000962c:	430b      	orrs	r3, r1
1000962e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009630:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
10009632:	e0bf      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009634:	4a61      	ldr	r2, [pc, #388]	; (100097bc <system_clock_peripheral_enable+0x358>)
10009636:	6911      	ldr	r1, [r2, #16]
10009638:	2304      	movs	r3, #4
1000963a:	430b      	orrs	r3, r1
1000963c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000963e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
10009640:	e0b8      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009642:	4a5e      	ldr	r2, [pc, #376]	; (100097bc <system_clock_peripheral_enable+0x358>)
10009644:	6911      	ldr	r1, [r2, #16]
10009646:	2308      	movs	r3, #8
10009648:	430b      	orrs	r3, r1
1000964a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000964c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000964e:	e0b1      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009650:	4a5a      	ldr	r2, [pc, #360]	; (100097bc <system_clock_peripheral_enable+0x358>)
10009652:	6911      	ldr	r1, [r2, #16]
10009654:	2310      	movs	r3, #16
10009656:	430b      	orrs	r3, r1
10009658:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000965a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000965c:	e0aa      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000965e:	4a57      	ldr	r2, [pc, #348]	; (100097bc <system_clock_peripheral_enable+0x358>)
10009660:	6911      	ldr	r1, [r2, #16]
10009662:	2320      	movs	r3, #32
10009664:	430b      	orrs	r3, r1
10009666:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009668:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000966a:	e0a3      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000966c:	4a53      	ldr	r2, [pc, #332]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000966e:	6911      	ldr	r1, [r2, #16]
10009670:	2340      	movs	r3, #64	; 0x40
10009672:	430b      	orrs	r3, r1
10009674:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009676:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
10009678:	e09c      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000967a:	4a50      	ldr	r2, [pc, #320]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000967c:	6911      	ldr	r1, [r2, #16]
1000967e:	2380      	movs	r3, #128	; 0x80
10009680:	430b      	orrs	r3, r1
10009682:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009684:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
10009686:	e095      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009688:	4a4c      	ldr	r2, [pc, #304]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000968a:	6913      	ldr	r3, [r2, #16]
1000968c:	2180      	movs	r1, #128	; 0x80
1000968e:	0049      	lsls	r1, r1, #1
10009690:	430b      	orrs	r3, r1
10009692:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009694:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
10009696:	e08d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009698:	4a48      	ldr	r2, [pc, #288]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000969a:	6913      	ldr	r3, [r2, #16]
1000969c:	2180      	movs	r1, #128	; 0x80
1000969e:	0089      	lsls	r1, r1, #2
100096a0:	430b      	orrs	r3, r1
100096a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
100096a6:	e085      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096a8:	4a44      	ldr	r2, [pc, #272]	; (100097bc <system_clock_peripheral_enable+0x358>)
100096aa:	6913      	ldr	r3, [r2, #16]
100096ac:	2180      	movs	r1, #128	; 0x80
100096ae:	00c9      	lsls	r1, r1, #3
100096b0:	430b      	orrs	r3, r1
100096b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
100096b6:	e07d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096b8:	4a40      	ldr	r2, [pc, #256]	; (100097bc <system_clock_peripheral_enable+0x358>)
100096ba:	6913      	ldr	r3, [r2, #16]
100096bc:	2180      	movs	r1, #128	; 0x80
100096be:	0109      	lsls	r1, r1, #4
100096c0:	430b      	orrs	r3, r1
100096c2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
100096c6:	e075      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096c8:	4a3c      	ldr	r2, [pc, #240]	; (100097bc <system_clock_peripheral_enable+0x358>)
100096ca:	6913      	ldr	r3, [r2, #16]
100096cc:	2180      	movs	r1, #128	; 0x80
100096ce:	0149      	lsls	r1, r1, #5
100096d0:	430b      	orrs	r3, r1
100096d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
100096d6:	e06d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096d8:	4a38      	ldr	r2, [pc, #224]	; (100097bc <system_clock_peripheral_enable+0x358>)
100096da:	6913      	ldr	r3, [r2, #16]
100096dc:	2180      	movs	r1, #128	; 0x80
100096de:	0189      	lsls	r1, r1, #6
100096e0:	430b      	orrs	r3, r1
100096e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
100096e6:	e065      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096e8:	4a34      	ldr	r2, [pc, #208]	; (100097bc <system_clock_peripheral_enable+0x358>)
100096ea:	6913      	ldr	r3, [r2, #16]
100096ec:	2180      	movs	r1, #128	; 0x80
100096ee:	01c9      	lsls	r1, r1, #7
100096f0:	430b      	orrs	r3, r1
100096f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
100096f6:	e05d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096f8:	4a30      	ldr	r2, [pc, #192]	; (100097bc <system_clock_peripheral_enable+0x358>)
100096fa:	6913      	ldr	r3, [r2, #16]
100096fc:	2180      	movs	r1, #128	; 0x80
100096fe:	0209      	lsls	r1, r1, #8
10009700:	430b      	orrs	r3, r1
10009702:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009704:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10009706:	e055      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009708:	4a2c      	ldr	r2, [pc, #176]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000970a:	6913      	ldr	r3, [r2, #16]
1000970c:	2180      	movs	r1, #128	; 0x80
1000970e:	0249      	lsls	r1, r1, #9
10009710:	430b      	orrs	r3, r1
10009712:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009714:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10009716:	e04d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009718:	4a28      	ldr	r2, [pc, #160]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000971a:	6913      	ldr	r3, [r2, #16]
1000971c:	2180      	movs	r1, #128	; 0x80
1000971e:	0289      	lsls	r1, r1, #10
10009720:	430b      	orrs	r3, r1
10009722:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009724:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10009726:	e045      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009728:	4a24      	ldr	r2, [pc, #144]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000972a:	6913      	ldr	r3, [r2, #16]
1000972c:	2180      	movs	r1, #128	; 0x80
1000972e:	02c9      	lsls	r1, r1, #11
10009730:	430b      	orrs	r3, r1
10009732:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009734:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10009736:	e03d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009738:	4a20      	ldr	r2, [pc, #128]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000973a:	6913      	ldr	r3, [r2, #16]
1000973c:	2180      	movs	r1, #128	; 0x80
1000973e:	0309      	lsls	r1, r1, #12
10009740:	430b      	orrs	r3, r1
10009742:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009744:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10009746:	e035      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009748:	4a1c      	ldr	r2, [pc, #112]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000974a:	6913      	ldr	r3, [r2, #16]
1000974c:	2180      	movs	r1, #128	; 0x80
1000974e:	0349      	lsls	r1, r1, #13
10009750:	430b      	orrs	r3, r1
10009752:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009754:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10009756:	e02d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009758:	4a18      	ldr	r2, [pc, #96]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000975a:	6913      	ldr	r3, [r2, #16]
1000975c:	2180      	movs	r1, #128	; 0x80
1000975e:	0389      	lsls	r1, r1, #14
10009760:	430b      	orrs	r3, r1
10009762:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009764:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10009766:	e025      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009768:	4a14      	ldr	r2, [pc, #80]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000976a:	6913      	ldr	r3, [r2, #16]
1000976c:	2180      	movs	r1, #128	; 0x80
1000976e:	03c9      	lsls	r1, r1, #15
10009770:	430b      	orrs	r3, r1
10009772:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009774:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10009776:	e01d      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009778:	4a10      	ldr	r2, [pc, #64]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000977a:	6913      	ldr	r3, [r2, #16]
1000977c:	2180      	movs	r1, #128	; 0x80
1000977e:	0409      	lsls	r1, r1, #16
10009780:	430b      	orrs	r3, r1
10009782:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009784:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009786:	e015      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10009788:	4a0c      	ldr	r2, [pc, #48]	; (100097bc <system_clock_peripheral_enable+0x358>)
1000978a:	7d11      	ldrb	r1, [r2, #20]
1000978c:	2301      	movs	r3, #1
1000978e:	430b      	orrs	r3, r1
10009790:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009792:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
10009794:	e00e      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10009796:	4a09      	ldr	r2, [pc, #36]	; (100097bc <system_clock_peripheral_enable+0x358>)
10009798:	7d11      	ldrb	r1, [r2, #20]
1000979a:	2302      	movs	r3, #2
1000979c:	430b      	orrs	r3, r1
1000979e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
100097a2:	e007      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
100097a4:	4a05      	ldr	r2, [pc, #20]	; (100097bc <system_clock_peripheral_enable+0x358>)
100097a6:	7d11      	ldrb	r1, [r2, #20]
100097a8:	2304      	movs	r3, #4
100097aa:	430b      	orrs	r3, r1
100097ac:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
100097b0:	e000      	b.n	100097b4 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
100097b2:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
100097b4:	bd00      	pop	{pc}
100097b6:	46c0      	nop			; (mov r8, r8)
100097b8:	10012948 	.word	0x10012948
100097bc:	4000b000 	.word	0x4000b000

100097c0 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
100097c0:	b500      	push	{lr}
	switch (peripheral) {
100097c2:	2835      	cmp	r0, #53	; 0x35
100097c4:	d900      	bls.n	100097c8 <system_clock_peripheral_disable+0x8>
100097c6:	e17d      	b.n	10009ac4 <system_clock_peripheral_disable+0x304>
100097c8:	0080      	lsls	r0, r0, #2
100097ca:	4bbf      	ldr	r3, [pc, #764]	; (10009ac8 <system_clock_peripheral_disable+0x308>)
100097cc:	581b      	ldr	r3, [r3, r0]
100097ce:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100097d0:	4abe      	ldr	r2, [pc, #760]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100097d2:	68d3      	ldr	r3, [r2, #12]
100097d4:	2102      	movs	r1, #2
100097d6:	438b      	bics	r3, r1
100097d8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097da:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
100097dc:	e173      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100097de:	4abb      	ldr	r2, [pc, #748]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100097e0:	68d3      	ldr	r3, [r2, #12]
100097e2:	2104      	movs	r1, #4
100097e4:	438b      	bics	r3, r1
100097e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
100097ea:	e16c      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100097ec:	4ab7      	ldr	r2, [pc, #732]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100097ee:	68d3      	ldr	r3, [r2, #12]
100097f0:	2108      	movs	r1, #8
100097f2:	438b      	bics	r3, r1
100097f4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097f6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
100097f8:	e165      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100097fa:	4ab4      	ldr	r2, [pc, #720]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100097fc:	68d3      	ldr	r3, [r2, #12]
100097fe:	2110      	movs	r1, #16
10009800:	438b      	bics	r3, r1
10009802:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009804:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
10009806:	e15e      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009808:	4ab0      	ldr	r2, [pc, #704]	; (10009acc <system_clock_peripheral_disable+0x30c>)
1000980a:	68d3      	ldr	r3, [r2, #12]
1000980c:	2120      	movs	r1, #32
1000980e:	438b      	bics	r3, r1
10009810:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009812:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
10009814:	e157      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009816:	4aad      	ldr	r2, [pc, #692]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009818:	68d3      	ldr	r3, [r2, #12]
1000981a:	2180      	movs	r1, #128	; 0x80
1000981c:	438b      	bics	r3, r1
1000981e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009820:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10009822:	e150      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009824:	4aa9      	ldr	r2, [pc, #676]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009826:	68d1      	ldr	r1, [r2, #12]
10009828:	4ba9      	ldr	r3, [pc, #676]	; (10009ad0 <system_clock_peripheral_disable+0x310>)
1000982a:	400b      	ands	r3, r1
1000982c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000982e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
10009830:	e149      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009832:	4aa6      	ldr	r2, [pc, #664]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009834:	68d1      	ldr	r1, [r2, #12]
10009836:	4ba7      	ldr	r3, [pc, #668]	; (10009ad4 <system_clock_peripheral_disable+0x314>)
10009838:	400b      	ands	r3, r1
1000983a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000983c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000983e:	e142      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009840:	4aa2      	ldr	r2, [pc, #648]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009842:	68d1      	ldr	r1, [r2, #12]
10009844:	4ba4      	ldr	r3, [pc, #656]	; (10009ad8 <system_clock_peripheral_disable+0x318>)
10009846:	400b      	ands	r3, r1
10009848:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000984a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000984c:	e13b      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000984e:	4a9f      	ldr	r2, [pc, #636]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009850:	68d1      	ldr	r1, [r2, #12]
10009852:	4ba2      	ldr	r3, [pc, #648]	; (10009adc <system_clock_peripheral_disable+0x31c>)
10009854:	400b      	ands	r3, r1
10009856:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009858:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000985a:	e134      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000985c:	4a9b      	ldr	r2, [pc, #620]	; (10009acc <system_clock_peripheral_disable+0x30c>)
1000985e:	68d1      	ldr	r1, [r2, #12]
10009860:	4b9f      	ldr	r3, [pc, #636]	; (10009ae0 <system_clock_peripheral_disable+0x320>)
10009862:	400b      	ands	r3, r1
10009864:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009866:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
10009868:	e12d      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000986a:	4a98      	ldr	r2, [pc, #608]	; (10009acc <system_clock_peripheral_disable+0x30c>)
1000986c:	68d1      	ldr	r1, [r2, #12]
1000986e:	4b9d      	ldr	r3, [pc, #628]	; (10009ae4 <system_clock_peripheral_disable+0x324>)
10009870:	400b      	ands	r3, r1
10009872:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009874:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
10009876:	e126      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009878:	4a94      	ldr	r2, [pc, #592]	; (10009acc <system_clock_peripheral_disable+0x30c>)
1000987a:	68d1      	ldr	r1, [r2, #12]
1000987c:	4b9a      	ldr	r3, [pc, #616]	; (10009ae8 <system_clock_peripheral_disable+0x328>)
1000987e:	400b      	ands	r3, r1
10009880:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009882:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
10009884:	e11f      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009886:	4a91      	ldr	r2, [pc, #580]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009888:	68d1      	ldr	r1, [r2, #12]
1000988a:	4b98      	ldr	r3, [pc, #608]	; (10009aec <system_clock_peripheral_disable+0x32c>)
1000988c:	400b      	ands	r3, r1
1000988e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009890:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10009892:	e118      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009894:	4a8d      	ldr	r2, [pc, #564]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009896:	68d1      	ldr	r1, [r2, #12]
10009898:	4b95      	ldr	r3, [pc, #596]	; (10009af0 <system_clock_peripheral_disable+0x330>)
1000989a:	400b      	ands	r3, r1
1000989c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000989e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
100098a0:	e111      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098a2:	4a8a      	ldr	r2, [pc, #552]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100098a4:	68d1      	ldr	r1, [r2, #12]
100098a6:	4b93      	ldr	r3, [pc, #588]	; (10009af4 <system_clock_peripheral_disable+0x334>)
100098a8:	400b      	ands	r3, r1
100098aa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
100098ae:	e10a      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098b0:	4a86      	ldr	r2, [pc, #536]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100098b2:	68d1      	ldr	r1, [r2, #12]
100098b4:	4b90      	ldr	r3, [pc, #576]	; (10009af8 <system_clock_peripheral_disable+0x338>)
100098b6:	400b      	ands	r3, r1
100098b8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
100098bc:	e103      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098be:	4a83      	ldr	r2, [pc, #524]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100098c0:	68d1      	ldr	r1, [r2, #12]
100098c2:	4b8e      	ldr	r3, [pc, #568]	; (10009afc <system_clock_peripheral_disable+0x33c>)
100098c4:	400b      	ands	r3, r1
100098c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
100098ca:	e0fc      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098cc:	4a7f      	ldr	r2, [pc, #508]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100098ce:	68d1      	ldr	r1, [r2, #12]
100098d0:	4b8b      	ldr	r3, [pc, #556]	; (10009b00 <system_clock_peripheral_disable+0x340>)
100098d2:	400b      	ands	r3, r1
100098d4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
100098d8:	e0f5      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098da:	4a7c      	ldr	r2, [pc, #496]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100098dc:	68d1      	ldr	r1, [r2, #12]
100098de:	4b89      	ldr	r3, [pc, #548]	; (10009b04 <system_clock_peripheral_disable+0x344>)
100098e0:	400b      	ands	r3, r1
100098e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
100098e6:	e0ee      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098e8:	4a78      	ldr	r2, [pc, #480]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100098ea:	68d1      	ldr	r1, [r2, #12]
100098ec:	4b86      	ldr	r3, [pc, #536]	; (10009b08 <system_clock_peripheral_disable+0x348>)
100098ee:	400b      	ands	r3, r1
100098f0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
100098f4:	e0e7      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098f6:	4a75      	ldr	r2, [pc, #468]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100098f8:	68d1      	ldr	r1, [r2, #12]
100098fa:	4b84      	ldr	r3, [pc, #528]	; (10009b0c <system_clock_peripheral_disable+0x34c>)
100098fc:	400b      	ands	r3, r1
100098fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009900:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10009902:	e0e0      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009904:	4a71      	ldr	r2, [pc, #452]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009906:	68d1      	ldr	r1, [r2, #12]
10009908:	4b81      	ldr	r3, [pc, #516]	; (10009b10 <system_clock_peripheral_disable+0x350>)
1000990a:	400b      	ands	r3, r1
1000990c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000990e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
10009910:	e0d9      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009912:	4a6e      	ldr	r2, [pc, #440]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009914:	68d1      	ldr	r1, [r2, #12]
10009916:	4b7f      	ldr	r3, [pc, #508]	; (10009b14 <system_clock_peripheral_disable+0x354>)
10009918:	400b      	ands	r3, r1
1000991a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000991c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000991e:	e0d2      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009920:	4a6a      	ldr	r2, [pc, #424]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009922:	68d1      	ldr	r1, [r2, #12]
10009924:	4b7c      	ldr	r3, [pc, #496]	; (10009b18 <system_clock_peripheral_disable+0x358>)
10009926:	400b      	ands	r3, r1
10009928:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000992a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000992c:	e0cb      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000992e:	4a67      	ldr	r2, [pc, #412]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009930:	68d1      	ldr	r1, [r2, #12]
10009932:	4b7a      	ldr	r3, [pc, #488]	; (10009b1c <system_clock_peripheral_disable+0x35c>)
10009934:	400b      	ands	r3, r1
10009936:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009938:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000993a:	e0c4      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000993c:	4a63      	ldr	r2, [pc, #396]	; (10009acc <system_clock_peripheral_disable+0x30c>)
1000993e:	68d1      	ldr	r1, [r2, #12]
10009940:	4b77      	ldr	r3, [pc, #476]	; (10009b20 <system_clock_peripheral_disable+0x360>)
10009942:	400b      	ands	r3, r1
10009944:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009946:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10009948:	e0bd      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000994a:	4a60      	ldr	r2, [pc, #384]	; (10009acc <system_clock_peripheral_disable+0x30c>)
1000994c:	6913      	ldr	r3, [r2, #16]
1000994e:	2101      	movs	r1, #1
10009950:	438b      	bics	r3, r1
10009952:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009954:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
10009956:	e0b6      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009958:	4a5c      	ldr	r2, [pc, #368]	; (10009acc <system_clock_peripheral_disable+0x30c>)
1000995a:	6913      	ldr	r3, [r2, #16]
1000995c:	2102      	movs	r1, #2
1000995e:	438b      	bics	r3, r1
10009960:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009962:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
10009964:	e0af      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009966:	4a59      	ldr	r2, [pc, #356]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009968:	6913      	ldr	r3, [r2, #16]
1000996a:	2104      	movs	r1, #4
1000996c:	438b      	bics	r3, r1
1000996e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009970:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
10009972:	e0a8      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009974:	4a55      	ldr	r2, [pc, #340]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009976:	6913      	ldr	r3, [r2, #16]
10009978:	2108      	movs	r1, #8
1000997a:	438b      	bics	r3, r1
1000997c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000997e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
10009980:	e0a1      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009982:	4a52      	ldr	r2, [pc, #328]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009984:	6913      	ldr	r3, [r2, #16]
10009986:	2110      	movs	r1, #16
10009988:	438b      	bics	r3, r1
1000998a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000998c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000998e:	e09a      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009990:	4a4e      	ldr	r2, [pc, #312]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009992:	6913      	ldr	r3, [r2, #16]
10009994:	2120      	movs	r1, #32
10009996:	438b      	bics	r3, r1
10009998:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000999a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000999c:	e093      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000999e:	4a4b      	ldr	r2, [pc, #300]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100099a0:	6913      	ldr	r3, [r2, #16]
100099a2:	2140      	movs	r1, #64	; 0x40
100099a4:	438b      	bics	r3, r1
100099a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
100099aa:	e08c      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099ac:	4a47      	ldr	r2, [pc, #284]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100099ae:	6913      	ldr	r3, [r2, #16]
100099b0:	2180      	movs	r1, #128	; 0x80
100099b2:	438b      	bics	r3, r1
100099b4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
100099b8:	e085      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099ba:	4a44      	ldr	r2, [pc, #272]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100099bc:	6911      	ldr	r1, [r2, #16]
100099be:	4b44      	ldr	r3, [pc, #272]	; (10009ad0 <system_clock_peripheral_disable+0x310>)
100099c0:	400b      	ands	r3, r1
100099c2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
100099c6:	e07e      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099c8:	4a40      	ldr	r2, [pc, #256]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100099ca:	6911      	ldr	r1, [r2, #16]
100099cc:	4b55      	ldr	r3, [pc, #340]	; (10009b24 <system_clock_peripheral_disable+0x364>)
100099ce:	400b      	ands	r3, r1
100099d0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
100099d4:	e077      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099d6:	4a3d      	ldr	r2, [pc, #244]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100099d8:	6911      	ldr	r1, [r2, #16]
100099da:	4b53      	ldr	r3, [pc, #332]	; (10009b28 <system_clock_peripheral_disable+0x368>)
100099dc:	400b      	ands	r3, r1
100099de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
100099e2:	e070      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099e4:	4a39      	ldr	r2, [pc, #228]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100099e6:	6911      	ldr	r1, [r2, #16]
100099e8:	4b3a      	ldr	r3, [pc, #232]	; (10009ad4 <system_clock_peripheral_disable+0x314>)
100099ea:	400b      	ands	r3, r1
100099ec:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
100099f0:	e069      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099f2:	4a36      	ldr	r2, [pc, #216]	; (10009acc <system_clock_peripheral_disable+0x30c>)
100099f4:	6911      	ldr	r1, [r2, #16]
100099f6:	4b38      	ldr	r3, [pc, #224]	; (10009ad8 <system_clock_peripheral_disable+0x318>)
100099f8:	400b      	ands	r3, r1
100099fa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
100099fe:	e062      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a00:	4a32      	ldr	r2, [pc, #200]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a02:	6911      	ldr	r1, [r2, #16]
10009a04:	4b35      	ldr	r3, [pc, #212]	; (10009adc <system_clock_peripheral_disable+0x31c>)
10009a06:	400b      	ands	r3, r1
10009a08:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a0a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10009a0c:	e05b      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a0e:	4a2f      	ldr	r2, [pc, #188]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a10:	6911      	ldr	r1, [r2, #16]
10009a12:	4b33      	ldr	r3, [pc, #204]	; (10009ae0 <system_clock_peripheral_disable+0x320>)
10009a14:	400b      	ands	r3, r1
10009a16:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
10009a1a:	e054      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a1c:	4a2b      	ldr	r2, [pc, #172]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a1e:	6911      	ldr	r1, [r2, #16]
10009a20:	4b30      	ldr	r3, [pc, #192]	; (10009ae4 <system_clock_peripheral_disable+0x324>)
10009a22:	400b      	ands	r3, r1
10009a24:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a26:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10009a28:	e04d      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a2a:	4a28      	ldr	r2, [pc, #160]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a2c:	6911      	ldr	r1, [r2, #16]
10009a2e:	4b2e      	ldr	r3, [pc, #184]	; (10009ae8 <system_clock_peripheral_disable+0x328>)
10009a30:	400b      	ands	r3, r1
10009a32:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10009a36:	e046      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a38:	4a24      	ldr	r2, [pc, #144]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a3a:	6911      	ldr	r1, [r2, #16]
10009a3c:	4b2b      	ldr	r3, [pc, #172]	; (10009aec <system_clock_peripheral_disable+0x32c>)
10009a3e:	400b      	ands	r3, r1
10009a40:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a42:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10009a44:	e03f      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a46:	4a21      	ldr	r2, [pc, #132]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a48:	6911      	ldr	r1, [r2, #16]
10009a4a:	4b29      	ldr	r3, [pc, #164]	; (10009af0 <system_clock_peripheral_disable+0x330>)
10009a4c:	400b      	ands	r3, r1
10009a4e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10009a52:	e038      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a54:	4a1d      	ldr	r2, [pc, #116]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a56:	6911      	ldr	r1, [r2, #16]
10009a58:	4b26      	ldr	r3, [pc, #152]	; (10009af4 <system_clock_peripheral_disable+0x334>)
10009a5a:	400b      	ands	r3, r1
10009a5c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a5e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10009a60:	e031      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a62:	4a1a      	ldr	r2, [pc, #104]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a64:	6911      	ldr	r1, [r2, #16]
10009a66:	4b24      	ldr	r3, [pc, #144]	; (10009af8 <system_clock_peripheral_disable+0x338>)
10009a68:	400b      	ands	r3, r1
10009a6a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10009a6e:	e02a      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a70:	4a16      	ldr	r2, [pc, #88]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a72:	6911      	ldr	r1, [r2, #16]
10009a74:	4b21      	ldr	r3, [pc, #132]	; (10009afc <system_clock_peripheral_disable+0x33c>)
10009a76:	400b      	ands	r3, r1
10009a78:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a7a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10009a7c:	e023      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a7e:	4a13      	ldr	r2, [pc, #76]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a80:	6911      	ldr	r1, [r2, #16]
10009a82:	4b1f      	ldr	r3, [pc, #124]	; (10009b00 <system_clock_peripheral_disable+0x340>)
10009a84:	400b      	ands	r3, r1
10009a86:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10009a8a:	e01c      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a8c:	4a0f      	ldr	r2, [pc, #60]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a8e:	6911      	ldr	r1, [r2, #16]
10009a90:	4b1c      	ldr	r3, [pc, #112]	; (10009b04 <system_clock_peripheral_disable+0x344>)
10009a92:	400b      	ands	r3, r1
10009a94:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a96:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009a98:	e015      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009a9a:	4a0c      	ldr	r2, [pc, #48]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009a9c:	7d13      	ldrb	r3, [r2, #20]
10009a9e:	2101      	movs	r1, #1
10009aa0:	438b      	bics	r3, r1
10009aa2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009aa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
10009aa6:	e00e      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009aa8:	4a08      	ldr	r2, [pc, #32]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009aaa:	7d13      	ldrb	r3, [r2, #20]
10009aac:	2102      	movs	r1, #2
10009aae:	438b      	bics	r3, r1
10009ab0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ab2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
10009ab4:	e007      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009ab6:	4a05      	ldr	r2, [pc, #20]	; (10009acc <system_clock_peripheral_disable+0x30c>)
10009ab8:	7d13      	ldrb	r3, [r2, #20]
10009aba:	2104      	movs	r1, #4
10009abc:	438b      	bics	r3, r1
10009abe:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ac0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
10009ac2:	e000      	b.n	10009ac6 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
10009ac4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009ac6:	bd00      	pop	{pc}
10009ac8:	10012a20 	.word	0x10012a20
10009acc:	4000b000 	.word	0x4000b000
10009ad0:	fffffeff 	.word	0xfffffeff
10009ad4:	fffff7ff 	.word	0xfffff7ff
10009ad8:	ffffefff 	.word	0xffffefff
10009adc:	ffffdfff 	.word	0xffffdfff
10009ae0:	ffffbfff 	.word	0xffffbfff
10009ae4:	ffff7fff 	.word	0xffff7fff
10009ae8:	fffeffff 	.word	0xfffeffff
10009aec:	fffdffff 	.word	0xfffdffff
10009af0:	fffbffff 	.word	0xfffbffff
10009af4:	fff7ffff 	.word	0xfff7ffff
10009af8:	ffefffff 	.word	0xffefffff
10009afc:	ffdfffff 	.word	0xffdfffff
10009b00:	ffbfffff 	.word	0xffbfffff
10009b04:	ff7fffff 	.word	0xff7fffff
10009b08:	feffffff 	.word	0xfeffffff
10009b0c:	fdffffff 	.word	0xfdffffff
10009b10:	fbffffff 	.word	0xfbffffff
10009b14:	f7ffffff 	.word	0xf7ffffff
10009b18:	efffffff 	.word	0xefffffff
10009b1c:	dfffffff 	.word	0xdfffffff
10009b20:	bfffffff 	.word	0xbfffffff
10009b24:	fffffdff 	.word	0xfffffdff
10009b28:	fffffbff 	.word	0xfffffbff

10009b2c <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10009b2c:	b500      	push	{lr}
	switch (peripheral) {
10009b2e:	2843      	cmp	r0, #67	; 0x43
10009b30:	d900      	bls.n	10009b34 <system_peripheral_reset+0x8>
10009b32:	e223      	b.n	10009f7c <system_peripheral_reset+0x450>
10009b34:	0080      	lsls	r0, r0, #2
10009b36:	4be0      	ldr	r3, [pc, #896]	; (10009eb8 <system_peripheral_reset+0x38c>)
10009b38:	581b      	ldr	r3, [r3, r0]
10009b3a:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b3c:	4bdf      	ldr	r3, [pc, #892]	; (10009ebc <system_peripheral_reset+0x390>)
10009b3e:	6859      	ldr	r1, [r3, #4]
10009b40:	2202      	movs	r2, #2
10009b42:	4391      	bics	r1, r2
10009b44:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b46:	6859      	ldr	r1, [r3, #4]
10009b48:	430a      	orrs	r2, r1
10009b4a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b4c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10009b4e:	e216      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b50:	4bda      	ldr	r3, [pc, #872]	; (10009ebc <system_peripheral_reset+0x390>)
10009b52:	6859      	ldr	r1, [r3, #4]
10009b54:	2204      	movs	r2, #4
10009b56:	4391      	bics	r1, r2
10009b58:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b5a:	6859      	ldr	r1, [r3, #4]
10009b5c:	430a      	orrs	r2, r1
10009b5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b60:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
10009b62:	e20c      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b64:	4bd5      	ldr	r3, [pc, #852]	; (10009ebc <system_peripheral_reset+0x390>)
10009b66:	6859      	ldr	r1, [r3, #4]
10009b68:	2208      	movs	r2, #8
10009b6a:	4391      	bics	r1, r2
10009b6c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b6e:	6859      	ldr	r1, [r3, #4]
10009b70:	430a      	orrs	r2, r1
10009b72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b74:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
10009b76:	e202      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b78:	4bd0      	ldr	r3, [pc, #832]	; (10009ebc <system_peripheral_reset+0x390>)
10009b7a:	6859      	ldr	r1, [r3, #4]
10009b7c:	2210      	movs	r2, #16
10009b7e:	4391      	bics	r1, r2
10009b80:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b82:	6859      	ldr	r1, [r3, #4]
10009b84:	430a      	orrs	r2, r1
10009b86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b88:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
10009b8a:	e1f8      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b8c:	4bcb      	ldr	r3, [pc, #812]	; (10009ebc <system_peripheral_reset+0x390>)
10009b8e:	6859      	ldr	r1, [r3, #4]
10009b90:	2220      	movs	r2, #32
10009b92:	4391      	bics	r1, r2
10009b94:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b96:	6859      	ldr	r1, [r3, #4]
10009b98:	430a      	orrs	r2, r1
10009b9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b9c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
10009b9e:	e1ee      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009ba0:	4bc6      	ldr	r3, [pc, #792]	; (10009ebc <system_peripheral_reset+0x390>)
10009ba2:	6859      	ldr	r1, [r3, #4]
10009ba4:	2240      	movs	r2, #64	; 0x40
10009ba6:	4391      	bics	r1, r2
10009ba8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009baa:	6859      	ldr	r1, [r3, #4]
10009bac:	430a      	orrs	r2, r1
10009bae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bb0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
10009bb2:	e1e4      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009bb4:	4bc1      	ldr	r3, [pc, #772]	; (10009ebc <system_peripheral_reset+0x390>)
10009bb6:	6859      	ldr	r1, [r3, #4]
10009bb8:	2280      	movs	r2, #128	; 0x80
10009bba:	4391      	bics	r1, r2
10009bbc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009bbe:	6859      	ldr	r1, [r3, #4]
10009bc0:	430a      	orrs	r2, r1
10009bc2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bc4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
10009bc6:	e1da      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009bc8:	4bbc      	ldr	r3, [pc, #752]	; (10009ebc <system_peripheral_reset+0x390>)
10009bca:	6859      	ldr	r1, [r3, #4]
10009bcc:	4abc      	ldr	r2, [pc, #752]	; (10009ec0 <system_peripheral_reset+0x394>)
10009bce:	400a      	ands	r2, r1
10009bd0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009bd2:	685a      	ldr	r2, [r3, #4]
10009bd4:	2180      	movs	r1, #128	; 0x80
10009bd6:	0049      	lsls	r1, r1, #1
10009bd8:	430a      	orrs	r2, r1
10009bda:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bdc:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
10009bde:	e1ce      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009be0:	4bb6      	ldr	r3, [pc, #728]	; (10009ebc <system_peripheral_reset+0x390>)
10009be2:	6859      	ldr	r1, [r3, #4]
10009be4:	4ab7      	ldr	r2, [pc, #732]	; (10009ec4 <system_peripheral_reset+0x398>)
10009be6:	400a      	ands	r2, r1
10009be8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009bea:	685a      	ldr	r2, [r3, #4]
10009bec:	2180      	movs	r1, #128	; 0x80
10009bee:	0089      	lsls	r1, r1, #2
10009bf0:	430a      	orrs	r2, r1
10009bf2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bf4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
10009bf6:	e1c2      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009bf8:	4bb0      	ldr	r3, [pc, #704]	; (10009ebc <system_peripheral_reset+0x390>)
10009bfa:	6859      	ldr	r1, [r3, #4]
10009bfc:	4ab2      	ldr	r2, [pc, #712]	; (10009ec8 <system_peripheral_reset+0x39c>)
10009bfe:	400a      	ands	r2, r1
10009c00:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c02:	685a      	ldr	r2, [r3, #4]
10009c04:	2180      	movs	r1, #128	; 0x80
10009c06:	00c9      	lsls	r1, r1, #3
10009c08:	430a      	orrs	r2, r1
10009c0a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c0c:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10009c0e:	e1b6      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c10:	4baa      	ldr	r3, [pc, #680]	; (10009ebc <system_peripheral_reset+0x390>)
10009c12:	6859      	ldr	r1, [r3, #4]
10009c14:	4aad      	ldr	r2, [pc, #692]	; (10009ecc <system_peripheral_reset+0x3a0>)
10009c16:	400a      	ands	r2, r1
10009c18:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c1a:	685a      	ldr	r2, [r3, #4]
10009c1c:	2180      	movs	r1, #128	; 0x80
10009c1e:	0109      	lsls	r1, r1, #4
10009c20:	430a      	orrs	r2, r1
10009c22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c24:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
10009c26:	e1aa      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c28:	4ba4      	ldr	r3, [pc, #656]	; (10009ebc <system_peripheral_reset+0x390>)
10009c2a:	6859      	ldr	r1, [r3, #4]
10009c2c:	4aa8      	ldr	r2, [pc, #672]	; (10009ed0 <system_peripheral_reset+0x3a4>)
10009c2e:	400a      	ands	r2, r1
10009c30:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c32:	685a      	ldr	r2, [r3, #4]
10009c34:	2180      	movs	r1, #128	; 0x80
10009c36:	0149      	lsls	r1, r1, #5
10009c38:	430a      	orrs	r2, r1
10009c3a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c3c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
10009c3e:	e19e      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c40:	4b9e      	ldr	r3, [pc, #632]	; (10009ebc <system_peripheral_reset+0x390>)
10009c42:	6859      	ldr	r1, [r3, #4]
10009c44:	4aa3      	ldr	r2, [pc, #652]	; (10009ed4 <system_peripheral_reset+0x3a8>)
10009c46:	400a      	ands	r2, r1
10009c48:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c4a:	685a      	ldr	r2, [r3, #4]
10009c4c:	2180      	movs	r1, #128	; 0x80
10009c4e:	0189      	lsls	r1, r1, #6
10009c50:	430a      	orrs	r2, r1
10009c52:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c54:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
10009c56:	e192      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c58:	4b98      	ldr	r3, [pc, #608]	; (10009ebc <system_peripheral_reset+0x390>)
10009c5a:	6859      	ldr	r1, [r3, #4]
10009c5c:	4a9e      	ldr	r2, [pc, #632]	; (10009ed8 <system_peripheral_reset+0x3ac>)
10009c5e:	400a      	ands	r2, r1
10009c60:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c62:	685a      	ldr	r2, [r3, #4]
10009c64:	2180      	movs	r1, #128	; 0x80
10009c66:	01c9      	lsls	r1, r1, #7
10009c68:	430a      	orrs	r2, r1
10009c6a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c6c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
10009c6e:	e186      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c70:	4b92      	ldr	r3, [pc, #584]	; (10009ebc <system_peripheral_reset+0x390>)
10009c72:	6859      	ldr	r1, [r3, #4]
10009c74:	4a99      	ldr	r2, [pc, #612]	; (10009edc <system_peripheral_reset+0x3b0>)
10009c76:	400a      	ands	r2, r1
10009c78:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c7a:	685a      	ldr	r2, [r3, #4]
10009c7c:	2180      	movs	r1, #128	; 0x80
10009c7e:	0209      	lsls	r1, r1, #8
10009c80:	430a      	orrs	r2, r1
10009c82:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c84:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
10009c86:	e17a      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c88:	4b8c      	ldr	r3, [pc, #560]	; (10009ebc <system_peripheral_reset+0x390>)
10009c8a:	6859      	ldr	r1, [r3, #4]
10009c8c:	4a94      	ldr	r2, [pc, #592]	; (10009ee0 <system_peripheral_reset+0x3b4>)
10009c8e:	400a      	ands	r2, r1
10009c90:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c92:	685a      	ldr	r2, [r3, #4]
10009c94:	2180      	movs	r1, #128	; 0x80
10009c96:	0249      	lsls	r1, r1, #9
10009c98:	430a      	orrs	r2, r1
10009c9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c9c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
10009c9e:	e16e      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009ca0:	4b86      	ldr	r3, [pc, #536]	; (10009ebc <system_peripheral_reset+0x390>)
10009ca2:	6859      	ldr	r1, [r3, #4]
10009ca4:	4a8f      	ldr	r2, [pc, #572]	; (10009ee4 <system_peripheral_reset+0x3b8>)
10009ca6:	400a      	ands	r2, r1
10009ca8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009caa:	685a      	ldr	r2, [r3, #4]
10009cac:	2180      	movs	r1, #128	; 0x80
10009cae:	0289      	lsls	r1, r1, #10
10009cb0:	430a      	orrs	r2, r1
10009cb2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009cb4:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
10009cb6:	e162      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009cb8:	4b80      	ldr	r3, [pc, #512]	; (10009ebc <system_peripheral_reset+0x390>)
10009cba:	6859      	ldr	r1, [r3, #4]
10009cbc:	4a8a      	ldr	r2, [pc, #552]	; (10009ee8 <system_peripheral_reset+0x3bc>)
10009cbe:	400a      	ands	r2, r1
10009cc0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009cc2:	685a      	ldr	r2, [r3, #4]
10009cc4:	2180      	movs	r1, #128	; 0x80
10009cc6:	02c9      	lsls	r1, r1, #11
10009cc8:	430a      	orrs	r2, r1
10009cca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ccc:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10009cce:	e156      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009cd0:	4b7a      	ldr	r3, [pc, #488]	; (10009ebc <system_peripheral_reset+0x390>)
10009cd2:	6859      	ldr	r1, [r3, #4]
10009cd4:	4a85      	ldr	r2, [pc, #532]	; (10009eec <system_peripheral_reset+0x3c0>)
10009cd6:	400a      	ands	r2, r1
10009cd8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009cda:	685a      	ldr	r2, [r3, #4]
10009cdc:	2180      	movs	r1, #128	; 0x80
10009cde:	0309      	lsls	r1, r1, #12
10009ce0:	430a      	orrs	r2, r1
10009ce2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ce4:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10009ce6:	e14a      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009ce8:	4b74      	ldr	r3, [pc, #464]	; (10009ebc <system_peripheral_reset+0x390>)
10009cea:	6859      	ldr	r1, [r3, #4]
10009cec:	4a80      	ldr	r2, [pc, #512]	; (10009ef0 <system_peripheral_reset+0x3c4>)
10009cee:	400a      	ands	r2, r1
10009cf0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009cf2:	685a      	ldr	r2, [r3, #4]
10009cf4:	2180      	movs	r1, #128	; 0x80
10009cf6:	0349      	lsls	r1, r1, #13
10009cf8:	430a      	orrs	r2, r1
10009cfa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009cfc:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10009cfe:	e13e      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d00:	4b6e      	ldr	r3, [pc, #440]	; (10009ebc <system_peripheral_reset+0x390>)
10009d02:	6859      	ldr	r1, [r3, #4]
10009d04:	4a7b      	ldr	r2, [pc, #492]	; (10009ef4 <system_peripheral_reset+0x3c8>)
10009d06:	400a      	ands	r2, r1
10009d08:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d0a:	685a      	ldr	r2, [r3, #4]
10009d0c:	2180      	movs	r1, #128	; 0x80
10009d0e:	0389      	lsls	r1, r1, #14
10009d10:	430a      	orrs	r2, r1
10009d12:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d14:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10009d16:	e132      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d18:	4b68      	ldr	r3, [pc, #416]	; (10009ebc <system_peripheral_reset+0x390>)
10009d1a:	6859      	ldr	r1, [r3, #4]
10009d1c:	4a76      	ldr	r2, [pc, #472]	; (10009ef8 <system_peripheral_reset+0x3cc>)
10009d1e:	400a      	ands	r2, r1
10009d20:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d22:	685a      	ldr	r2, [r3, #4]
10009d24:	2180      	movs	r1, #128	; 0x80
10009d26:	03c9      	lsls	r1, r1, #15
10009d28:	430a      	orrs	r2, r1
10009d2a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d2c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10009d2e:	e126      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d30:	4b62      	ldr	r3, [pc, #392]	; (10009ebc <system_peripheral_reset+0x390>)
10009d32:	6859      	ldr	r1, [r3, #4]
10009d34:	4a71      	ldr	r2, [pc, #452]	; (10009efc <system_peripheral_reset+0x3d0>)
10009d36:	400a      	ands	r2, r1
10009d38:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d3a:	685a      	ldr	r2, [r3, #4]
10009d3c:	2180      	movs	r1, #128	; 0x80
10009d3e:	0409      	lsls	r1, r1, #16
10009d40:	430a      	orrs	r2, r1
10009d42:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d44:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10009d46:	e11a      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d48:	4b5c      	ldr	r3, [pc, #368]	; (10009ebc <system_peripheral_reset+0x390>)
10009d4a:	6859      	ldr	r1, [r3, #4]
10009d4c:	4a6c      	ldr	r2, [pc, #432]	; (10009f00 <system_peripheral_reset+0x3d4>)
10009d4e:	400a      	ands	r2, r1
10009d50:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d52:	685a      	ldr	r2, [r3, #4]
10009d54:	2180      	movs	r1, #128	; 0x80
10009d56:	0449      	lsls	r1, r1, #17
10009d58:	430a      	orrs	r2, r1
10009d5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d5c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10009d5e:	e10e      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d60:	4b56      	ldr	r3, [pc, #344]	; (10009ebc <system_peripheral_reset+0x390>)
10009d62:	6859      	ldr	r1, [r3, #4]
10009d64:	4a67      	ldr	r2, [pc, #412]	; (10009f04 <system_peripheral_reset+0x3d8>)
10009d66:	400a      	ands	r2, r1
10009d68:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d6a:	685a      	ldr	r2, [r3, #4]
10009d6c:	2180      	movs	r1, #128	; 0x80
10009d6e:	0489      	lsls	r1, r1, #18
10009d70:	430a      	orrs	r2, r1
10009d72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d74:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
10009d76:	e102      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d78:	4b50      	ldr	r3, [pc, #320]	; (10009ebc <system_peripheral_reset+0x390>)
10009d7a:	6859      	ldr	r1, [r3, #4]
10009d7c:	4a62      	ldr	r2, [pc, #392]	; (10009f08 <system_peripheral_reset+0x3dc>)
10009d7e:	400a      	ands	r2, r1
10009d80:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d82:	685a      	ldr	r2, [r3, #4]
10009d84:	2180      	movs	r1, #128	; 0x80
10009d86:	04c9      	lsls	r1, r1, #19
10009d88:	430a      	orrs	r2, r1
10009d8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d8c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
10009d8e:	e0f6      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d90:	4b4a      	ldr	r3, [pc, #296]	; (10009ebc <system_peripheral_reset+0x390>)
10009d92:	6859      	ldr	r1, [r3, #4]
10009d94:	4a5d      	ldr	r2, [pc, #372]	; (10009f0c <system_peripheral_reset+0x3e0>)
10009d96:	400a      	ands	r2, r1
10009d98:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d9a:	685a      	ldr	r2, [r3, #4]
10009d9c:	2180      	movs	r1, #128	; 0x80
10009d9e:	0509      	lsls	r1, r1, #20
10009da0:	430a      	orrs	r2, r1
10009da2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009da4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
10009da6:	e0ea      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009da8:	4b44      	ldr	r3, [pc, #272]	; (10009ebc <system_peripheral_reset+0x390>)
10009daa:	6859      	ldr	r1, [r3, #4]
10009dac:	4a58      	ldr	r2, [pc, #352]	; (10009f10 <system_peripheral_reset+0x3e4>)
10009dae:	400a      	ands	r2, r1
10009db0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009db2:	685a      	ldr	r2, [r3, #4]
10009db4:	2180      	movs	r1, #128	; 0x80
10009db6:	0549      	lsls	r1, r1, #21
10009db8:	430a      	orrs	r2, r1
10009dba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009dbc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
10009dbe:	e0de      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009dc0:	4b3e      	ldr	r3, [pc, #248]	; (10009ebc <system_peripheral_reset+0x390>)
10009dc2:	6859      	ldr	r1, [r3, #4]
10009dc4:	4a53      	ldr	r2, [pc, #332]	; (10009f14 <system_peripheral_reset+0x3e8>)
10009dc6:	400a      	ands	r2, r1
10009dc8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009dca:	685a      	ldr	r2, [r3, #4]
10009dcc:	2180      	movs	r1, #128	; 0x80
10009dce:	0589      	lsls	r1, r1, #22
10009dd0:	430a      	orrs	r2, r1
10009dd2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009dd4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
10009dd6:	e0d2      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009dd8:	4b38      	ldr	r3, [pc, #224]	; (10009ebc <system_peripheral_reset+0x390>)
10009dda:	6859      	ldr	r1, [r3, #4]
10009ddc:	4a4e      	ldr	r2, [pc, #312]	; (10009f18 <system_peripheral_reset+0x3ec>)
10009dde:	400a      	ands	r2, r1
10009de0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009de2:	685a      	ldr	r2, [r3, #4]
10009de4:	2180      	movs	r1, #128	; 0x80
10009de6:	05c9      	lsls	r1, r1, #23
10009de8:	430a      	orrs	r2, r1
10009dea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009dec:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
10009dee:	e0c6      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009df0:	4a32      	ldr	r2, [pc, #200]	; (10009ebc <system_peripheral_reset+0x390>)
10009df2:	6853      	ldr	r3, [r2, #4]
10009df4:	005b      	lsls	r3, r3, #1
10009df6:	085b      	lsrs	r3, r3, #1
10009df8:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009dfa:	6853      	ldr	r3, [r2, #4]
10009dfc:	2180      	movs	r1, #128	; 0x80
10009dfe:	0609      	lsls	r1, r1, #24
10009e00:	430b      	orrs	r3, r1
10009e02:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e04:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
10009e06:	e0ba      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009e08:	4b2c      	ldr	r3, [pc, #176]	; (10009ebc <system_peripheral_reset+0x390>)
10009e0a:	891a      	ldrh	r2, [r3, #8]
10009e0c:	2101      	movs	r1, #1
10009e0e:	438a      	bics	r2, r1
10009e10:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009e12:	8919      	ldrh	r1, [r3, #8]
10009e14:	2201      	movs	r2, #1
10009e16:	430a      	orrs	r2, r1
10009e18:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e1a:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
10009e1c:	e0af      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009e1e:	4b27      	ldr	r3, [pc, #156]	; (10009ebc <system_peripheral_reset+0x390>)
10009e20:	891a      	ldrh	r2, [r3, #8]
10009e22:	2102      	movs	r1, #2
10009e24:	438a      	bics	r2, r1
10009e26:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009e28:	8919      	ldrh	r1, [r3, #8]
10009e2a:	2202      	movs	r2, #2
10009e2c:	430a      	orrs	r2, r1
10009e2e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e30:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
10009e32:	e0a4      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009e34:	4b21      	ldr	r3, [pc, #132]	; (10009ebc <system_peripheral_reset+0x390>)
10009e36:	891a      	ldrh	r2, [r3, #8]
10009e38:	2104      	movs	r1, #4
10009e3a:	438a      	bics	r2, r1
10009e3c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009e3e:	8919      	ldrh	r1, [r3, #8]
10009e40:	2204      	movs	r2, #4
10009e42:	430a      	orrs	r2, r1
10009e44:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e46:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
10009e48:	e099      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009e4a:	4b1c      	ldr	r3, [pc, #112]	; (10009ebc <system_peripheral_reset+0x390>)
10009e4c:	891a      	ldrh	r2, [r3, #8]
10009e4e:	2108      	movs	r1, #8
10009e50:	438a      	bics	r2, r1
10009e52:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009e54:	8919      	ldrh	r1, [r3, #8]
10009e56:	2208      	movs	r2, #8
10009e58:	430a      	orrs	r2, r1
10009e5a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e5c:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10009e5e:	e08e      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009e60:	4b16      	ldr	r3, [pc, #88]	; (10009ebc <system_peripheral_reset+0x390>)
10009e62:	891a      	ldrh	r2, [r3, #8]
10009e64:	2110      	movs	r1, #16
10009e66:	438a      	bics	r2, r1
10009e68:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009e6a:	8919      	ldrh	r1, [r3, #8]
10009e6c:	2210      	movs	r2, #16
10009e6e:	430a      	orrs	r2, r1
10009e70:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e72:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10009e74:	e083      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009e76:	4b11      	ldr	r3, [pc, #68]	; (10009ebc <system_peripheral_reset+0x390>)
10009e78:	891a      	ldrh	r2, [r3, #8]
10009e7a:	2120      	movs	r1, #32
10009e7c:	438a      	bics	r2, r1
10009e7e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009e80:	8919      	ldrh	r1, [r3, #8]
10009e82:	2220      	movs	r2, #32
10009e84:	430a      	orrs	r2, r1
10009e86:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e88:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10009e8a:	e078      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009e8c:	4b0b      	ldr	r3, [pc, #44]	; (10009ebc <system_peripheral_reset+0x390>)
10009e8e:	891a      	ldrh	r2, [r3, #8]
10009e90:	2140      	movs	r1, #64	; 0x40
10009e92:	438a      	bics	r2, r1
10009e94:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009e96:	8919      	ldrh	r1, [r3, #8]
10009e98:	2240      	movs	r2, #64	; 0x40
10009e9a:	430a      	orrs	r2, r1
10009e9c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e9e:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10009ea0:	e06d      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009ea2:	4b06      	ldr	r3, [pc, #24]	; (10009ebc <system_peripheral_reset+0x390>)
10009ea4:	891a      	ldrh	r2, [r3, #8]
10009ea6:	2180      	movs	r1, #128	; 0x80
10009ea8:	438a      	bics	r2, r1
10009eaa:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009eac:	8919      	ldrh	r1, [r3, #8]
10009eae:	2280      	movs	r2, #128	; 0x80
10009eb0:	430a      	orrs	r2, r1
10009eb2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009eb4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
10009eb6:	e062      	b.n	10009f7e <system_peripheral_reset+0x452>
10009eb8:	10012af8 	.word	0x10012af8
10009ebc:	4000b000 	.word	0x4000b000
10009ec0:	fffffeff 	.word	0xfffffeff
10009ec4:	fffffdff 	.word	0xfffffdff
10009ec8:	fffffbff 	.word	0xfffffbff
10009ecc:	fffff7ff 	.word	0xfffff7ff
10009ed0:	ffffefff 	.word	0xffffefff
10009ed4:	ffffdfff 	.word	0xffffdfff
10009ed8:	ffffbfff 	.word	0xffffbfff
10009edc:	ffff7fff 	.word	0xffff7fff
10009ee0:	fffeffff 	.word	0xfffeffff
10009ee4:	fffdffff 	.word	0xfffdffff
10009ee8:	fffbffff 	.word	0xfffbffff
10009eec:	fff7ffff 	.word	0xfff7ffff
10009ef0:	ffefffff 	.word	0xffefffff
10009ef4:	ffdfffff 	.word	0xffdfffff
10009ef8:	ffbfffff 	.word	0xffbfffff
10009efc:	ff7fffff 	.word	0xff7fffff
10009f00:	feffffff 	.word	0xfeffffff
10009f04:	fdffffff 	.word	0xfdffffff
10009f08:	fbffffff 	.word	0xfbffffff
10009f0c:	f7ffffff 	.word	0xf7ffffff
10009f10:	efffffff 	.word	0xefffffff
10009f14:	dfffffff 	.word	0xdfffffff
10009f18:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009f1c:	4b18      	ldr	r3, [pc, #96]	; (10009f80 <system_peripheral_reset+0x454>)
10009f1e:	8919      	ldrh	r1, [r3, #8]
10009f20:	4a18      	ldr	r2, [pc, #96]	; (10009f84 <system_peripheral_reset+0x458>)
10009f22:	400a      	ands	r2, r1
10009f24:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009f26:	8919      	ldrh	r1, [r3, #8]
10009f28:	2280      	movs	r2, #128	; 0x80
10009f2a:	0052      	lsls	r2, r2, #1
10009f2c:	430a      	orrs	r2, r1
10009f2e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009f30:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
10009f32:	e024      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009f34:	4b12      	ldr	r3, [pc, #72]	; (10009f80 <system_peripheral_reset+0x454>)
10009f36:	8919      	ldrh	r1, [r3, #8]
10009f38:	4a13      	ldr	r2, [pc, #76]	; (10009f88 <system_peripheral_reset+0x45c>)
10009f3a:	400a      	ands	r2, r1
10009f3c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009f3e:	8919      	ldrh	r1, [r3, #8]
10009f40:	2280      	movs	r2, #128	; 0x80
10009f42:	0092      	lsls	r2, r2, #2
10009f44:	430a      	orrs	r2, r1
10009f46:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009f48:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10009f4a:	e018      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009f4c:	4b0c      	ldr	r3, [pc, #48]	; (10009f80 <system_peripheral_reset+0x454>)
10009f4e:	8919      	ldrh	r1, [r3, #8]
10009f50:	4a0e      	ldr	r2, [pc, #56]	; (10009f8c <system_peripheral_reset+0x460>)
10009f52:	400a      	ands	r2, r1
10009f54:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009f56:	8919      	ldrh	r1, [r3, #8]
10009f58:	2280      	movs	r2, #128	; 0x80
10009f5a:	00d2      	lsls	r2, r2, #3
10009f5c:	430a      	orrs	r2, r1
10009f5e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009f60:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
10009f62:	e00c      	b.n	10009f7e <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009f64:	4b06      	ldr	r3, [pc, #24]	; (10009f80 <system_peripheral_reset+0x454>)
10009f66:	8919      	ldrh	r1, [r3, #8]
10009f68:	4a09      	ldr	r2, [pc, #36]	; (10009f90 <system_peripheral_reset+0x464>)
10009f6a:	400a      	ands	r2, r1
10009f6c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009f6e:	8919      	ldrh	r1, [r3, #8]
10009f70:	2280      	movs	r2, #128	; 0x80
10009f72:	0112      	lsls	r2, r2, #4
10009f74:	430a      	orrs	r2, r1
10009f76:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009f78:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
10009f7a:	e000      	b.n	10009f7e <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009f7c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009f7e:	bd00      	pop	{pc}
10009f80:	4000b000 	.word	0x4000b000
10009f84:	fffffeff 	.word	0xfffffeff
10009f88:	fffffdff 	.word	0xfffffdff
10009f8c:	fffffbff 	.word	0xfffffbff
10009f90:	fffff7ff 	.word	0xfffff7ff

10009f94 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10009f94:	2380      	movs	r3, #128	; 0x80
10009f96:	04db      	lsls	r3, r3, #19
10009f98:	469c      	mov	ip, r3
10009f9a:	4460      	add	r0, ip
10009f9c:	0080      	lsls	r0, r0, #2
10009f9e:	6001      	str	r1, [r0, #0]
}
10009fa0:	4770      	bx	lr
10009fa2:	46c0      	nop			; (mov r8, r8)

10009fa4 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
10009fa4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009fa6:	4b20      	ldr	r3, [pc, #128]	; (1000a028 <uart_rx0_isr_handler+0x84>)
10009fa8:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009faa:	6823      	ldr	r3, [r4, #0]
10009fac:	7d1d      	ldrb	r5, [r3, #20]
10009fae:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009fb0:	066a      	lsls	r2, r5, #25
10009fb2:	d513      	bpl.n	10009fdc <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009fb4:	211e      	movs	r1, #30
10009fb6:	2222      	movs	r2, #34	; 0x22
10009fb8:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009fba:	7e1a      	ldrb	r2, [r3, #24]
10009fbc:	3123      	adds	r1, #35	; 0x23
10009fbe:	438a      	bics	r2, r1
10009fc0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009fc2:	2321      	movs	r3, #33	; 0x21
10009fc4:	5ce3      	ldrb	r3, [r4, r3]
10009fc6:	071b      	lsls	r3, r3, #28
10009fc8:	d506      	bpl.n	10009fd8 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009fca:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009fcc:	5ce3      	ldrb	r3, [r4, r3]
10009fce:	071b      	lsls	r3, r3, #28
10009fd0:	d502      	bpl.n	10009fd8 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009fd2:	0020      	movs	r0, r4
10009fd4:	6923      	ldr	r3, [r4, #16]
10009fd6:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009fd8:	6823      	ldr	r3, [r4, #0]
10009fda:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009fdc:	07eb      	lsls	r3, r5, #31
10009fde:	d522      	bpl.n	1000a026 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009fe0:	6823      	ldr	r3, [r4, #0]
10009fe2:	7c1b      	ldrb	r3, [r3, #16]
10009fe4:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009fe6:	6962      	ldr	r2, [r4, #20]
10009fe8:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009fea:	6963      	ldr	r3, [r4, #20]
10009fec:	3301      	adds	r3, #1
10009fee:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009ff0:	8ba3      	ldrh	r3, [r4, #28]
10009ff2:	3b01      	subs	r3, #1
10009ff4:	b29b      	uxth	r3, r3
10009ff6:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009ff8:	8ba3      	ldrh	r3, [r4, #28]
10009ffa:	b29b      	uxth	r3, r3
10009ffc:	2b00      	cmp	r3, #0
10009ffe:	d112      	bne.n	1000a026 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000a000:	3321      	adds	r3, #33	; 0x21
1000a002:	5ce3      	ldrb	r3, [r4, r3]
1000a004:	075b      	lsls	r3, r3, #29
1000a006:	d50e      	bpl.n	1000a026 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000a008:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000a00a:	5ce3      	ldrb	r3, [r4, r3]
1000a00c:	075b      	lsls	r3, r3, #29
1000a00e:	d50a      	bpl.n	1000a026 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000a010:	2200      	movs	r2, #0
1000a012:	2322      	movs	r3, #34	; 0x22
1000a014:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000a016:	6822      	ldr	r2, [r4, #0]
1000a018:	7e13      	ldrb	r3, [r2, #24]
1000a01a:	2101      	movs	r1, #1
1000a01c:	438b      	bics	r3, r1
1000a01e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000a020:	68e3      	ldr	r3, [r4, #12]
1000a022:	0020      	movs	r0, r4
1000a024:	4798      	blx	r3
			}
		}
	}
}
1000a026:	bd70      	pop	{r4, r5, r6, pc}
1000a028:	1001533c 	.word	0x1001533c

1000a02c <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000a02c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000a02e:	4b21      	ldr	r3, [pc, #132]	; (1000a0b4 <uart_tx0_isr_handler+0x88>)
1000a030:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000a032:	6823      	ldr	r3, [r4, #0]
1000a034:	791d      	ldrb	r5, [r3, #4]
1000a036:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000a038:	07ea      	lsls	r2, r5, #31
1000a03a:	d517      	bpl.n	1000a06c <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000a03c:	69a2      	ldr	r2, [r4, #24]
1000a03e:	7811      	ldrb	r1, [r2, #0]
1000a040:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000a042:	3201      	adds	r2, #1
1000a044:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000a046:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000a048:	8be3      	ldrh	r3, [r4, #30]
1000a04a:	3b01      	subs	r3, #1
1000a04c:	b29b      	uxth	r3, r3
1000a04e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000a050:	8be3      	ldrh	r3, [r4, #30]
1000a052:	b29b      	uxth	r3, r3
1000a054:	2b00      	cmp	r3, #0
1000a056:	d109      	bne.n	1000a06c <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000a058:	6822      	ldr	r2, [r4, #0]
1000a05a:	7a13      	ldrb	r3, [r2, #8]
1000a05c:	2101      	movs	r1, #1
1000a05e:	438b      	bics	r3, r1
1000a060:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000a062:	6822      	ldr	r2, [r4, #0]
1000a064:	7a11      	ldrb	r1, [r2, #8]
1000a066:	2310      	movs	r3, #16
1000a068:	430b      	orrs	r3, r1
1000a06a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000a06c:	06eb      	lsls	r3, r5, #27
1000a06e:	d512      	bpl.n	1000a096 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000a070:	2321      	movs	r3, #33	; 0x21
1000a072:	5ce3      	ldrb	r3, [r4, r3]
1000a074:	07db      	lsls	r3, r3, #31
1000a076:	d50e      	bpl.n	1000a096 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000a078:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000a07a:	5ce3      	ldrb	r3, [r4, r3]
1000a07c:	07db      	lsls	r3, r3, #31
1000a07e:	d50a      	bpl.n	1000a096 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000a080:	2200      	movs	r2, #0
1000a082:	2322      	movs	r3, #34	; 0x22
1000a084:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000a086:	6822      	ldr	r2, [r4, #0]
1000a088:	7a13      	ldrb	r3, [r2, #8]
1000a08a:	2110      	movs	r1, #16
1000a08c:	438b      	bics	r3, r1
1000a08e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000a090:	0020      	movs	r0, r4
1000a092:	6863      	ldr	r3, [r4, #4]
1000a094:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000a096:	06ab      	lsls	r3, r5, #26
1000a098:	d50a      	bpl.n	1000a0b0 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000a09a:	2321      	movs	r3, #33	; 0x21
1000a09c:	5ce3      	ldrb	r3, [r4, r3]
1000a09e:	079b      	lsls	r3, r3, #30
1000a0a0:	d506      	bpl.n	1000a0b0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000a0a2:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000a0a4:	5ce3      	ldrb	r3, [r4, r3]
1000a0a6:	079b      	lsls	r3, r3, #30
1000a0a8:	d502      	bpl.n	1000a0b0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000a0aa:	68a3      	ldr	r3, [r4, #8]
1000a0ac:	0020      	movs	r0, r4
1000a0ae:	4798      	blx	r3
		}

	}
}
1000a0b0:	bd70      	pop	{r4, r5, r6, pc}
1000a0b2:	46c0      	nop			; (mov r8, r8)
1000a0b4:	1001533c 	.word	0x1001533c

1000a0b8 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000a0b8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000a0ba:	4b20      	ldr	r3, [pc, #128]	; (1000a13c <uart_rx1_isr_handler+0x84>)
1000a0bc:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000a0be:	6823      	ldr	r3, [r4, #0]
1000a0c0:	7d1d      	ldrb	r5, [r3, #20]
1000a0c2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000a0c4:	066a      	lsls	r2, r5, #25
1000a0c6:	d513      	bpl.n	1000a0f0 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000a0c8:	211e      	movs	r1, #30
1000a0ca:	2222      	movs	r2, #34	; 0x22
1000a0cc:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000a0ce:	7e1a      	ldrb	r2, [r3, #24]
1000a0d0:	3123      	adds	r1, #35	; 0x23
1000a0d2:	438a      	bics	r2, r1
1000a0d4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000a0d6:	2321      	movs	r3, #33	; 0x21
1000a0d8:	5ce3      	ldrb	r3, [r4, r3]
1000a0da:	071b      	lsls	r3, r3, #28
1000a0dc:	d506      	bpl.n	1000a0ec <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000a0de:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000a0e0:	5ce3      	ldrb	r3, [r4, r3]
1000a0e2:	071b      	lsls	r3, r3, #28
1000a0e4:	d502      	bpl.n	1000a0ec <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000a0e6:	0020      	movs	r0, r4
1000a0e8:	6923      	ldr	r3, [r4, #16]
1000a0ea:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000a0ec:	6823      	ldr	r3, [r4, #0]
1000a0ee:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000a0f0:	07eb      	lsls	r3, r5, #31
1000a0f2:	d522      	bpl.n	1000a13a <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000a0f4:	6823      	ldr	r3, [r4, #0]
1000a0f6:	7c1b      	ldrb	r3, [r3, #16]
1000a0f8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000a0fa:	6962      	ldr	r2, [r4, #20]
1000a0fc:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000a0fe:	6963      	ldr	r3, [r4, #20]
1000a100:	3301      	adds	r3, #1
1000a102:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000a104:	8ba3      	ldrh	r3, [r4, #28]
1000a106:	3b01      	subs	r3, #1
1000a108:	b29b      	uxth	r3, r3
1000a10a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000a10c:	8ba3      	ldrh	r3, [r4, #28]
1000a10e:	b29b      	uxth	r3, r3
1000a110:	2b00      	cmp	r3, #0
1000a112:	d112      	bne.n	1000a13a <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000a114:	3321      	adds	r3, #33	; 0x21
1000a116:	5ce3      	ldrb	r3, [r4, r3]
1000a118:	075b      	lsls	r3, r3, #29
1000a11a:	d50e      	bpl.n	1000a13a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000a11c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000a11e:	5ce3      	ldrb	r3, [r4, r3]
1000a120:	075b      	lsls	r3, r3, #29
1000a122:	d50a      	bpl.n	1000a13a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000a124:	2200      	movs	r2, #0
1000a126:	2322      	movs	r3, #34	; 0x22
1000a128:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000a12a:	6822      	ldr	r2, [r4, #0]
1000a12c:	7e13      	ldrb	r3, [r2, #24]
1000a12e:	2101      	movs	r1, #1
1000a130:	438b      	bics	r3, r1
1000a132:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000a134:	68e3      	ldr	r3, [r4, #12]
1000a136:	0020      	movs	r0, r4
1000a138:	4798      	blx	r3
			}
		}
	}
}
1000a13a:	bd70      	pop	{r4, r5, r6, pc}
1000a13c:	1001533c 	.word	0x1001533c

1000a140 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000a140:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000a142:	4b21      	ldr	r3, [pc, #132]	; (1000a1c8 <uart_tx1_isr_handler+0x88>)
1000a144:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000a146:	6823      	ldr	r3, [r4, #0]
1000a148:	791d      	ldrb	r5, [r3, #4]
1000a14a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000a14c:	07ea      	lsls	r2, r5, #31
1000a14e:	d517      	bpl.n	1000a180 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000a150:	69a2      	ldr	r2, [r4, #24]
1000a152:	7811      	ldrb	r1, [r2, #0]
1000a154:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000a156:	3201      	adds	r2, #1
1000a158:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000a15a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000a15c:	8be3      	ldrh	r3, [r4, #30]
1000a15e:	3b01      	subs	r3, #1
1000a160:	b29b      	uxth	r3, r3
1000a162:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000a164:	8be3      	ldrh	r3, [r4, #30]
1000a166:	b29b      	uxth	r3, r3
1000a168:	2b00      	cmp	r3, #0
1000a16a:	d109      	bne.n	1000a180 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000a16c:	6822      	ldr	r2, [r4, #0]
1000a16e:	7a13      	ldrb	r3, [r2, #8]
1000a170:	2101      	movs	r1, #1
1000a172:	438b      	bics	r3, r1
1000a174:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000a176:	6822      	ldr	r2, [r4, #0]
1000a178:	7a11      	ldrb	r1, [r2, #8]
1000a17a:	2310      	movs	r3, #16
1000a17c:	430b      	orrs	r3, r1
1000a17e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000a180:	06eb      	lsls	r3, r5, #27
1000a182:	d512      	bpl.n	1000a1aa <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000a184:	2321      	movs	r3, #33	; 0x21
1000a186:	5ce3      	ldrb	r3, [r4, r3]
1000a188:	07db      	lsls	r3, r3, #31
1000a18a:	d50e      	bpl.n	1000a1aa <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000a18c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000a18e:	5ce3      	ldrb	r3, [r4, r3]
1000a190:	07db      	lsls	r3, r3, #31
1000a192:	d50a      	bpl.n	1000a1aa <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000a194:	2200      	movs	r2, #0
1000a196:	2322      	movs	r3, #34	; 0x22
1000a198:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000a19a:	6822      	ldr	r2, [r4, #0]
1000a19c:	7a13      	ldrb	r3, [r2, #8]
1000a19e:	2110      	movs	r1, #16
1000a1a0:	438b      	bics	r3, r1
1000a1a2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000a1a4:	0020      	movs	r0, r4
1000a1a6:	6863      	ldr	r3, [r4, #4]
1000a1a8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000a1aa:	06ab      	lsls	r3, r5, #26
1000a1ac:	d50a      	bpl.n	1000a1c4 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000a1ae:	2321      	movs	r3, #33	; 0x21
1000a1b0:	5ce3      	ldrb	r3, [r4, r3]
1000a1b2:	079b      	lsls	r3, r3, #30
1000a1b4:	d506      	bpl.n	1000a1c4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000a1b6:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000a1b8:	5ce3      	ldrb	r3, [r4, r3]
1000a1ba:	079b      	lsls	r3, r3, #30
1000a1bc:	d502      	bpl.n	1000a1c4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000a1be:	68a3      	ldr	r3, [r4, #8]
1000a1c0:	0020      	movs	r0, r4
1000a1c2:	4798      	blx	r3
		}

	}
}
1000a1c4:	bd70      	pop	{r4, r5, r6, pc}
1000a1c6:	46c0      	nop			; (mov r8, r8)
1000a1c8:	1001533c 	.word	0x1001533c

1000a1cc <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000a1cc:	23e1      	movs	r3, #225	; 0xe1
1000a1ce:	025b      	lsls	r3, r3, #9
1000a1d0:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000a1d2:	2300      	movs	r3, #0
1000a1d4:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000a1d6:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000a1d8:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000a1da:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000a1dc:	3302      	adds	r3, #2
1000a1de:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000a1e0:	2203      	movs	r2, #3
1000a1e2:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000a1e4:	3201      	adds	r2, #1
1000a1e6:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000a1e8:	3201      	adds	r2, #1
1000a1ea:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000a1ec:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000a1ee:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000a1f0:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000a1f2:	6243      	str	r3, [r0, #36]	; 0x24
}
1000a1f4:	4770      	bx	lr
1000a1f6:	46c0      	nop			; (mov r8, r8)

1000a1f8 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a1fa:	464f      	mov	r7, r9
1000a1fc:	4646      	mov	r6, r8
1000a1fe:	b4c0      	push	{r6, r7}
1000a200:	0005      	movs	r5, r0
1000a202:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000a204:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000a206:	2300      	movs	r3, #0
1000a208:	6043      	str	r3, [r0, #4]
1000a20a:	6083      	str	r3, [r0, #8]
1000a20c:	60c3      	str	r3, [r0, #12]
1000a20e:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000a210:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000a212:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000a214:	2200      	movs	r2, #0
1000a216:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000a218:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000a21a:	3320      	adds	r3, #32
1000a21c:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000a21e:	3301      	adds	r3, #1
1000a220:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000a222:	3301      	adds	r3, #1
1000a224:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000a226:	4b55      	ldr	r3, [pc, #340]	; (1000a37c <uart_init+0x184>)
1000a228:	4299      	cmp	r1, r3
1000a22a:	d118      	bne.n	1000a25e <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000a22c:	2009      	movs	r0, #9
1000a22e:	4c54      	ldr	r4, [pc, #336]	; (1000a380 <uart_init+0x188>)
1000a230:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000a232:	200a      	movs	r0, #10
1000a234:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000a236:	2009      	movs	r0, #9
1000a238:	4c52      	ldr	r4, [pc, #328]	; (1000a384 <uart_init+0x18c>)
1000a23a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000a23c:	200a      	movs	r0, #10
1000a23e:	47a0      	blx	r4
		_uart_instances[0] = module;
1000a240:	4b51      	ldr	r3, [pc, #324]	; (1000a388 <uart_init+0x190>)
1000a242:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000a244:	4951      	ldr	r1, [pc, #324]	; (1000a38c <uart_init+0x194>)
1000a246:	2010      	movs	r0, #16
1000a248:	4c51      	ldr	r4, [pc, #324]	; (1000a390 <uart_init+0x198>)
1000a24a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000a24c:	4951      	ldr	r1, [pc, #324]	; (1000a394 <uart_init+0x19c>)
1000a24e:	2011      	movs	r0, #17
1000a250:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a252:	4b51      	ldr	r3, [pc, #324]	; (1000a398 <uart_init+0x1a0>)
1000a254:	2201      	movs	r2, #1
1000a256:	601a      	str	r2, [r3, #0]
1000a258:	3201      	adds	r2, #1
1000a25a:	601a      	str	r2, [r3, #0]
1000a25c:	e01a      	b.n	1000a294 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000a25e:	4b4f      	ldr	r3, [pc, #316]	; (1000a39c <uart_init+0x1a4>)
1000a260:	4299      	cmp	r1, r3
1000a262:	d117      	bne.n	1000a294 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000a264:	200b      	movs	r0, #11
1000a266:	4c46      	ldr	r4, [pc, #280]	; (1000a380 <uart_init+0x188>)
1000a268:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000a26a:	200c      	movs	r0, #12
1000a26c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000a26e:	200b      	movs	r0, #11
1000a270:	4c44      	ldr	r4, [pc, #272]	; (1000a384 <uart_init+0x18c>)
1000a272:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000a274:	200c      	movs	r0, #12
1000a276:	47a0      	blx	r4
		_uart_instances[1] = module;
1000a278:	4b43      	ldr	r3, [pc, #268]	; (1000a388 <uart_init+0x190>)
1000a27a:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000a27c:	4948      	ldr	r1, [pc, #288]	; (1000a3a0 <uart_init+0x1a8>)
1000a27e:	2012      	movs	r0, #18
1000a280:	4c43      	ldr	r4, [pc, #268]	; (1000a390 <uart_init+0x198>)
1000a282:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000a284:	4947      	ldr	r1, [pc, #284]	; (1000a3a4 <uart_init+0x1ac>)
1000a286:	2013      	movs	r0, #19
1000a288:	47a0      	blx	r4
1000a28a:	4b43      	ldr	r3, [pc, #268]	; (1000a398 <uart_init+0x1a0>)
1000a28c:	2204      	movs	r2, #4
1000a28e:	601a      	str	r2, [r3, #0]
1000a290:	3204      	adds	r2, #4
1000a292:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000a294:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000a296:	2204      	movs	r2, #4
1000a298:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000a29a:	2b00      	cmp	r3, #0
1000a29c:	d152      	bne.n	1000a344 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000a29e:	3302      	adds	r3, #2
1000a2a0:	4698      	mov	r8, r3
1000a2a2:	e04f      	b.n	1000a344 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000a2a4:	8a31      	ldrh	r1, [r6, #16]
1000a2a6:	ce01      	ldmia	r6!, {r0}
1000a2a8:	b2c0      	uxtb	r0, r0
1000a2aa:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000a2ac:	3401      	adds	r4, #1
1000a2ae:	b2e4      	uxtb	r4, r4
1000a2b0:	4544      	cmp	r4, r8
1000a2b2:	d3f7      	bcc.n	1000a2a4 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000a2b4:	682b      	ldr	r3, [r5, #0]
1000a2b6:	7d1a      	ldrb	r2, [r3, #20]
1000a2b8:	07d2      	lsls	r2, r2, #31
1000a2ba:	d504      	bpl.n	1000a2c6 <uart_init+0xce>
1000a2bc:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000a2be:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000a2c0:	7d1a      	ldrb	r2, [r3, #20]
1000a2c2:	420a      	tst	r2, r1
1000a2c4:	d1fb      	bne.n	1000a2be <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000a2c6:	2100      	movs	r1, #0
1000a2c8:	2220      	movs	r2, #32
1000a2ca:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000a2cc:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000a2ce:	1e59      	subs	r1, r3, #1
1000a2d0:	418b      	sbcs	r3, r1
1000a2d2:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000a2d4:	793b      	ldrb	r3, [r7, #4]
1000a2d6:	797a      	ldrb	r2, [r7, #5]
1000a2d8:	4313      	orrs	r3, r2
1000a2da:	430b      	orrs	r3, r1
	switch(config->parity) {
1000a2dc:	79ba      	ldrb	r2, [r7, #6]
1000a2de:	2a02      	cmp	r2, #2
1000a2e0:	d00d      	beq.n	1000a2fe <uart_init+0x106>
1000a2e2:	b2d1      	uxtb	r1, r2
1000a2e4:	2902      	cmp	r1, #2
1000a2e6:	d802      	bhi.n	1000a2ee <uart_init+0xf6>
1000a2e8:	2a01      	cmp	r2, #1
1000a2ea:	d005      	beq.n	1000a2f8 <uart_init+0x100>
1000a2ec:	e00f      	b.n	1000a30e <uart_init+0x116>
1000a2ee:	2a03      	cmp	r2, #3
1000a2f0:	d008      	beq.n	1000a304 <uart_init+0x10c>
1000a2f2:	2a04      	cmp	r2, #4
1000a2f4:	d009      	beq.n	1000a30a <uart_init+0x112>
1000a2f6:	e00a      	b.n	1000a30e <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000a2f8:	2202      	movs	r2, #2
1000a2fa:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000a2fc:	e007      	b.n	1000a30e <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000a2fe:	2206      	movs	r2, #6
1000a300:	4313      	orrs	r3, r2
			break;
1000a302:	e004      	b.n	1000a30e <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000a304:	220a      	movs	r2, #10
1000a306:	4313      	orrs	r3, r2
			break;
1000a308:	e001      	b.n	1000a30e <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000a30a:	220e      	movs	r2, #14
1000a30c:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000a30e:	2220      	movs	r2, #32
1000a310:	6829      	ldr	r1, [r5, #0]
1000a312:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000a314:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000a316:	4b24      	ldr	r3, [pc, #144]	; (1000a3a8 <uart_init+0x1b0>)
1000a318:	4798      	blx	r3
1000a31a:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000a31c:	0031      	movs	r1, r6
1000a31e:	4b23      	ldr	r3, [pc, #140]	; (1000a3ac <uart_init+0x1b4>)
1000a320:	4798      	blx	r3
1000a322:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000a324:	0400      	lsls	r0, r0, #16
1000a326:	0c00      	lsrs	r0, r0, #16
1000a328:	4370      	muls	r0, r6
1000a32a:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000a32c:	0931      	lsrs	r1, r6, #4
1000a32e:	4288      	cmp	r0, r1
1000a330:	d906      	bls.n	1000a340 <uart_init+0x148>
1000a332:	2300      	movs	r3, #0
		i++;
1000a334:	3301      	adds	r3, #1
1000a336:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000a338:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000a33a:	4288      	cmp	r0, r1
1000a33c:	d8fa      	bhi.n	1000a334 <uart_init+0x13c>
1000a33e:	e007      	b.n	1000a350 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000a340:	2300      	movs	r3, #0
1000a342:	e005      	b.n	1000a350 <uart_init+0x158>
1000a344:	003e      	movs	r6, r7
1000a346:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000a348:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000a34a:	4b19      	ldr	r3, [pc, #100]	; (1000a3b0 <uart_init+0x1b8>)
1000a34c:	4699      	mov	r9, r3
1000a34e:	e7a9      	b.n	1000a2a4 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000a350:	2100      	movs	r1, #0
1000a352:	2028      	movs	r0, #40	; 0x28
1000a354:	682c      	ldr	r4, [r5, #0]
1000a356:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000a358:	3301      	adds	r3, #1
1000a35a:	071b      	lsls	r3, r3, #28
1000a35c:	0f5b      	lsrs	r3, r3, #29
1000a35e:	00d2      	lsls	r2, r2, #3
1000a360:	4313      	orrs	r3, r2
1000a362:	b29b      	uxth	r3, r3
1000a364:	682a      	ldr	r2, [r5, #0]
1000a366:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000a368:	682b      	ldr	r3, [r5, #0]
1000a36a:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000a36c:	682b      	ldr	r3, [r5, #0]
1000a36e:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000a370:	2000      	movs	r0, #0
1000a372:	bc0c      	pop	{r2, r3}
1000a374:	4690      	mov	r8, r2
1000a376:	4699      	mov	r9, r3
1000a378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a37a:	46c0      	nop			; (mov r8, r8)
1000a37c:	40004000 	.word	0x40004000
1000a380:	10009b2d 	.word	0x10009b2d
1000a384:	10009465 	.word	0x10009465
1000a388:	1001533c 	.word	0x1001533c
1000a38c:	10009fa5 	.word	0x10009fa5
1000a390:	10009f95 	.word	0x10009f95
1000a394:	1000a02d 	.word	0x1000a02d
1000a398:	e000e100 	.word	0xe000e100
1000a39c:	40005000 	.word	0x40005000
1000a3a0:	1000a0b9 	.word	0x1000a0b9
1000a3a4:	1000a141 	.word	0x1000a141
1000a3a8:	10009459 	.word	0x10009459
1000a3ac:	1000fffd 	.word	0x1000fffd
1000a3b0:	10009289 	.word	0x10009289

1000a3b4 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000a3b4:	6802      	ldr	r2, [r0, #0]
1000a3b6:	2001      	movs	r0, #1
1000a3b8:	7913      	ldrb	r3, [r2, #4]
1000a3ba:	4203      	tst	r3, r0
1000a3bc:	d0fc      	beq.n	1000a3b8 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000a3be:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000a3c0:	2000      	movs	r0, #0
1000a3c2:	4770      	bx	lr

1000a3c4 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000a3c4:	6802      	ldr	r2, [r0, #0]
1000a3c6:	2001      	movs	r0, #1
1000a3c8:	7d13      	ldrb	r3, [r2, #20]
1000a3ca:	4203      	tst	r3, r0
1000a3cc:	d0fc      	beq.n	1000a3c8 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000a3ce:	7c13      	ldrb	r3, [r2, #16]
1000a3d0:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000a3d2:	2000      	movs	r0, #0
1000a3d4:	4770      	bx	lr
1000a3d6:	46c0      	nop			; (mov r8, r8)

1000a3d8 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000a3d8:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000a3da:	2a00      	cmp	r2, #0
1000a3dc:	d00d      	beq.n	1000a3fa <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000a3de:	330b      	adds	r3, #11
1000a3e0:	5cc3      	ldrb	r3, [r0, r3]
1000a3e2:	b2db      	uxtb	r3, r3
1000a3e4:	2b05      	cmp	r3, #5
1000a3e6:	d008      	beq.n	1000a3fa <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000a3e8:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000a3ea:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000a3ec:	2205      	movs	r2, #5
1000a3ee:	2322      	movs	r3, #34	; 0x22
1000a3f0:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000a3f2:	6803      	ldr	r3, [r0, #0]
1000a3f4:	3a04      	subs	r2, #4
1000a3f6:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000a3f8:	2300      	movs	r3, #0
}
1000a3fa:	0018      	movs	r0, r3
1000a3fc:	4770      	bx	lr
1000a3fe:	46c0      	nop			; (mov r8, r8)

1000a400 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000a400:	0093      	lsls	r3, r2, #2
1000a402:	18c3      	adds	r3, r0, r3
1000a404:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000a406:	2120      	movs	r1, #32
1000a408:	2301      	movs	r3, #1
1000a40a:	4093      	lsls	r3, r2
1000a40c:	5c42      	ldrb	r2, [r0, r1]
1000a40e:	4313      	orrs	r3, r2
1000a410:	5443      	strb	r3, [r0, r1]
}
1000a412:	4770      	bx	lr

1000a414 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000a414:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000a416:	2221      	movs	r2, #33	; 0x21
1000a418:	2301      	movs	r3, #1
1000a41a:	408b      	lsls	r3, r1
1000a41c:	5c84      	ldrb	r4, [r0, r2]
1000a41e:	4323      	orrs	r3, r4
1000a420:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000a422:	2901      	cmp	r1, #1
1000a424:	d104      	bne.n	1000a430 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000a426:	6802      	ldr	r2, [r0, #0]
1000a428:	7a11      	ldrb	r1, [r2, #8]
1000a42a:	2320      	movs	r3, #32
1000a42c:	430b      	orrs	r3, r1
1000a42e:	7213      	strb	r3, [r2, #8]
	}
}
1000a430:	bd10      	pop	{r4, pc}
1000a432:	46c0      	nop			; (mov r8, r8)

1000a434 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000a434:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000a436:	2201      	movs	r2, #1
1000a438:	408a      	lsls	r2, r1
1000a43a:	2421      	movs	r4, #33	; 0x21
1000a43c:	5d03      	ldrb	r3, [r0, r4]
1000a43e:	4393      	bics	r3, r2
1000a440:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000a442:	2901      	cmp	r1, #1
1000a444:	d104      	bne.n	1000a450 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000a446:	6802      	ldr	r2, [r0, #0]
1000a448:	7a13      	ldrb	r3, [r2, #8]
1000a44a:	311f      	adds	r1, #31
1000a44c:	438b      	bics	r3, r1
1000a44e:	7213      	strb	r3, [r2, #8]
	}

}
1000a450:	bd10      	pop	{r4, pc}
1000a452:	46c0      	nop			; (mov r8, r8)

1000a454 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000a454:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a456:	4647      	mov	r7, r8
1000a458:	b480      	push	{r7}
1000a45a:	000c      	movs	r4, r1
1000a45c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000a45e:	2800      	cmp	r0, #0
1000a460:	d10d      	bne.n	1000a47e <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000a462:	2a00      	cmp	r2, #0
1000a464:	dd0e      	ble.n	1000a484 <_read+0x30>
1000a466:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000a468:	4e08      	ldr	r6, [pc, #32]	; (1000a48c <_read+0x38>)
1000a46a:	4d09      	ldr	r5, [pc, #36]	; (1000a490 <_read+0x3c>)
1000a46c:	6830      	ldr	r0, [r6, #0]
1000a46e:	0021      	movs	r1, r4
1000a470:	682b      	ldr	r3, [r5, #0]
1000a472:	4798      	blx	r3
		ptr++;
1000a474:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000a476:	42a7      	cmp	r7, r4
1000a478:	d1f8      	bne.n	1000a46c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000a47a:	4640      	mov	r0, r8
1000a47c:	e003      	b.n	1000a486 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000a47e:	2001      	movs	r0, #1
1000a480:	4240      	negs	r0, r0
1000a482:	e000      	b.n	1000a486 <_read+0x32>
	}

	for (; len > 0; --len) {
1000a484:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000a486:	bc04      	pop	{r2}
1000a488:	4690      	mov	r8, r2
1000a48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a48c:	1001534c 	.word	0x1001534c
1000a490:	10015344 	.word	0x10015344

1000a494 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000a494:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a496:	4647      	mov	r7, r8
1000a498:	b480      	push	{r7}
1000a49a:	000e      	movs	r6, r1
1000a49c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000a49e:	3801      	subs	r0, #1
1000a4a0:	2802      	cmp	r0, #2
1000a4a2:	d811      	bhi.n	1000a4c8 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000a4a4:	2a00      	cmp	r2, #0
1000a4a6:	d012      	beq.n	1000a4ce <_write+0x3a>
1000a4a8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000a4aa:	4b0c      	ldr	r3, [pc, #48]	; (1000a4dc <_write+0x48>)
1000a4ac:	4698      	mov	r8, r3
1000a4ae:	4f0c      	ldr	r7, [pc, #48]	; (1000a4e0 <_write+0x4c>)
1000a4b0:	4643      	mov	r3, r8
1000a4b2:	6818      	ldr	r0, [r3, #0]
1000a4b4:	5d31      	ldrb	r1, [r6, r4]
1000a4b6:	683b      	ldr	r3, [r7, #0]
1000a4b8:	4798      	blx	r3
1000a4ba:	2800      	cmp	r0, #0
1000a4bc:	db09      	blt.n	1000a4d2 <_write+0x3e>
			return -1;
		}
		++nChars;
1000a4be:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000a4c0:	42a5      	cmp	r5, r4
1000a4c2:	d1f5      	bne.n	1000a4b0 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000a4c4:	0020      	movs	r0, r4
1000a4c6:	e006      	b.n	1000a4d6 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000a4c8:	2001      	movs	r0, #1
1000a4ca:	4240      	negs	r0, r0
1000a4cc:	e003      	b.n	1000a4d6 <_write+0x42>
	}

	for (; len != 0; --len) {
1000a4ce:	2000      	movs	r0, #0
1000a4d0:	e001      	b.n	1000a4d6 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000a4d2:	2001      	movs	r0, #1
1000a4d4:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000a4d6:	bc04      	pop	{r2}
1000a4d8:	4690      	mov	r8, r2
1000a4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a4dc:	1001534c 	.word	0x1001534c
1000a4e0:	10015348 	.word	0x10015348

1000a4e4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000a4e4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000a4e6:	4a06      	ldr	r2, [pc, #24]	; (1000a500 <_sbrk+0x1c>)
1000a4e8:	6812      	ldr	r2, [r2, #0]
1000a4ea:	2a00      	cmp	r2, #0
1000a4ec:	d102      	bne.n	1000a4f4 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000a4ee:	4905      	ldr	r1, [pc, #20]	; (1000a504 <_sbrk+0x20>)
1000a4f0:	4a03      	ldr	r2, [pc, #12]	; (1000a500 <_sbrk+0x1c>)
1000a4f2:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000a4f4:	4a02      	ldr	r2, [pc, #8]	; (1000a500 <_sbrk+0x1c>)
1000a4f6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000a4f8:	18c3      	adds	r3, r0, r3
1000a4fa:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000a4fc:	4770      	bx	lr
1000a4fe:	46c0      	nop			; (mov r8, r8)
1000a500:	10013890 	.word	0x10013890
1000a504:	100189d8 	.word	0x100189d8

1000a508 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000a508:	2001      	movs	r0, #1
1000a50a:	4240      	negs	r0, r0
1000a50c:	4770      	bx	lr
1000a50e:	46c0      	nop			; (mov r8, r8)

1000a510 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000a510:	2380      	movs	r3, #128	; 0x80
1000a512:	019b      	lsls	r3, r3, #6
1000a514:	604b      	str	r3, [r1, #4]

	return 0;
}
1000a516:	2000      	movs	r0, #0
1000a518:	4770      	bx	lr
1000a51a:	46c0      	nop			; (mov r8, r8)

1000a51c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000a51c:	2001      	movs	r0, #1
1000a51e:	4770      	bx	lr

1000a520 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000a520:	2000      	movs	r0, #0
1000a522:	4770      	bx	lr

1000a524 <csc_prf_disconnect_event_handler>:
* \CSC device disconnected handler function
*/

at_ble_status_t csc_prf_disconnect_event_handler(void *params)
{
	app_csc_info.devicedb = false;
1000a524:	2200      	movs	r2, #0
1000a526:	4b02      	ldr	r3, [pc, #8]	; (1000a530 <csc_prf_disconnect_event_handler+0xc>)
1000a528:	719a      	strb	r2, [r3, #6]

	return AT_BLE_SUCCESS;
}
1000a52a:	2000      	movs	r0, #0
1000a52c:	4770      	bx	lr
1000a52e:	46c0      	nop			; (mov r8, r8)
1000a530:	10015350 	.word	0x10015350

1000a534 <csc_notification_confirmation_handler>:
	} else {
		DBG_LOG_DEV("Sending Notification over the air failed");
		DBG_LOG_DEV("\r\n");
	}
	return AT_BLE_SUCCESS;
}
1000a534:	2000      	movs	r0, #0
1000a536:	4770      	bx	lr

1000a538 <csc_prf_service_found_handler>:

/**
 * @brief Service found handler invoked by ble manager
 */
at_ble_status_t csc_prf_service_found_handler(void * params)
{
1000a538:	b510      	push	{r4, lr}
1000a53a:	0001      	movs	r1, r0
	DBG_LOG_DEV("Service Found handler");
	memcpy((uint8_t *)&app_csc_info.csc_serv, params, sizeof(at_ble_primary_service_found_t));
1000a53c:	2218      	movs	r2, #24
1000a53e:	4802      	ldr	r0, [pc, #8]	; (1000a548 <csc_prf_service_found_handler+0x10>)
1000a540:	4b02      	ldr	r3, [pc, #8]	; (1000a54c <csc_prf_service_found_handler+0x14>)
1000a542:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000a544:	2000      	movs	r0, #0
1000a546:	bd10      	pop	{r4, pc}
1000a548:	1001536a 	.word	0x1001536a
1000a54c:	10011107 	.word	0x10011107

1000a550 <csc_prf_characteristic_found_handler>:

/**
 * @brief characteristic found handler invoked by ble manager
 */
at_ble_status_t csc_prf_characteristic_found_handler(void *params)
{
1000a550:	b510      	push	{r4, lr}
1000a552:	0001      	movs	r1, r0
	memcpy((uint8_t *)&app_csc_info.csc_char, params, sizeof(at_ble_characteristic_found_t));
1000a554:	2218      	movs	r2, #24
1000a556:	4802      	ldr	r0, [pc, #8]	; (1000a560 <csc_prf_characteristic_found_handler+0x10>)
1000a558:	4b02      	ldr	r3, [pc, #8]	; (1000a564 <csc_prf_characteristic_found_handler+0x14>)
1000a55a:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000a55c:	2000      	movs	r0, #0
1000a55e:	bd10      	pop	{r4, pc}
1000a560:	10015382 	.word	0x10015382
1000a564:	10011107 	.word	0x10011107

1000a568 <csc_prf_descriptor_found_handler>:

/**
 * @brief client descriptor found handler invoked by ble manager
 */
at_ble_status_t csc_prf_descriptor_found_handler(void *params)
{
1000a568:	b510      	push	{r4, lr}
1000a56a:	0001      	movs	r1, r0
		memcpy((uint8_t *)&app_csc_info.csc_desc, params, sizeof(at_ble_descriptor_found_t));
1000a56c:	2216      	movs	r2, #22
1000a56e:	4802      	ldr	r0, [pc, #8]	; (1000a578 <csc_prf_descriptor_found_handler+0x10>)
1000a570:	4b02      	ldr	r3, [pc, #8]	; (1000a57c <csc_prf_descriptor_found_handler+0x14>)
1000a572:	4798      	blx	r3
		return AT_BLE_SUCCESS;
}
1000a574:	2000      	movs	r0, #0
1000a576:	bd10      	pop	{r4, pc}
1000a578:	1001539a 	.word	0x1001539a
1000a57c:	10011107 	.word	0x10011107

1000a580 <csc_prf_notification_handler>:

/**
 * @brief invoked by ble manager on receiving notification
 */
at_ble_status_t csc_prf_notification_handler(void *params)
{
1000a580:	b580      	push	{r7, lr}
1000a582:	4f0c      	ldr	r7, [pc, #48]	; (1000a5b4 <csc_prf_notification_handler+0x34>)
1000a584:	44bd      	add	sp, r7
1000a586:	0001      	movs	r1, r0
	 at_ble_notification_recieved_t notif;
	 csc_report_ntf_t ntf_info;
	 memcpy((uint8_t *)&notif, params, sizeof(at_ble_notification_recieved_t));
1000a588:	4a0b      	ldr	r2, [pc, #44]	; (1000a5b8 <csc_prf_notification_handler+0x38>)
1000a58a:	a802      	add	r0, sp, #8
1000a58c:	4b0b      	ldr	r3, [pc, #44]	; (1000a5bc <csc_prf_notification_handler+0x3c>)
1000a58e:	4798      	blx	r3
	 ntf_info.conn_handle = notif.conn_handle;
1000a590:	466b      	mov	r3, sp
1000a592:	891b      	ldrh	r3, [r3, #8]
1000a594:	466a      	mov	r2, sp
1000a596:	80d3      	strh	r3, [r2, #6]
	 ntf_info.recv_buff_len = notif.char_len;
1000a598:	7a93      	ldrb	r3, [r2, #10]
1000a59a:	7113      	strb	r3, [r2, #4]
	 ntf_info.recv_buff = &notif.char_value[0];
1000a59c:	230e      	movs	r3, #14
1000a59e:	446b      	add	r3, sp
1000a5a0:	9300      	str	r3, [sp, #0]
	 recv_ntf_cb(&ntf_info);
1000a5a2:	4b07      	ldr	r3, [pc, #28]	; (1000a5c0 <csc_prf_notification_handler+0x40>)
1000a5a4:	681b      	ldr	r3, [r3, #0]
1000a5a6:	4668      	mov	r0, sp
1000a5a8:	4798      	blx	r3
	 return AT_BLE_SUCCESS;
}
1000a5aa:	2000      	movs	r0, #0
1000a5ac:	2384      	movs	r3, #132	; 0x84
1000a5ae:	009b      	lsls	r3, r3, #2
1000a5b0:	449d      	add	sp, r3
1000a5b2:	bd80      	pop	{r7, pc}
1000a5b4:	fffffdf0 	.word	0xfffffdf0
1000a5b8:	00000206 	.word	0x00000206
1000a5bc:	10011107 	.word	0x10011107
1000a5c0:	100153b0 	.word	0x100153b0

1000a5c4 <csc_prf_char_changed_handler>:
at_ble_status_t csc_prf_char_changed_handler(void *params)
{
	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, params, sizeof(at_ble_characteristic_changed_t));
	return AT_BLE_SUCCESS;
}
1000a5c4:	2000      	movs	r0, #0
1000a5c6:	4770      	bx	lr

1000a5c8 <csc_prf_connected_state_handler>:

/**
 * @brief Connection handler invoked by ble manager
 */
at_ble_status_t csc_prf_connected_state_handler(void *params)
{
1000a5c8:	b510      	push	{r4, lr}
1000a5ca:	0001      	movs	r1, r0
	at_ble_status_t status;
	memcpy((uint8_t *)&app_csc_info.conn_params, params, sizeof(at_ble_connected_t));
1000a5cc:	4c13      	ldr	r4, [pc, #76]	; (1000a61c <csc_prf_connected_state_handler+0x54>)
1000a5ce:	2212      	movs	r2, #18
1000a5d0:	0020      	movs	r0, r4
1000a5d2:	4b13      	ldr	r3, [pc, #76]	; (1000a620 <csc_prf_connected_state_handler+0x58>)
1000a5d4:	4798      	blx	r3
	if(!app_csc_info.devicedb){		
1000a5d6:	3c08      	subs	r4, #8
1000a5d8:	79a3      	ldrb	r3, [r4, #6]
1000a5da:	2b00      	cmp	r3, #0
1000a5dc:	d11b      	bne.n	1000a616 <csc_prf_connected_state_handler+0x4e>
		app_csc_info.discover_role = DISCOVER_SERVICE;	
1000a5de:	4c11      	ldr	r4, [pc, #68]	; (1000a624 <csc_prf_connected_state_handler+0x5c>)
1000a5e0:	3301      	adds	r3, #1
1000a5e2:	71e3      	strb	r3, [r4, #7]
		app_csc_info.csc_serv.service_uuid.type = AT_BLE_UUID_128;
1000a5e4:	2202      	movs	r2, #2
1000a5e6:	331f      	adds	r3, #31
1000a5e8:	54e2      	strb	r2, [r4, r3]
		memcpy(&app_csc_info.csc_serv.service_uuid.uuid[0], CSC_SERVICE_UUID, CSC_UUID_128_LEN);
1000a5ea:	0020      	movs	r0, r4
1000a5ec:	3021      	adds	r0, #33	; 0x21
1000a5ee:	320e      	adds	r2, #14
1000a5f0:	490d      	ldr	r1, [pc, #52]	; (1000a628 <csc_prf_connected_state_handler+0x60>)
1000a5f2:	4b0b      	ldr	r3, [pc, #44]	; (1000a620 <csc_prf_connected_state_handler+0x58>)
1000a5f4:	4798      	blx	r3
		/* Discover Remote Service by service UUID */
		status = at_ble_primary_service_discover_by_uuid(app_csc_info.conn_params.handle,START_HANDLE, END_HANDLE, &app_csc_info.csc_serv.service_uuid);
1000a5f6:	0023      	movs	r3, r4
1000a5f8:	3320      	adds	r3, #32
1000a5fa:	8a20      	ldrh	r0, [r4, #16]
1000a5fc:	4a0b      	ldr	r2, [pc, #44]	; (1000a62c <csc_prf_connected_state_handler+0x64>)
1000a5fe:	2101      	movs	r1, #1
1000a600:	4c0b      	ldr	r4, [pc, #44]	; (1000a630 <csc_prf_connected_state_handler+0x68>)
1000a602:	47a0      	blx	r4
1000a604:	1e04      	subs	r4, r0, #0
		if(status != AT_BLE_SUCCESS){
1000a606:	d006      	beq.n	1000a616 <csc_prf_connected_state_handler+0x4e>
			DBG_LOG("Failed to start service discovery. status = %d", status);
1000a608:	480a      	ldr	r0, [pc, #40]	; (1000a634 <csc_prf_connected_state_handler+0x6c>)
1000a60a:	4b0b      	ldr	r3, [pc, #44]	; (1000a638 <csc_prf_connected_state_handler+0x70>)
1000a60c:	4798      	blx	r3
1000a60e:	0021      	movs	r1, r4
1000a610:	480a      	ldr	r0, [pc, #40]	; (1000a63c <csc_prf_connected_state_handler+0x74>)
1000a612:	4b0b      	ldr	r3, [pc, #44]	; (1000a640 <csc_prf_connected_state_handler+0x78>)
1000a614:	4798      	blx	r3
		} else {
			DBG_LOG_DEV("Started service discovery");
		}		
	}
	return AT_BLE_SUCCESS;
}
1000a616:	2000      	movs	r0, #0
1000a618:	bd10      	pop	{r4, pc}
1000a61a:	46c0      	nop			; (mov r8, r8)
1000a61c:	10015358 	.word	0x10015358
1000a620:	10011107 	.word	0x10011107
1000a624:	10015350 	.word	0x10015350
1000a628:	10012c08 	.word	0x10012c08
1000a62c:	0000ffff 	.word	0x0000ffff
1000a630:	1000d7ad 	.word	0x1000d7ad
1000a634:	10012c90 	.word	0x10012c90
1000a638:	10011249 	.word	0x10011249
1000a63c:	10012c94 	.word	0x10012c94
1000a640:	10011129 	.word	0x10011129

1000a644 <csc_prf_discovery_complete_handler>:

/**
 * @brief Discovery Complete handler invoked by ble manager
 */
at_ble_status_t csc_prf_discovery_complete_handler(void *params)
{
1000a644:	b510      	push	{r4, lr}
1000a646:	b082      	sub	sp, #8
1000a648:	0001      	movs	r1, r0
		at_ble_discovery_complete_t discover_status;
		memcpy((uint8_t *)&discover_status, params, sizeof(at_ble_discovery_complete_t));
1000a64a:	ac01      	add	r4, sp, #4
1000a64c:	2204      	movs	r2, #4
1000a64e:	0020      	movs	r0, r4
1000a650:	4b19      	ldr	r3, [pc, #100]	; (1000a6b8 <csc_prf_discovery_complete_handler+0x74>)
1000a652:	4798      	blx	r3
		if(discover_status.status == AT_DISCOVER_SUCCESS){
1000a654:	78e3      	ldrb	r3, [r4, #3]
1000a656:	2b0a      	cmp	r3, #10
1000a658:	d12a      	bne.n	1000a6b0 <csc_prf_discovery_complete_handler+0x6c>
			if(discover_status.operation == AT_BLE_DISC_BY_UUID_SVC){
1000a65a:	ab01      	add	r3, sp, #4
1000a65c:	789b      	ldrb	r3, [r3, #2]
1000a65e:	2b03      	cmp	r3, #3
1000a660:	d10e      	bne.n	1000a680 <csc_prf_discovery_complete_handler+0x3c>
				DBG_LOG_DEV("Discover Service Info:\r\n -->ConnHandle 0x%02x\r\n -->start handle 0x%02x\r\n -->End handle : 0x%02x",
				app_csc_info.csc_serv.conn_handle,
				app_csc_info.csc_serv.start_handle,
				app_csc_info.csc_serv.end_handle);				
				if(at_ble_characteristic_discover_all(app_csc_info.conn_params.handle, app_csc_info.csc_serv.start_handle, app_csc_info.csc_serv.end_handle) != AT_BLE_SUCCESS){
1000a662:	4b16      	ldr	r3, [pc, #88]	; (1000a6bc <csc_prf_discovery_complete_handler+0x78>)
1000a664:	8bda      	ldrh	r2, [r3, #30]
1000a666:	8b99      	ldrh	r1, [r3, #28]
1000a668:	8a18      	ldrh	r0, [r3, #16]
1000a66a:	4b15      	ldr	r3, [pc, #84]	; (1000a6c0 <csc_prf_discovery_complete_handler+0x7c>)
1000a66c:	4798      	blx	r3
1000a66e:	2800      	cmp	r0, #0
1000a670:	d01e      	beq.n	1000a6b0 <csc_prf_discovery_complete_handler+0x6c>
					DBG_LOG("Fail to start discover characteristic");
1000a672:	4814      	ldr	r0, [pc, #80]	; (1000a6c4 <csc_prf_discovery_complete_handler+0x80>)
1000a674:	4b14      	ldr	r3, [pc, #80]	; (1000a6c8 <csc_prf_discovery_complete_handler+0x84>)
1000a676:	4798      	blx	r3
1000a678:	4814      	ldr	r0, [pc, #80]	; (1000a6cc <csc_prf_discovery_complete_handler+0x88>)
1000a67a:	4b15      	ldr	r3, [pc, #84]	; (1000a6d0 <csc_prf_discovery_complete_handler+0x8c>)
1000a67c:	4798      	blx	r3
1000a67e:	e017      	b.n	1000a6b0 <csc_prf_discovery_complete_handler+0x6c>
				}
			}
			else if(discover_status.operation == AT_BLE_DISC_ALL_CHAR){
1000a680:	2b05      	cmp	r3, #5
1000a682:	d110      	bne.n	1000a6a6 <csc_prf_discovery_complete_handler+0x62>
				if(at_ble_descriptor_discover_all(app_csc_info.csc_char.conn_handle,(app_csc_info.csc_char.value_handle+1), (app_csc_info.csc_serv.end_handle)) != AT_BLE_SUCCESS){
1000a684:	4b0d      	ldr	r3, [pc, #52]	; (1000a6bc <csc_prf_discovery_complete_handler+0x78>)
1000a686:	8bda      	ldrh	r2, [r3, #30]
1000a688:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
1000a68a:	3101      	adds	r1, #1
1000a68c:	b289      	uxth	r1, r1
1000a68e:	8e58      	ldrh	r0, [r3, #50]	; 0x32
1000a690:	4b10      	ldr	r3, [pc, #64]	; (1000a6d4 <csc_prf_discovery_complete_handler+0x90>)
1000a692:	4798      	blx	r3
1000a694:	2800      	cmp	r0, #0
1000a696:	d00b      	beq.n	1000a6b0 <csc_prf_discovery_complete_handler+0x6c>
					DBG_LOG("Descriptor Discovery Failed");
1000a698:	480a      	ldr	r0, [pc, #40]	; (1000a6c4 <csc_prf_discovery_complete_handler+0x80>)
1000a69a:	4b0b      	ldr	r3, [pc, #44]	; (1000a6c8 <csc_prf_discovery_complete_handler+0x84>)
1000a69c:	4798      	blx	r3
1000a69e:	480e      	ldr	r0, [pc, #56]	; (1000a6d8 <csc_prf_discovery_complete_handler+0x94>)
1000a6a0:	4b0b      	ldr	r3, [pc, #44]	; (1000a6d0 <csc_prf_discovery_complete_handler+0x8c>)
1000a6a2:	4798      	blx	r3
1000a6a4:	e004      	b.n	1000a6b0 <csc_prf_discovery_complete_handler+0x6c>
				}
			}
			else if(discover_status.operation == AT_BLE_DISC_DESC_CHAR){
1000a6a6:	2b07      	cmp	r3, #7
1000a6a8:	d102      	bne.n	1000a6b0 <csc_prf_discovery_complete_handler+0x6c>
				app_csc_info.devicedb = true;
1000a6aa:	2201      	movs	r2, #1
1000a6ac:	4b03      	ldr	r3, [pc, #12]	; (1000a6bc <csc_prf_discovery_complete_handler+0x78>)
1000a6ae:	719a      	strb	r2, [r3, #6]
			}
		}
		return AT_BLE_SUCCESS;
}
1000a6b0:	2000      	movs	r0, #0
1000a6b2:	b002      	add	sp, #8
1000a6b4:	bd10      	pop	{r4, pc}
1000a6b6:	46c0      	nop			; (mov r8, r8)
1000a6b8:	10011107 	.word	0x10011107
1000a6bc:	10015350 	.word	0x10015350
1000a6c0:	1000d805 	.word	0x1000d805
1000a6c4:	10012c90 	.word	0x10012c90
1000a6c8:	10011249 	.word	0x10011249
1000a6cc:	10012cc4 	.word	0x10012cc4
1000a6d0:	10011129 	.word	0x10011129
1000a6d4:	1000d82d 	.word	0x1000d82d
1000a6d8:	10012cec 	.word	0x10012cec

1000a6dc <csc_prf_write_notification_handler>:

/**
 * @brief invoked by ble manager for setting the notification 
 */
at_ble_status_t csc_prf_write_notification_handler(void *params)
{
1000a6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a6de:	b087      	sub	sp, #28
	uint8_t data[2] = {1, 0};
1000a6e0:	ac05      	add	r4, sp, #20
1000a6e2:	2601      	movs	r6, #1
1000a6e4:	7026      	strb	r6, [r4, #0]
1000a6e6:	2500      	movs	r5, #0
1000a6e8:	7065      	strb	r5, [r4, #1]
	DBG_LOG("\r\n");
1000a6ea:	480e      	ldr	r0, [pc, #56]	; (1000a724 <csc_prf_write_notification_handler+0x48>)
1000a6ec:	4f0e      	ldr	r7, [pc, #56]	; (1000a728 <csc_prf_write_notification_handler+0x4c>)
1000a6ee:	47b8      	blx	r7
1000a6f0:	480c      	ldr	r0, [pc, #48]	; (1000a724 <csc_prf_write_notification_handler+0x48>)
1000a6f2:	47b8      	blx	r7
	if(at_ble_characteristic_write(app_csc_info.csc_desc.conn_handle, app_csc_info.csc_desc.desc_handle, 0, 2, data, false, true) == AT_BLE_FAILURE){
1000a6f4:	4b0d      	ldr	r3, [pc, #52]	; (1000a72c <csc_prf_write_notification_handler+0x50>)
1000a6f6:	224c      	movs	r2, #76	; 0x4c
1000a6f8:	5a99      	ldrh	r1, [r3, r2]
1000a6fa:	3a02      	subs	r2, #2
1000a6fc:	5a98      	ldrh	r0, [r3, r2]
1000a6fe:	9602      	str	r6, [sp, #8]
1000a700:	9501      	str	r5, [sp, #4]
1000a702:	9400      	str	r4, [sp, #0]
1000a704:	2302      	movs	r3, #2
1000a706:	2200      	movs	r2, #0
1000a708:	4c09      	ldr	r4, [pc, #36]	; (1000a730 <csc_prf_write_notification_handler+0x54>)
1000a70a:	47a0      	blx	r4
1000a70c:	28e2      	cmp	r0, #226	; 0xe2
1000a70e:	d105      	bne.n	1000a71c <csc_prf_write_notification_handler+0x40>
		DBG_LOG("\r\nFailed to send characteristic Write Request");
1000a710:	4804      	ldr	r0, [pc, #16]	; (1000a724 <csc_prf_write_notification_handler+0x48>)
1000a712:	4b05      	ldr	r3, [pc, #20]	; (1000a728 <csc_prf_write_notification_handler+0x4c>)
1000a714:	4798      	blx	r3
1000a716:	4807      	ldr	r0, [pc, #28]	; (1000a734 <csc_prf_write_notification_handler+0x58>)
1000a718:	4b07      	ldr	r3, [pc, #28]	; (1000a738 <csc_prf_write_notification_handler+0x5c>)
1000a71a:	4798      	blx	r3
	}

	return AT_BLE_SUCCESS;
}
1000a71c:	2000      	movs	r0, #0
1000a71e:	b007      	add	sp, #28
1000a720:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a722:	46c0      	nop			; (mov r8, r8)
1000a724:	10012c90 	.word	0x10012c90
1000a728:	10011249 	.word	0x10011249
1000a72c:	10015350 	.word	0x10015350
1000a730:	1000d855 	.word	0x1000d855
1000a734:	10012d08 	.word	0x10012d08
1000a738:	10011129 	.word	0x10011129

1000a73c <csc_prf_buf_init>:
/**
* \CSC buffer initialization function
*/
void csc_prf_buf_init(uint8_t *databuf, uint16_t datalen)
{
	app_csc_info.buff_ptr = databuf;
1000a73c:	4b01      	ldr	r3, [pc, #4]	; (1000a744 <csc_prf_buf_init+0x8>)
1000a73e:	6018      	str	r0, [r3, #0]
	app_csc_info.buff_len = datalen;
1000a740:	8099      	strh	r1, [r3, #4]
}
1000a742:	4770      	bx	lr
1000a744:	10015350 	.word	0x10015350

1000a748 <csc_prf_init>:

/**
* \CSC profile initialization function
*/
void csc_prf_init(void *param)
{ 
1000a748:	b510      	push	{r4, lr}
	at_ble_status_t status;
	csc_serv_init(app_csc_info.buff_ptr, app_csc_info.buff_len);
1000a74a:	4b0f      	ldr	r3, [pc, #60]	; (1000a788 <csc_prf_init+0x40>)
1000a74c:	8899      	ldrh	r1, [r3, #4]
1000a74e:	6818      	ldr	r0, [r3, #0]
1000a750:	4b0e      	ldr	r3, [pc, #56]	; (1000a78c <csc_prf_init+0x44>)
1000a752:	4798      	blx	r3
	
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a754:	4a0e      	ldr	r2, [pc, #56]	; (1000a790 <csc_prf_init+0x48>)
1000a756:	2100      	movs	r1, #0
1000a758:	2000      	movs	r0, #0
1000a75a:	4c0e      	ldr	r4, [pc, #56]	; (1000a794 <csc_prf_init+0x4c>)
1000a75c:	47a0      	blx	r4
	BLE_GAP_EVENT_TYPE,
	csc_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a75e:	4a0e      	ldr	r2, [pc, #56]	; (1000a798 <csc_prf_init+0x50>)
1000a760:	2101      	movs	r1, #1
1000a762:	2000      	movs	r0, #0
1000a764:	47a0      	blx	r4
	BLE_GATT_CLIENT_EVENT_TYPE,
	csc_gatt_client_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a766:	4a0d      	ldr	r2, [pc, #52]	; (1000a79c <csc_prf_init+0x54>)
1000a768:	2102      	movs	r1, #2
1000a76a:	2000      	movs	r0, #0
1000a76c:	47a0      	blx	r4
	BLE_GATT_SERVER_EVENT_TYPE,
	csc_gatt_server_handle);
	
	status = ble_advertisement_data_set();
1000a76e:	4b0c      	ldr	r3, [pc, #48]	; (1000a7a0 <csc_prf_init+0x58>)
1000a770:	4798      	blx	r3
1000a772:	1e04      	subs	r4, r0, #0
	if (status != AT_BLE_SUCCESS) {
1000a774:	d006      	beq.n	1000a784 <csc_prf_init+0x3c>
		DBG_LOG("Advertisement data set failed reason %d",status);
1000a776:	480b      	ldr	r0, [pc, #44]	; (1000a7a4 <csc_prf_init+0x5c>)
1000a778:	4b0b      	ldr	r3, [pc, #44]	; (1000a7a8 <csc_prf_init+0x60>)
1000a77a:	4798      	blx	r3
1000a77c:	0021      	movs	r1, r4
1000a77e:	480b      	ldr	r0, [pc, #44]	; (1000a7ac <csc_prf_init+0x64>)
1000a780:	4b0b      	ldr	r3, [pc, #44]	; (1000a7b0 <csc_prf_init+0x68>)
1000a782:	4798      	blx	r3
	}
}
1000a784:	bd10      	pop	{r4, pc}
1000a786:	46c0      	nop			; (mov r8, r8)
1000a788:	10015350 	.word	0x10015350
1000a78c:	1000ba49 	.word	0x1000ba49
1000a790:	10012c44 	.word	0x10012c44
1000a794:	1000b131 	.word	0x1000b131
1000a798:	10012c1c 	.word	0x10012c1c
1000a79c:	10012d9c 	.word	0x10012d9c
1000a7a0:	1000b99d 	.word	0x1000b99d
1000a7a4:	10012c90 	.word	0x10012c90
1000a7a8:	10011249 	.word	0x10011249
1000a7ac:	10012d38 	.word	0x10012d38
1000a7b0:	10011129 	.word	0x10011129

1000a7b4 <csc_prf_send_data>:

/**
* \CSC profile send data function
*/
void csc_prf_send_data(uint8_t *databuf, uint16_t datalen)
{
1000a7b4:	b510      	push	{r4, lr}
1000a7b6:	0003      	movs	r3, r0
	if(datalen <= app_csc_info.buff_len){
1000a7b8:	4a08      	ldr	r2, [pc, #32]	; (1000a7dc <csc_prf_send_data+0x28>)
1000a7ba:	8892      	ldrh	r2, [r2, #4]
1000a7bc:	428a      	cmp	r2, r1
1000a7be:	d306      	bcc.n	1000a7ce <csc_prf_send_data+0x1a>
		csc_serv_send_data(app_csc_info.conn_params.handle, databuf, datalen);
1000a7c0:	4a06      	ldr	r2, [pc, #24]	; (1000a7dc <csc_prf_send_data+0x28>)
1000a7c2:	8a10      	ldrh	r0, [r2, #16]
1000a7c4:	000a      	movs	r2, r1
1000a7c6:	0019      	movs	r1, r3
1000a7c8:	4b05      	ldr	r3, [pc, #20]	; (1000a7e0 <csc_prf_send_data+0x2c>)
1000a7ca:	4798      	blx	r3
1000a7cc:	e004      	b.n	1000a7d8 <csc_prf_send_data+0x24>
	}else{
		csc_serv_send_data(app_csc_info.conn_params.handle, databuf, app_csc_info.buff_len);
1000a7ce:	4903      	ldr	r1, [pc, #12]	; (1000a7dc <csc_prf_send_data+0x28>)
1000a7d0:	8a08      	ldrh	r0, [r1, #16]
1000a7d2:	0019      	movs	r1, r3
1000a7d4:	4b02      	ldr	r3, [pc, #8]	; (1000a7e0 <csc_prf_send_data+0x2c>)
1000a7d6:	4798      	blx	r3
	}
}
1000a7d8:	bd10      	pop	{r4, pc}
1000a7da:	46c0      	nop			; (mov r8, r8)
1000a7dc:	10015350 	.word	0x10015350
1000a7e0:	1000bac5 	.word	0x1000bac5

1000a7e4 <csc_prf_dev_adv>:

/**
* \CSC device advertisement handler function
*/
void csc_prf_dev_adv(void)
{
1000a7e4:	b510      	push	{r4, lr}
1000a7e6:	b084      	sub	sp, #16
	/* Start of advertisement */
	if(at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_CSC_FAST_ADV, APP_CSC_ADV_TIMEOUT, 0) == AT_BLE_SUCCESS){
1000a7e8:	2300      	movs	r3, #0
1000a7ea:	9302      	str	r3, [sp, #8]
1000a7ec:	4b0d      	ldr	r3, [pc, #52]	; (1000a824 <csc_prf_dev_adv+0x40>)
1000a7ee:	9301      	str	r3, [sp, #4]
1000a7f0:	23c8      	movs	r3, #200	; 0xc8
1000a7f2:	00db      	lsls	r3, r3, #3
1000a7f4:	9300      	str	r3, [sp, #0]
1000a7f6:	2300      	movs	r3, #0
1000a7f8:	2200      	movs	r2, #0
1000a7fa:	2101      	movs	r1, #1
1000a7fc:	2000      	movs	r0, #0
1000a7fe:	4c0a      	ldr	r4, [pc, #40]	; (1000a828 <csc_prf_dev_adv+0x44>)
1000a800:	47a0      	blx	r4
1000a802:	2800      	cmp	r0, #0
1000a804:	d106      	bne.n	1000a814 <csc_prf_dev_adv+0x30>
		DBG_LOG("Device Started Advertisement");
1000a806:	4809      	ldr	r0, [pc, #36]	; (1000a82c <csc_prf_dev_adv+0x48>)
1000a808:	4b09      	ldr	r3, [pc, #36]	; (1000a830 <csc_prf_dev_adv+0x4c>)
1000a80a:	4798      	blx	r3
1000a80c:	4809      	ldr	r0, [pc, #36]	; (1000a834 <csc_prf_dev_adv+0x50>)
1000a80e:	4b0a      	ldr	r3, [pc, #40]	; (1000a838 <csc_prf_dev_adv+0x54>)
1000a810:	4798      	blx	r3
1000a812:	e005      	b.n	1000a820 <csc_prf_dev_adv+0x3c>
	}else{
		DBG_LOG("Device Advertisement Failed");
1000a814:	4805      	ldr	r0, [pc, #20]	; (1000a82c <csc_prf_dev_adv+0x48>)
1000a816:	4b06      	ldr	r3, [pc, #24]	; (1000a830 <csc_prf_dev_adv+0x4c>)
1000a818:	4798      	blx	r3
1000a81a:	4808      	ldr	r0, [pc, #32]	; (1000a83c <csc_prf_dev_adv+0x58>)
1000a81c:	4b06      	ldr	r3, [pc, #24]	; (1000a838 <csc_prf_dev_adv+0x54>)
1000a81e:	4798      	blx	r3
	}
}
1000a820:	b004      	add	sp, #16
1000a822:	bd10      	pop	{r4, pc}
1000a824:	0000028f 	.word	0x0000028f
1000a828:	1000d5c9 	.word	0x1000d5c9
1000a82c:	10012c90 	.word	0x10012c90
1000a830:	10011249 	.word	0x10011249
1000a834:	10012d60 	.word	0x10012d60
1000a838:	10011129 	.word	0x10011129
1000a83c:	10012d80 	.word	0x10012d80

1000a840 <notify_recv_ntf_handler>:
/**
* \Notify to user about the new data received
*/
void notify_recv_ntf_handler(recv_ntf_callback_t recv_ntf_fn)
{
	recv_ntf_cb = recv_ntf_fn;
1000a840:	4b01      	ldr	r3, [pc, #4]	; (1000a848 <notify_recv_ntf_handler+0x8>)
1000a842:	6018      	str	r0, [r3, #0]
}
1000a844:	4770      	bx	lr
1000a846:	46c0      	nop			; (mov r8, r8)
1000a848:	100153b0 	.word	0x100153b0

1000a84c <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000a84c:	2000      	movs	r0, #0
1000a84e:	4770      	bx	lr

1000a850 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000a850:	2000      	movs	r0, #0
1000a852:	4770      	bx	lr

1000a854 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000a854:	78c0      	ldrb	r0, [r0, #3]
1000a856:	2800      	cmp	r0, #0
1000a858:	d000      	beq.n	1000a85c <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000a85a:	20e2      	movs	r0, #226	; 0xe2
}
1000a85c:	4770      	bx	lr
1000a85e:	46c0      	nop			; (mov r8, r8)

1000a860 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000a860:	2000      	movs	r0, #0
1000a862:	4770      	bx	lr

1000a864 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000a864:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000a866:	7800      	ldrb	r0, [r0, #0]
1000a868:	2800      	cmp	r0, #0
1000a86a:	d006      	beq.n	1000a87a <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000a86c:	4803      	ldr	r0, [pc, #12]	; (1000a87c <ble_scan_report_handler+0x18>)
1000a86e:	4b04      	ldr	r3, [pc, #16]	; (1000a880 <ble_scan_report_handler+0x1c>)
1000a870:	4798      	blx	r3
1000a872:	4804      	ldr	r0, [pc, #16]	; (1000a884 <ble_scan_report_handler+0x20>)
1000a874:	4b04      	ldr	r3, [pc, #16]	; (1000a888 <ble_scan_report_handler+0x24>)
1000a876:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000a878:	20e2      	movs	r0, #226	; 0xe2
}
1000a87a:	bd10      	pop	{r4, pc}
1000a87c:	10012c90 	.word	0x10012c90
1000a880:	10011249 	.word	0x10011249
1000a884:	10012f48 	.word	0x10012f48
1000a888:	10011129 	.word	0x10011129

1000a88c <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000a88c:	b510      	push	{r4, lr}
1000a88e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000a890:	78c0      	ldrb	r0, [r0, #3]
1000a892:	2800      	cmp	r0, #0
1000a894:	d008      	beq.n	1000a8a8 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000a896:	4805      	ldr	r0, [pc, #20]	; (1000a8ac <ble_mtu_changed_cmd_complete_handler+0x20>)
1000a898:	4b05      	ldr	r3, [pc, #20]	; (1000a8b0 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000a89a:	4798      	blx	r3
1000a89c:	78a2      	ldrb	r2, [r4, #2]
1000a89e:	8821      	ldrh	r1, [r4, #0]
1000a8a0:	4804      	ldr	r0, [pc, #16]	; (1000a8b4 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000a8a2:	4b05      	ldr	r3, [pc, #20]	; (1000a8b8 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000a8a4:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000a8a6:	20e2      	movs	r0, #226	; 0xe2
}
1000a8a8:	bd10      	pop	{r4, pc}
1000a8aa:	46c0      	nop			; (mov r8, r8)
1000a8ac:	10012c90 	.word	0x10012c90
1000a8b0:	10011249 	.word	0x10011249
1000a8b4:	10012f5c 	.word	0x10012f5c
1000a8b8:	10011129 	.word	0x10011129

1000a8bc <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a8be:	0004      	movs	r4, r0
1000a8c0:	4b19      	ldr	r3, [pc, #100]	; (1000a928 <ble_disconnected_state_handler+0x6c>)
1000a8c2:	229b      	movs	r2, #155	; 0x9b
1000a8c4:	0092      	lsls	r2, r2, #2
1000a8c6:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000a8c8:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a8ca:	2600      	movs	r6, #0
1000a8cc:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000a8ce:	001a      	movs	r2, r3
1000a8d0:	3a56      	subs	r2, #86	; 0x56
1000a8d2:	8811      	ldrh	r1, [r2, #0]
1000a8d4:	8822      	ldrh	r2, [r4, #0]
1000a8d6:	4291      	cmp	r1, r2
1000a8d8:	d119      	bne.n	1000a90e <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000a8da:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000a8dc:	2a05      	cmp	r2, #5
1000a8de:	d001      	beq.n	1000a8e4 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000a8e0:	2a08      	cmp	r2, #8
1000a8e2:	d101      	bne.n	1000a8e8 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000a8e4:	7007      	strb	r7, [r0, #0]
1000a8e6:	e012      	b.n	1000a90e <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000a8e8:	2a07      	cmp	r2, #7
1000a8ea:	d80f      	bhi.n	1000a90c <ble_disconnected_state_handler+0x50>
1000a8ec:	0092      	lsls	r2, r2, #2
1000a8ee:	490f      	ldr	r1, [pc, #60]	; (1000a92c <ble_disconnected_state_handler+0x70>)
1000a8f0:	588a      	ldr	r2, [r1, r2]
1000a8f2:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a8f4:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000a8f6:	4a0e      	ldr	r2, [pc, #56]	; (1000a930 <ble_disconnected_state_handler+0x74>)
1000a8f8:	7812      	ldrb	r2, [r2, #0]
1000a8fa:	2a00      	cmp	r2, #0
1000a8fc:	d007      	beq.n	1000a90e <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000a8fe:	4a0c      	ldr	r2, [pc, #48]	; (1000a930 <ble_disconnected_state_handler+0x74>)
1000a900:	7812      	ldrb	r2, [r2, #0]
1000a902:	3a01      	subs	r2, #1
1000a904:	b2d2      	uxtb	r2, r2
1000a906:	490a      	ldr	r1, [pc, #40]	; (1000a930 <ble_disconnected_state_handler+0x74>)
1000a908:	700a      	strb	r2, [r1, #0]
1000a90a:	e000      	b.n	1000a90e <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a90c:	7006      	strb	r6, [r0, #0]
1000a90e:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a910:	42ab      	cmp	r3, r5
1000a912:	d1db      	bne.n	1000a8cc <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000a914:	4807      	ldr	r0, [pc, #28]	; (1000a934 <ble_disconnected_state_handler+0x78>)
1000a916:	4b08      	ldr	r3, [pc, #32]	; (1000a938 <ble_disconnected_state_handler+0x7c>)
1000a918:	4798      	blx	r3
1000a91a:	8822      	ldrh	r2, [r4, #0]
1000a91c:	78a1      	ldrb	r1, [r4, #2]
1000a91e:	4807      	ldr	r0, [pc, #28]	; (1000a93c <ble_disconnected_state_handler+0x80>)
1000a920:	4b07      	ldr	r3, [pc, #28]	; (1000a940 <ble_disconnected_state_handler+0x84>)
1000a922:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000a924:	2000      	movs	r0, #0
1000a926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a928:	1001542a 	.word	0x1001542a
1000a92c:	10012dc4 	.word	0x10012dc4
1000a930:	10015638 	.word	0x10015638
1000a934:	10012c90 	.word	0x10012c90
1000a938:	10011249 	.word	0x10011249
1000a93c:	10012f94 	.word	0x10012f94
1000a940:	10011129 	.word	0x10011129

1000a944 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a946:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a948:	8801      	ldrh	r1, [r0, #0]
1000a94a:	4b28      	ldr	r3, [pc, #160]	; (1000a9ec <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a94c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a94e:	891a      	ldrh	r2, [r3, #8]
1000a950:	428a      	cmp	r2, r1
1000a952:	d104      	bne.n	1000a95e <ble_encryption_status_change_handler+0x1a>
1000a954:	001a      	movs	r2, r3
1000a956:	325e      	adds	r2, #94	; 0x5e
1000a958:	7812      	ldrb	r2, [r2, #0]
1000a95a:	2a06      	cmp	r2, #6
1000a95c:	d02e      	beq.n	1000a9bc <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a95e:	3401      	adds	r4, #1
1000a960:	b2e4      	uxtb	r4, r4
1000a962:	337c      	adds	r3, #124	; 0x7c
1000a964:	2c05      	cmp	r4, #5
1000a966:	d1f2      	bne.n	1000a94e <ble_encryption_status_change_handler+0xa>
1000a968:	e039      	b.n	1000a9de <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000a96a:	4920      	ldr	r1, [pc, #128]	; (1000a9ec <ble_encryption_status_change_handler+0xa8>)
1000a96c:	0163      	lsls	r3, r4, #5
1000a96e:	1b1a      	subs	r2, r3, r4
1000a970:	0092      	lsls	r2, r2, #2
1000a972:	188a      	adds	r2, r1, r2
1000a974:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000a976:	0014      	movs	r4, r2
1000a978:	345e      	adds	r4, #94	; 0x5e
1000a97a:	2307      	movs	r3, #7
1000a97c:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000a97e:	481c      	ldr	r0, [pc, #112]	; (1000a9f0 <ble_encryption_status_change_handler+0xac>)
1000a980:	4b1c      	ldr	r3, [pc, #112]	; (1000a9f4 <ble_encryption_status_change_handler+0xb0>)
1000a982:	4798      	blx	r3
1000a984:	481c      	ldr	r0, [pc, #112]	; (1000a9f8 <ble_encryption_status_change_handler+0xb4>)
1000a986:	4b1d      	ldr	r3, [pc, #116]	; (1000a9fc <ble_encryption_status_change_handler+0xb8>)
1000a988:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a98a:	25e2      	movs	r5, #226	; 0xe2
1000a98c:	e02b      	b.n	1000a9e6 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000a98e:	4818      	ldr	r0, [pc, #96]	; (1000a9f0 <ble_encryption_status_change_handler+0xac>)
1000a990:	4b18      	ldr	r3, [pc, #96]	; (1000a9f4 <ble_encryption_status_change_handler+0xb0>)
1000a992:	4798      	blx	r3
1000a994:	481a      	ldr	r0, [pc, #104]	; (1000aa00 <ble_encryption_status_change_handler+0xbc>)
1000a996:	4b19      	ldr	r3, [pc, #100]	; (1000a9fc <ble_encryption_status_change_handler+0xb8>)
1000a998:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000a99a:	4914      	ldr	r1, [pc, #80]	; (1000a9ec <ble_encryption_status_change_handler+0xa8>)
1000a99c:	0163      	lsls	r3, r4, #5
1000a99e:	1b1a      	subs	r2, r3, r4
1000a9a0:	0092      	lsls	r2, r2, #2
1000a9a2:	188a      	adds	r2, r1, r2
1000a9a4:	0010      	movs	r0, r2
1000a9a6:	305e      	adds	r0, #94	; 0x5e
1000a9a8:	2708      	movs	r7, #8
1000a9aa:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000a9ac:	78f0      	ldrb	r0, [r6, #3]
1000a9ae:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000a9b0:	78b2      	ldrb	r2, [r6, #2]
1000a9b2:	1b1c      	subs	r4, r3, r4
1000a9b4:	00a4      	lsls	r4, r4, #2
1000a9b6:	190c      	adds	r4, r1, r4
1000a9b8:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000a9ba:	e014      	b.n	1000a9e6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a9bc:	78b5      	ldrb	r5, [r6, #2]
1000a9be:	2d00      	cmp	r5, #0
1000a9c0:	d0e5      	beq.n	1000a98e <ble_encryption_status_change_handler+0x4a>
1000a9c2:	e7d2      	b.n	1000a96a <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000a9c4:	4e0a      	ldr	r6, [pc, #40]	; (1000a9f0 <ble_encryption_status_change_handler+0xac>)
1000a9c6:	0030      	movs	r0, r6
1000a9c8:	4d0a      	ldr	r5, [pc, #40]	; (1000a9f4 <ble_encryption_status_change_handler+0xb0>)
1000a9ca:	47a8      	blx	r5
1000a9cc:	480c      	ldr	r0, [pc, #48]	; (1000aa00 <ble_encryption_status_change_handler+0xbc>)
1000a9ce:	4c0b      	ldr	r4, [pc, #44]	; (1000a9fc <ble_encryption_status_change_handler+0xb8>)
1000a9d0:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000a9d2:	0030      	movs	r0, r6
1000a9d4:	47a8      	blx	r5
1000a9d6:	480b      	ldr	r0, [pc, #44]	; (1000aa04 <ble_encryption_status_change_handler+0xc0>)
1000a9d8:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a9da:	25e2      	movs	r5, #226	; 0xe2
1000a9dc:	e003      	b.n	1000a9e6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a9de:	78b5      	ldrb	r5, [r6, #2]
1000a9e0:	2d00      	cmp	r5, #0
1000a9e2:	d1c2      	bne.n	1000a96a <ble_encryption_status_change_handler+0x26>
1000a9e4:	e7ee      	b.n	1000a9c4 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000a9e6:	0028      	movs	r0, r5
1000a9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a9ea:	46c0      	nop			; (mov r8, r8)
1000a9ec:	100153cc 	.word	0x100153cc
1000a9f0:	10012c90 	.word	0x10012c90
1000a9f4:	10011249 	.word	0x10011249
1000a9f8:	10012fc4 	.word	0x10012fc4
1000a9fc:	10011129 	.word	0x10011129
1000aa00:	10012fd8 	.word	0x10012fd8
1000aa04:	10012ffc 	.word	0x10012ffc

1000aa08 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000aa08:	b510      	push	{r4, lr}
1000aa0a:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000aa0c:	4b15      	ldr	r3, [pc, #84]	; (1000aa64 <ble_scan_info_handler+0x5c>)
1000aa0e:	781b      	ldrb	r3, [r3, #0]
1000aa10:	b2db      	uxtb	r3, r3
1000aa12:	2b13      	cmp	r3, #19
1000aa14:	d812      	bhi.n	1000aa3c <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000aa16:	4c13      	ldr	r4, [pc, #76]	; (1000aa64 <ble_scan_info_handler+0x5c>)
1000aa18:	7823      	ldrb	r3, [r4, #0]
1000aa1a:	b2db      	uxtb	r3, r3
1000aa1c:	0098      	lsls	r0, r3, #2
1000aa1e:	18c0      	adds	r0, r0, r3
1000aa20:	00c0      	lsls	r0, r0, #3
1000aa22:	18c3      	adds	r3, r0, r3
1000aa24:	4810      	ldr	r0, [pc, #64]	; (1000aa68 <ble_scan_info_handler+0x60>)
1000aa26:	1818      	adds	r0, r3, r0
1000aa28:	2229      	movs	r2, #41	; 0x29
1000aa2a:	4b10      	ldr	r3, [pc, #64]	; (1000aa6c <ble_scan_info_handler+0x64>)
1000aa2c:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000aa2e:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000aa30:	7823      	ldrb	r3, [r4, #0]
1000aa32:	3301      	adds	r3, #1
1000aa34:	b2db      	uxtb	r3, r3
1000aa36:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000aa38:	2300      	movs	r3, #0
1000aa3a:	e011      	b.n	1000aa60 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000aa3c:	480c      	ldr	r0, [pc, #48]	; (1000aa70 <ble_scan_info_handler+0x68>)
1000aa3e:	4b0d      	ldr	r3, [pc, #52]	; (1000aa74 <ble_scan_info_handler+0x6c>)
1000aa40:	4798      	blx	r3
1000aa42:	480d      	ldr	r0, [pc, #52]	; (1000aa78 <ble_scan_info_handler+0x70>)
1000aa44:	4b0d      	ldr	r3, [pc, #52]	; (1000aa7c <ble_scan_info_handler+0x74>)
1000aa46:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000aa48:	4b0d      	ldr	r3, [pc, #52]	; (1000aa80 <ble_scan_info_handler+0x78>)
1000aa4a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000aa4c:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000aa4e:	2800      	cmp	r0, #0
1000aa50:	d006      	beq.n	1000aa60 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000aa52:	4807      	ldr	r0, [pc, #28]	; (1000aa70 <ble_scan_info_handler+0x68>)
1000aa54:	4b07      	ldr	r3, [pc, #28]	; (1000aa74 <ble_scan_info_handler+0x6c>)
1000aa56:	4798      	blx	r3
1000aa58:	480a      	ldr	r0, [pc, #40]	; (1000aa84 <ble_scan_info_handler+0x7c>)
1000aa5a:	4b08      	ldr	r3, [pc, #32]	; (1000aa7c <ble_scan_info_handler+0x74>)
1000aa5c:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000aa5e:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000aa60:	0018      	movs	r0, r3
1000aa62:	bd10      	pop	{r4, pc}
1000aa64:	10014178 	.word	0x10014178
1000aa68:	100156b0 	.word	0x100156b0
1000aa6c:	10011107 	.word	0x10011107
1000aa70:	10012c90 	.word	0x10012c90
1000aa74:	10011249 	.word	0x10011249
1000aa78:	10013024 	.word	0x10013024
1000aa7c:	10011129 	.word	0x10011129
1000aa80:	1000d705 	.word	0x1000d705
1000aa84:	1001305c 	.word	0x1001305c

1000aa88 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aa8a:	464f      	mov	r7, r9
1000aa8c:	4646      	mov	r6, r8
1000aa8e:	b4c0      	push	{r6, r7}
1000aa90:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000aa92:	8841      	ldrh	r1, [r0, #2]
1000aa94:	4b3a      	ldr	r3, [pc, #232]	; (1000ab80 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aa96:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000aa98:	891a      	ldrh	r2, [r3, #8]
1000aa9a:	428a      	cmp	r2, r1
1000aa9c:	d104      	bne.n	1000aaa8 <ble_pair_done_handler+0x20>
1000aa9e:	001a      	movs	r2, r3
1000aaa0:	325e      	adds	r2, #94	; 0x5e
1000aaa2:	7812      	ldrb	r2, [r2, #0]
1000aaa4:	2a03      	cmp	r2, #3
1000aaa6:	d062      	beq.n	1000ab6e <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aaa8:	3401      	adds	r4, #1
1000aaaa:	b2e4      	uxtb	r4, r4
1000aaac:	337c      	adds	r3, #124	; 0x7c
1000aaae:	2c05      	cmp	r4, #5
1000aab0:	d1f2      	bne.n	1000aa98 <ble_pair_done_handler+0x10>
1000aab2:	e02b      	b.n	1000ab0c <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000aab4:	0163      	lsls	r3, r4, #5
1000aab6:	1b1c      	subs	r4, r3, r4
1000aab8:	00a4      	lsls	r4, r4, #2
1000aaba:	4b31      	ldr	r3, [pc, #196]	; (1000ab80 <ble_pair_done_handler+0xf8>)
1000aabc:	191c      	adds	r4, r3, r4
1000aabe:	345e      	adds	r4, #94	; 0x5e
1000aac0:	7823      	ldrb	r3, [r4, #0]
1000aac2:	2b01      	cmp	r3, #1
1000aac4:	d913      	bls.n	1000aaee <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000aac6:	482f      	ldr	r0, [pc, #188]	; (1000ab84 <ble_pair_done_handler+0xfc>)
1000aac8:	4b2f      	ldr	r3, [pc, #188]	; (1000ab88 <ble_pair_done_handler+0x100>)
1000aaca:	4798      	blx	r3
1000aacc:	482f      	ldr	r0, [pc, #188]	; (1000ab8c <ble_pair_done_handler+0x104>)
1000aace:	4b30      	ldr	r3, [pc, #192]	; (1000ab90 <ble_pair_done_handler+0x108>)
1000aad0:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000aad2:	8868      	ldrh	r0, [r5, #2]
1000aad4:	2113      	movs	r1, #19
1000aad6:	4b2f      	ldr	r3, [pc, #188]	; (1000ab94 <ble_pair_done_handler+0x10c>)
1000aad8:	4798      	blx	r3
1000aada:	1e06      	subs	r6, r0, #0
1000aadc:	d04b      	beq.n	1000ab76 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000aade:	4829      	ldr	r0, [pc, #164]	; (1000ab84 <ble_pair_done_handler+0xfc>)
1000aae0:	4b29      	ldr	r3, [pc, #164]	; (1000ab88 <ble_pair_done_handler+0x100>)
1000aae2:	4798      	blx	r3
1000aae4:	482c      	ldr	r0, [pc, #176]	; (1000ab98 <ble_pair_done_handler+0x110>)
1000aae6:	4b2a      	ldr	r3, [pc, #168]	; (1000ab90 <ble_pair_done_handler+0x108>)
1000aae8:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000aaea:	26e2      	movs	r6, #226	; 0xe2
1000aaec:	e043      	b.n	1000ab76 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000aaee:	2600      	movs	r6, #0
1000aaf0:	e041      	b.n	1000ab76 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000aaf2:	4e24      	ldr	r6, [pc, #144]	; (1000ab84 <ble_pair_done_handler+0xfc>)
1000aaf4:	0030      	movs	r0, r6
1000aaf6:	4d24      	ldr	r5, [pc, #144]	; (1000ab88 <ble_pair_done_handler+0x100>)
1000aaf8:	47a8      	blx	r5
1000aafa:	4828      	ldr	r0, [pc, #160]	; (1000ab9c <ble_pair_done_handler+0x114>)
1000aafc:	4c24      	ldr	r4, [pc, #144]	; (1000ab90 <ble_pair_done_handler+0x108>)
1000aafe:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000ab00:	0030      	movs	r0, r6
1000ab02:	47a8      	blx	r5
1000ab04:	4826      	ldr	r0, [pc, #152]	; (1000aba0 <ble_pair_done_handler+0x118>)
1000ab06:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000ab08:	26e2      	movs	r6, #226	; 0xe2
1000ab0a:	e034      	b.n	1000ab76 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000ab0c:	792b      	ldrb	r3, [r5, #4]
1000ab0e:	2b00      	cmp	r3, #0
1000ab10:	d1d0      	bne.n	1000aab4 <ble_pair_done_handler+0x2c>
1000ab12:	e7ee      	b.n	1000aaf2 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000ab14:	481b      	ldr	r0, [pc, #108]	; (1000ab84 <ble_pair_done_handler+0xfc>)
1000ab16:	4b1c      	ldr	r3, [pc, #112]	; (1000ab88 <ble_pair_done_handler+0x100>)
1000ab18:	4798      	blx	r3
1000ab1a:	4820      	ldr	r0, [pc, #128]	; (1000ab9c <ble_pair_done_handler+0x114>)
1000ab1c:	4b1c      	ldr	r3, [pc, #112]	; (1000ab90 <ble_pair_done_handler+0x108>)
1000ab1e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000ab20:	782a      	ldrb	r2, [r5, #0]
1000ab22:	4b17      	ldr	r3, [pc, #92]	; (1000ab80 <ble_pair_done_handler+0xf8>)
1000ab24:	4699      	mov	r9, r3
1000ab26:	0167      	lsls	r7, r4, #5
1000ab28:	1b3b      	subs	r3, r7, r4
1000ab2a:	009b      	lsls	r3, r3, #2
1000ab2c:	444b      	add	r3, r9
1000ab2e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000ab30:	792a      	ldrb	r2, [r5, #4]
1000ab32:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000ab34:	335e      	adds	r3, #94	; 0x5e
1000ab36:	2205      	movs	r2, #5
1000ab38:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000ab3a:	1b38      	subs	r0, r7, r4
1000ab3c:	0080      	lsls	r0, r0, #2
1000ab3e:	4448      	add	r0, r9
1000ab40:	3036      	adds	r0, #54	; 0x36
1000ab42:	0029      	movs	r1, r5
1000ab44:	3122      	adds	r1, #34	; 0x22
1000ab46:	320b      	adds	r2, #11
1000ab48:	4b16      	ldr	r3, [pc, #88]	; (1000aba4 <ble_pair_done_handler+0x11c>)
1000ab4a:	4698      	mov	r8, r3
1000ab4c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000ab4e:	1b38      	subs	r0, r7, r4
1000ab50:	0080      	lsls	r0, r0, #2
1000ab52:	4448      	add	r0, r9
1000ab54:	3046      	adds	r0, #70	; 0x46
1000ab56:	0029      	movs	r1, r5
1000ab58:	3132      	adds	r1, #50	; 0x32
1000ab5a:	2217      	movs	r2, #23
1000ab5c:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000ab5e:	1b38      	subs	r0, r7, r4
1000ab60:	0080      	lsls	r0, r0, #2
1000ab62:	4448      	add	r0, r9
1000ab64:	301a      	adds	r0, #26
1000ab66:	1da9      	adds	r1, r5, #6
1000ab68:	221c      	movs	r2, #28
1000ab6a:	47c0      	blx	r8
1000ab6c:	e003      	b.n	1000ab76 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000ab6e:	792e      	ldrb	r6, [r5, #4]
1000ab70:	2e00      	cmp	r6, #0
1000ab72:	d0cf      	beq.n	1000ab14 <ble_pair_done_handler+0x8c>
1000ab74:	e79e      	b.n	1000aab4 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000ab76:	0030      	movs	r0, r6
1000ab78:	bc0c      	pop	{r2, r3}
1000ab7a:	4690      	mov	r8, r2
1000ab7c:	4699      	mov	r9, r3
1000ab7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ab80:	100153cc 	.word	0x100153cc
1000ab84:	10012c90 	.word	0x10012c90
1000ab88:	10011249 	.word	0x10011249
1000ab8c:	10013074 	.word	0x10013074
1000ab90:	10011129 	.word	0x10011129
1000ab94:	1000d725 	.word	0x1000d725
1000ab98:	10013094 	.word	0x10013094
1000ab9c:	100130b0 	.word	0x100130b0
1000aba0:	100130dc 	.word	0x100130dc
1000aba4:	10011107 	.word	0x10011107

1000aba8 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000aba8:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000abaa:	8800      	ldrh	r0, [r0, #0]
1000abac:	2378      	movs	r3, #120	; 0x78
1000abae:	2201      	movs	r2, #1
1000abb0:	2101      	movs	r1, #1
1000abb2:	4c02      	ldr	r4, [pc, #8]	; (1000abbc <ble_conn_param_update_req+0x14>)
1000abb4:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000abb6:	2000      	movs	r0, #0
1000abb8:	bd10      	pop	{r4, pc}
1000abba:	46c0      	nop			; (mov r8, r8)
1000abbc:	1000d745 	.word	0x1000d745

1000abc0 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000abc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000abc2:	4657      	mov	r7, sl
1000abc4:	464e      	mov	r6, r9
1000abc6:	4645      	mov	r5, r8
1000abc8:	b4e0      	push	{r5, r6, r7}
1000abca:	b084      	sub	sp, #16
1000abcc:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000abce:	2209      	movs	r2, #9
1000abd0:	2100      	movs	r1, #0
1000abd2:	a801      	add	r0, sp, #4
1000abd4:	4b6b      	ldr	r3, [pc, #428]	; (1000ad84 <ble_slave_security_request_handler+0x1c4>)
1000abd6:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000abd8:	8825      	ldrh	r5, [r4, #0]
1000abda:	496b      	ldr	r1, [pc, #428]	; (1000ad88 <ble_slave_security_request_handler+0x1c8>)
1000abdc:	000a      	movs	r2, r1
1000abde:	2300      	movs	r3, #0
1000abe0:	8910      	ldrh	r0, [r2, #8]
1000abe2:	42a8      	cmp	r0, r5
1000abe4:	d116      	bne.n	1000ac14 <ble_slave_security_request_handler+0x54>
1000abe6:	0010      	movs	r0, r2
1000abe8:	305e      	adds	r0, #94	; 0x5e
1000abea:	7800      	ldrb	r0, [r0, #0]
1000abec:	2802      	cmp	r0, #2
1000abee:	d111      	bne.n	1000ac14 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000abf0:	4865      	ldr	r0, [pc, #404]	; (1000ad88 <ble_slave_security_request_handler+0x1c8>)
1000abf2:	015a      	lsls	r2, r3, #5
1000abf4:	1ad6      	subs	r6, r2, r3
1000abf6:	00b6      	lsls	r6, r6, #2
1000abf8:	1986      	adds	r6, r0, r6
1000abfa:	365e      	adds	r6, #94	; 0x5e
1000abfc:	2206      	movs	r2, #6
1000abfe:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000ac00:	32f9      	adds	r2, #249	; 0xf9
1000ac02:	4013      	ands	r3, r2
1000ac04:	015a      	lsls	r2, r3, #5
1000ac06:	1ad2      	subs	r2, r2, r3
1000ac08:	0092      	lsls	r2, r2, #2
1000ac0a:	1882      	adds	r2, r0, r2
1000ac0c:	7d12      	ldrb	r2, [r2, #20]
1000ac0e:	07d0      	lsls	r0, r2, #31
1000ac10:	d405      	bmi.n	1000ac1e <ble_slave_security_request_handler+0x5e>
1000ac12:	e01b      	b.n	1000ac4c <ble_slave_security_request_handler+0x8c>
1000ac14:	3301      	adds	r3, #1
1000ac16:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ac18:	2b05      	cmp	r3, #5
1000ac1a:	d1e1      	bne.n	1000abe0 <ble_slave_security_request_handler+0x20>
1000ac1c:	e01e      	b.n	1000ac5c <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000ac1e:	78e0      	ldrb	r0, [r4, #3]
1000ac20:	2800      	cmp	r0, #0
1000ac22:	d013      	beq.n	1000ac4c <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000ac24:	0159      	lsls	r1, r3, #5
1000ac26:	1ac9      	subs	r1, r1, r3
1000ac28:	008b      	lsls	r3, r1, #2
1000ac2a:	4957      	ldr	r1, [pc, #348]	; (1000ad88 <ble_slave_security_request_handler+0x1c8>)
1000ac2c:	18c9      	adds	r1, r1, r3
1000ac2e:	311a      	adds	r1, #26
1000ac30:	8820      	ldrh	r0, [r4, #0]
1000ac32:	4b56      	ldr	r3, [pc, #344]	; (1000ad8c <ble_slave_security_request_handler+0x1cc>)
1000ac34:	4798      	blx	r3
1000ac36:	2800      	cmp	r0, #0
1000ac38:	d100      	bne.n	1000ac3c <ble_slave_security_request_handler+0x7c>
1000ac3a:	e09d      	b.n	1000ad78 <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000ac3c:	4854      	ldr	r0, [pc, #336]	; (1000ad90 <ble_slave_security_request_handler+0x1d0>)
1000ac3e:	4b55      	ldr	r3, [pc, #340]	; (1000ad94 <ble_slave_security_request_handler+0x1d4>)
1000ac40:	4798      	blx	r3
1000ac42:	4855      	ldr	r0, [pc, #340]	; (1000ad98 <ble_slave_security_request_handler+0x1d8>)
1000ac44:	4b55      	ldr	r3, [pc, #340]	; (1000ad9c <ble_slave_security_request_handler+0x1dc>)
1000ac46:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000ac48:	20e2      	movs	r0, #226	; 0xe2
1000ac4a:	e095      	b.n	1000ad78 <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ac4c:	015a      	lsls	r2, r3, #5
1000ac4e:	1ad3      	subs	r3, r2, r3
1000ac50:	009b      	lsls	r3, r3, #2
1000ac52:	4a4d      	ldr	r2, [pc, #308]	; (1000ad88 <ble_slave_security_request_handler+0x1c8>)
1000ac54:	18d3      	adds	r3, r2, r3
1000ac56:	335e      	adds	r3, #94	; 0x5e
1000ac58:	2202      	movs	r2, #2
1000ac5a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ac5c:	8825      	ldrh	r5, [r4, #0]
1000ac5e:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ac60:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ac62:	0016      	movs	r6, r2
1000ac64:	8908      	ldrh	r0, [r1, #8]
1000ac66:	42a8      	cmp	r0, r5
1000ac68:	d10d      	bne.n	1000ac86 <ble_slave_security_request_handler+0xc6>
1000ac6a:	0008      	movs	r0, r1
1000ac6c:	305e      	adds	r0, #94	; 0x5e
1000ac6e:	7800      	ldrb	r0, [r0, #0]
1000ac70:	2802      	cmp	r0, #2
1000ac72:	d108      	bne.n	1000ac86 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000ac74:	0152      	lsls	r2, r2, #5
1000ac76:	1b92      	subs	r2, r2, r6
1000ac78:	0096      	lsls	r6, r2, #2
1000ac7a:	4a43      	ldr	r2, [pc, #268]	; (1000ad88 <ble_slave_security_request_handler+0x1c8>)
1000ac7c:	1992      	adds	r2, r2, r6
1000ac7e:	325e      	adds	r2, #94	; 0x5e
1000ac80:	2103      	movs	r1, #3
1000ac82:	7011      	strb	r1, [r2, #0]
			break;
1000ac84:	e005      	b.n	1000ac92 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ac86:	3301      	adds	r3, #1
1000ac88:	b2db      	uxtb	r3, r3
1000ac8a:	3201      	adds	r2, #1
1000ac8c:	317c      	adds	r1, #124	; 0x7c
1000ac8e:	2b05      	cmp	r3, #5
1000ac90:	d1e7      	bne.n	1000ac62 <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000ac92:	aa01      	add	r2, sp, #4
1000ac94:	2102      	movs	r1, #2
1000ac96:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
1000ac98:	78e1      	ldrb	r1, [r4, #3]
1000ac9a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000ac9c:	2101      	movs	r1, #1
1000ac9e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000aca0:	3103      	adds	r1, #3
1000aca2:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000aca4:	001f      	movs	r7, r3
1000aca6:	015a      	lsls	r2, r3, #5
1000aca8:	1ad2      	subs	r2, r2, r3
1000acaa:	0092      	lsls	r2, r2, #2
1000acac:	4936      	ldr	r1, [pc, #216]	; (1000ad88 <ble_slave_security_request_handler+0x1c8>)
1000acae:	5c52      	ldrb	r2, [r2, r1]
1000acb0:	2a02      	cmp	r2, #2
1000acb2:	d104      	bne.n	1000acbe <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000acb4:	aa01      	add	r2, sp, #4
1000acb6:	2103      	movs	r1, #3
1000acb8:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000acba:	71d1      	strb	r1, [r2, #7]
1000acbc:	e003      	b.n	1000acc6 <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000acbe:	aa01      	add	r2, sp, #4
1000acc0:	2101      	movs	r1, #1
1000acc2:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000acc4:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000acc6:	aa01      	add	r2, sp, #4
1000acc8:	2110      	movs	r1, #16
1000acca:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000accc:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000acce:	017a      	lsls	r2, r7, #5
1000acd0:	1bd2      	subs	r2, r2, r7
1000acd2:	0092      	lsls	r2, r2, #2
1000acd4:	492c      	ldr	r1, [pc, #176]	; (1000ad88 <ble_slave_security_request_handler+0x1c8>)
1000acd6:	188a      	adds	r2, r1, r2
1000acd8:	7e12      	ldrb	r2, [r2, #24]
1000acda:	2a40      	cmp	r2, #64	; 0x40
1000acdc:	d134      	bne.n	1000ad48 <ble_slave_security_request_handler+0x188>
1000acde:	015a      	lsls	r2, r3, #5
1000ace0:	1ad3      	subs	r3, r2, r3
1000ace2:	009b      	lsls	r3, r3, #2
1000ace4:	469a      	mov	sl, r3
1000ace6:	001e      	movs	r6, r3
1000ace8:	3660      	adds	r6, #96	; 0x60
1000acea:	1876      	adds	r6, r6, r1
1000acec:	4655      	mov	r5, sl
1000acee:	3568      	adds	r5, #104	; 0x68
1000acf0:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000acf2:	4b2b      	ldr	r3, [pc, #172]	; (1000ada0 <ble_slave_security_request_handler+0x1e0>)
1000acf4:	4699      	mov	r9, r3
1000acf6:	230f      	movs	r3, #15
1000acf8:	4698      	mov	r8, r3
1000acfa:	47c8      	blx	r9
1000acfc:	4643      	mov	r3, r8
1000acfe:	4018      	ands	r0, r3
1000ad00:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000ad02:	47c8      	blx	r9
1000ad04:	4643      	mov	r3, r8
1000ad06:	4018      	ands	r0, r3
1000ad08:	74b0      	strb	r0, [r6, #18]
1000ad0a:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000ad0c:	42ae      	cmp	r6, r5
1000ad0e:	d1f4      	bne.n	1000acfa <ble_slave_security_request_handler+0x13a>
1000ad10:	4656      	mov	r6, sl
1000ad12:	3670      	adds	r6, #112	; 0x70
1000ad14:	4a1c      	ldr	r2, [pc, #112]	; (1000ad88 <ble_slave_security_request_handler+0x1c8>)
1000ad16:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ad18:	4b21      	ldr	r3, [pc, #132]	; (1000ada0 <ble_slave_security_request_handler+0x1e0>)
1000ad1a:	4699      	mov	r9, r3
1000ad1c:	230f      	movs	r3, #15
1000ad1e:	4698      	mov	r8, r3
1000ad20:	47c8      	blx	r9
1000ad22:	4643      	mov	r3, r8
1000ad24:	4018      	ands	r0, r3
1000ad26:	7028      	strb	r0, [r5, #0]
1000ad28:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000ad2a:	42b5      	cmp	r5, r6
1000ad2c:	d1f8      	bne.n	1000ad20 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000ad2e:	4b1c      	ldr	r3, [pc, #112]	; (1000ada0 <ble_slave_security_request_handler+0x1e0>)
1000ad30:	4798      	blx	r3
1000ad32:	017b      	lsls	r3, r7, #5
1000ad34:	1bdb      	subs	r3, r3, r7
1000ad36:	009b      	lsls	r3, r3, #2
1000ad38:	4a13      	ldr	r2, [pc, #76]	; (1000ad88 <ble_slave_security_request_handler+0x1c8>)
1000ad3a:	18d3      	adds	r3, r2, r3
1000ad3c:	001a      	movs	r2, r3
1000ad3e:	3270      	adds	r2, #112	; 0x70
1000ad40:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000ad42:	337a      	adds	r3, #122	; 0x7a
1000ad44:	2210      	movs	r2, #16
1000ad46:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000ad48:	017a      	lsls	r2, r7, #5
1000ad4a:	1bd7      	subs	r7, r2, r7
1000ad4c:	00bf      	lsls	r7, r7, #2
1000ad4e:	3760      	adds	r7, #96	; 0x60
1000ad50:	4a0d      	ldr	r2, [pc, #52]	; (1000ad88 <ble_slave_security_request_handler+0x1c8>)
1000ad52:	18ba      	adds	r2, r7, r2
1000ad54:	8820      	ldrh	r0, [r4, #0]
1000ad56:	2300      	movs	r3, #0
1000ad58:	a901      	add	r1, sp, #4
1000ad5a:	4c12      	ldr	r4, [pc, #72]	; (1000ada4 <ble_slave_security_request_handler+0x1e4>)
1000ad5c:	47a0      	blx	r4
1000ad5e:	2800      	cmp	r0, #0
1000ad60:	d00a      	beq.n	1000ad78 <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
1000ad62:	ab01      	add	r3, sp, #4
1000ad64:	2200      	movs	r2, #0
1000ad66:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000ad68:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000ad6a:	4809      	ldr	r0, [pc, #36]	; (1000ad90 <ble_slave_security_request_handler+0x1d0>)
1000ad6c:	4b09      	ldr	r3, [pc, #36]	; (1000ad94 <ble_slave_security_request_handler+0x1d4>)
1000ad6e:	4798      	blx	r3
1000ad70:	480d      	ldr	r0, [pc, #52]	; (1000ada8 <ble_slave_security_request_handler+0x1e8>)
1000ad72:	4b0a      	ldr	r3, [pc, #40]	; (1000ad9c <ble_slave_security_request_handler+0x1dc>)
1000ad74:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000ad76:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000ad78:	b004      	add	sp, #16
1000ad7a:	bc1c      	pop	{r2, r3, r4}
1000ad7c:	4690      	mov	r8, r2
1000ad7e:	4699      	mov	r9, r3
1000ad80:	46a2      	mov	sl, r4
1000ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ad84:	10011119 	.word	0x10011119
1000ad88:	100153cc 	.word	0x100153cc
1000ad8c:	1000e3fd 	.word	0x1000e3fd
1000ad90:	10012c90 	.word	0x10012c90
1000ad94:	10011249 	.word	0x10011249
1000ad98:	1001310c 	.word	0x1001310c
1000ad9c:	10011129 	.word	0x10011129
1000ada0:	1001125d 	.word	0x1001125d
1000ada4:	1000e211 	.word	0x1000e211
1000ada8:	10013124 	.word	0x10013124

1000adac <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000adac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000adae:	465f      	mov	r7, fp
1000adb0:	4656      	mov	r6, sl
1000adb2:	464d      	mov	r5, r9
1000adb4:	4644      	mov	r4, r8
1000adb6:	b4f0      	push	{r4, r5, r6, r7}
1000adb8:	b085      	sub	sp, #20
1000adba:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000adbc:	8804      	ldrh	r4, [r0, #0]
1000adbe:	4a49      	ldr	r2, [pc, #292]	; (1000aee4 <ble_pair_request_handler+0x138>)
1000adc0:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000adc2:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000adc4:	8910      	ldrh	r0, [r2, #8]
1000adc6:	42a0      	cmp	r0, r4
1000adc8:	d10d      	bne.n	1000ade6 <ble_pair_request_handler+0x3a>
1000adca:	0010      	movs	r0, r2
1000adcc:	305e      	adds	r0, #94	; 0x5e
1000adce:	7800      	ldrb	r0, [r0, #0]
1000add0:	2802      	cmp	r0, #2
1000add2:	d108      	bne.n	1000ade6 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000add4:	014a      	lsls	r2, r1, #5
1000add6:	1a52      	subs	r2, r2, r1
1000add8:	0095      	lsls	r5, r2, #2
1000adda:	4a42      	ldr	r2, [pc, #264]	; (1000aee4 <ble_pair_request_handler+0x138>)
1000addc:	1952      	adds	r2, r2, r5
1000adde:	325e      	adds	r2, #94	; 0x5e
1000ade0:	2103      	movs	r1, #3
1000ade2:	7011      	strb	r1, [r2, #0]
			break;
1000ade4:	e005      	b.n	1000adf2 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ade6:	3301      	adds	r3, #1
1000ade8:	b2db      	uxtb	r3, r3
1000adea:	3101      	adds	r1, #1
1000adec:	327c      	adds	r2, #124	; 0x7c
1000adee:	2b05      	cmp	r3, #5
1000adf0:	d1e8      	bne.n	1000adc4 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000adf2:	aa01      	add	r2, sp, #4
1000adf4:	2102      	movs	r1, #2
1000adf6:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000adf8:	3901      	subs	r1, #1
1000adfa:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000adfc:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000adfe:	2100      	movs	r1, #0
1000ae00:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000ae02:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000ae04:	001f      	movs	r7, r3
1000ae06:	015a      	lsls	r2, r3, #5
1000ae08:	1ad2      	subs	r2, r2, r3
1000ae0a:	0092      	lsls	r2, r2, #2
1000ae0c:	4935      	ldr	r1, [pc, #212]	; (1000aee4 <ble_pair_request_handler+0x138>)
1000ae0e:	5c52      	ldrb	r2, [r2, r1]
1000ae10:	2a02      	cmp	r2, #2
1000ae12:	d104      	bne.n	1000ae1e <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000ae14:	aa01      	add	r2, sp, #4
1000ae16:	2103      	movs	r1, #3
1000ae18:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000ae1a:	71d1      	strb	r1, [r2, #7]
1000ae1c:	e003      	b.n	1000ae26 <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000ae1e:	aa01      	add	r2, sp, #4
1000ae20:	2101      	movs	r1, #1
1000ae22:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000ae24:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000ae26:	aa01      	add	r2, sp, #4
1000ae28:	2110      	movs	r1, #16
1000ae2a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000ae2c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000ae2e:	017a      	lsls	r2, r7, #5
1000ae30:	1bd2      	subs	r2, r2, r7
1000ae32:	0092      	lsls	r2, r2, #2
1000ae34:	492b      	ldr	r1, [pc, #172]	; (1000aee4 <ble_pair_request_handler+0x138>)
1000ae36:	188a      	adds	r2, r1, r2
1000ae38:	7e12      	ldrb	r2, [r2, #24]
1000ae3a:	2a40      	cmp	r2, #64	; 0x40
1000ae3c:	d131      	bne.n	1000aea2 <ble_pair_request_handler+0xf6>
1000ae3e:	015a      	lsls	r2, r3, #5
1000ae40:	1ad3      	subs	r3, r2, r3
1000ae42:	009b      	lsls	r3, r3, #2
1000ae44:	469a      	mov	sl, r3
1000ae46:	001d      	movs	r5, r3
1000ae48:	3560      	adds	r5, #96	; 0x60
1000ae4a:	186d      	adds	r5, r5, r1
1000ae4c:	4654      	mov	r4, sl
1000ae4e:	3468      	adds	r4, #104	; 0x68
1000ae50:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ae52:	4b25      	ldr	r3, [pc, #148]	; (1000aee8 <ble_pair_request_handler+0x13c>)
1000ae54:	4699      	mov	r9, r3
1000ae56:	260f      	movs	r6, #15
1000ae58:	47c8      	blx	r9
1000ae5a:	4030      	ands	r0, r6
1000ae5c:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000ae5e:	47c8      	blx	r9
1000ae60:	4030      	ands	r0, r6
1000ae62:	74a8      	strb	r0, [r5, #18]
1000ae64:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000ae66:	42a5      	cmp	r5, r4
1000ae68:	d1f6      	bne.n	1000ae58 <ble_pair_request_handler+0xac>
1000ae6a:	4655      	mov	r5, sl
1000ae6c:	3570      	adds	r5, #112	; 0x70
1000ae6e:	4a1d      	ldr	r2, [pc, #116]	; (1000aee4 <ble_pair_request_handler+0x138>)
1000ae70:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ae72:	4b1d      	ldr	r3, [pc, #116]	; (1000aee8 <ble_pair_request_handler+0x13c>)
1000ae74:	4699      	mov	r9, r3
1000ae76:	230f      	movs	r3, #15
1000ae78:	4698      	mov	r8, r3
1000ae7a:	47c8      	blx	r9
1000ae7c:	4643      	mov	r3, r8
1000ae7e:	4018      	ands	r0, r3
1000ae80:	7020      	strb	r0, [r4, #0]
1000ae82:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000ae84:	42ac      	cmp	r4, r5
1000ae86:	d1f8      	bne.n	1000ae7a <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000ae88:	4b17      	ldr	r3, [pc, #92]	; (1000aee8 <ble_pair_request_handler+0x13c>)
1000ae8a:	4798      	blx	r3
1000ae8c:	017b      	lsls	r3, r7, #5
1000ae8e:	1bdb      	subs	r3, r3, r7
1000ae90:	009b      	lsls	r3, r3, #2
1000ae92:	4a14      	ldr	r2, [pc, #80]	; (1000aee4 <ble_pair_request_handler+0x138>)
1000ae94:	18d3      	adds	r3, r2, r3
1000ae96:	001a      	movs	r2, r3
1000ae98:	3270      	adds	r2, #112	; 0x70
1000ae9a:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000ae9c:	337a      	adds	r3, #122	; 0x7a
1000ae9e:	2210      	movs	r2, #16
1000aea0:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000aea2:	017a      	lsls	r2, r7, #5
1000aea4:	1bd7      	subs	r7, r2, r7
1000aea6:	00bf      	lsls	r7, r7, #2
1000aea8:	3760      	adds	r7, #96	; 0x60
1000aeaa:	4a0e      	ldr	r2, [pc, #56]	; (1000aee4 <ble_pair_request_handler+0x138>)
1000aeac:	18ba      	adds	r2, r7, r2
1000aeae:	465b      	mov	r3, fp
1000aeb0:	8818      	ldrh	r0, [r3, #0]
1000aeb2:	2300      	movs	r3, #0
1000aeb4:	a901      	add	r1, sp, #4
1000aeb6:	4c0d      	ldr	r4, [pc, #52]	; (1000aeec <ble_pair_request_handler+0x140>)
1000aeb8:	47a0      	blx	r4
1000aeba:	2800      	cmp	r0, #0
1000aebc:	d00a      	beq.n	1000aed4 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
1000aebe:	ab01      	add	r3, sp, #4
1000aec0:	2200      	movs	r2, #0
1000aec2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000aec4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000aec6:	480a      	ldr	r0, [pc, #40]	; (1000aef0 <ble_pair_request_handler+0x144>)
1000aec8:	4b0a      	ldr	r3, [pc, #40]	; (1000aef4 <ble_pair_request_handler+0x148>)
1000aeca:	4798      	blx	r3
1000aecc:	480a      	ldr	r0, [pc, #40]	; (1000aef8 <ble_pair_request_handler+0x14c>)
1000aece:	4b0b      	ldr	r3, [pc, #44]	; (1000aefc <ble_pair_request_handler+0x150>)
1000aed0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000aed2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000aed4:	b005      	add	sp, #20
1000aed6:	bc3c      	pop	{r2, r3, r4, r5}
1000aed8:	4690      	mov	r8, r2
1000aeda:	4699      	mov	r9, r3
1000aedc:	46a2      	mov	sl, r4
1000aede:	46ab      	mov	fp, r5
1000aee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aee2:	46c0      	nop			; (mov r8, r8)
1000aee4:	100153cc 	.word	0x100153cc
1000aee8:	1001125d 	.word	0x1001125d
1000aeec:	1000e211 	.word	0x1000e211
1000aef0:	10012c90 	.word	0x10012c90
1000aef4:	10011249 	.word	0x10011249
1000aef8:	10013150 	.word	0x10013150
1000aefc:	10011129 	.word	0x10011129

1000af00 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000af00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af02:	b085      	sub	sp, #20
1000af04:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000af06:	2206      	movs	r2, #6
1000af08:	493d      	ldr	r1, [pc, #244]	; (1000b000 <ble_pair_key_request_handler+0x100>)
1000af0a:	a802      	add	r0, sp, #8
1000af0c:	4e3d      	ldr	r6, [pc, #244]	; (1000b004 <ble_pair_key_request_handler+0x104>)
1000af0e:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000af10:	ac01      	add	r4, sp, #4
1000af12:	2204      	movs	r2, #4
1000af14:	0029      	movs	r1, r5
1000af16:	0020      	movs	r0, r4
1000af18:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000af1a:	78e3      	ldrb	r3, [r4, #3]
1000af1c:	2b00      	cmp	r3, #0
1000af1e:	d162      	bne.n	1000afe6 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000af20:	4839      	ldr	r0, [pc, #228]	; (1000b008 <ble_pair_key_request_handler+0x108>)
1000af22:	4b3a      	ldr	r3, [pc, #232]	; (1000b00c <ble_pair_key_request_handler+0x10c>)
1000af24:	4798      	blx	r3
1000af26:	483a      	ldr	r0, [pc, #232]	; (1000b010 <ble_pair_key_request_handler+0x110>)
1000af28:	4b3a      	ldr	r3, [pc, #232]	; (1000b014 <ble_pair_key_request_handler+0x114>)
1000af2a:	4798      	blx	r3
1000af2c:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000af2e:	4c3a      	ldr	r4, [pc, #232]	; (1000b018 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000af30:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000af32:	201e      	movs	r0, #30
1000af34:	47a0      	blx	r4
1000af36:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000af38:	2b00      	cmp	r3, #0
1000af3a:	d11a      	bne.n	1000af72 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000af3c:	4f32      	ldr	r7, [pc, #200]	; (1000b008 <ble_pair_key_request_handler+0x108>)
1000af3e:	0038      	movs	r0, r7
1000af40:	4e32      	ldr	r6, [pc, #200]	; (1000b00c <ble_pair_key_request_handler+0x10c>)
1000af42:	47b0      	blx	r6
1000af44:	4835      	ldr	r0, [pc, #212]	; (1000b01c <ble_pair_key_request_handler+0x11c>)
1000af46:	4c33      	ldr	r4, [pc, #204]	; (1000b014 <ble_pair_key_request_handler+0x114>)
1000af48:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000af4a:	0038      	movs	r0, r7
1000af4c:	47b0      	blx	r6
1000af4e:	4834      	ldr	r0, [pc, #208]	; (1000b020 <ble_pair_key_request_handler+0x120>)
1000af50:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000af52:	8828      	ldrh	r0, [r5, #0]
1000af54:	2113      	movs	r1, #19
1000af56:	4b33      	ldr	r3, [pc, #204]	; (1000b024 <ble_pair_key_request_handler+0x124>)
1000af58:	4798      	blx	r3
1000af5a:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000af5c:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000af5e:	2b00      	cmp	r3, #0
1000af60:	d04c      	beq.n	1000affc <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000af62:	4829      	ldr	r0, [pc, #164]	; (1000b008 <ble_pair_key_request_handler+0x108>)
1000af64:	4b29      	ldr	r3, [pc, #164]	; (1000b00c <ble_pair_key_request_handler+0x10c>)
1000af66:	4798      	blx	r3
1000af68:	482f      	ldr	r0, [pc, #188]	; (1000b028 <ble_pair_key_request_handler+0x128>)
1000af6a:	4b2a      	ldr	r3, [pc, #168]	; (1000b014 <ble_pair_key_request_handler+0x114>)
1000af6c:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000af6e:	20e2      	movs	r0, #226	; 0xe2
1000af70:	e044      	b.n	1000affc <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000af72:	001a      	movs	r2, r3
1000af74:	3a30      	subs	r2, #48	; 0x30
1000af76:	2a09      	cmp	r2, #9
1000af78:	d8db      	bhi.n	1000af32 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000af7a:	aa02      	add	r2, sp, #8
1000af7c:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000af7e:	4038      	ands	r0, r7
1000af80:	4b2a      	ldr	r3, [pc, #168]	; (1000b02c <ble_pair_key_request_handler+0x12c>)
1000af82:	4798      	blx	r3
1000af84:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000af86:	2e06      	cmp	r6, #6
1000af88:	d026      	beq.n	1000afd8 <ble_pair_key_request_handler+0xd8>
1000af8a:	e7d2      	b.n	1000af32 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000af8c:	481e      	ldr	r0, [pc, #120]	; (1000b008 <ble_pair_key_request_handler+0x108>)
1000af8e:	4b1f      	ldr	r3, [pc, #124]	; (1000b00c <ble_pair_key_request_handler+0x10c>)
1000af90:	4798      	blx	r3
1000af92:	4827      	ldr	r0, [pc, #156]	; (1000b030 <ble_pair_key_request_handler+0x130>)
1000af94:	4b1f      	ldr	r3, [pc, #124]	; (1000b014 <ble_pair_key_request_handler+0x114>)
1000af96:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000af98:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000af9a:	4e24      	ldr	r6, [pc, #144]	; (1000b02c <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000af9c:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000af9e:	5ce0      	ldrb	r0, [r4, r3]
1000afa0:	47b0      	blx	r6
1000afa2:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000afa4:	2c06      	cmp	r4, #6
1000afa6:	d1f9      	bne.n	1000af9c <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000afa8:	ab01      	add	r3, sp, #4
1000afaa:	7899      	ldrb	r1, [r3, #2]
1000afac:	8828      	ldrh	r0, [r5, #0]
1000afae:	aa02      	add	r2, sp, #8
1000afb0:	4b20      	ldr	r3, [pc, #128]	; (1000b034 <ble_pair_key_request_handler+0x134>)
1000afb2:	4798      	blx	r3
1000afb4:	2800      	cmp	r0, #0
1000afb6:	d021      	beq.n	1000affc <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000afb8:	4813      	ldr	r0, [pc, #76]	; (1000b008 <ble_pair_key_request_handler+0x108>)
1000afba:	4b14      	ldr	r3, [pc, #80]	; (1000b00c <ble_pair_key_request_handler+0x10c>)
1000afbc:	4798      	blx	r3
1000afbe:	481e      	ldr	r0, [pc, #120]	; (1000b038 <ble_pair_key_request_handler+0x138>)
1000afc0:	4b14      	ldr	r3, [pc, #80]	; (1000b014 <ble_pair_key_request_handler+0x114>)
1000afc2:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000afc4:	2000      	movs	r0, #0
1000afc6:	e019      	b.n	1000affc <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000afc8:	480f      	ldr	r0, [pc, #60]	; (1000b008 <ble_pair_key_request_handler+0x108>)
1000afca:	4b10      	ldr	r3, [pc, #64]	; (1000b00c <ble_pair_key_request_handler+0x10c>)
1000afcc:	4798      	blx	r3
1000afce:	481b      	ldr	r0, [pc, #108]	; (1000b03c <ble_pair_key_request_handler+0x13c>)
1000afd0:	4b10      	ldr	r3, [pc, #64]	; (1000b014 <ble_pair_key_request_handler+0x114>)
1000afd2:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000afd4:	2000      	movs	r0, #0
1000afd6:	e011      	b.n	1000affc <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000afd8:	480b      	ldr	r0, [pc, #44]	; (1000b008 <ble_pair_key_request_handler+0x108>)
1000afda:	4b0c      	ldr	r3, [pc, #48]	; (1000b00c <ble_pair_key_request_handler+0x10c>)
1000afdc:	4798      	blx	r3
1000afde:	4818      	ldr	r0, [pc, #96]	; (1000b040 <ble_pair_key_request_handler+0x140>)
1000afe0:	4b0c      	ldr	r3, [pc, #48]	; (1000b014 <ble_pair_key_request_handler+0x114>)
1000afe2:	4798      	blx	r3
1000afe4:	e7d8      	b.n	1000af98 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000afe6:	ab01      	add	r3, sp, #4
1000afe8:	885a      	ldrh	r2, [r3, #2]
1000afea:	2380      	movs	r3, #128	; 0x80
1000afec:	005b      	lsls	r3, r3, #1
1000afee:	429a      	cmp	r2, r3
1000aff0:	d0cc      	beq.n	1000af8c <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000aff2:	ab01      	add	r3, sp, #4
1000aff4:	789b      	ldrb	r3, [r3, #2]
1000aff6:	2b01      	cmp	r3, #1
1000aff8:	d0e6      	beq.n	1000afc8 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000affa:	2000      	movs	r0, #0
}
1000affc:	b005      	add	sp, #20
1000affe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b000:	10012ef0 	.word	0x10012ef0
1000b004:	10011107 	.word	0x10011107
1000b008:	10012c90 	.word	0x10012c90
1000b00c:	10011249 	.word	0x10011249
1000b010:	10013178 	.word	0x10013178
1000b014:	10011129 	.word	0x10011129
1000b018:	1000bd05 	.word	0x1000bd05
1000b01c:	100131a0 	.word	0x100131a0
1000b020:	100131ac 	.word	0x100131ac
1000b024:	1000d725 	.word	0x1000d725
1000b028:	10013094 	.word	0x10013094
1000b02c:	1001115d 	.word	0x1001115d
1000b030:	100131c0 	.word	0x100131c0
1000b034:	1000e341 	.word	0x1000e341
1000b038:	100131f8 	.word	0x100131f8
1000b03c:	10013210 	.word	0x10013210
1000b040:	1001322c 	.word	0x1001322c

1000b044 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b046:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b048:	8805      	ldrh	r5, [r0, #0]
1000b04a:	4b2f      	ldr	r3, [pc, #188]	; (1000b108 <ble_encryption_request_handler+0xc4>)
1000b04c:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b04e:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b050:	0010      	movs	r0, r2
1000b052:	8919      	ldrh	r1, [r3, #8]
1000b054:	42a9      	cmp	r1, r5
1000b056:	d116      	bne.n	1000b086 <ble_encryption_request_handler+0x42>
1000b058:	0019      	movs	r1, r3
1000b05a:	315e      	adds	r1, #94	; 0x5e
1000b05c:	7809      	ldrb	r1, [r1, #0]
1000b05e:	2901      	cmp	r1, #1
1000b060:	d911      	bls.n	1000b086 <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b062:	4929      	ldr	r1, [pc, #164]	; (1000b108 <ble_encryption_request_handler+0xc4>)
1000b064:	0152      	lsls	r2, r2, #5
1000b066:	1a10      	subs	r0, r2, r0
1000b068:	0080      	lsls	r0, r0, #2
1000b06a:	1808      	adds	r0, r1, r0
1000b06c:	305e      	adds	r0, #94	; 0x5e
1000b06e:	2306      	movs	r3, #6
1000b070:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000b072:	0162      	lsls	r2, r4, #5
1000b074:	1b13      	subs	r3, r2, r4
1000b076:	009b      	lsls	r3, r3, #2
1000b078:	18cb      	adds	r3, r1, r3
1000b07a:	3370      	adds	r3, #112	; 0x70
1000b07c:	881a      	ldrh	r2, [r3, #0]
1000b07e:	8873      	ldrh	r3, [r6, #2]
1000b080:	429a      	cmp	r2, r3
1000b082:	d113      	bne.n	1000b0ac <ble_encryption_request_handler+0x68>
1000b084:	e006      	b.n	1000b094 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b086:	3401      	adds	r4, #1
1000b088:	b2e4      	uxtb	r4, r4
1000b08a:	3201      	adds	r2, #1
1000b08c:	337c      	adds	r3, #124	; 0x7c
1000b08e:	2c05      	cmp	r4, #5
1000b090:	d1de      	bne.n	1000b050 <ble_encryption_request_handler+0xc>
1000b092:	e00b      	b.n	1000b0ac <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000b094:	0161      	lsls	r1, r4, #5
1000b096:	1b09      	subs	r1, r1, r4
1000b098:	0089      	lsls	r1, r1, #2
1000b09a:	4b1b      	ldr	r3, [pc, #108]	; (1000b108 <ble_encryption_request_handler+0xc4>)
1000b09c:	1859      	adds	r1, r3, r1
1000b09e:	3172      	adds	r1, #114	; 0x72
1000b0a0:	1d30      	adds	r0, r6, #4
1000b0a2:	2208      	movs	r2, #8
1000b0a4:	4b19      	ldr	r3, [pc, #100]	; (1000b10c <ble_encryption_request_handler+0xc8>)
1000b0a6:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000b0a8:	2800      	cmp	r0, #0
1000b0aa:	d015      	beq.n	1000b0d8 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000b0ac:	4f18      	ldr	r7, [pc, #96]	; (1000b110 <ble_encryption_request_handler+0xcc>)
1000b0ae:	0038      	movs	r0, r7
1000b0b0:	4e18      	ldr	r6, [pc, #96]	; (1000b114 <ble_encryption_request_handler+0xd0>)
1000b0b2:	47b0      	blx	r6
1000b0b4:	4818      	ldr	r0, [pc, #96]	; (1000b118 <ble_encryption_request_handler+0xd4>)
1000b0b6:	4d19      	ldr	r5, [pc, #100]	; (1000b11c <ble_encryption_request_handler+0xd8>)
1000b0b8:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000b0ba:	0038      	movs	r0, r7
1000b0bc:	47b0      	blx	r6
1000b0be:	4818      	ldr	r0, [pc, #96]	; (1000b120 <ble_encryption_request_handler+0xdc>)
1000b0c0:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000b0c2:	0163      	lsls	r3, r4, #5
1000b0c4:	1b1c      	subs	r4, r3, r4
1000b0c6:	00a4      	lsls	r4, r4, #2
1000b0c8:	4b0f      	ldr	r3, [pc, #60]	; (1000b108 <ble_encryption_request_handler+0xc4>)
1000b0ca:	191c      	adds	r4, r3, r4
1000b0cc:	8920      	ldrh	r0, [r4, #8]
1000b0ce:	2105      	movs	r1, #5
1000b0d0:	4b14      	ldr	r3, [pc, #80]	; (1000b124 <ble_encryption_request_handler+0xe0>)
1000b0d2:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b0d4:	20e2      	movs	r0, #226	; 0xe2
1000b0d6:	e016      	b.n	1000b106 <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000b0d8:	0162      	lsls	r2, r4, #5
1000b0da:	1b13      	subs	r3, r2, r4
1000b0dc:	009b      	lsls	r3, r3, #2
1000b0de:	3360      	adds	r3, #96	; 0x60
1000b0e0:	4909      	ldr	r1, [pc, #36]	; (1000b108 <ble_encryption_request_handler+0xc4>)
1000b0e2:	185b      	adds	r3, r3, r1
1000b0e4:	1b14      	subs	r4, r2, r4
1000b0e6:	00a4      	lsls	r4, r4, #2
1000b0e8:	190c      	adds	r4, r1, r4
1000b0ea:	7d21      	ldrb	r1, [r4, #20]
1000b0ec:	8830      	ldrh	r0, [r6, #0]
1000b0ee:	2201      	movs	r2, #1
1000b0f0:	4c0d      	ldr	r4, [pc, #52]	; (1000b128 <ble_encryption_request_handler+0xe4>)
1000b0f2:	47a0      	blx	r4
1000b0f4:	2800      	cmp	r0, #0
1000b0f6:	d006      	beq.n	1000b106 <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000b0f8:	4805      	ldr	r0, [pc, #20]	; (1000b110 <ble_encryption_request_handler+0xcc>)
1000b0fa:	4b06      	ldr	r3, [pc, #24]	; (1000b114 <ble_encryption_request_handler+0xd0>)
1000b0fc:	4798      	blx	r3
1000b0fe:	480b      	ldr	r0, [pc, #44]	; (1000b12c <ble_encryption_request_handler+0xe8>)
1000b100:	4b06      	ldr	r3, [pc, #24]	; (1000b11c <ble_encryption_request_handler+0xd8>)
1000b102:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000b104:	2000      	movs	r0, #0
}
1000b106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b108:	100153cc 	.word	0x100153cc
1000b10c:	100110e9 	.word	0x100110e9
1000b110:	10012c90 	.word	0x10012c90
1000b114:	10011249 	.word	0x10011249
1000b118:	10013240 	.word	0x10013240
1000b11c:	10011129 	.word	0x10011129
1000b120:	10013278 	.word	0x10013278
1000b124:	1000d725 	.word	0x1000d725
1000b128:	1000e475 	.word	0x1000e475
1000b12c:	100132d0 	.word	0x100132d0

1000b130 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000b130:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000b132:	2a00      	cmp	r2, #0
1000b134:	d047      	beq.n	1000b1c6 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000b136:	2906      	cmp	r1, #6
1000b138:	d847      	bhi.n	1000b1ca <ble_mgr_events_callback_handler+0x9a>
1000b13a:	0089      	lsls	r1, r1, #2
1000b13c:	4b28      	ldr	r3, [pc, #160]	; (1000b1e0 <ble_mgr_events_callback_handler+0xb0>)
1000b13e:	585b      	ldr	r3, [r3, r1]
1000b140:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000b142:	4b28      	ldr	r3, [pc, #160]	; (1000b1e4 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000b144:	2405      	movs	r4, #5
1000b146:	e00a      	b.n	1000b15e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000b148:	4b27      	ldr	r3, [pc, #156]	; (1000b1e8 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000b14a:	2401      	movs	r4, #1
			}
			break;
1000b14c:	e007      	b.n	1000b15e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000b14e:	4b27      	ldr	r3, [pc, #156]	; (1000b1ec <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000b150:	2405      	movs	r4, #5
			}
			break;
1000b152:	e004      	b.n	1000b15e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000b154:	4b26      	ldr	r3, [pc, #152]	; (1000b1f0 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000b156:	2401      	movs	r4, #1
			}
			break;
1000b158:	e001      	b.n	1000b15e <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000b15a:	4b26      	ldr	r3, [pc, #152]	; (1000b1f4 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000b15c:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000b15e:	2800      	cmp	r0, #0
1000b160:	d116      	bne.n	1000b190 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b162:	6819      	ldr	r1, [r3, #0]
1000b164:	2900      	cmp	r1, #0
1000b166:	d10b      	bne.n	1000b180 <ble_mgr_events_callback_handler+0x50>
1000b168:	e006      	b.n	1000b178 <ble_mgr_events_callback_handler+0x48>
1000b16a:	001d      	movs	r5, r3
1000b16c:	3304      	adds	r3, #4
1000b16e:	1f18      	subs	r0, r3, #4
1000b170:	6800      	ldr	r0, [r0, #0]
1000b172:	2800      	cmp	r0, #0
1000b174:	d106      	bne.n	1000b184 <ble_mgr_events_callback_handler+0x54>
1000b176:	e000      	b.n	1000b17a <ble_mgr_events_callback_handler+0x4a>
1000b178:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000b17a:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000b17c:	2101      	movs	r1, #1
						break;
1000b17e:	e02c      	b.n	1000b1da <ble_mgr_events_callback_handler+0xaa>
1000b180:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b182:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b184:	3101      	adds	r1, #1
1000b186:	b2c9      	uxtb	r1, r1
1000b188:	42a1      	cmp	r1, r4
1000b18a:	d3ee      	bcc.n	1000b16a <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000b18c:	2100      	movs	r1, #0
1000b18e:	e024      	b.n	1000b1da <ble_mgr_events_callback_handler+0xaa>
1000b190:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000b192:	2801      	cmp	r0, #1
1000b194:	d121      	bne.n	1000b1da <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000b196:	6819      	ldr	r1, [r3, #0]
1000b198:	428a      	cmp	r2, r1
1000b19a:	d10c      	bne.n	1000b1b6 <ble_mgr_events_callback_handler+0x86>
1000b19c:	e006      	b.n	1000b1ac <ble_mgr_events_callback_handler+0x7c>
1000b19e:	001d      	movs	r5, r3
1000b1a0:	3304      	adds	r3, #4
1000b1a2:	1f18      	subs	r0, r3, #4
1000b1a4:	6800      	ldr	r0, [r0, #0]
1000b1a6:	4282      	cmp	r2, r0
1000b1a8:	d107      	bne.n	1000b1ba <ble_mgr_events_callback_handler+0x8a>
1000b1aa:	e000      	b.n	1000b1ae <ble_mgr_events_callback_handler+0x7e>
1000b1ac:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000b1ae:	2300      	movs	r3, #0
1000b1b0:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000b1b2:	2101      	movs	r1, #1
						break;
1000b1b4:	e011      	b.n	1000b1da <ble_mgr_events_callback_handler+0xaa>
1000b1b6:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000b1b8:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b1ba:	3101      	adds	r1, #1
1000b1bc:	b2c9      	uxtb	r1, r1
1000b1be:	42a1      	cmp	r1, r4
1000b1c0:	d3ed      	bcc.n	1000b19e <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000b1c2:	2100      	movs	r1, #0
1000b1c4:	e009      	b.n	1000b1da <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000b1c6:	2100      	movs	r1, #0
1000b1c8:	e007      	b.n	1000b1da <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000b1ca:	2100      	movs	r1, #0
1000b1cc:	e005      	b.n	1000b1da <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000b1ce:	4b0a      	ldr	r3, [pc, #40]	; (1000b1f8 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000b1d0:	2405      	movs	r4, #5
1000b1d2:	e7c4      	b.n	1000b15e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000b1d4:	4b09      	ldr	r3, [pc, #36]	; (1000b1fc <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000b1d6:	2401      	movs	r4, #1
1000b1d8:	e7c1      	b.n	1000b15e <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000b1da:	0008      	movs	r0, r1
1000b1dc:	bd30      	pop	{r4, r5, pc}
1000b1de:	46c0      	nop			; (mov r8, r8)
1000b1e0:	10012de4 	.word	0x10012de4
1000b1e4:	100153b8 	.word	0x100153b8
1000b1e8:	100153b4 	.word	0x100153b4
1000b1ec:	1001563c 	.word	0x1001563c
1000b1f0:	10015bf0 	.word	0x10015bf0
1000b1f4:	10015650 	.word	0x10015650
1000b1f8:	10015664 	.word	0x10015664
1000b1fc:	100156ac 	.word	0x100156ac

1000b200 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b200:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b202:	465f      	mov	r7, fp
1000b204:	4656      	mov	r6, sl
1000b206:	464d      	mov	r5, r9
1000b208:	4644      	mov	r4, r8
1000b20a:	b4f0      	push	{r4, r5, r6, r7}
1000b20c:	b091      	sub	sp, #68	; 0x44
1000b20e:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000b210:	2400      	movs	r4, #0
1000b212:	4b7e      	ldr	r3, [pc, #504]	; (1000b40c <ble_device_init+0x20c>)
1000b214:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b216:	2207      	movs	r2, #7
1000b218:	2100      	movs	r1, #0
1000b21a:	487d      	ldr	r0, [pc, #500]	; (1000b410 <ble_device_init+0x210>)
1000b21c:	4e7d      	ldr	r6, [pc, #500]	; (1000b414 <ble_device_init+0x214>)
1000b21e:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000b220:	2212      	movs	r2, #18
1000b222:	2100      	movs	r1, #0
1000b224:	487c      	ldr	r0, [pc, #496]	; (1000b418 <ble_device_init+0x218>)
1000b226:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000b228:	4a7c      	ldr	r2, [pc, #496]	; (1000b41c <ble_device_init+0x21c>)
1000b22a:	2100      	movs	r1, #0
1000b22c:	487c      	ldr	r0, [pc, #496]	; (1000b420 <ble_device_init+0x220>)
1000b22e:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000b230:	4b7c      	ldr	r3, [pc, #496]	; (1000b424 <ble_device_init+0x224>)
1000b232:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000b234:	22cd      	movs	r2, #205	; 0xcd
1000b236:	0092      	lsls	r2, r2, #2
1000b238:	2100      	movs	r1, #0
1000b23a:	487b      	ldr	r0, [pc, #492]	; (1000b428 <ble_device_init+0x228>)
1000b23c:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000b23e:	4b7b      	ldr	r3, [pc, #492]	; (1000b42c <ble_device_init+0x22c>)
1000b240:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b242:	2283      	movs	r2, #131	; 0x83
1000b244:	0092      	lsls	r2, r2, #2
1000b246:	2100      	movs	r1, #0
1000b248:	4879      	ldr	r0, [pc, #484]	; (1000b430 <ble_device_init+0x230>)
1000b24a:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000b24c:	4b79      	ldr	r3, [pc, #484]	; (1000b434 <ble_device_init+0x234>)
1000b24e:	469b      	mov	fp, r3
1000b250:	2380      	movs	r3, #128	; 0x80
1000b252:	00db      	lsls	r3, r3, #3
1000b254:	469a      	mov	sl, r3
1000b256:	001a      	movs	r2, r3
1000b258:	2100      	movs	r1, #0
1000b25a:	4658      	mov	r0, fp
1000b25c:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000b25e:	4b76      	ldr	r3, [pc, #472]	; (1000b438 <ble_device_init+0x238>)
1000b260:	4699      	mov	r9, r3
1000b262:	2380      	movs	r3, #128	; 0x80
1000b264:	015b      	lsls	r3, r3, #5
1000b266:	4698      	mov	r8, r3
1000b268:	001a      	movs	r2, r3
1000b26a:	2100      	movs	r1, #0
1000b26c:	4648      	mov	r0, r9
1000b26e:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000b270:	4f72      	ldr	r7, [pc, #456]	; (1000b43c <ble_device_init+0x23c>)
1000b272:	221c      	movs	r2, #28
1000b274:	2100      	movs	r1, #0
1000b276:	0038      	movs	r0, r7
1000b278:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000b27a:	465b      	mov	r3, fp
1000b27c:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000b27e:	4653      	mov	r3, sl
1000b280:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000b282:	464b      	mov	r3, r9
1000b284:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000b286:	4643      	mov	r3, r8
1000b288:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b28a:	4b6d      	ldr	r3, [pc, #436]	; (1000b440 <ble_device_init+0x240>)
1000b28c:	601c      	str	r4, [r3, #0]
1000b28e:	605c      	str	r4, [r3, #4]
1000b290:	609c      	str	r4, [r3, #8]
1000b292:	60dc      	str	r4, [r3, #12]
1000b294:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000b296:	4b6b      	ldr	r3, [pc, #428]	; (1000b444 <ble_device_init+0x244>)
1000b298:	601c      	str	r4, [r3, #0]
1000b29a:	605c      	str	r4, [r3, #4]
1000b29c:	609c      	str	r4, [r3, #8]
1000b29e:	60dc      	str	r4, [r3, #12]
1000b2a0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000b2a2:	4b69      	ldr	r3, [pc, #420]	; (1000b448 <ble_device_init+0x248>)
1000b2a4:	601c      	str	r4, [r3, #0]
1000b2a6:	605c      	str	r4, [r3, #4]
1000b2a8:	609c      	str	r4, [r3, #8]
1000b2aa:	60dc      	str	r4, [r3, #12]
1000b2ac:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000b2ae:	4b67      	ldr	r3, [pc, #412]	; (1000b44c <ble_device_init+0x24c>)
1000b2b0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000b2b2:	4b67      	ldr	r3, [pc, #412]	; (1000b450 <ble_device_init+0x250>)
1000b2b4:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000b2b6:	4b67      	ldr	r3, [pc, #412]	; (1000b454 <ble_device_init+0x254>)
1000b2b8:	601c      	str	r4, [r3, #0]
1000b2ba:	605c      	str	r4, [r3, #4]
1000b2bc:	609c      	str	r4, [r3, #8]
1000b2be:	60dc      	str	r4, [r3, #12]
1000b2c0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000b2c2:	4b65      	ldr	r3, [pc, #404]	; (1000b458 <ble_device_init+0x258>)
1000b2c4:	601c      	str	r4, [r3, #0]
1000b2c6:	4c65      	ldr	r4, [pc, #404]	; (1000b45c <ble_device_init+0x25c>)
1000b2c8:	239b      	movs	r3, #155	; 0x9b
1000b2ca:	009b      	lsls	r3, r3, #2
1000b2cc:	4698      	mov	r8, r3
1000b2ce:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000b2d0:	4f50      	ldr	r7, [pc, #320]	; (1000b414 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000b2d2:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000b2d4:	227c      	movs	r2, #124	; 0x7c
1000b2d6:	2100      	movs	r1, #0
1000b2d8:	0020      	movs	r0, r4
1000b2da:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b2dc:	0023      	movs	r3, r4
1000b2de:	335e      	adds	r3, #94	; 0x5e
1000b2e0:	2200      	movs	r2, #0
1000b2e2:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000b2e4:	7626      	strb	r6, [r4, #24]
1000b2e6:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b2e8:	45a0      	cmp	r8, r4
1000b2ea:	d1f3      	bne.n	1000b2d4 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000b2ec:	4b5c      	ldr	r3, [pc, #368]	; (1000b460 <ble_device_init+0x260>)
1000b2ee:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000b2f0:	4c52      	ldr	r4, [pc, #328]	; (1000b43c <ble_device_init+0x23c>)
1000b2f2:	4b4a      	ldr	r3, [pc, #296]	; (1000b41c <ble_device_init+0x21c>)
1000b2f4:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000b2f6:	4b4a      	ldr	r3, [pc, #296]	; (1000b420 <ble_device_init+0x220>)
1000b2f8:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000b2fa:	485a      	ldr	r0, [pc, #360]	; (1000b464 <ble_device_init+0x264>)
1000b2fc:	4b5a      	ldr	r3, [pc, #360]	; (1000b468 <ble_device_init+0x268>)
1000b2fe:	4798      	blx	r3
1000b300:	485a      	ldr	r0, [pc, #360]	; (1000b46c <ble_device_init+0x26c>)
1000b302:	4b5b      	ldr	r3, [pc, #364]	; (1000b470 <ble_device_init+0x270>)
1000b304:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000b306:	0020      	movs	r0, r4
1000b308:	4b5a      	ldr	r3, [pc, #360]	; (1000b474 <ble_device_init+0x274>)
1000b30a:	4798      	blx	r3
1000b30c:	2800      	cmp	r0, #0
1000b30e:	d00b      	beq.n	1000b328 <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000b310:	4e54      	ldr	r6, [pc, #336]	; (1000b464 <ble_device_init+0x264>)
1000b312:	0030      	movs	r0, r6
1000b314:	4d54      	ldr	r5, [pc, #336]	; (1000b468 <ble_device_init+0x268>)
1000b316:	47a8      	blx	r5
1000b318:	4857      	ldr	r0, [pc, #348]	; (1000b478 <ble_device_init+0x278>)
1000b31a:	4c55      	ldr	r4, [pc, #340]	; (1000b470 <ble_device_init+0x270>)
1000b31c:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000b31e:	0030      	movs	r0, r6
1000b320:	47a8      	blx	r5
1000b322:	4856      	ldr	r0, [pc, #344]	; (1000b47c <ble_device_init+0x27c>)
1000b324:	47a0      	blx	r4
1000b326:	e7fe      	b.n	1000b326 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000b328:	4a55      	ldr	r2, [pc, #340]	; (1000b480 <ble_device_init+0x280>)
1000b32a:	2100      	movs	r1, #0
1000b32c:	2000      	movs	r0, #0
1000b32e:	4c55      	ldr	r4, [pc, #340]	; (1000b484 <ble_device_init+0x284>)
1000b330:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000b332:	4a55      	ldr	r2, [pc, #340]	; (1000b488 <ble_device_init+0x288>)
1000b334:	2102      	movs	r1, #2
1000b336:	2000      	movs	r0, #0
1000b338:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000b33a:	2108      	movs	r1, #8
1000b33c:	4853      	ldr	r0, [pc, #332]	; (1000b48c <ble_device_init+0x28c>)
1000b33e:	4b54      	ldr	r3, [pc, #336]	; (1000b490 <ble_device_init+0x290>)
1000b340:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000b342:	2800      	cmp	r0, #0
1000b344:	d005      	beq.n	1000b352 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000b346:	4847      	ldr	r0, [pc, #284]	; (1000b464 <ble_device_init+0x264>)
1000b348:	4b47      	ldr	r3, [pc, #284]	; (1000b468 <ble_device_init+0x268>)
1000b34a:	4798      	blx	r3
1000b34c:	4851      	ldr	r0, [pc, #324]	; (1000b494 <ble_device_init+0x294>)
1000b34e:	4b48      	ldr	r3, [pc, #288]	; (1000b470 <ble_device_init+0x270>)
1000b350:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000b352:	2207      	movs	r2, #7
1000b354:	4950      	ldr	r1, [pc, #320]	; (1000b498 <ble_device_init+0x298>)
1000b356:	3108      	adds	r1, #8
1000b358:	a804      	add	r0, sp, #16
1000b35a:	4b50      	ldr	r3, [pc, #320]	; (1000b49c <ble_device_init+0x29c>)
1000b35c:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000b35e:	2226      	movs	r2, #38	; 0x26
1000b360:	2100      	movs	r1, #0
1000b362:	a806      	add	r0, sp, #24
1000b364:	4b2b      	ldr	r3, [pc, #172]	; (1000b414 <ble_device_init+0x214>)
1000b366:	4798      	blx	r3
	
	if (addr == NULL)
1000b368:	2d00      	cmp	r5, #0
1000b36a:	d10c      	bne.n	1000b386 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000b36c:	a804      	add	r0, sp, #16
1000b36e:	4b4c      	ldr	r3, [pc, #304]	; (1000b4a0 <ble_device_init+0x2a0>)
1000b370:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000b372:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000b374:	2800      	cmp	r0, #0
1000b376:	d006      	beq.n	1000b386 <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
1000b378:	483a      	ldr	r0, [pc, #232]	; (1000b464 <ble_device_init+0x264>)
1000b37a:	4b3b      	ldr	r3, [pc, #236]	; (1000b468 <ble_device_init+0x268>)
1000b37c:	4798      	blx	r3
1000b37e:	4849      	ldr	r0, [pc, #292]	; (1000b4a4 <ble_device_init+0x2a4>)
1000b380:	4b3b      	ldr	r3, [pc, #236]	; (1000b470 <ble_device_init+0x270>)
1000b382:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000b384:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b386:	4837      	ldr	r0, [pc, #220]	; (1000b464 <ble_device_init+0x264>)
1000b388:	4b37      	ldr	r3, [pc, #220]	; (1000b468 <ble_device_init+0x268>)
1000b38a:	4798      	blx	r3
1000b38c:	792b      	ldrb	r3, [r5, #4]
1000b38e:	796a      	ldrb	r2, [r5, #5]
1000b390:	79a9      	ldrb	r1, [r5, #6]
1000b392:	7828      	ldrb	r0, [r5, #0]
1000b394:	9003      	str	r0, [sp, #12]
1000b396:	7868      	ldrb	r0, [r5, #1]
1000b398:	9002      	str	r0, [sp, #8]
1000b39a:	78a8      	ldrb	r0, [r5, #2]
1000b39c:	9001      	str	r0, [sp, #4]
1000b39e:	78e8      	ldrb	r0, [r5, #3]
1000b3a0:	9000      	str	r0, [sp, #0]
1000b3a2:	4841      	ldr	r0, [pc, #260]	; (1000b4a8 <ble_device_init+0x2a8>)
1000b3a4:	4c32      	ldr	r4, [pc, #200]	; (1000b470 <ble_device_init+0x270>)
1000b3a6:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000b3a8:	ac06      	add	r4, sp, #24
1000b3aa:	230a      	movs	r3, #10
1000b3ac:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000b3ae:	4b3f      	ldr	r3, [pc, #252]	; (1000b4ac <ble_device_init+0x2ac>)
1000b3b0:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000b3b2:	2207      	movs	r2, #7
1000b3b4:	0029      	movs	r1, r5
1000b3b6:	a807      	add	r0, sp, #28
1000b3b8:	4b38      	ldr	r3, [pc, #224]	; (1000b49c <ble_device_init+0x29c>)
1000b3ba:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000b3bc:	2300      	movs	r3, #0
1000b3be:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000b3c0:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000b3c2:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000b3c4:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000b3c6:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000b3c8:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000b3ca:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000b3cc:	2380      	movs	r3, #128	; 0x80
1000b3ce:	009b      	lsls	r3, r3, #2
1000b3d0:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000b3d2:	0020      	movs	r0, r4
1000b3d4:	4b36      	ldr	r3, [pc, #216]	; (1000b4b0 <ble_device_init+0x2b0>)
1000b3d6:	4798      	blx	r3
1000b3d8:	2800      	cmp	r0, #0
1000b3da:	d005      	beq.n	1000b3e8 <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000b3dc:	4821      	ldr	r0, [pc, #132]	; (1000b464 <ble_device_init+0x264>)
1000b3de:	4b22      	ldr	r3, [pc, #136]	; (1000b468 <ble_device_init+0x268>)
1000b3e0:	4798      	blx	r3
1000b3e2:	4834      	ldr	r0, [pc, #208]	; (1000b4b4 <ble_device_init+0x2b4>)
1000b3e4:	4b22      	ldr	r3, [pc, #136]	; (1000b470 <ble_device_init+0x270>)
1000b3e6:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000b3e8:	0028      	movs	r0, r5
1000b3ea:	4b33      	ldr	r3, [pc, #204]	; (1000b4b8 <ble_device_init+0x2b8>)
1000b3ec:	4798      	blx	r3
1000b3ee:	2800      	cmp	r0, #0
1000b3f0:	d005      	beq.n	1000b3fe <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000b3f2:	481c      	ldr	r0, [pc, #112]	; (1000b464 <ble_device_init+0x264>)
1000b3f4:	4b1c      	ldr	r3, [pc, #112]	; (1000b468 <ble_device_init+0x268>)
1000b3f6:	4798      	blx	r3
1000b3f8:	4830      	ldr	r0, [pc, #192]	; (1000b4bc <ble_device_init+0x2bc>)
1000b3fa:	4b1d      	ldr	r3, [pc, #116]	; (1000b470 <ble_device_init+0x270>)
1000b3fc:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000b3fe:	b011      	add	sp, #68	; 0x44
1000b400:	bc3c      	pop	{r2, r3, r4, r5}
1000b402:	4690      	mov	r8, r2
1000b404:	4699      	mov	r9, r3
1000b406:	46a2      	mov	sl, r4
1000b408:	46ab      	mov	fp, r5
1000b40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b40c:	10014174 	.word	0x10014174
1000b410:	1001417c 	.word	0x1001417c
1000b414:	10011119 	.word	0x10011119
1000b418:	10015678 	.word	0x10015678
1000b41c:	000004e2 	.word	0x000004e2
1000b420:	10013c94 	.word	0x10013c94
1000b424:	10014178 	.word	0x10014178
1000b428:	100156b0 	.word	0x100156b0
1000b42c:	100156a8 	.word	0x100156a8
1000b430:	100159e4 	.word	0x100159e4
1000b434:	10013894 	.word	0x10013894
1000b438:	10014184 	.word	0x10014184
1000b43c:	1001568c 	.word	0x1001568c
1000b440:	10015650 	.word	0x10015650
1000b444:	10015664 	.word	0x10015664
1000b448:	100153b8 	.word	0x100153b8
1000b44c:	100156ac 	.word	0x100156ac
1000b450:	100153b4 	.word	0x100153b4
1000b454:	1001563c 	.word	0x1001563c
1000b458:	10015bf0 	.word	0x10015bf0
1000b45c:	100153cc 	.word	0x100153cc
1000b460:	10015638 	.word	0x10015638
1000b464:	10012c90 	.word	0x10012c90
1000b468:	10011249 	.word	0x10011249
1000b46c:	100132f0 	.word	0x100132f0
1000b470:	10011129 	.word	0x10011129
1000b474:	1000d33d 	.word	0x1000d33d
1000b478:	10013304 	.word	0x10013304
1000b47c:	10013324 	.word	0x10013324
1000b480:	1001355c 	.word	0x1001355c
1000b484:	1000b131 	.word	0x1000b131
1000b488:	10012f20 	.word	0x10012f20
1000b48c:	10013360 	.word	0x10013360
1000b490:	1000d255 	.word	0x1000d255
1000b494:	1001336c 	.word	0x1001336c
1000b498:	10012ef0 	.word	0x10012ef0
1000b49c:	10011107 	.word	0x10011107
1000b4a0:	1000d289 	.word	0x1000d289
1000b4a4:	10013384 	.word	0x10013384
1000b4a8:	1001339c 	.word	0x1001339c
1000b4ac:	00003a98 	.word	0x00003a98
1000b4b0:	1000d2ad 	.word	0x1000d2ad
1000b4b4:	100133d4 	.word	0x100133d4
1000b4b8:	1000d4f1 	.word	0x1000d4f1
1000b4bc:	100133f8 	.word	0x100133f8

1000b4c0 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000b4c0:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000b4c2:	2201      	movs	r2, #1
1000b4c4:	2101      	movs	r1, #1
1000b4c6:	4b06      	ldr	r3, [pc, #24]	; (1000b4e0 <ble_send_slave_sec_request+0x20>)
1000b4c8:	4798      	blx	r3
1000b4ca:	2800      	cmp	r0, #0
1000b4cc:	d006      	beq.n	1000b4dc <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000b4ce:	4805      	ldr	r0, [pc, #20]	; (1000b4e4 <ble_send_slave_sec_request+0x24>)
1000b4d0:	4b05      	ldr	r3, [pc, #20]	; (1000b4e8 <ble_send_slave_sec_request+0x28>)
1000b4d2:	4798      	blx	r3
1000b4d4:	4805      	ldr	r0, [pc, #20]	; (1000b4ec <ble_send_slave_sec_request+0x2c>)
1000b4d6:	4b06      	ldr	r3, [pc, #24]	; (1000b4f0 <ble_send_slave_sec_request+0x30>)
1000b4d8:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000b4da:	20e2      	movs	r0, #226	; 0xe2
}
1000b4dc:	bd10      	pop	{r4, pc}
1000b4de:	46c0      	nop			; (mov r8, r8)
1000b4e0:	1000e3bd 	.word	0x1000e3bd
1000b4e4:	10012c90 	.word	0x10012c90
1000b4e8:	10011249 	.word	0x10011249
1000b4ec:	10013434 	.word	0x10013434
1000b4f0:	10011129 	.word	0x10011129

1000b4f4 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000b4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b4f6:	465f      	mov	r7, fp
1000b4f8:	464e      	mov	r6, r9
1000b4fa:	4645      	mov	r5, r8
1000b4fc:	b4e0      	push	{r5, r6, r7}
1000b4fe:	b09a      	sub	sp, #104	; 0x68
1000b500:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000b502:	7a86      	ldrb	r6, [r0, #10]
1000b504:	2e00      	cmp	r6, #0
1000b506:	d000      	beq.n	1000b50a <ble_connected_state_handler+0x16>
1000b508:	e0c6      	b.n	1000b698 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000b50a:	4875      	ldr	r0, [pc, #468]	; (1000b6e0 <ble_connected_state_handler+0x1ec>)
1000b50c:	4f75      	ldr	r7, [pc, #468]	; (1000b6e4 <ble_connected_state_handler+0x1f0>)
1000b50e:	47b8      	blx	r7
1000b510:	792b      	ldrb	r3, [r5, #4]
1000b512:	796a      	ldrb	r2, [r5, #5]
1000b514:	79a9      	ldrb	r1, [r5, #6]
1000b516:	7868      	ldrb	r0, [r5, #1]
1000b518:	9002      	str	r0, [sp, #8]
1000b51a:	78a8      	ldrb	r0, [r5, #2]
1000b51c:	9001      	str	r0, [sp, #4]
1000b51e:	78e8      	ldrb	r0, [r5, #3]
1000b520:	9000      	str	r0, [sp, #0]
1000b522:	4871      	ldr	r0, [pc, #452]	; (1000b6e8 <ble_connected_state_handler+0x1f4>)
1000b524:	4c71      	ldr	r4, [pc, #452]	; (1000b6ec <ble_connected_state_handler+0x1f8>)
1000b526:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000b528:	486d      	ldr	r0, [pc, #436]	; (1000b6e0 <ble_connected_state_handler+0x1ec>)
1000b52a:	47b8      	blx	r7
1000b52c:	8929      	ldrh	r1, [r5, #8]
1000b52e:	4870      	ldr	r0, [pc, #448]	; (1000b6f0 <ble_connected_state_handler+0x1fc>)
1000b530:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000b532:	2212      	movs	r2, #18
1000b534:	0029      	movs	r1, r5
1000b536:	486f      	ldr	r0, [pc, #444]	; (1000b6f4 <ble_connected_state_handler+0x200>)
1000b538:	4b6f      	ldr	r3, [pc, #444]	; (1000b6f8 <ble_connected_state_handler+0x204>)
1000b53a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b53c:	9504      	str	r5, [sp, #16]
1000b53e:	2207      	movs	r2, #7
1000b540:	0029      	movs	r1, r5
1000b542:	486e      	ldr	r0, [pc, #440]	; (1000b6fc <ble_connected_state_handler+0x208>)
1000b544:	4b6e      	ldr	r3, [pc, #440]	; (1000b700 <ble_connected_state_handler+0x20c>)
1000b546:	4798      	blx	r3
1000b548:	2800      	cmp	r0, #0
1000b54a:	d100      	bne.n	1000b54e <ble_connected_state_handler+0x5a>
1000b54c:	e0ad      	b.n	1000b6aa <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000b54e:	782b      	ldrb	r3, [r5, #0]
1000b550:	2b02      	cmp	r3, #2
1000b552:	d000      	beq.n	1000b556 <ble_connected_state_handler+0x62>
1000b554:	e0a9      	b.n	1000b6aa <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000b556:	2250      	movs	r2, #80	; 0x50
1000b558:	2100      	movs	r1, #0
1000b55a:	a806      	add	r0, sp, #24
1000b55c:	4b69      	ldr	r3, [pc, #420]	; (1000b704 <ble_connected_state_handler+0x210>)
1000b55e:	4798      	blx	r3
1000b560:	4f69      	ldr	r7, [pc, #420]	; (1000b708 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000b562:	2300      	movs	r3, #0
1000b564:	e00b      	b.n	1000b57e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000b566:	1c59      	adds	r1, r3, #1
1000b568:	7814      	ldrb	r4, [r2, #0]
1000b56a:	a806      	add	r0, sp, #24
1000b56c:	54c4      	strb	r4, [r0, r3]
1000b56e:	3201      	adds	r2, #1
1000b570:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000b572:	42b3      	cmp	r3, r6
1000b574:	d1f7      	bne.n	1000b566 <ble_connected_state_handler+0x72>
1000b576:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000b578:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000b57a:	2b50      	cmp	r3, #80	; 0x50
1000b57c:	d004      	beq.n	1000b588 <ble_connected_state_handler+0x94>
1000b57e:	001e      	movs	r6, r3
1000b580:	3610      	adds	r6, #16
1000b582:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000b584:	003a      	movs	r2, r7
1000b586:	e7ee      	b.n	1000b566 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000b588:	aa06      	add	r2, sp, #24
1000b58a:	0029      	movs	r1, r5
1000b58c:	2005      	movs	r0, #5
1000b58e:	4b5f      	ldr	r3, [pc, #380]	; (1000b70c <ble_connected_state_handler+0x218>)
1000b590:	4798      	blx	r3
1000b592:	1e06      	subs	r6, r0, #0
1000b594:	d100      	bne.n	1000b598 <ble_connected_state_handler+0xa4>
1000b596:	e09c      	b.n	1000b6d2 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000b598:	4851      	ldr	r0, [pc, #324]	; (1000b6e0 <ble_connected_state_handler+0x1ec>)
1000b59a:	4b52      	ldr	r3, [pc, #328]	; (1000b6e4 <ble_connected_state_handler+0x1f0>)
1000b59c:	4798      	blx	r3
1000b59e:	485c      	ldr	r0, [pc, #368]	; (1000b710 <ble_connected_state_handler+0x21c>)
1000b5a0:	4b52      	ldr	r3, [pc, #328]	; (1000b6ec <ble_connected_state_handler+0x1f8>)
1000b5a2:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000b5a4:	26e2      	movs	r6, #226	; 0xe2
1000b5a6:	e094      	b.n	1000b6d2 <ble_connected_state_handler+0x1de>
1000b5a8:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b5aa:	9405      	str	r4, [sp, #20]
1000b5ac:	2207      	movs	r2, #7
1000b5ae:	9904      	ldr	r1, [sp, #16]
1000b5b0:	4648      	mov	r0, r9
1000b5b2:	47d8      	blx	fp
1000b5b4:	2800      	cmp	r0, #0
1000b5b6:	d109      	bne.n	1000b5cc <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b5b8:	9a05      	ldr	r2, [sp, #20]
1000b5ba:	0153      	lsls	r3, r2, #5
1000b5bc:	1a9b      	subs	r3, r3, r2
1000b5be:	009a      	lsls	r2, r3, #2
1000b5c0:	4b54      	ldr	r3, [pc, #336]	; (1000b714 <ble_connected_state_handler+0x220>)
1000b5c2:	189b      	adds	r3, r3, r2
1000b5c4:	335e      	adds	r3, #94	; 0x5e
1000b5c6:	2202      	movs	r2, #2
1000b5c8:	701a      	strb	r2, [r3, #0]
1000b5ca:	e02b      	b.n	1000b624 <ble_connected_state_handler+0x130>
1000b5cc:	3401      	adds	r4, #1
1000b5ce:	237c      	movs	r3, #124	; 0x7c
1000b5d0:	469c      	mov	ip, r3
1000b5d2:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b5d4:	2c05      	cmp	r4, #5
1000b5d6:	d1e7      	bne.n	1000b5a8 <ble_connected_state_handler+0xb4>
1000b5d8:	e072      	b.n	1000b6c0 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b5da:	001c      	movs	r4, r3
1000b5dc:	7811      	ldrb	r1, [r2, #0]
1000b5de:	2900      	cmp	r1, #0
1000b5e0:	d11a      	bne.n	1000b618 <ble_connected_state_handler+0x124>
1000b5e2:	e001      	b.n	1000b5e8 <ble_connected_state_handler+0xf4>
1000b5e4:	2400      	movs	r4, #0
1000b5e6:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000b5e8:	0163      	lsls	r3, r4, #5
1000b5ea:	4699      	mov	r9, r3
1000b5ec:	1b18      	subs	r0, r3, r4
1000b5ee:	0080      	lsls	r0, r0, #2
1000b5f0:	4b48      	ldr	r3, [pc, #288]	; (1000b714 <ble_connected_state_handler+0x220>)
1000b5f2:	4698      	mov	r8, r3
1000b5f4:	4440      	add	r0, r8
1000b5f6:	2212      	movs	r2, #18
1000b5f8:	0029      	movs	r1, r5
1000b5fa:	4b3f      	ldr	r3, [pc, #252]	; (1000b6f8 <ble_connected_state_handler+0x204>)
1000b5fc:	4798      	blx	r3
						ble_device_count++;
1000b5fe:	4a46      	ldr	r2, [pc, #280]	; (1000b718 <ble_connected_state_handler+0x224>)
1000b600:	7813      	ldrb	r3, [r2, #0]
1000b602:	3301      	adds	r3, #1
1000b604:	b2db      	uxtb	r3, r3
1000b606:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b608:	464b      	mov	r3, r9
1000b60a:	1b1b      	subs	r3, r3, r4
1000b60c:	009b      	lsls	r3, r3, #2
1000b60e:	4443      	add	r3, r8
1000b610:	335e      	adds	r3, #94	; 0x5e
1000b612:	2202      	movs	r2, #2
1000b614:	701a      	strb	r2, [r3, #0]
						break;
1000b616:	e005      	b.n	1000b624 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b618:	1c79      	adds	r1, r7, #1
1000b61a:	b2cf      	uxtb	r7, r1
1000b61c:	3301      	adds	r3, #1
1000b61e:	327c      	adds	r2, #124	; 0x7c
1000b620:	2f05      	cmp	r7, #5
1000b622:	d1da      	bne.n	1000b5da <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b624:	2207      	movs	r2, #7
1000b626:	0029      	movs	r1, r5
1000b628:	4834      	ldr	r0, [pc, #208]	; (1000b6fc <ble_connected_state_handler+0x208>)
1000b62a:	4b35      	ldr	r3, [pc, #212]	; (1000b700 <ble_connected_state_handler+0x20c>)
1000b62c:	4798      	blx	r3
1000b62e:	2800      	cmp	r0, #0
1000b630:	d10c      	bne.n	1000b64c <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000b632:	017b      	lsls	r3, r7, #5
1000b634:	1bdb      	subs	r3, r3, r7
1000b636:	009b      	lsls	r3, r3, #2
1000b638:	4a36      	ldr	r2, [pc, #216]	; (1000b714 <ble_connected_state_handler+0x220>)
1000b63a:	18d3      	adds	r3, r2, r3
1000b63c:	2205      	movs	r2, #5
1000b63e:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b640:	3202      	adds	r2, #2
1000b642:	2100      	movs	r1, #0
1000b644:	482d      	ldr	r0, [pc, #180]	; (1000b6fc <ble_connected_state_handler+0x208>)
1000b646:	4b2f      	ldr	r3, [pc, #188]	; (1000b704 <ble_connected_state_handler+0x210>)
1000b648:	4798      	blx	r3
1000b64a:	e042      	b.n	1000b6d2 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b64c:	4b31      	ldr	r3, [pc, #196]	; (1000b714 <ble_connected_state_handler+0x220>)
1000b64e:	4698      	mov	r8, r3
1000b650:	017c      	lsls	r4, r7, #5
1000b652:	1be3      	subs	r3, r4, r7
1000b654:	009b      	lsls	r3, r3, #2
1000b656:	4443      	add	r3, r8
1000b658:	220a      	movs	r2, #10
1000b65a:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b65c:	3a03      	subs	r2, #3
1000b65e:	2100      	movs	r1, #0
1000b660:	4826      	ldr	r0, [pc, #152]	; (1000b6fc <ble_connected_state_handler+0x208>)
1000b662:	4b28      	ldr	r3, [pc, #160]	; (1000b704 <ble_connected_state_handler+0x210>)
1000b664:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000b666:	1be4      	subs	r4, r4, r7
1000b668:	00a4      	lsls	r4, r4, #2
1000b66a:	4444      	add	r4, r8
1000b66c:	7ca3      	ldrb	r3, [r4, #18]
1000b66e:	2b0a      	cmp	r3, #10
1000b670:	d12f      	bne.n	1000b6d2 <ble_connected_state_handler+0x1de>
1000b672:	e00d      	b.n	1000b690 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000b674:	481a      	ldr	r0, [pc, #104]	; (1000b6e0 <ble_connected_state_handler+0x1ec>)
1000b676:	4b1b      	ldr	r3, [pc, #108]	; (1000b6e4 <ble_connected_state_handler+0x1f0>)
1000b678:	4798      	blx	r3
1000b67a:	4b27      	ldr	r3, [pc, #156]	; (1000b718 <ble_connected_state_handler+0x224>)
1000b67c:	7819      	ldrb	r1, [r3, #0]
1000b67e:	b2c9      	uxtb	r1, r1
1000b680:	4826      	ldr	r0, [pc, #152]	; (1000b71c <ble_connected_state_handler+0x228>)
1000b682:	4b1a      	ldr	r3, [pc, #104]	; (1000b6ec <ble_connected_state_handler+0x1f8>)
1000b684:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000b686:	8928      	ldrh	r0, [r5, #8]
1000b688:	2113      	movs	r1, #19
1000b68a:	4b25      	ldr	r3, [pc, #148]	; (1000b720 <ble_connected_state_handler+0x22c>)
1000b68c:	4798      	blx	r3
1000b68e:	e020      	b.n	1000b6d2 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000b690:	8928      	ldrh	r0, [r5, #8]
1000b692:	4b24      	ldr	r3, [pc, #144]	; (1000b724 <ble_connected_state_handler+0x230>)
1000b694:	4798      	blx	r3
1000b696:	e01c      	b.n	1000b6d2 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000b698:	4811      	ldr	r0, [pc, #68]	; (1000b6e0 <ble_connected_state_handler+0x1ec>)
1000b69a:	4b12      	ldr	r3, [pc, #72]	; (1000b6e4 <ble_connected_state_handler+0x1f0>)
1000b69c:	4798      	blx	r3
1000b69e:	7aa9      	ldrb	r1, [r5, #10]
1000b6a0:	4821      	ldr	r0, [pc, #132]	; (1000b728 <ble_connected_state_handler+0x234>)
1000b6a2:	4b12      	ldr	r3, [pc, #72]	; (1000b6ec <ble_connected_state_handler+0x1f8>)
1000b6a4:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000b6a6:	2600      	movs	r6, #0
1000b6a8:	e013      	b.n	1000b6d2 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000b6aa:	4b1b      	ldr	r3, [pc, #108]	; (1000b718 <ble_connected_state_handler+0x224>)
1000b6ac:	781b      	ldrb	r3, [r3, #0]
1000b6ae:	b2db      	uxtb	r3, r3
1000b6b0:	2b04      	cmp	r3, #4
1000b6b2:	d8df      	bhi.n	1000b674 <ble_connected_state_handler+0x180>
1000b6b4:	4b17      	ldr	r3, [pc, #92]	; (1000b714 <ble_connected_state_handler+0x220>)
1000b6b6:	4699      	mov	r9, r3
1000b6b8:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b6ba:	4b11      	ldr	r3, [pc, #68]	; (1000b700 <ble_connected_state_handler+0x20c>)
1000b6bc:	469b      	mov	fp, r3
1000b6be:	e773      	b.n	1000b5a8 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b6c0:	235e      	movs	r3, #94	; 0x5e
1000b6c2:	4a14      	ldr	r2, [pc, #80]	; (1000b714 <ble_connected_state_handler+0x220>)
1000b6c4:	5cd3      	ldrb	r3, [r2, r3]
1000b6c6:	2b00      	cmp	r3, #0
1000b6c8:	d08c      	beq.n	1000b5e4 <ble_connected_state_handler+0xf0>
1000b6ca:	4a18      	ldr	r2, [pc, #96]	; (1000b72c <ble_connected_state_handler+0x238>)
1000b6cc:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b6ce:	2701      	movs	r7, #1
1000b6d0:	e783      	b.n	1000b5da <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000b6d2:	0030      	movs	r0, r6
1000b6d4:	b01a      	add	sp, #104	; 0x68
1000b6d6:	bc1c      	pop	{r2, r3, r4}
1000b6d8:	4690      	mov	r8, r2
1000b6da:	4699      	mov	r9, r3
1000b6dc:	46a3      	mov	fp, r4
1000b6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b6e0:	10012c90 	.word	0x10012c90
1000b6e4:	10011249 	.word	0x10011249
1000b6e8:	10013454 	.word	0x10013454
1000b6ec:	10011129 	.word	0x10011129
1000b6f0:	10013498 	.word	0x10013498
1000b6f4:	10015678 	.word	0x10015678
1000b6f8:	10011107 	.word	0x10011107
1000b6fc:	1001417c 	.word	0x1001417c
1000b700:	100110e9 	.word	0x100110e9
1000b704:	10011119 	.word	0x10011119
1000b708:	10015412 	.word	0x10015412
1000b70c:	1000d751 	.word	0x1000d751
1000b710:	100134b0 	.word	0x100134b0
1000b714:	100153cc 	.word	0x100153cc
1000b718:	10015638 	.word	0x10015638
1000b71c:	100134d4 	.word	0x100134d4
1000b720:	1000d725 	.word	0x1000d725
1000b724:	1000b4c1 	.word	0x1000b4c1
1000b728:	10013510 	.word	0x10013510
1000b72c:	100154a6 	.word	0x100154a6

1000b730 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000b730:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b732:	4647      	mov	r7, r8
1000b734:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000b736:	7803      	ldrb	r3, [r0, #0]
1000b738:	2b00      	cmp	r3, #0
1000b73a:	d141      	bne.n	1000b7c0 <ble_resolv_rand_addr_handler+0x90>
1000b73c:	4d2f      	ldr	r5, [pc, #188]	; (1000b7fc <ble_resolv_rand_addr_handler+0xcc>)
1000b73e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000b740:	1c46      	adds	r6, r0, #1
1000b742:	4f2f      	ldr	r7, [pc, #188]	; (1000b800 <ble_resolv_rand_addr_handler+0xd0>)
1000b744:	2210      	movs	r2, #16
1000b746:	0029      	movs	r1, r5
1000b748:	0030      	movs	r0, r6
1000b74a:	47b8      	blx	r7
1000b74c:	2800      	cmp	r0, #0
1000b74e:	d03f      	beq.n	1000b7d0 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b750:	3401      	adds	r4, #1
1000b752:	b2e4      	uxtb	r4, r4
1000b754:	357c      	adds	r5, #124	; 0x7c
1000b756:	2c05      	cmp	r4, #5
1000b758:	d1f4      	bne.n	1000b744 <ble_resolv_rand_addr_handler+0x14>
1000b75a:	e031      	b.n	1000b7c0 <ble_resolv_rand_addr_handler+0x90>
1000b75c:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b75e:	001c      	movs	r4, r3
1000b760:	7811      	ldrb	r1, [r2, #0]
1000b762:	2900      	cmp	r1, #0
1000b764:	d122      	bne.n	1000b7ac <ble_resolv_rand_addr_handler+0x7c>
1000b766:	e001      	b.n	1000b76c <ble_resolv_rand_addr_handler+0x3c>
1000b768:	2400      	movs	r4, #0
1000b76a:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000b76c:	4b25      	ldr	r3, [pc, #148]	; (1000b804 <ble_resolv_rand_addr_handler+0xd4>)
1000b76e:	4698      	mov	r8, r3
1000b770:	0166      	lsls	r6, r4, #5
1000b772:	1b37      	subs	r7, r6, r4
1000b774:	00bf      	lsls	r7, r7, #2
1000b776:	4447      	add	r7, r8
1000b778:	2212      	movs	r2, #18
1000b77a:	4923      	ldr	r1, [pc, #140]	; (1000b808 <ble_resolv_rand_addr_handler+0xd8>)
1000b77c:	0038      	movs	r0, r7
1000b77e:	4b23      	ldr	r3, [pc, #140]	; (1000b80c <ble_resolv_rand_addr_handler+0xdc>)
1000b780:	4798      	blx	r3
				ble_device_count++;
1000b782:	4a23      	ldr	r2, [pc, #140]	; (1000b810 <ble_resolv_rand_addr_handler+0xe0>)
1000b784:	7813      	ldrb	r3, [r2, #0]
1000b786:	3301      	adds	r3, #1
1000b788:	b2db      	uxtb	r3, r3
1000b78a:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b78c:	375e      	adds	r7, #94	; 0x5e
1000b78e:	2302      	movs	r3, #2
1000b790:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b792:	1b34      	subs	r4, r6, r4
1000b794:	00a4      	lsls	r4, r4, #2
1000b796:	4444      	add	r4, r8
1000b798:	3308      	adds	r3, #8
1000b79a:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000b79c:	016b      	lsls	r3, r5, #5
1000b79e:	1b5d      	subs	r5, r3, r5
1000b7a0:	00ad      	lsls	r5, r5, #2
1000b7a2:	4445      	add	r5, r8
1000b7a4:	7cab      	ldrb	r3, [r5, #18]
1000b7a6:	2b0a      	cmp	r3, #10
1000b7a8:	d123      	bne.n	1000b7f2 <ble_resolv_rand_addr_handler+0xc2>
1000b7aa:	e004      	b.n	1000b7b6 <ble_resolv_rand_addr_handler+0x86>
1000b7ac:	3301      	adds	r3, #1
1000b7ae:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b7b0:	2b05      	cmp	r3, #5
1000b7b2:	d1d3      	bne.n	1000b75c <ble_resolv_rand_addr_handler+0x2c>
1000b7b4:	e01d      	b.n	1000b7f2 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000b7b6:	4b14      	ldr	r3, [pc, #80]	; (1000b808 <ble_resolv_rand_addr_handler+0xd8>)
1000b7b8:	8918      	ldrh	r0, [r3, #8]
1000b7ba:	4b16      	ldr	r3, [pc, #88]	; (1000b814 <ble_resolv_rand_addr_handler+0xe4>)
1000b7bc:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000b7be:	e018      	b.n	1000b7f2 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b7c0:	235e      	movs	r3, #94	; 0x5e
1000b7c2:	4a10      	ldr	r2, [pc, #64]	; (1000b804 <ble_resolv_rand_addr_handler+0xd4>)
1000b7c4:	5cd3      	ldrb	r3, [r2, r3]
1000b7c6:	2b00      	cmp	r3, #0
1000b7c8:	d0ce      	beq.n	1000b768 <ble_resolv_rand_addr_handler+0x38>
1000b7ca:	4a13      	ldr	r2, [pc, #76]	; (1000b818 <ble_resolv_rand_addr_handler+0xe8>)
1000b7cc:	2301      	movs	r3, #1
1000b7ce:	e7c5      	b.n	1000b75c <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b7d0:	480c      	ldr	r0, [pc, #48]	; (1000b804 <ble_resolv_rand_addr_handler+0xd4>)
1000b7d2:	0163      	lsls	r3, r4, #5
1000b7d4:	1b1a      	subs	r2, r3, r4
1000b7d6:	0092      	lsls	r2, r2, #2
1000b7d8:	1882      	adds	r2, r0, r2
1000b7da:	0011      	movs	r1, r2
1000b7dc:	315e      	adds	r1, #94	; 0x5e
1000b7de:	2502      	movs	r5, #2
1000b7e0:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b7e2:	210a      	movs	r1, #10
1000b7e4:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000b7e6:	0010      	movs	r0, r2
1000b7e8:	2212      	movs	r2, #18
1000b7ea:	4907      	ldr	r1, [pc, #28]	; (1000b808 <ble_resolv_rand_addr_handler+0xd8>)
1000b7ec:	4b07      	ldr	r3, [pc, #28]	; (1000b80c <ble_resolv_rand_addr_handler+0xdc>)
1000b7ee:	4798      	blx	r3
1000b7f0:	e7e1      	b.n	1000b7b6 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000b7f2:	2000      	movs	r0, #0
1000b7f4:	bc04      	pop	{r2}
1000b7f6:	4690      	mov	r8, r2
1000b7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b7fa:	46c0      	nop			; (mov r8, r8)
1000b7fc:	10015412 	.word	0x10015412
1000b800:	100110e9 	.word	0x100110e9
1000b804:	100153cc 	.word	0x100153cc
1000b808:	10015678 	.word	0x10015678
1000b80c:	10011107 	.word	0x10011107
1000b810:	10015638 	.word	0x10015638
1000b814:	1000b4c1 	.word	0x1000b4c1
1000b818:	100154a6 	.word	0x100154a6

1000b81c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b81e:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000b820:	283b      	cmp	r0, #59	; 0x3b
1000b822:	d872      	bhi.n	1000b90a <ble_event_manager+0xee>
1000b824:	0083      	lsls	r3, r0, #2
1000b826:	4a3c      	ldr	r2, [pc, #240]	; (1000b918 <ble_event_manager+0xfc>)
1000b828:	58d3      	ldr	r3, [r2, r3]
1000b82a:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b82c:	0084      	lsls	r4, r0, #2
1000b82e:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000b830:	4f3a      	ldr	r7, [pc, #232]	; (1000b91c <ble_event_manager+0x100>)
1000b832:	59bb      	ldr	r3, [r7, r6]
1000b834:	2b00      	cmp	r3, #0
1000b836:	d004      	beq.n	1000b842 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b838:	591b      	ldr	r3, [r3, r4]
1000b83a:	2b00      	cmp	r3, #0
1000b83c:	d001      	beq.n	1000b842 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000b83e:	0028      	movs	r0, r5
1000b840:	4798      	blx	r3
1000b842:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000b844:	2e14      	cmp	r6, #20
1000b846:	d1f4      	bne.n	1000b832 <ble_event_manager+0x16>
1000b848:	e065      	b.n	1000b916 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b84a:	3813      	subs	r0, #19
1000b84c:	b2c4      	uxtb	r4, r0
1000b84e:	00a4      	lsls	r4, r4, #2
1000b850:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000b852:	4f33      	ldr	r7, [pc, #204]	; (1000b920 <ble_event_manager+0x104>)
1000b854:	59bb      	ldr	r3, [r7, r6]
1000b856:	2b00      	cmp	r3, #0
1000b858:	d004      	beq.n	1000b864 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b85a:	591b      	ldr	r3, [r3, r4]
1000b85c:	2b00      	cmp	r3, #0
1000b85e:	d001      	beq.n	1000b864 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000b860:	0028      	movs	r0, r5
1000b862:	4798      	blx	r3
1000b864:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000b866:	2e14      	cmp	r6, #20
1000b868:	d1f4      	bne.n	1000b854 <ble_event_manager+0x38>
1000b86a:	e054      	b.n	1000b916 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b86c:	381d      	subs	r0, #29
1000b86e:	b2c4      	uxtb	r4, r0
1000b870:	00a4      	lsls	r4, r4, #2
1000b872:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000b874:	4f2b      	ldr	r7, [pc, #172]	; (1000b924 <ble_event_manager+0x108>)
1000b876:	59bb      	ldr	r3, [r7, r6]
1000b878:	2b00      	cmp	r3, #0
1000b87a:	d004      	beq.n	1000b886 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b87c:	591b      	ldr	r3, [r3, r4]
1000b87e:	2b00      	cmp	r3, #0
1000b880:	d001      	beq.n	1000b886 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000b882:	0028      	movs	r0, r5
1000b884:	4798      	blx	r3
1000b886:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000b888:	2e14      	cmp	r6, #20
1000b88a:	d1f4      	bne.n	1000b876 <ble_event_manager+0x5a>
1000b88c:	e043      	b.n	1000b916 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000b88e:	3827      	subs	r0, #39	; 0x27
1000b890:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000b892:	4b25      	ldr	r3, [pc, #148]	; (1000b928 <ble_event_manager+0x10c>)
1000b894:	681b      	ldr	r3, [r3, #0]
1000b896:	2b00      	cmp	r3, #0
1000b898:	d03d      	beq.n	1000b916 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b89a:	0080      	lsls	r0, r0, #2
1000b89c:	58c3      	ldr	r3, [r0, r3]
1000b89e:	2b00      	cmp	r3, #0
1000b8a0:	d039      	beq.n	1000b916 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000b8a2:	0008      	movs	r0, r1
1000b8a4:	4798      	blx	r3
1000b8a6:	e036      	b.n	1000b916 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000b8a8:	382d      	subs	r0, #45	; 0x2d
1000b8aa:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000b8ac:	4b1f      	ldr	r3, [pc, #124]	; (1000b92c <ble_event_manager+0x110>)
1000b8ae:	681b      	ldr	r3, [r3, #0]
1000b8b0:	2b00      	cmp	r3, #0
1000b8b2:	d030      	beq.n	1000b916 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b8b4:	0080      	lsls	r0, r0, #2
1000b8b6:	58c3      	ldr	r3, [r0, r3]
1000b8b8:	2b00      	cmp	r3, #0
1000b8ba:	d02c      	beq.n	1000b916 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000b8bc:	0008      	movs	r0, r1
1000b8be:	4798      	blx	r3
1000b8c0:	e029      	b.n	1000b916 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b8c2:	3836      	subs	r0, #54	; 0x36
1000b8c4:	b2c4      	uxtb	r4, r0
1000b8c6:	00a4      	lsls	r4, r4, #2
1000b8c8:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000b8ca:	4f19      	ldr	r7, [pc, #100]	; (1000b930 <ble_event_manager+0x114>)
1000b8cc:	59bb      	ldr	r3, [r7, r6]
1000b8ce:	2b00      	cmp	r3, #0
1000b8d0:	d004      	beq.n	1000b8dc <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b8d2:	591b      	ldr	r3, [r3, r4]
1000b8d4:	2b00      	cmp	r3, #0
1000b8d6:	d001      	beq.n	1000b8dc <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000b8d8:	0028      	movs	r0, r5
1000b8da:	4798      	blx	r3
1000b8dc:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000b8de:	2e14      	cmp	r6, #20
1000b8e0:	d1f4      	bne.n	1000b8cc <ble_event_manager+0xb0>
1000b8e2:	e018      	b.n	1000b916 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000b8e4:	3838      	subs	r0, #56	; 0x38
1000b8e6:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000b8e8:	4b12      	ldr	r3, [pc, #72]	; (1000b934 <ble_event_manager+0x118>)
1000b8ea:	681b      	ldr	r3, [r3, #0]
1000b8ec:	2b00      	cmp	r3, #0
1000b8ee:	d012      	beq.n	1000b916 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b8f0:	0080      	lsls	r0, r0, #2
1000b8f2:	58c3      	ldr	r3, [r0, r3]
1000b8f4:	2b00      	cmp	r3, #0
1000b8f6:	d00e      	beq.n	1000b916 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000b8f8:	0008      	movs	r0, r1
1000b8fa:	4798      	blx	r3
1000b8fc:	e00b      	b.n	1000b916 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000b8fe:	4b0e      	ldr	r3, [pc, #56]	; (1000b938 <ble_event_manager+0x11c>)
1000b900:	681b      	ldr	r3, [r3, #0]
1000b902:	2b00      	cmp	r3, #0
1000b904:	d007      	beq.n	1000b916 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000b906:	4798      	blx	r3
1000b908:	e005      	b.n	1000b916 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000b90a:	4d0c      	ldr	r5, [pc, #48]	; (1000b93c <ble_event_manager+0x120>)
1000b90c:	0028      	movs	r0, r5
1000b90e:	4c0c      	ldr	r4, [pc, #48]	; (1000b940 <ble_event_manager+0x124>)
1000b910:	47a0      	blx	r4
1000b912:	0028      	movs	r0, r5
1000b914:	47a0      	blx	r4
	}
	break;		
	}
}
1000b916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b918:	10012e00 	.word	0x10012e00
1000b91c:	10015650 	.word	0x10015650
1000b920:	10015664 	.word	0x10015664
1000b924:	100153b8 	.word	0x100153b8
1000b928:	100156ac 	.word	0x100156ac
1000b92c:	100153b4 	.word	0x100153b4
1000b930:	1001563c 	.word	0x1001563c
1000b934:	10015bf0 	.word	0x10015bf0
1000b938:	10014174 	.word	0x10014174
1000b93c:	10012c90 	.word	0x10012c90
1000b940:	10011249 	.word	0x10011249

1000b944 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000b944:	b570      	push	{r4, r5, r6, lr}
1000b946:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000b948:	4b0d      	ldr	r3, [pc, #52]	; (1000b980 <ble_event_task+0x3c>)
1000b94a:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000b94c:	2b01      	cmp	r3, #1
1000b94e:	d101      	bne.n	1000b954 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000b950:	4b0c      	ldr	r3, [pc, #48]	; (1000b984 <ble_event_task+0x40>)
1000b952:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000b954:	0022      	movs	r2, r4
1000b956:	490c      	ldr	r1, [pc, #48]	; (1000b988 <ble_event_task+0x44>)
1000b958:	480c      	ldr	r0, [pc, #48]	; (1000b98c <ble_event_task+0x48>)
1000b95a:	4b0d      	ldr	r3, [pc, #52]	; (1000b990 <ble_event_task+0x4c>)
1000b95c:	4798      	blx	r3
1000b95e:	0004      	movs	r4, r0
1000b960:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000b962:	4b07      	ldr	r3, [pc, #28]	; (1000b980 <ble_event_task+0x3c>)
1000b964:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000b966:	2b01      	cmp	r3, #1
1000b968:	d101      	bne.n	1000b96e <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000b96a:	4b0a      	ldr	r3, [pc, #40]	; (1000b994 <ble_event_task+0x50>)
1000b96c:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000b96e:	2d00      	cmp	r5, #0
1000b970:	d104      	bne.n	1000b97c <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000b972:	4b06      	ldr	r3, [pc, #24]	; (1000b98c <ble_event_task+0x48>)
1000b974:	7818      	ldrb	r0, [r3, #0]
1000b976:	4904      	ldr	r1, [pc, #16]	; (1000b988 <ble_event_task+0x44>)
1000b978:	4b07      	ldr	r3, [pc, #28]	; (1000b998 <ble_event_task+0x54>)
1000b97a:	4798      	blx	r3
    }
    
    return status;
}
1000b97c:	0020      	movs	r0, r4
1000b97e:	bd70      	pop	{r4, r5, r6, pc}
1000b980:	10014183 	.word	0x10014183
1000b984:	1000c521 	.word	0x1000c521
1000b988:	100159e4 	.word	0x100159e4
1000b98c:	100156a8 	.word	0x100156a8
1000b990:	1000cae5 	.word	0x1000cae5
1000b994:	1000c4f9 	.word	0x1000c4f9
1000b998:	1000b81d 	.word	0x1000b81d

1000b99c <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000b99c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b99e:	464f      	mov	r7, r9
1000b9a0:	b480      	push	{r7}
1000b9a2:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_128BIT_SERV_UUIDS;
1000b9a4:	ad08      	add	r5, sp, #32
1000b9a6:	2307      	movs	r3, #7
1000b9a8:	706b      	strb	r3, [r5, #1]
		MREPEAT(SERVICE_UUID128_MAX_NUM, _CONF_SERVICE_128BIT_UUID, &adv_data_element)
1000b9aa:	4c1b      	ldr	r4, [pc, #108]	; (1000ba18 <ble_advertisement_data_set+0x7c>)
1000b9ac:	2210      	movs	r2, #16
1000b9ae:	491b      	ldr	r1, [pc, #108]	; (1000ba1c <ble_advertisement_data_set+0x80>)
1000b9b0:	2022      	movs	r0, #34	; 0x22
1000b9b2:	4468      	add	r0, sp
1000b9b4:	4b1a      	ldr	r3, [pc, #104]	; (1000ba20 <ble_advertisement_data_set+0x84>)
1000b9b6:	4699      	mov	r9, r3
1000b9b8:	4798      	blx	r3
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len)
		{
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000b9ba:	2611      	movs	r6, #17
1000b9bc:	702e      	strb	r6, [r5, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000b9be:	2709      	movs	r7, #9
1000b9c0:	74af      	strb	r7, [r5, #18]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000b9c2:	74ef      	strb	r7, [r5, #19]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000b9c4:	aa0d      	add	r2, sp, #52	; 0x34
1000b9c6:	4b17      	ldr	r3, [pc, #92]	; (1000ba24 <ble_advertisement_data_set+0x88>)
1000b9c8:	cb03      	ldmia	r3!, {r0, r1}
1000b9ca:	c203      	stmia	r2!, {r0, r1}
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000b9cc:	2315      	movs	r3, #21
1000b9ce:	466a      	mov	r2, sp
1000b9d0:	7053      	strb	r3, [r2, #1]
		MREPEAT(SERVICE_UUID128_MAX_NUM, _CONF_SERVICE_SOLTN_128BIT_UUID_SCAN_RSP, &scan_resp_data_element)
1000b9d2:	2210      	movs	r2, #16
1000b9d4:	4911      	ldr	r1, [pc, #68]	; (1000ba1c <ble_advertisement_data_set+0x80>)
1000b9d6:	466b      	mov	r3, sp
1000b9d8:	1c98      	adds	r0, r3, #2
1000b9da:	47c8      	blx	r9
		scan_resp_element_len = scan_resp_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(scan_resp_element_len)
		{
			scn_resp[length_field_ind] = scan_resp_element_len + ADV_TYPE_SIZE;
1000b9dc:	466b      	mov	r3, sp
1000b9de:	701e      	strb	r6, [r3, #0]
	#else
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000b9e0:	749f      	strb	r7, [r3, #18]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000b9e2:	23ff      	movs	r3, #255	; 0xff
1000b9e4:	466a      	mov	r2, sp
1000b9e6:	74d3      	strb	r3, [r2, #19]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000b9e8:	aa05      	add	r2, sp, #20
1000b9ea:	0023      	movs	r3, r4
1000b9ec:	3324      	adds	r3, #36	; 0x24
1000b9ee:	cb03      	ldmia	r3!, {r0, r1}
1000b9f0:	c203      	stmia	r2!, {r0, r1}
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000b9f2:	231c      	movs	r3, #28
1000b9f4:	466a      	mov	r2, sp
1000b9f6:	211c      	movs	r1, #28
1000b9f8:	0028      	movs	r0, r5
1000b9fa:	4c0b      	ldr	r4, [pc, #44]	; (1000ba28 <ble_advertisement_data_set+0x8c>)
1000b9fc:	47a0      	blx	r4
1000b9fe:	2800      	cmp	r0, #0
1000ba00:	d005      	beq.n	1000ba0e <ble_advertisement_data_set+0x72>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000ba02:	480a      	ldr	r0, [pc, #40]	; (1000ba2c <ble_advertisement_data_set+0x90>)
1000ba04:	4b0a      	ldr	r3, [pc, #40]	; (1000ba30 <ble_advertisement_data_set+0x94>)
1000ba06:	4798      	blx	r3
1000ba08:	480a      	ldr	r0, [pc, #40]	; (1000ba34 <ble_advertisement_data_set+0x98>)
1000ba0a:	4b0b      	ldr	r3, [pc, #44]	; (1000ba38 <ble_advertisement_data_set+0x9c>)
1000ba0c:	4798      	blx	r3
		return status;
		} else {
		DBG_LOG_DEV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
	}
}
1000ba0e:	2000      	movs	r0, #0
1000ba10:	b010      	add	sp, #64	; 0x40
1000ba12:	bc04      	pop	{r2}
1000ba14:	4691      	mov	r9, r2
1000ba16:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba18:	10012ef0 	.word	0x10012ef0
1000ba1c:	10012f00 	.word	0x10012f00
1000ba20:	10011107 	.word	0x10011107
1000ba24:	10013360 	.word	0x10013360
1000ba28:	1000d545 	.word	0x1000d545
1000ba2c:	10012c90 	.word	0x10012c90
1000ba30:	10011249 	.word	0x10011249
1000ba34:	10013538 	.word	0x10013538
1000ba38:	10011129 	.word	0x10011129

1000ba3c <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
	ble_user_event_cb = cb_fn;
1000ba3c:	4b01      	ldr	r3, [pc, #4]	; (1000ba44 <register_ble_user_event_cb+0x8>)
1000ba3e:	6018      	str	r0, [r3, #0]
}
1000ba40:	4770      	bx	lr
1000ba42:	46c0      	nop			; (mov r8, r8)
1000ba44:	10014174 	.word	0x10014174

1000ba48 <csc_serv_init>:

/**
* \CSC service Configuration function
*/
at_ble_status_t csc_serv_init(uint8_t *buf, uint16_t len)
{
1000ba48:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba4a:	464f      	mov	r7, r9
1000ba4c:	4646      	mov	r6, r8
1000ba4e:	b4c0      	push	{r6, r7}
1000ba50:	b083      	sub	sp, #12
1000ba52:	4681      	mov	r9, r0
1000ba54:	000e      	movs	r6, r1
	/* Configure SPOG Service UUID info*/
	csc_inst.serv_uuid.type =	 AT_BLE_UUID_128;
1000ba56:	4c17      	ldr	r4, [pc, #92]	; (1000bab4 <csc_serv_init+0x6c>)
1000ba58:	2302      	movs	r3, #2
1000ba5a:	4698      	mov	r8, r3
1000ba5c:	7023      	strb	r3, [r4, #0]
	memcpy(&csc_inst.serv_uuid.uuid[0], CSC_SERVICE_UUID, CSC_UUID_128_LEN);
1000ba5e:	1c60      	adds	r0, r4, #1
1000ba60:	4d15      	ldr	r5, [pc, #84]	; (1000bab8 <csc_serv_init+0x70>)
1000ba62:	2210      	movs	r2, #16
1000ba64:	0029      	movs	r1, r5
1000ba66:	4f15      	ldr	r7, [pc, #84]	; (1000babc <csc_serv_init+0x74>)
1000ba68:	47b8      	blx	r7
	
	/* Configure SPOG Service Handle*/
	csc_inst.serv_handle = 0;
1000ba6a:	2300      	movs	r3, #0
1000ba6c:	8263      	strh	r3, [r4, #18]
	
	/*Configure SPOG Endpoint Characteristic*/
	csc_inst.endpoint_chars.uuid.type = AT_BLE_UUID_128;
1000ba6e:	4643      	mov	r3, r8
1000ba70:	75a3      	strb	r3, [r4, #22]
	memcpy(&csc_inst.endpoint_chars.uuid.uuid[0], CSC_ENDPOINT_CHAR_UUID, CSC_UUID_128_LEN);
1000ba72:	0020      	movs	r0, r4
1000ba74:	3017      	adds	r0, #23
1000ba76:	0029      	movs	r1, r5
1000ba78:	3114      	adds	r1, #20
1000ba7a:	2210      	movs	r2, #16
1000ba7c:	47b8      	blx	r7
	csc_inst.endpoint_chars.properties = AT_BLE_CHAR_NOTIFY;	
1000ba7e:	2310      	movs	r3, #16
1000ba80:	8523      	strh	r3, [r4, #40]	; 0x28
	csc_inst.endpoint_chars.init_value = buf;
1000ba82:	464b      	mov	r3, r9
1000ba84:	62e3      	str	r3, [r4, #44]	; 0x2c
	csc_inst.endpoint_chars.value_init_len = len;
1000ba86:	8626      	strh	r6, [r4, #48]	; 0x30
	csc_inst.endpoint_chars.value_max_len = len;
1000ba88:	8666      	strh	r6, [r4, #50]	; 0x32
	/* Configure the CSC characteristic permission */
	if(BLE_PAIR_ENABLE){
		csc_inst.endpoint_chars.value_permissions = (AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_REQ_AUTHN_NO_AUTHR);
1000ba8a:	2222      	movs	r2, #34	; 0x22
1000ba8c:	2334      	movs	r3, #52	; 0x34
1000ba8e:	54e2      	strb	r2, [r4, r3]
		}else{
		csc_inst.endpoint_chars.value_permissions = AT_BLE_ATTR_NO_PERMISSIONS;
	}
	return(at_ble_primary_service_define(&csc_inst.serv_uuid, &csc_inst.serv_handle, NULL, 0, &csc_inst.endpoint_chars, 1));
1000ba90:	0021      	movs	r1, r4
1000ba92:	3112      	adds	r1, #18
1000ba94:	3b33      	subs	r3, #51	; 0x33
1000ba96:	9301      	str	r3, [sp, #4]
1000ba98:	0023      	movs	r3, r4
1000ba9a:	3314      	adds	r3, #20
1000ba9c:	9300      	str	r3, [sp, #0]
1000ba9e:	2300      	movs	r3, #0
1000baa0:	2200      	movs	r2, #0
1000baa2:	0020      	movs	r0, r4
1000baa4:	4c06      	ldr	r4, [pc, #24]	; (1000bac0 <csc_serv_init+0x78>)
1000baa6:	47a0      	blx	r4
}
1000baa8:	b003      	add	sp, #12
1000baaa:	bc0c      	pop	{r2, r3}
1000baac:	4690      	mov	r8, r2
1000baae:	4699      	mov	r9, r3
1000bab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bab2:	46c0      	nop			; (mov r8, r8)
1000bab4:	10015bf4 	.word	0x10015bf4
1000bab8:	100135a8 	.word	0x100135a8
1000babc:	10011107 	.word	0x10011107
1000bac0:	1000df75 	.word	0x1000df75

1000bac4 <csc_serv_send_data>:

/**
* \CSC service send data function
*/
at_ble_status_t csc_serv_send_data(uint16_t connhandle, uint8_t *databuf, uint16_t datalen)
{
1000bac4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bac6:	b083      	sub	sp, #12
1000bac8:	0007      	movs	r7, r0
1000baca:	000d      	movs	r5, r1
1000bacc:	0016      	movs	r6, r2
	at_ble_status_t status;
	uint16_t value = 0;
1000bace:	466b      	mov	r3, sp
1000bad0:	1d99      	adds	r1, r3, #6
1000bad2:	2300      	movs	r3, #0
1000bad4:	800b      	strh	r3, [r1, #0]
	uint16_t length;
	length = sizeof(uint16_t);
1000bad6:	aa01      	add	r2, sp, #4
1000bad8:	3302      	adds	r3, #2
1000bada:	8013      	strh	r3, [r2, #0]
	status = at_ble_characteristic_value_get(csc_inst.endpoint_chars.client_config_handle, (uint8_t *)&value, &length);
1000badc:	3348      	adds	r3, #72	; 0x48
1000bade:	481a      	ldr	r0, [pc, #104]	; (1000bb48 <csc_serv_send_data+0x84>)
1000bae0:	5ac0      	ldrh	r0, [r0, r3]
1000bae2:	4b1a      	ldr	r3, [pc, #104]	; (1000bb4c <csc_serv_send_data+0x88>)
1000bae4:	4798      	blx	r3
1000bae6:	1e04      	subs	r4, r0, #0
	if (status != AT_BLE_SUCCESS){
1000bae8:	d007      	beq.n	1000bafa <csc_serv_send_data+0x36>
		DBG_LOG("at_ble_characteristic_value_get value get failed");
1000baea:	4819      	ldr	r0, [pc, #100]	; (1000bb50 <csc_serv_send_data+0x8c>)
1000baec:	4b19      	ldr	r3, [pc, #100]	; (1000bb54 <csc_serv_send_data+0x90>)
1000baee:	4798      	blx	r3
1000baf0:	4819      	ldr	r0, [pc, #100]	; (1000bb58 <csc_serv_send_data+0x94>)
1000baf2:	4b1a      	ldr	r3, [pc, #104]	; (1000bb5c <csc_serv_send_data+0x98>)
1000baf4:	4798      	blx	r3
		return status;
1000baf6:	0020      	movs	r0, r4
1000baf8:	e023      	b.n	1000bb42 <csc_serv_send_data+0x7e>
	}
	if(value == 1){
1000bafa:	466b      	mov	r3, sp
1000bafc:	3306      	adds	r3, #6
1000bafe:	881b      	ldrh	r3, [r3, #0]
{
	at_ble_status_t status;
	uint16_t value = 0;
	uint16_t length;
	length = sizeof(uint16_t);
	status = at_ble_characteristic_value_get(csc_inst.endpoint_chars.client_config_handle, (uint8_t *)&value, &length);
1000bb00:	2000      	movs	r0, #0
	if (status != AT_BLE_SUCCESS){
		DBG_LOG("at_ble_characteristic_value_get value get failed");
		return status;
	}
	if(value == 1){
1000bb02:	2b01      	cmp	r3, #1
1000bb04:	d11d      	bne.n	1000bb42 <csc_serv_send_data+0x7e>
		status = at_ble_characteristic_value_set(csc_inst.endpoint_chars.char_val_handle, databuf, datalen);
1000bb06:	4b10      	ldr	r3, [pc, #64]	; (1000bb48 <csc_serv_send_data+0x84>)
1000bb08:	8a98      	ldrh	r0, [r3, #20]
1000bb0a:	0032      	movs	r2, r6
1000bb0c:	0029      	movs	r1, r5
1000bb0e:	4b14      	ldr	r3, [pc, #80]	; (1000bb60 <csc_serv_send_data+0x9c>)
1000bb10:	4798      	blx	r3
1000bb12:	1e04      	subs	r4, r0, #0
		if (status != AT_BLE_SUCCESS){
1000bb14:	d007      	beq.n	1000bb26 <csc_serv_send_data+0x62>
			DBG_LOG("at_ble_characteristic_value_set value set failed");
1000bb16:	480e      	ldr	r0, [pc, #56]	; (1000bb50 <csc_serv_send_data+0x8c>)
1000bb18:	4b0e      	ldr	r3, [pc, #56]	; (1000bb54 <csc_serv_send_data+0x90>)
1000bb1a:	4798      	blx	r3
1000bb1c:	4811      	ldr	r0, [pc, #68]	; (1000bb64 <csc_serv_send_data+0xa0>)
1000bb1e:	4b0f      	ldr	r3, [pc, #60]	; (1000bb5c <csc_serv_send_data+0x98>)
1000bb20:	4798      	blx	r3
			return status;
1000bb22:	0020      	movs	r0, r4
1000bb24:	e00d      	b.n	1000bb42 <csc_serv_send_data+0x7e>
		}
		status = at_ble_notification_send(connhandle, csc_inst.endpoint_chars.char_val_handle);
1000bb26:	4b08      	ldr	r3, [pc, #32]	; (1000bb48 <csc_serv_send_data+0x84>)
1000bb28:	8a99      	ldrh	r1, [r3, #20]
1000bb2a:	0038      	movs	r0, r7
1000bb2c:	4b0e      	ldr	r3, [pc, #56]	; (1000bb68 <csc_serv_send_data+0xa4>)
1000bb2e:	4798      	blx	r3
1000bb30:	1e04      	subs	r4, r0, #0
		if (status != AT_BLE_SUCCESS){
1000bb32:	d006      	beq.n	1000bb42 <csc_serv_send_data+0x7e>
			DBG_LOG("at_ble_notification_send  failed");
1000bb34:	4806      	ldr	r0, [pc, #24]	; (1000bb50 <csc_serv_send_data+0x8c>)
1000bb36:	4b07      	ldr	r3, [pc, #28]	; (1000bb54 <csc_serv_send_data+0x90>)
1000bb38:	4798      	blx	r3
1000bb3a:	480c      	ldr	r0, [pc, #48]	; (1000bb6c <csc_serv_send_data+0xa8>)
1000bb3c:	4b07      	ldr	r3, [pc, #28]	; (1000bb5c <csc_serv_send_data+0x98>)
1000bb3e:	4798      	blx	r3
			return status;
1000bb40:	0020      	movs	r0, r4
		}
	}
	return status;
}
1000bb42:	b003      	add	sp, #12
1000bb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bb46:	46c0      	nop			; (mov r8, r8)
1000bb48:	10015bf4 	.word	0x10015bf4
1000bb4c:	1000dfd1 	.word	0x1000dfd1
1000bb50:	10012c90 	.word	0x10012c90
1000bb54:	10011249 	.word	0x10011249
1000bb58:	100135d0 	.word	0x100135d0
1000bb5c:	10011129 	.word	0x10011129
1000bb60:	1000df95 	.word	0x1000df95
1000bb64:	10013604 	.word	0x10013604
1000bb68:	1000e135 	.word	0x1000e135
1000bb6c:	10013638 	.word	0x10013638

1000bb70 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000bb70:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000bb72:	4b0e      	ldr	r3, [pc, #56]	; (1000bbac <uart_read_complete_callback+0x3c>)
1000bb74:	781b      	ldrb	r3, [r3, #0]
1000bb76:	2b01      	cmp	r3, #1
1000bb78:	d10b      	bne.n	1000bb92 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000bb7a:	2202      	movs	r2, #2
1000bb7c:	4b0b      	ldr	r3, [pc, #44]	; (1000bbac <uart_read_complete_callback+0x3c>)
1000bb7e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000bb80:	4b0b      	ldr	r3, [pc, #44]	; (1000bbb0 <uart_read_complete_callback+0x40>)
1000bb82:	681b      	ldr	r3, [r3, #0]
1000bb84:	2b00      	cmp	r3, #0
1000bb86:	d110      	bne.n	1000bbaa <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000bb88:	2102      	movs	r1, #2
1000bb8a:	480a      	ldr	r0, [pc, #40]	; (1000bbb4 <uart_read_complete_callback+0x44>)
1000bb8c:	4b0a      	ldr	r3, [pc, #40]	; (1000bbb8 <uart_read_complete_callback+0x48>)
1000bb8e:	4798      	blx	r3
1000bb90:	e00b      	b.n	1000bbaa <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000bb92:	4b07      	ldr	r3, [pc, #28]	; (1000bbb0 <uart_read_complete_callback+0x40>)
1000bb94:	681b      	ldr	r3, [r3, #0]
1000bb96:	2b00      	cmp	r3, #0
1000bb98:	d007      	beq.n	1000bbaa <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000bb9a:	4c08      	ldr	r4, [pc, #32]	; (1000bbbc <uart_read_complete_callback+0x4c>)
1000bb9c:	7820      	ldrb	r0, [r4, #0]
1000bb9e:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000bba0:	2201      	movs	r2, #1
1000bba2:	0021      	movs	r1, r4
1000bba4:	4803      	ldr	r0, [pc, #12]	; (1000bbb4 <uart_read_complete_callback+0x44>)
1000bba6:	4b06      	ldr	r3, [pc, #24]	; (1000bbc0 <uart_read_complete_callback+0x50>)
1000bba8:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000bbaa:	bd10      	pop	{r4, pc}
1000bbac:	10015188 	.word	0x10015188
1000bbb0:	10015190 	.word	0x10015190
1000bbb4:	10015c44 	.word	0x10015c44
1000bbb8:	1000a435 	.word	0x1000a435
1000bbbc:	1001518c 	.word	0x1001518c
1000bbc0:	1000a3d9 	.word	0x1000a3d9

1000bbc4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000bbc4:	b570      	push	{r4, r5, r6, lr}
1000bbc6:	0006      	movs	r6, r0
1000bbc8:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000bbca:	4c03      	ldr	r4, [pc, #12]	; (1000bbd8 <usart_serial_getchar+0x14>)
1000bbcc:	0029      	movs	r1, r5
1000bbce:	0030      	movs	r0, r6
1000bbd0:	47a0      	blx	r4
1000bbd2:	2800      	cmp	r0, #0
1000bbd4:	d1fa      	bne.n	1000bbcc <usart_serial_getchar+0x8>
}
1000bbd6:	bd70      	pop	{r4, r5, r6, pc}
1000bbd8:	1000a3c5 	.word	0x1000a3c5

1000bbdc <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000bbdc:	b570      	push	{r4, r5, r6, lr}
1000bbde:	0006      	movs	r6, r0
1000bbe0:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000bbe2:	4c03      	ldr	r4, [pc, #12]	; (1000bbf0 <usart_serial_putchar+0x14>)
1000bbe4:	0029      	movs	r1, r5
1000bbe6:	0030      	movs	r0, r6
1000bbe8:	47a0      	blx	r4
1000bbea:	2800      	cmp	r0, #0
1000bbec:	d1fa      	bne.n	1000bbe4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000bbee:	bd70      	pop	{r4, r5, r6, pc}
1000bbf0:	1000a3b5 	.word	0x1000a3b5

1000bbf4 <serial_console_init>:

void serial_console_init(void)
{
1000bbf4:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000bbf6:	2100      	movs	r1, #0
1000bbf8:	2000      	movs	r0, #0
1000bbfa:	4b19      	ldr	r3, [pc, #100]	; (1000bc60 <serial_console_init+0x6c>)
1000bbfc:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000bbfe:	4c19      	ldr	r4, [pc, #100]	; (1000bc64 <serial_console_init+0x70>)
1000bc00:	0020      	movs	r0, r4
1000bc02:	4b19      	ldr	r3, [pc, #100]	; (1000bc68 <serial_console_init+0x74>)
1000bc04:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000bc06:	23e1      	movs	r3, #225	; 0xe1
1000bc08:	025b      	lsls	r3, r3, #9
1000bc0a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000bc0c:	2302      	movs	r3, #2
1000bc0e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000bc10:	2203      	movs	r2, #3
1000bc12:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000bc14:	3201      	adds	r2, #1
1000bc16:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000bc18:	3201      	adds	r2, #1
1000bc1a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000bc1c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000bc1e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000bc20:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000bc22:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000bc24:	4d11      	ldr	r5, [pc, #68]	; (1000bc6c <serial_console_init+0x78>)
1000bc26:	4b12      	ldr	r3, [pc, #72]	; (1000bc70 <serial_console_init+0x7c>)
1000bc28:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000bc2a:	4a12      	ldr	r2, [pc, #72]	; (1000bc74 <serial_console_init+0x80>)
1000bc2c:	4b12      	ldr	r3, [pc, #72]	; (1000bc78 <serial_console_init+0x84>)
1000bc2e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000bc30:	4a12      	ldr	r2, [pc, #72]	; (1000bc7c <serial_console_init+0x88>)
1000bc32:	4b13      	ldr	r3, [pc, #76]	; (1000bc80 <serial_console_init+0x8c>)
1000bc34:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000bc36:	0022      	movs	r2, r4
1000bc38:	4912      	ldr	r1, [pc, #72]	; (1000bc84 <serial_console_init+0x90>)
1000bc3a:	0028      	movs	r0, r5
1000bc3c:	4b12      	ldr	r3, [pc, #72]	; (1000bc88 <serial_console_init+0x94>)
1000bc3e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000bc40:	4e12      	ldr	r6, [pc, #72]	; (1000bc8c <serial_console_init+0x98>)
1000bc42:	6833      	ldr	r3, [r6, #0]
1000bc44:	6898      	ldr	r0, [r3, #8]
1000bc46:	2100      	movs	r1, #0
1000bc48:	4c11      	ldr	r4, [pc, #68]	; (1000bc90 <serial_console_init+0x9c>)
1000bc4a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000bc4c:	6833      	ldr	r3, [r6, #0]
1000bc4e:	6858      	ldr	r0, [r3, #4]
1000bc50:	2100      	movs	r1, #0
1000bc52:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000bc54:	2202      	movs	r2, #2
1000bc56:	490f      	ldr	r1, [pc, #60]	; (1000bc94 <serial_console_init+0xa0>)
1000bc58:	0028      	movs	r0, r5
1000bc5a:	4b0f      	ldr	r3, [pc, #60]	; (1000bc98 <serial_console_init+0xa4>)
1000bc5c:	4798      	blx	r3
}
1000bc5e:	bd70      	pop	{r4, r5, r6, pc}
1000bc60:	100093d5 	.word	0x100093d5
1000bc64:	10015c68 	.word	0x10015c68
1000bc68:	1000a1cd 	.word	0x1000a1cd
1000bc6c:	10015c44 	.word	0x10015c44
1000bc70:	1001534c 	.word	0x1001534c
1000bc74:	1000bbdd 	.word	0x1000bbdd
1000bc78:	10015348 	.word	0x10015348
1000bc7c:	1000bbc5 	.word	0x1000bbc5
1000bc80:	10015344 	.word	0x10015344
1000bc84:	40004000 	.word	0x40004000
1000bc88:	1000a1f9 	.word	0x1000a1f9
1000bc8c:	10013864 	.word	0x10013864
1000bc90:	100112d5 	.word	0x100112d5
1000bc94:	1000bb71 	.word	0x1000bb71
1000bc98:	1000a401 	.word	0x1000a401

1000bc9c <_time_start>:

void _time_start(unsigned int sec)
{
1000bc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc9e:	b083      	sub	sp, #12
1000bca0:	0005      	movs	r5, r0
	system_clock_get_value();
1000bca2:	4c0d      	ldr	r4, [pc, #52]	; (1000bcd8 <_time_start+0x3c>)
1000bca4:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000bca6:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000bca8:	4f0c      	ldr	r7, [pc, #48]	; (1000bcdc <_time_start+0x40>)
1000bcaa:	47b8      	blx	r7
1000bcac:	4e0c      	ldr	r6, [pc, #48]	; (1000bce0 <_time_start+0x44>)
1000bcae:	4a0d      	ldr	r2, [pc, #52]	; (1000bce4 <_time_start+0x48>)
1000bcb0:	4b0d      	ldr	r3, [pc, #52]	; (1000bce8 <_time_start+0x4c>)
1000bcb2:	47b0      	blx	r6
1000bcb4:	9000      	str	r0, [sp, #0]
1000bcb6:	9101      	str	r1, [sp, #4]
1000bcb8:	20fa      	movs	r0, #250	; 0xfa
1000bcba:	0080      	lsls	r0, r0, #2
1000bcbc:	4368      	muls	r0, r5
1000bcbe:	47b8      	blx	r7
1000bcc0:	0002      	movs	r2, r0
1000bcc2:	000b      	movs	r3, r1
1000bcc4:	9800      	ldr	r0, [sp, #0]
1000bcc6:	9901      	ldr	r1, [sp, #4]
1000bcc8:	47b0      	blx	r6
1000bcca:	4b08      	ldr	r3, [pc, #32]	; (1000bcec <_time_start+0x50>)
1000bccc:	4798      	blx	r3
1000bcce:	4b08      	ldr	r3, [pc, #32]	; (1000bcf0 <_time_start+0x54>)
1000bcd0:	6018      	str	r0, [r3, #0]
}
1000bcd2:	b003      	add	sp, #12
1000bcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bcd6:	46c0      	nop			; (mov r8, r8)
1000bcd8:	10009459 	.word	0x10009459
1000bcdc:	10010d59 	.word	0x10010d59
1000bce0:	10010151 	.word	0x10010151
1000bce4:	19feaec7 	.word	0x19feaec7
1000bce8:	3f09d8ef 	.word	0x3f09d8ef
1000bcec:	10010115 	.word	0x10010115
1000bcf0:	10015184 	.word	0x10015184

1000bcf4 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000bcf4:	4b02      	ldr	r3, [pc, #8]	; (1000bd00 <_time_done+0xc>)
1000bcf6:	681a      	ldr	r2, [r3, #0]
1000bcf8:	1e50      	subs	r0, r2, #1
1000bcfa:	6018      	str	r0, [r3, #0]
}
1000bcfc:	4770      	bx	lr
1000bcfe:	46c0      	nop			; (mov r8, r8)
1000bd00:	10015184 	.word	0x10015184

1000bd04 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000bd04:	b570      	push	{r4, r5, r6, lr}
1000bd06:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000bd08:	2201      	movs	r2, #1
1000bd0a:	4b11      	ldr	r3, [pc, #68]	; (1000bd50 <getchar_b11_timeout+0x4c>)
1000bd0c:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000bd0e:	4b11      	ldr	r3, [pc, #68]	; (1000bd54 <getchar_b11_timeout+0x50>)
1000bd10:	681b      	ldr	r3, [r3, #0]
1000bd12:	2b00      	cmp	r3, #0
1000bd14:	d103      	bne.n	1000bd1e <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000bd16:	2102      	movs	r1, #2
1000bd18:	480f      	ldr	r0, [pc, #60]	; (1000bd58 <getchar_b11_timeout+0x54>)
1000bd1a:	4b10      	ldr	r3, [pc, #64]	; (1000bd5c <getchar_b11_timeout+0x58>)
1000bd1c:	4798      	blx	r3

	_time_start(sec);
1000bd1e:	0020      	movs	r0, r4
1000bd20:	4b0f      	ldr	r3, [pc, #60]	; (1000bd60 <getchar_b11_timeout+0x5c>)
1000bd22:	4798      	blx	r3
	
	string_input[0] = 0;
1000bd24:	490f      	ldr	r1, [pc, #60]	; (1000bd64 <getchar_b11_timeout+0x60>)
1000bd26:	2300      	movs	r3, #0
1000bd28:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000bd2a:	2201      	movs	r2, #1
1000bd2c:	480a      	ldr	r0, [pc, #40]	; (1000bd58 <getchar_b11_timeout+0x54>)
1000bd2e:	4b0e      	ldr	r3, [pc, #56]	; (1000bd68 <getchar_b11_timeout+0x64>)
1000bd30:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000bd32:	4c07      	ldr	r4, [pc, #28]	; (1000bd50 <getchar_b11_timeout+0x4c>)
1000bd34:	4d0d      	ldr	r5, [pc, #52]	; (1000bd6c <getchar_b11_timeout+0x68>)
1000bd36:	7823      	ldrb	r3, [r4, #0]
1000bd38:	2b02      	cmp	r3, #2
1000bd3a:	d002      	beq.n	1000bd42 <getchar_b11_timeout+0x3e>
1000bd3c:	47a8      	blx	r5
1000bd3e:	2800      	cmp	r0, #0
1000bd40:	d1f9      	bne.n	1000bd36 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000bd42:	2200      	movs	r2, #0
1000bd44:	4b02      	ldr	r3, [pc, #8]	; (1000bd50 <getchar_b11_timeout+0x4c>)
1000bd46:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000bd48:	4b06      	ldr	r3, [pc, #24]	; (1000bd64 <getchar_b11_timeout+0x60>)
1000bd4a:	7818      	ldrb	r0, [r3, #0]
}
1000bd4c:	bd70      	pop	{r4, r5, r6, pc}
1000bd4e:	46c0      	nop			; (mov r8, r8)
1000bd50:	10015188 	.word	0x10015188
1000bd54:	10015190 	.word	0x10015190
1000bd58:	10015c44 	.word	0x10015c44
1000bd5c:	1000a415 	.word	0x1000a415
1000bd60:	1000bc9d 	.word	0x1000bc9d
1000bd64:	1001518c 	.word	0x1001518c
1000bd68:	1000a3d9 	.word	0x1000a3d9
1000bd6c:	1000bcf5 	.word	0x1000bcf5

1000bd70 <register_uart_callback>:
	read_status = UART_READ_NONE;
	return string_input[0];
}

void register_uart_callback(uart_rx_callback_t callback_func)
{
1000bd70:	b510      	push	{r4, lr}
	user_callback_func = callback_func;
1000bd72:	4b06      	ldr	r3, [pc, #24]	; (1000bd8c <register_uart_callback+0x1c>)
1000bd74:	6018      	str	r0, [r3, #0]
	uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000bd76:	4c06      	ldr	r4, [pc, #24]	; (1000bd90 <register_uart_callback+0x20>)
1000bd78:	2102      	movs	r1, #2
1000bd7a:	0020      	movs	r0, r4
1000bd7c:	4b05      	ldr	r3, [pc, #20]	; (1000bd94 <register_uart_callback+0x24>)
1000bd7e:	4798      	blx	r3
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000bd80:	2201      	movs	r2, #1
1000bd82:	4905      	ldr	r1, [pc, #20]	; (1000bd98 <register_uart_callback+0x28>)
1000bd84:	0020      	movs	r0, r4
1000bd86:	4b05      	ldr	r3, [pc, #20]	; (1000bd9c <register_uart_callback+0x2c>)
1000bd88:	4798      	blx	r3
1000bd8a:	bd10      	pop	{r4, pc}
1000bd8c:	10015190 	.word	0x10015190
1000bd90:	10015c44 	.word	0x10015c44
1000bd94:	1000a415 	.word	0x1000a415
1000bd98:	1001518c 	.word	0x1001518c
1000bd9c:	1000a3d9 	.word	0x1000a3d9

1000bda0 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000bda0:	4b02      	ldr	r3, [pc, #8]	; (1000bdac <platform_event_free+0xc>)
1000bda2:	681a      	ldr	r2, [r3, #0]
1000bda4:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000bda6:	6018      	str	r0, [r3, #0]
}
1000bda8:	4770      	bx	lr
1000bdaa:	46c0      	nop			; (mov r8, r8)
1000bdac:	10015198 	.word	0x10015198

1000bdb0 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000bdb0:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000bdb2:	4b0b      	ldr	r3, [pc, #44]	; (1000bde0 <platform_event_post+0x30>)
1000bdb4:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000bdb6:	2c00      	cmp	r4, #0
1000bdb8:	d011      	beq.n	1000bdde <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000bdba:	6825      	ldr	r5, [r4, #0]
1000bdbc:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000bdbe:	2300      	movs	r3, #0
1000bdc0:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000bdc2:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000bdc4:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000bdc6:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000bdc8:	4b06      	ldr	r3, [pc, #24]	; (1000bde4 <platform_event_post+0x34>)
1000bdca:	681a      	ldr	r2, [r3, #0]
1000bdcc:	2a00      	cmp	r2, #0
1000bdce:	d102      	bne.n	1000bdd6 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000bdd0:	601c      	str	r4, [r3, #0]
1000bdd2:	e004      	b.n	1000bdde <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000bdd4:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000bdd6:	6813      	ldr	r3, [r2, #0]
1000bdd8:	2b00      	cmp	r3, #0
1000bdda:	d1fb      	bne.n	1000bdd4 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000bddc:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000bdde:	bd30      	pop	{r4, r5, pc}
1000bde0:	10015198 	.word	0x10015198
1000bde4:	10015194 	.word	0x10015194

1000bde8 <platform_event_get>:

plf_drv_status platform_event_get(uint16_t* event_type, uint8_t* data, uint16_t *data_len)
{
1000bde8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bdea:	4657      	mov	r7, sl
1000bdec:	b480      	push	{r7}
1000bdee:	b082      	sub	sp, #8
1000bdf0:	4682      	mov	sl, r0
1000bdf2:	9101      	str	r1, [sp, #4]
1000bdf4:	0016      	movs	r6, r2
	struct platform_event* event = NULL;
	plf_drv_status status= STATUS_SUCCESS;

	// block till an event is posted
	while(platform_event_pending_list == NULL )
1000bdf6:	4b15      	ldr	r3, [pc, #84]	; (1000be4c <platform_event_get+0x64>)
1000bdf8:	681c      	ldr	r4, [r3, #0]
1000bdfa:	2c00      	cmp	r4, #0
1000bdfc:	d108      	bne.n	1000be10 <platform_event_get+0x28>
	{	
		status = platform_event_wait(0);
1000bdfe:	4d14      	ldr	r5, [pc, #80]	; (1000be50 <platform_event_get+0x68>)
{
	struct platform_event* event = NULL;
	plf_drv_status status= STATUS_SUCCESS;

	// block till an event is posted
	while(platform_event_pending_list == NULL )
1000be00:	001f      	movs	r7, r3
	{	
		status = platform_event_wait(0);
1000be02:	2000      	movs	r0, #0
1000be04:	47a8      	blx	r5
1000be06:	9000      	str	r0, [sp, #0]
{
	struct platform_event* event = NULL;
	plf_drv_status status= STATUS_SUCCESS;

	// block till an event is posted
	while(platform_event_pending_list == NULL )
1000be08:	683c      	ldr	r4, [r7, #0]
1000be0a:	2c00      	cmp	r4, #0
1000be0c:	d0f9      	beq.n	1000be02 <platform_event_get+0x1a>
1000be0e:	e001      	b.n	1000be14 <platform_event_get+0x2c>
}

plf_drv_status platform_event_get(uint16_t* event_type, uint8_t* data, uint16_t *data_len)
{
	struct platform_event* event = NULL;
	plf_drv_status status= STATUS_SUCCESS;
1000be10:	2300      	movs	r3, #0
1000be12:	9300      	str	r3, [sp, #0]
	{	
		status = platform_event_wait(0);
	}
	
	event = platform_event_pending_list;
	platform_event_pending_list = platform_event_pending_list->next;
1000be14:	4b0d      	ldr	r3, [pc, #52]	; (1000be4c <platform_event_get+0x64>)
1000be16:	6822      	ldr	r2, [r4, #0]
1000be18:	601a      	str	r2, [r3, #0]
	*event_type = event->event_type;
1000be1a:	88a3      	ldrh	r3, [r4, #4]
1000be1c:	4652      	mov	r2, sl
1000be1e:	8013      	strh	r3, [r2, #0]
	*data_len = ((event->data_len<=*data_len)?event->data_len:*data_len);
1000be20:	8832      	ldrh	r2, [r6, #0]
1000be22:	88e3      	ldrh	r3, [r4, #6]
1000be24:	1c19      	adds	r1, r3, #0
1000be26:	b29b      	uxth	r3, r3
1000be28:	4293      	cmp	r3, r2
1000be2a:	d900      	bls.n	1000be2e <platform_event_get+0x46>
1000be2c:	1c11      	adds	r1, r2, #0
1000be2e:	b28a      	uxth	r2, r1
1000be30:	8031      	strh	r1, [r6, #0]
	//*data = event->data;
	memcpy(data,event->data,*data_len);
1000be32:	68a1      	ldr	r1, [r4, #8]
1000be34:	9801      	ldr	r0, [sp, #4]
1000be36:	4b07      	ldr	r3, [pc, #28]	; (1000be54 <platform_event_get+0x6c>)
1000be38:	4798      	blx	r3

	platform_event_free(event);
1000be3a:	0020      	movs	r0, r4
1000be3c:	4b06      	ldr	r3, [pc, #24]	; (1000be58 <platform_event_get+0x70>)
1000be3e:	4798      	blx	r3

	return status;
	
}
1000be40:	9800      	ldr	r0, [sp, #0]
1000be42:	b002      	add	sp, #8
1000be44:	bc04      	pop	{r2}
1000be46:	4692      	mov	sl, r2
1000be48:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be4a:	46c0      	nop			; (mov r8, r8)
1000be4c:	10015194 	.word	0x10015194
1000be50:	1000c295 	.word	0x1000c295
1000be54:	10011107 	.word	0x10011107
1000be58:	1000bda1 	.word	0x1000bda1

1000be5c <platform_event_init>:

void platform_event_init()
{
1000be5c:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000be5e:	2300      	movs	r3, #0
1000be60:	4a06      	ldr	r2, [pc, #24]	; (1000be7c <platform_event_init+0x20>)
1000be62:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000be64:	4a06      	ldr	r2, [pc, #24]	; (1000be80 <platform_event_init+0x24>)
1000be66:	6013      	str	r3, [r2, #0]
1000be68:	4c06      	ldr	r4, [pc, #24]	; (1000be84 <platform_event_init+0x28>)
1000be6a:	0026      	movs	r6, r4
1000be6c:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000be6e:	4d06      	ldr	r5, [pc, #24]	; (1000be88 <platform_event_init+0x2c>)
1000be70:	0020      	movs	r0, r4
1000be72:	47a8      	blx	r5
1000be74:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000be76:	42b4      	cmp	r4, r6
1000be78:	d1fa      	bne.n	1000be70 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000be7a:	bd70      	pop	{r4, r5, r6, pc}
1000be7c:	10015198 	.word	0x10015198
1000be80:	10015194 	.word	0x10015194
1000be84:	1001519c 	.word	0x1001519c
1000be88:	1000bda1 	.word	0x1000bda1

1000be8c <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000be8c:	b570      	push	{r4, r5, r6, lr}
1000be8e:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000be90:	4b13      	ldr	r3, [pc, #76]	; (1000bee0 <at_ke_msg_send+0x54>)
1000be92:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000be94:	4b13      	ldr	r3, [pc, #76]	; (1000bee4 <at_ke_msg_send+0x58>)
1000be96:	681b      	ldr	r3, [r3, #0]
1000be98:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000be9a:	2c0c      	cmp	r4, #12
1000be9c:	d01f      	beq.n	1000bede <at_ke_msg_send+0x52>
1000be9e:	3c0c      	subs	r4, #12
1000bea0:	88e3      	ldrh	r3, [r4, #6]
1000bea2:	2b05      	cmp	r3, #5
1000bea4:	d01b      	beq.n	1000bede <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000bea6:	07eb      	lsls	r3, r5, #31
1000bea8:	d414      	bmi.n	1000bed4 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000beaa:	4b0f      	ldr	r3, [pc, #60]	; (1000bee8 <at_ke_msg_send+0x5c>)
1000beac:	681b      	ldr	r3, [r3, #0]
1000beae:	2002      	movs	r0, #2
1000beb0:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000beb2:	4b0e      	ldr	r3, [pc, #56]	; (1000beec <at_ke_msg_send+0x60>)
1000beb4:	681b      	ldr	r3, [r3, #0]
1000beb6:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000beb8:	4c0d      	ldr	r4, [pc, #52]	; (1000bef0 <at_ke_msg_send+0x64>)
1000beba:	2003      	movs	r0, #3
1000bebc:	6823      	ldr	r3, [r4, #0]
1000bebe:	4798      	blx	r3
1000bec0:	2800      	cmp	r0, #0
1000bec2:	d1fa      	bne.n	1000beba <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000bec4:	4b0b      	ldr	r3, [pc, #44]	; (1000bef4 <at_ke_msg_send+0x68>)
1000bec6:	681b      	ldr	r3, [r3, #0]
1000bec8:	3002      	adds	r0, #2
1000beca:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000becc:	2201      	movs	r2, #1
1000bece:	4b0a      	ldr	r3, [pc, #40]	; (1000bef8 <at_ke_msg_send+0x6c>)
1000bed0:	601a      	str	r2, [r3, #0]
1000bed2:	e004      	b.n	1000bede <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000bed4:	4b09      	ldr	r3, [pc, #36]	; (1000befc <at_ke_msg_send+0x70>)
1000bed6:	6818      	ldr	r0, [r3, #0]
1000bed8:	4b09      	ldr	r3, [pc, #36]	; (1000bf00 <at_ke_msg_send+0x74>)
1000beda:	681b      	ldr	r3, [r3, #0]
1000bedc:	4798      	blx	r3
		}
	}
}
1000bede:	bd70      	pop	{r4, r5, r6, pc}
1000bee0:	4000b1ec 	.word	0x4000b1ec
1000bee4:	10015244 	.word	0x10015244
1000bee8:	1001523c 	.word	0x1001523c
1000beec:	1001524c 	.word	0x1001524c
1000bef0:	10015228 	.word	0x10015228
1000bef4:	10015230 	.word	0x10015230
1000bef8:	4000b020 	.word	0x4000b020
1000befc:	10015234 	.word	0x10015234
1000bf00:	10015224 	.word	0x10015224

1000bf04 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000bf04:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000bf06:	4b06      	ldr	r3, [pc, #24]	; (1000bf20 <samb11_plf_resume_callback+0x1c>)
1000bf08:	4a06      	ldr	r2, [pc, #24]	; (1000bf24 <samb11_plf_resume_callback+0x20>)
1000bf0a:	6819      	ldr	r1, [r3, #0]
1000bf0c:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000bf0e:	685a      	ldr	r2, [r3, #4]
1000bf10:	4b05      	ldr	r3, [pc, #20]	; (1000bf28 <samb11_plf_resume_callback+0x24>)
1000bf12:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000bf14:	4b05      	ldr	r3, [pc, #20]	; (1000bf2c <samb11_plf_resume_callback+0x28>)
1000bf16:	681b      	ldr	r3, [r3, #0]
1000bf18:	2b00      	cmp	r3, #0
1000bf1a:	d000      	beq.n	1000bf1e <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000bf1c:	4798      	blx	r3
	}
}
1000bf1e:	bd10      	pop	{r4, pc}
1000bf20:	10015c90 	.word	0x10015c90
1000bf24:	4000b00c 	.word	0x4000b00c
1000bf28:	4000b010 	.word	0x4000b010
1000bf2c:	10015f6c 	.word	0x10015f6c

1000bf30 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000bf30:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000bf32:	2232      	movs	r2, #50	; 0x32
1000bf34:	2100      	movs	r1, #0
1000bf36:	480d      	ldr	r0, [pc, #52]	; (1000bf6c <init_port_list+0x3c>)
1000bf38:	4b0d      	ldr	r3, [pc, #52]	; (1000bf70 <init_port_list+0x40>)
1000bf3a:	4798      	blx	r3
1000bf3c:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000bf3e:	480b      	ldr	r0, [pc, #44]	; (1000bf6c <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000bf40:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000bf42:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000bf44:	004a      	lsls	r2, r1, #1
1000bf46:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000bf48:	1882      	adds	r2, r0, r2
1000bf4a:	7853      	ldrb	r3, [r2, #1]
1000bf4c:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000bf4e:	b2db      	uxtb	r3, r3
1000bf50:	43a3      	bics	r3, r4
1000bf52:	7053      	strb	r3, [r2, #1]
1000bf54:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000bf56:	2919      	cmp	r1, #25
1000bf58:	d1f4      	bne.n	1000bf44 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000bf5a:	4b04      	ldr	r3, [pc, #16]	; (1000bf6c <init_port_list+0x3c>)
1000bf5c:	785a      	ldrb	r2, [r3, #1]
1000bf5e:	3918      	subs	r1, #24
1000bf60:	438a      	bics	r2, r1
1000bf62:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000bf64:	78da      	ldrb	r2, [r3, #3]
1000bf66:	438a      	bics	r2, r1
1000bf68:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000bf6a:	bd70      	pop	{r4, r5, r6, pc}
1000bf6c:	10015cac 	.word	0x10015cac
1000bf70:	10011119 	.word	0x10011119

1000bf74 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000bf74:	4a06      	ldr	r2, [pc, #24]	; (1000bf90 <init_clock+0x1c>)
1000bf76:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000bf78:	4b06      	ldr	r3, [pc, #24]	; (1000bf94 <init_clock+0x20>)
1000bf7a:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000bf7c:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000bf7e:	4a06      	ldr	r2, [pc, #24]	; (1000bf98 <init_clock+0x24>)
1000bf80:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000bf82:	4906      	ldr	r1, [pc, #24]	; (1000bf9c <init_clock+0x28>)
1000bf84:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000bf86:	4b06      	ldr	r3, [pc, #24]	; (1000bfa0 <init_clock+0x2c>)
1000bf88:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000bf8a:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000bf8c:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000bf8e:	4770      	bx	lr
1000bf90:	4000b00c 	.word	0x4000b00c
1000bf94:	fffe0fd3 	.word	0xfffe0fd3
1000bf98:	10015c90 	.word	0x10015c90
1000bf9c:	4000b010 	.word	0x4000b010
1000bfa0:	ffffe7c0 	.word	0xffffe7c0

1000bfa4 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000bfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bfa6:	4657      	mov	r7, sl
1000bfa8:	464e      	mov	r6, r9
1000bfaa:	4645      	mov	r5, r8
1000bfac:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000bfae:	4b4f      	ldr	r3, [pc, #316]	; (1000c0ec <platform_driver_init+0x148>)
1000bfb0:	781b      	ldrb	r3, [r3, #0]
1000bfb2:	2b00      	cmp	r3, #0
1000bfb4:	d004      	beq.n	1000bfc0 <platform_driver_init+0x1c>
1000bfb6:	4b4d      	ldr	r3, [pc, #308]	; (1000c0ec <platform_driver_init+0x148>)
1000bfb8:	781b      	ldrb	r3, [r3, #0]
1000bfba:	2b01      	cmp	r3, #1
1000bfbc:	d100      	bne.n	1000bfc0 <platform_driver_init+0x1c>
1000bfbe:	e08c      	b.n	1000c0da <platform_driver_init+0x136>
		init_port_list();
1000bfc0:	4b4b      	ldr	r3, [pc, #300]	; (1000c0f0 <platform_driver_init+0x14c>)
1000bfc2:	4798      	blx	r3
		init_clock();
1000bfc4:	4b4b      	ldr	r3, [pc, #300]	; (1000c0f4 <platform_driver_init+0x150>)
1000bfc6:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000bfc8:	2300      	movs	r3, #0
1000bfca:	4698      	mov	r8, r3
1000bfcc:	4b4a      	ldr	r3, [pc, #296]	; (1000c0f8 <platform_driver_init+0x154>)
1000bfce:	4642      	mov	r2, r8
1000bfd0:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bfd2:	4c4a      	ldr	r4, [pc, #296]	; (1000c0fc <platform_driver_init+0x158>)
1000bfd4:	2380      	movs	r3, #128	; 0x80
1000bfd6:	2280      	movs	r2, #128	; 0x80
1000bfd8:	0412      	lsls	r2, r2, #16
1000bfda:	4692      	mov	sl, r2
1000bfdc:	50e2      	str	r2, [r4, r3]
1000bfde:	2280      	movs	r2, #128	; 0x80
1000bfe0:	0452      	lsls	r2, r2, #17
1000bfe2:	4691      	mov	r9, r2
1000bfe4:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000bfe6:	4d46      	ldr	r5, [pc, #280]	; (1000c100 <platform_driver_init+0x15c>)
1000bfe8:	4b46      	ldr	r3, [pc, #280]	; (1000c104 <platform_driver_init+0x160>)
1000bfea:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000bfec:	4b46      	ldr	r3, [pc, #280]	; (1000c108 <platform_driver_init+0x164>)
1000bfee:	4a47      	ldr	r2, [pc, #284]	; (1000c10c <platform_driver_init+0x168>)
1000bff0:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000bff2:	4947      	ldr	r1, [pc, #284]	; (1000c110 <platform_driver_init+0x16c>)
1000bff4:	4a47      	ldr	r2, [pc, #284]	; (1000c114 <platform_driver_init+0x170>)
1000bff6:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000bff8:	4a47      	ldr	r2, [pc, #284]	; (1000c118 <platform_driver_init+0x174>)
1000bffa:	6811      	ldr	r1, [r2, #0]
1000bffc:	4a47      	ldr	r2, [pc, #284]	; (1000c11c <platform_driver_init+0x178>)
1000bffe:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000c000:	4a47      	ldr	r2, [pc, #284]	; (1000c120 <platform_driver_init+0x17c>)
1000c002:	6811      	ldr	r1, [r2, #0]
1000c004:	4a47      	ldr	r2, [pc, #284]	; (1000c124 <platform_driver_init+0x180>)
1000c006:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000c008:	4947      	ldr	r1, [pc, #284]	; (1000c128 <platform_driver_init+0x184>)
1000c00a:	4a48      	ldr	r2, [pc, #288]	; (1000c12c <platform_driver_init+0x188>)
1000c00c:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000c00e:	4948      	ldr	r1, [pc, #288]	; (1000c130 <platform_driver_init+0x18c>)
1000c010:	4a48      	ldr	r2, [pc, #288]	; (1000c134 <platform_driver_init+0x190>)
1000c012:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000c014:	4f48      	ldr	r7, [pc, #288]	; (1000c138 <platform_driver_init+0x194>)
1000c016:	4a49      	ldr	r2, [pc, #292]	; (1000c13c <platform_driver_init+0x198>)
1000c018:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000c01a:	4949      	ldr	r1, [pc, #292]	; (1000c140 <platform_driver_init+0x19c>)
1000c01c:	4a49      	ldr	r2, [pc, #292]	; (1000c144 <platform_driver_init+0x1a0>)
1000c01e:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000c020:	4949      	ldr	r1, [pc, #292]	; (1000c148 <platform_driver_init+0x1a4>)
1000c022:	4a4a      	ldr	r2, [pc, #296]	; (1000c14c <platform_driver_init+0x1a8>)
1000c024:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000c026:	4e4a      	ldr	r6, [pc, #296]	; (1000c150 <platform_driver_init+0x1ac>)
1000c028:	4a4a      	ldr	r2, [pc, #296]	; (1000c154 <platform_driver_init+0x1b0>)
1000c02a:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000c02c:	494a      	ldr	r1, [pc, #296]	; (1000c158 <platform_driver_init+0x1b4>)
1000c02e:	4a4b      	ldr	r2, [pc, #300]	; (1000c15c <platform_driver_init+0x1b8>)
1000c030:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000c032:	494b      	ldr	r1, [pc, #300]	; (1000c160 <platform_driver_init+0x1bc>)
1000c034:	4a4b      	ldr	r2, [pc, #300]	; (1000c164 <platform_driver_init+0x1c0>)
1000c036:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000c038:	494b      	ldr	r1, [pc, #300]	; (1000c168 <platform_driver_init+0x1c4>)
1000c03a:	4a4c      	ldr	r2, [pc, #304]	; (1000c16c <platform_driver_init+0x1c8>)
1000c03c:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000c03e:	494c      	ldr	r1, [pc, #304]	; (1000c170 <platform_driver_init+0x1cc>)
1000c040:	4a4c      	ldr	r2, [pc, #304]	; (1000c174 <platform_driver_init+0x1d0>)
1000c042:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000c044:	494c      	ldr	r1, [pc, #304]	; (1000c178 <platform_driver_init+0x1d4>)
1000c046:	4a4d      	ldr	r2, [pc, #308]	; (1000c17c <platform_driver_init+0x1d8>)
1000c048:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000c04a:	2028      	movs	r0, #40	; 0x28
1000c04c:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000c04e:	494c      	ldr	r1, [pc, #304]	; (1000c180 <platform_driver_init+0x1dc>)
1000c050:	2028      	movs	r0, #40	; 0x28
1000c052:	682b      	ldr	r3, [r5, #0]
1000c054:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000c056:	682b      	ldr	r3, [r5, #0]
1000c058:	494a      	ldr	r1, [pc, #296]	; (1000c184 <platform_driver_init+0x1e0>)
1000c05a:	2027      	movs	r0, #39	; 0x27
1000c05c:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000c05e:	4b4a      	ldr	r3, [pc, #296]	; (1000c188 <platform_driver_init+0x1e4>)
1000c060:	681a      	ldr	r2, [r3, #0]
1000c062:	4b4a      	ldr	r3, [pc, #296]	; (1000c18c <platform_driver_init+0x1e8>)
1000c064:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000c066:	4a4a      	ldr	r2, [pc, #296]	; (1000c190 <platform_driver_init+0x1ec>)
1000c068:	4b4a      	ldr	r3, [pc, #296]	; (1000c194 <platform_driver_init+0x1f0>)
1000c06a:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000c06c:	4a4a      	ldr	r2, [pc, #296]	; (1000c198 <platform_driver_init+0x1f4>)
1000c06e:	4b4b      	ldr	r3, [pc, #300]	; (1000c19c <platform_driver_init+0x1f8>)
1000c070:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000c072:	4a4b      	ldr	r2, [pc, #300]	; (1000c1a0 <platform_driver_init+0x1fc>)
1000c074:	4b4b      	ldr	r3, [pc, #300]	; (1000c1a4 <platform_driver_init+0x200>)
1000c076:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000c078:	4a4b      	ldr	r2, [pc, #300]	; (1000c1a8 <platform_driver_init+0x204>)
1000c07a:	4b4c      	ldr	r3, [pc, #304]	; (1000c1ac <platform_driver_init+0x208>)
1000c07c:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000c07e:	4a4c      	ldr	r2, [pc, #304]	; (1000c1b0 <platform_driver_init+0x20c>)
1000c080:	4b4c      	ldr	r3, [pc, #304]	; (1000c1b4 <platform_driver_init+0x210>)
1000c082:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000c084:	4a4c      	ldr	r2, [pc, #304]	; (1000c1b8 <platform_driver_init+0x214>)
1000c086:	4b4d      	ldr	r3, [pc, #308]	; (1000c1bc <platform_driver_init+0x218>)
1000c088:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000c08a:	4a4d      	ldr	r2, [pc, #308]	; (1000c1c0 <platform_driver_init+0x21c>)
1000c08c:	4b4d      	ldr	r3, [pc, #308]	; (1000c1c4 <platform_driver_init+0x220>)
1000c08e:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000c090:	22a0      	movs	r2, #160	; 0xa0
1000c092:	0092      	lsls	r2, r2, #2
1000c094:	2100      	movs	r1, #0
1000c096:	484c      	ldr	r0, [pc, #304]	; (1000c1c8 <platform_driver_init+0x224>)
1000c098:	4b4c      	ldr	r3, [pc, #304]	; (1000c1cc <platform_driver_init+0x228>)
1000c09a:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c09c:	2280      	movs	r2, #128	; 0x80
1000c09e:	0092      	lsls	r2, r2, #2
1000c0a0:	4b4b      	ldr	r3, [pc, #300]	; (1000c1d0 <platform_driver_init+0x22c>)
1000c0a2:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000c0a4:	4b4b      	ldr	r3, [pc, #300]	; (1000c1d4 <platform_driver_init+0x230>)
1000c0a6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c0a8:	4653      	mov	r3, sl
1000c0aa:	6023      	str	r3, [r4, #0]
1000c0ac:	464b      	mov	r3, r9
1000c0ae:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000c0b0:	4b49      	ldr	r3, [pc, #292]	; (1000c1d8 <platform_driver_init+0x234>)
1000c0b2:	4642      	mov	r2, r8
1000c0b4:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000c0b6:	683b      	ldr	r3, [r7, #0]
1000c0b8:	4a48      	ldr	r2, [pc, #288]	; (1000c1dc <platform_driver_init+0x238>)
1000c0ba:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000c0bc:	6833      	ldr	r3, [r6, #0]
1000c0be:	4a48      	ldr	r2, [pc, #288]	; (1000c1e0 <platform_driver_init+0x23c>)
1000c0c0:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000c0c2:	2000      	movs	r0, #0
1000c0c4:	4c47      	ldr	r4, [pc, #284]	; (1000c1e4 <platform_driver_init+0x240>)
1000c0c6:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000c0c8:	2001      	movs	r0, #1
1000c0ca:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000c0cc:	2002      	movs	r0, #2
1000c0ce:	47a0      	blx	r4
		platform_initialized = 1;
1000c0d0:	2201      	movs	r2, #1
1000c0d2:	4b06      	ldr	r3, [pc, #24]	; (1000c0ec <platform_driver_init+0x148>)
1000c0d4:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000c0d6:	2000      	movs	r0, #0
1000c0d8:	e003      	b.n	1000c0e2 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000c0da:	2201      	movs	r2, #1
1000c0dc:	4b03      	ldr	r3, [pc, #12]	; (1000c0ec <platform_driver_init+0x148>)
1000c0de:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000c0e0:	2001      	movs	r0, #1
	}
	return status;
}
1000c0e2:	bc1c      	pop	{r2, r3, r4}
1000c0e4:	4690      	mov	r8, r2
1000c0e6:	4699      	mov	r9, r3
1000c0e8:	46a2      	mov	sl, r4
1000c0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c0ec:	1001522c 	.word	0x1001522c
1000c0f0:	1000bf31 	.word	0x1000bf31
1000c0f4:	1000bf75 	.word	0x1000bf75
1000c0f8:	10015248 	.word	0x10015248
1000c0fc:	e000e100 	.word	0xe000e100
1000c100:	10015f60 	.word	0x10015f60
1000c104:	000007d7 	.word	0x000007d7
1000c108:	000007bd 	.word	0x000007bd
1000c10c:	10015c9c 	.word	0x10015c9c
1000c110:	0001bc51 	.word	0x0001bc51
1000c114:	10015f64 	.word	0x10015f64
1000c118:	100400bc 	.word	0x100400bc
1000c11c:	10015220 	.word	0x10015220
1000c120:	100400b8 	.word	0x100400b8
1000c124:	1001521c 	.word	0x1001521c
1000c128:	0001b99f 	.word	0x0001b99f
1000c12c:	10015c98 	.word	0x10015c98
1000c130:	0001b9db 	.word	0x0001b9db
1000c134:	10015ca4 	.word	0x10015ca4
1000c138:	10015f74 	.word	0x10015f74
1000c13c:	1004003c 	.word	0x1004003c
1000c140:	10041fc0 	.word	0x10041fc0
1000c144:	10015ca8 	.word	0x10015ca8
1000c148:	10041fc4 	.word	0x10041fc4
1000c14c:	10015f70 	.word	0x10015f70
1000c150:	10015f68 	.word	0x10015f68
1000c154:	10041fd4 	.word	0x10041fd4
1000c158:	10041fd8 	.word	0x10041fd8
1000c15c:	10015ca0 	.word	0x10015ca0
1000c160:	0001cbe9 	.word	0x0001cbe9
1000c164:	1001523c 	.word	0x1001523c
1000c168:	0001cd8f 	.word	0x0001cd8f
1000c16c:	10015230 	.word	0x10015230
1000c170:	0001cea3 	.word	0x0001cea3
1000c174:	1001524c 	.word	0x1001524c
1000c178:	0001cbcf 	.word	0x0001cbcf
1000c17c:	10015228 	.word	0x10015228
1000c180:	1000c619 	.word	0x1000c619
1000c184:	1000c5ad 	.word	0x1000c5ad
1000c188:	100400e4 	.word	0x100400e4
1000c18c:	10015244 	.word	0x10015244
1000c190:	00019fe9 	.word	0x00019fe9
1000c194:	10015254 	.word	0x10015254
1000c198:	0001dbdd 	.word	0x0001dbdd
1000c19c:	10015224 	.word	0x10015224
1000c1a0:	0001dc5b 	.word	0x0001dc5b
1000c1a4:	10015238 	.word	0x10015238
1000c1a8:	100405ec 	.word	0x100405ec
1000c1ac:	10015234 	.word	0x10015234
1000c1b0:	0001d5e3 	.word	0x0001d5e3
1000c1b4:	10015240 	.word	0x10015240
1000c1b8:	10040c20 	.word	0x10040c20
1000c1bc:	10015258 	.word	0x10015258
1000c1c0:	00019f09 	.word	0x00019f09
1000c1c4:	10015218 	.word	0x10015218
1000c1c8:	10015ce0 	.word	0x10015ce0
1000c1cc:	10011119 	.word	0x10011119
1000c1d0:	10015f78 	.word	0x10015f78
1000c1d4:	1000be5d 	.word	0x1000be5d
1000c1d8:	10015f6c 	.word	0x10015f6c
1000c1dc:	1000bf05 	.word	0x1000bf05
1000c1e0:	1000c675 	.word	0x1000c675
1000c1e4:	1000c65d 	.word	0x1000c65d

1000c1e8 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000c1e8:	4b04      	ldr	r3, [pc, #16]	; (1000c1fc <platform_register_ble_msg_handler+0x14>)
1000c1ea:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000c1ec:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000c1ee:	2a01      	cmp	r2, #1
1000c1f0:	d102      	bne.n	1000c1f8 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000c1f2:	4b03      	ldr	r3, [pc, #12]	; (1000c200 <platform_register_ble_msg_handler+0x18>)
1000c1f4:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000c1f6:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000c1f8:	0018      	movs	r0, r3
1000c1fa:	4770      	bx	lr
1000c1fc:	1001522c 	.word	0x1001522c
1000c200:	10015248 	.word	0x10015248

1000c204 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000c204:	b570      	push	{r4, r5, r6, lr}
1000c206:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000c208:	4b0e      	ldr	r3, [pc, #56]	; (1000c244 <platform_interface_send+0x40>)
1000c20a:	681b      	ldr	r3, [r3, #0]
1000c20c:	2b00      	cmp	r3, #0
1000c20e:	d002      	beq.n	1000c216 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000c210:	8840      	ldrh	r0, [r0, #2]
1000c212:	4798      	blx	r3
1000c214:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000c216:	88e3      	ldrh	r3, [r4, #6]
1000c218:	88a2      	ldrh	r2, [r4, #4]
1000c21a:	8861      	ldrh	r1, [r4, #2]
1000c21c:	8820      	ldrh	r0, [r4, #0]
1000c21e:	4d0a      	ldr	r5, [pc, #40]	; (1000c248 <platform_interface_send+0x44>)
1000c220:	682d      	ldr	r5, [r5, #0]
1000c222:	47a8      	blx	r5
1000c224:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000c226:	88e2      	ldrh	r2, [r4, #6]
1000c228:	2a00      	cmp	r2, #0
1000c22a:	d102      	bne.n	1000c232 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000c22c:	4b07      	ldr	r3, [pc, #28]	; (1000c24c <platform_interface_send+0x48>)
1000c22e:	4798      	blx	r3
1000c230:	e006      	b.n	1000c240 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000c232:	0021      	movs	r1, r4
1000c234:	3108      	adds	r1, #8
1000c236:	4b06      	ldr	r3, [pc, #24]	; (1000c250 <platform_interface_send+0x4c>)
1000c238:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000c23a:	0028      	movs	r0, r5
1000c23c:	4b03      	ldr	r3, [pc, #12]	; (1000c24c <platform_interface_send+0x48>)
1000c23e:	4798      	blx	r3
	}
}
1000c240:	bd70      	pop	{r4, r5, r6, pc}
1000c242:	46c0      	nop			; (mov r8, r8)
1000c244:	10015220 	.word	0x10015220
1000c248:	10015254 	.word	0x10015254
1000c24c:	1000be8d 	.word	0x1000be8d
1000c250:	10011107 	.word	0x10011107

1000c254 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000c254:	b570      	push	{r4, r5, r6, lr}
1000c256:	0015      	movs	r5, r2
1000c258:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000c25a:	020a      	lsls	r2, r1, #8
1000c25c:	4302      	orrs	r2, r0
1000c25e:	4b0a      	ldr	r3, [pc, #40]	; (1000c288 <send_plf_int_msg_ind+0x34>)
1000c260:	681e      	ldr	r6, [r3, #0]
1000c262:	0023      	movs	r3, r4
1000c264:	2105      	movs	r1, #5
1000c266:	20a0      	movs	r0, #160	; 0xa0
1000c268:	00c0      	lsls	r0, r0, #3
1000c26a:	47b0      	blx	r6
1000c26c:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000c26e:	d00a      	beq.n	1000c286 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000c270:	2c00      	cmp	r4, #0
1000c272:	d005      	beq.n	1000c280 <send_plf_int_msg_ind+0x2c>
1000c274:	2d00      	cmp	r5, #0
1000c276:	d003      	beq.n	1000c280 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000c278:	0022      	movs	r2, r4
1000c27a:	0029      	movs	r1, r5
1000c27c:	4b03      	ldr	r3, [pc, #12]	; (1000c28c <send_plf_int_msg_ind+0x38>)
1000c27e:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000c280:	0030      	movs	r0, r6
1000c282:	4b03      	ldr	r3, [pc, #12]	; (1000c290 <send_plf_int_msg_ind+0x3c>)
1000c284:	4798      	blx	r3
	}
}
1000c286:	bd70      	pop	{r4, r5, r6, pc}
1000c288:	10015254 	.word	0x10015254
1000c28c:	10011107 	.word	0x10011107
1000c290:	1000be8d 	.word	0x1000be8d

1000c294 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c294:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c296:	465f      	mov	r7, fp
1000c298:	4656      	mov	r6, sl
1000c29a:	464d      	mov	r5, r9
1000c29c:	4644      	mov	r4, r8
1000c29e:	b4f0      	push	{r4, r5, r6, r7}
1000c2a0:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c2a2:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000c2a4:	2300      	movs	r3, #0
1000c2a6:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c2a8:	1ce3      	adds	r3, r4, #3
1000c2aa:	d81c      	bhi.n	1000c2e6 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000c2ac:	220d      	movs	r2, #13
1000c2ae:	2100      	movs	r1, #0
1000c2b0:	a802      	add	r0, sp, #8
1000c2b2:	4b82      	ldr	r3, [pc, #520]	; (1000c4bc <platform_event_wait+0x228>)
1000c2b4:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000c2b6:	2333      	movs	r3, #51	; 0x33
1000c2b8:	aa02      	add	r2, sp, #8
1000c2ba:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000c2bc:	3b30      	subs	r3, #48	; 0x30
1000c2be:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000c2c0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000c2c2:	3302      	adds	r3, #2
1000c2c4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000c2c6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000c2c8:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000c2ca:	0a23      	lsrs	r3, r4, #8
1000c2cc:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000c2ce:	0c23      	lsrs	r3, r4, #16
1000c2d0:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000c2d2:	0e24      	lsrs	r4, r4, #24
1000c2d4:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000c2d6:	2301      	movs	r3, #1
1000c2d8:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000c2da:	210d      	movs	r1, #13
1000c2dc:	0010      	movs	r0, r2
1000c2de:	4b78      	ldr	r3, [pc, #480]	; (1000c4c0 <platform_event_wait+0x22c>)
1000c2e0:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000c2e2:	2301      	movs	r3, #1
1000c2e4:	4699      	mov	r9, r3
1000c2e6:	2400      	movs	r4, #0
1000c2e8:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000c2ea:	4f76      	ldr	r7, [pc, #472]	; (1000c4c4 <platform_event_wait+0x230>)
1000c2ec:	4e76      	ldr	r6, [pc, #472]	; (1000c4c8 <platform_event_wait+0x234>)
1000c2ee:	4977      	ldr	r1, [pc, #476]	; (1000c4cc <platform_event_wait+0x238>)
1000c2f0:	6838      	ldr	r0, [r7, #0]
1000c2f2:	6833      	ldr	r3, [r6, #0]
1000c2f4:	4798      	blx	r3
1000c2f6:	2800      	cmp	r0, #0
1000c2f8:	d000      	beq.n	1000c2fc <platform_event_wait+0x68>
1000c2fa:	e088      	b.n	1000c40e <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000c2fc:	4b73      	ldr	r3, [pc, #460]	; (1000c4cc <platform_event_wait+0x238>)
1000c2fe:	681c      	ldr	r4, [r3, #0]
1000c300:	88a3      	ldrh	r3, [r4, #4]
1000c302:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c304:	23cd      	movs	r3, #205	; 0xcd
1000c306:	009b      	lsls	r3, r3, #2
1000c308:	459a      	cmp	sl, r3
1000c30a:	d100      	bne.n	1000c30e <platform_event_wait+0x7a>
1000c30c:	e0c7      	b.n	1000c49e <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000c30e:	8923      	ldrh	r3, [r4, #8]
1000c310:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000c312:	8963      	ldrh	r3, [r4, #10]
1000c314:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c316:	464b      	mov	r3, r9
1000c318:	2b00      	cmp	r3, #0
1000c31a:	d011      	beq.n	1000c340 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000c31c:	220d      	movs	r2, #13
1000c31e:	2100      	movs	r1, #0
1000c320:	a802      	add	r0, sp, #8
1000c322:	4b66      	ldr	r3, [pc, #408]	; (1000c4bc <platform_event_wait+0x228>)
1000c324:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000c326:	2333      	movs	r3, #51	; 0x33
1000c328:	aa02      	add	r2, sp, #8
1000c32a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000c32c:	3b30      	subs	r3, #48	; 0x30
1000c32e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000c330:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000c332:	3302      	adds	r3, #2
1000c334:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000c336:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c338:	210d      	movs	r1, #13
1000c33a:	0010      	movs	r0, r2
1000c33c:	4b60      	ldr	r3, [pc, #384]	; (1000c4c0 <platform_event_wait+0x22c>)
1000c33e:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000c340:	23a0      	movs	r3, #160	; 0xa0
1000c342:	00db      	lsls	r3, r3, #3
1000c344:	459a      	cmp	sl, r3
1000c346:	d121      	bne.n	1000c38c <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000c348:	4b61      	ldr	r3, [pc, #388]	; (1000c4d0 <platform_event_wait+0x23c>)
1000c34a:	881b      	ldrh	r3, [r3, #0]
1000c34c:	4443      	add	r3, r8
1000c34e:	22a0      	movs	r2, #160	; 0xa0
1000c350:	0092      	lsls	r2, r2, #2
1000c352:	4293      	cmp	r3, r2
1000c354:	dd02      	ble.n	1000c35c <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c356:	3a80      	subs	r2, #128	; 0x80
1000c358:	4b5d      	ldr	r3, [pc, #372]	; (1000c4d0 <platform_event_wait+0x23c>)
1000c35a:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000c35c:	4b5c      	ldr	r3, [pc, #368]	; (1000c4d0 <platform_event_wait+0x23c>)
1000c35e:	469a      	mov	sl, r3
1000c360:	881d      	ldrh	r5, [r3, #0]
1000c362:	4b5c      	ldr	r3, [pc, #368]	; (1000c4d4 <platform_event_wait+0x240>)
1000c364:	18ed      	adds	r5, r5, r3
1000c366:	0021      	movs	r1, r4
1000c368:	310c      	adds	r1, #12
1000c36a:	4642      	mov	r2, r8
1000c36c:	0028      	movs	r0, r5
1000c36e:	4b5a      	ldr	r3, [pc, #360]	; (1000c4d8 <platform_event_wait+0x244>)
1000c370:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000c372:	4642      	mov	r2, r8
1000c374:	0029      	movs	r1, r5
1000c376:	4658      	mov	r0, fp
1000c378:	4b58      	ldr	r3, [pc, #352]	; (1000c4dc <platform_event_wait+0x248>)
1000c37a:	4798      	blx	r3
				plf_event_buff_index += len;
1000c37c:	4653      	mov	r3, sl
1000c37e:	881b      	ldrh	r3, [r3, #0]
1000c380:	4443      	add	r3, r8
1000c382:	4652      	mov	r2, sl
1000c384:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c386:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000c388:	2502      	movs	r5, #2
1000c38a:	e03a      	b.n	1000c402 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c38c:	4b54      	ldr	r3, [pc, #336]	; (1000c4e0 <platform_event_wait+0x24c>)
1000c38e:	681b      	ldr	r3, [r3, #0]
1000c390:	2b00      	cmp	r3, #0
1000c392:	d032      	beq.n	1000c3fa <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c394:	4b4d      	ldr	r3, [pc, #308]	; (1000c4cc <platform_event_wait+0x238>)
1000c396:	681a      	ldr	r2, [r3, #0]
1000c398:	8893      	ldrh	r3, [r2, #4]
1000c39a:	21cd      	movs	r1, #205	; 0xcd
1000c39c:	0089      	lsls	r1, r1, #2
1000c39e:	428b      	cmp	r3, r1
1000c3a0:	d104      	bne.n	1000c3ac <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000c3a2:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000c3a4:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000c3a6:	2b00      	cmp	r3, #0
1000c3a8:	d02b      	beq.n	1000c402 <platform_event_wait+0x16e>
1000c3aa:	e028      	b.n	1000c3fe <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c3ac:	4c4d      	ldr	r4, [pc, #308]	; (1000c4e4 <platform_event_wait+0x250>)
1000c3ae:	4d49      	ldr	r5, [pc, #292]	; (1000c4d4 <platform_event_wait+0x240>)
1000c3b0:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000c3b2:	702b      	strb	r3, [r5, #0]
1000c3b4:	0a1b      	lsrs	r3, r3, #8
1000c3b6:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c3b8:	8910      	ldrh	r0, [r2, #8]
1000c3ba:	4b4b      	ldr	r3, [pc, #300]	; (1000c4e8 <platform_event_wait+0x254>)
1000c3bc:	681b      	ldr	r3, [r3, #0]
1000c3be:	4798      	blx	r3
1000c3c0:	7128      	strb	r0, [r5, #4]
1000c3c2:	0a00      	lsrs	r0, r0, #8
1000c3c4:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c3c6:	6820      	ldr	r0, [r4, #0]
1000c3c8:	4b40      	ldr	r3, [pc, #256]	; (1000c4cc <platform_event_wait+0x238>)
1000c3ca:	681a      	ldr	r2, [r3, #0]
1000c3cc:	88d2      	ldrh	r2, [r2, #6]
1000c3ce:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000c3d0:	681d      	ldr	r5, [r3, #0]
1000c3d2:	896b      	ldrh	r3, [r5, #10]
1000c3d4:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000c3d6:	3008      	adds	r0, #8
1000c3d8:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000c3da:	896a      	ldrh	r2, [r5, #10]
1000c3dc:	2a00      	cmp	r2, #0
1000c3de:	d003      	beq.n	1000c3e8 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000c3e0:	0029      	movs	r1, r5
1000c3e2:	310c      	adds	r1, #12
1000c3e4:	4b3c      	ldr	r3, [pc, #240]	; (1000c4d8 <platform_event_wait+0x244>)
1000c3e6:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000c3e8:	8969      	ldrh	r1, [r5, #10]
1000c3ea:	3108      	adds	r1, #8
1000c3ec:	4b3c      	ldr	r3, [pc, #240]	; (1000c4e0 <platform_event_wait+0x24c>)
1000c3ee:	681b      	ldr	r3, [r3, #0]
1000c3f0:	4838      	ldr	r0, [pc, #224]	; (1000c4d4 <platform_event_wait+0x240>)
1000c3f2:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c3f4:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000c3f6:	2503      	movs	r5, #3
1000c3f8:	e003      	b.n	1000c402 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c3fa:	2400      	movs	r4, #0
1000c3fc:	e001      	b.n	1000c402 <platform_event_wait+0x16e>
1000c3fe:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000c400:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c402:	4b32      	ldr	r3, [pc, #200]	; (1000c4cc <platform_event_wait+0x238>)
1000c404:	6818      	ldr	r0, [r3, #0]
1000c406:	4b39      	ldr	r3, [pc, #228]	; (1000c4ec <platform_event_wait+0x258>)
1000c408:	681b      	ldr	r3, [r3, #0]
1000c40a:	4798      	blx	r3
1000c40c:	e000      	b.n	1000c410 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000c40e:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000c410:	2c00      	cmp	r4, #0
1000c412:	d000      	beq.n	1000c416 <platform_event_wait+0x182>
1000c414:	e76b      	b.n	1000c2ee <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000c416:	464b      	mov	r3, r9
1000c418:	2b00      	cmp	r3, #0
1000c41a:	d046      	beq.n	1000c4aa <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000c41c:	4b29      	ldr	r3, [pc, #164]	; (1000c4c4 <platform_event_wait+0x230>)
1000c41e:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000c420:	2e00      	cmp	r6, #0
1000c422:	d104      	bne.n	1000c42e <platform_event_wait+0x19a>
1000c424:	2300      	movs	r3, #0
1000c426:	6a1c      	ldr	r4, [r3, #32]
1000c428:	2c00      	cmp	r4, #0
1000c42a:	d131      	bne.n	1000c490 <platform_event_wait+0x1fc>
1000c42c:	e03d      	b.n	1000c4aa <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000c42e:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000c430:	2314      	movs	r3, #20
1000c432:	469c      	mov	ip, r3
1000c434:	44b4      	add	ip, r6
1000c436:	4663      	mov	r3, ip
1000c438:	4660      	mov	r0, ip
1000c43a:	9300      	str	r3, [sp, #0]
1000c43c:	4b2c      	ldr	r3, [pc, #176]	; (1000c4f0 <platform_event_wait+0x25c>)
1000c43e:	681b      	ldr	r3, [r3, #0]
1000c440:	4798      	blx	r3
	while(NULL != current)
1000c442:	2c00      	cmp	r4, #0
1000c444:	d01f      	beq.n	1000c486 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000c446:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c448:	23cd      	movs	r3, #205	; 0xcd
1000c44a:	009b      	lsls	r3, r3, #2
1000c44c:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000c44e:	4b27      	ldr	r3, [pc, #156]	; (1000c4ec <platform_event_wait+0x258>)
1000c450:	469a      	mov	sl, r3
1000c452:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c454:	6803      	ldr	r3, [r0, #0]
1000c456:	889b      	ldrh	r3, [r3, #4]
1000c458:	4543      	cmp	r3, r8
1000c45a:	d110      	bne.n	1000c47e <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000c45c:	2f00      	cmp	r7, #0
1000c45e:	d006      	beq.n	1000c46e <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000c460:	6883      	ldr	r3, [r0, #8]
1000c462:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000c464:	4653      	mov	r3, sl
1000c466:	681b      	ldr	r3, [r3, #0]
1000c468:	4798      	blx	r3
				current = prev->pstrNext;
1000c46a:	68b8      	ldr	r0, [r7, #8]
1000c46c:	e009      	b.n	1000c482 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000c46e:	6883      	ldr	r3, [r0, #8]
1000c470:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000c472:	4b1e      	ldr	r3, [pc, #120]	; (1000c4ec <platform_event_wait+0x258>)
1000c474:	681b      	ldr	r3, [r3, #0]
1000c476:	9301      	str	r3, [sp, #4]
1000c478:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000c47a:	6a30      	ldr	r0, [r6, #32]
1000c47c:	e001      	b.n	1000c482 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000c47e:	0007      	movs	r7, r0
1000c480:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000c482:	2800      	cmp	r0, #0
1000c484:	d1e6      	bne.n	1000c454 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000c486:	4b1b      	ldr	r3, [pc, #108]	; (1000c4f4 <platform_event_wait+0x260>)
1000c488:	681b      	ldr	r3, [r3, #0]
1000c48a:	9800      	ldr	r0, [sp, #0]
1000c48c:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000c48e:	e00c      	b.n	1000c4aa <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000c490:	2314      	movs	r3, #20
1000c492:	9300      	str	r3, [sp, #0]
1000c494:	4b16      	ldr	r3, [pc, #88]	; (1000c4f0 <platform_event_wait+0x25c>)
1000c496:	681b      	ldr	r3, [r3, #0]
1000c498:	2014      	movs	r0, #20
1000c49a:	4798      	blx	r3
1000c49c:	e7d3      	b.n	1000c446 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c49e:	4b10      	ldr	r3, [pc, #64]	; (1000c4e0 <platform_event_wait+0x24c>)
1000c4a0:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c4a2:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c4a4:	2b00      	cmp	r3, #0
1000c4a6:	d0ac      	beq.n	1000c402 <platform_event_wait+0x16e>
1000c4a8:	e77b      	b.n	1000c3a2 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000c4aa:	0028      	movs	r0, r5
1000c4ac:	b007      	add	sp, #28
1000c4ae:	bc3c      	pop	{r2, r3, r4, r5}
1000c4b0:	4690      	mov	r8, r2
1000c4b2:	4699      	mov	r9, r3
1000c4b4:	46a2      	mov	sl, r4
1000c4b6:	46ab      	mov	fp, r5
1000c4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c4ba:	46c0      	nop			; (mov r8, r8)
1000c4bc:	10011119 	.word	0x10011119
1000c4c0:	1000c205 	.word	0x1000c205
1000c4c4:	10015258 	.word	0x10015258
1000c4c8:	10015240 	.word	0x10015240
1000c4cc:	10015214 	.word	0x10015214
1000c4d0:	10015f78 	.word	0x10015f78
1000c4d4:	10015ce0 	.word	0x10015ce0
1000c4d8:	10011107 	.word	0x10011107
1000c4dc:	1000bdb1 	.word	0x1000bdb1
1000c4e0:	10015248 	.word	0x10015248
1000c4e4:	10015250 	.word	0x10015250
1000c4e8:	1001521c 	.word	0x1001521c
1000c4ec:	10015218 	.word	0x10015218
1000c4f0:	10015238 	.word	0x10015238
1000c4f4:	10015224 	.word	0x10015224

1000c4f8 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000c4f8:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000c4fa:	4b03      	ldr	r3, [pc, #12]	; (1000c508 <acquire_sleep_lock+0x10>)
1000c4fc:	681b      	ldr	r3, [r3, #0]
1000c4fe:	2080      	movs	r0, #128	; 0x80
1000c500:	0200      	lsls	r0, r0, #8
1000c502:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000c504:	2008      	movs	r0, #8
1000c506:	bd10      	pop	{r4, pc}
1000c508:	10015c98 	.word	0x10015c98

1000c50c <release_message_lock>:

plf_drv_status release_message_lock()
{
1000c50c:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c50e:	4b03      	ldr	r3, [pc, #12]	; (1000c51c <release_message_lock+0x10>)
1000c510:	681b      	ldr	r3, [r3, #0]
1000c512:	2080      	movs	r0, #128	; 0x80
1000c514:	01c0      	lsls	r0, r0, #7
1000c516:	4798      	blx	r3
	return status;
}
1000c518:	2000      	movs	r0, #0
1000c51a:	bd10      	pop	{r4, pc}
1000c51c:	10015ca4 	.word	0x10015ca4

1000c520 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000c520:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c522:	4c05      	ldr	r4, [pc, #20]	; (1000c538 <release_sleep_lock+0x18>)
1000c524:	2080      	movs	r0, #128	; 0x80
1000c526:	01c0      	lsls	r0, r0, #7
1000c528:	6823      	ldr	r3, [r4, #0]
1000c52a:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000c52c:	6823      	ldr	r3, [r4, #0]
1000c52e:	2080      	movs	r0, #128	; 0x80
1000c530:	0200      	lsls	r0, r0, #8
1000c532:	4798      	blx	r3
	return status;
}
1000c534:	2000      	movs	r0, #0
1000c536:	bd10      	pop	{r4, pc}
1000c538:	10015ca4 	.word	0x10015ca4

1000c53c <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000c53c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c53e:	4a18      	ldr	r2, [pc, #96]	; (1000c5a0 <gpio1_combined_isr_handler+0x64>)
1000c540:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c542:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c544:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000c546:	2180      	movs	r1, #128	; 0x80
1000c548:	0209      	lsls	r1, r1, #8
1000c54a:	4301      	orrs	r1, r0
1000c54c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c54e:	0010      	movs	r0, r2
1000c550:	4d14      	ldr	r5, [pc, #80]	; (1000c5a4 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c552:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c554:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c556:	05db      	lsls	r3, r3, #23
1000c558:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c55a:	d011      	beq.n	1000c580 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000c55c:	b2db      	uxtb	r3, r3
1000c55e:	4259      	negs	r1, r3
1000c560:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000c562:	2b01      	cmp	r3, #1
1000c564:	d006      	beq.n	1000c574 <gpio1_combined_isr_handler+0x38>
1000c566:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000c568:	085b      	lsrs	r3, r3, #1
				index++;
1000c56a:	3101      	adds	r1, #1
1000c56c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000c56e:	2b01      	cmp	r3, #1
1000c570:	d1fa      	bne.n	1000c568 <gpio1_combined_isr_handler+0x2c>
1000c572:	e000      	b.n	1000c576 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c574:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c576:	0023      	movs	r3, r4
1000c578:	408b      	lsls	r3, r1
1000c57a:	b29b      	uxth	r3, r3
1000c57c:	8703      	strh	r3, [r0, #56]	; 0x38
1000c57e:	e003      	b.n	1000c588 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c580:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000c582:	432b      	orrs	r3, r5
1000c584:	b29b      	uxth	r3, r3
1000c586:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000c588:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c58a:	05db      	lsls	r3, r3, #23
1000c58c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c58e:	d1e2      	bne.n	1000c556 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000c590:	2180      	movs	r1, #128	; 0x80
1000c592:	0049      	lsls	r1, r1, #1
1000c594:	3381      	adds	r3, #129	; 0x81
1000c596:	33ff      	adds	r3, #255	; 0xff
1000c598:	4a03      	ldr	r2, [pc, #12]	; (1000c5a8 <gpio1_combined_isr_handler+0x6c>)
1000c59a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000c59c:	bd30      	pop	{r4, r5, pc}
1000c59e:	46c0      	nop			; (mov r8, r8)
1000c5a0:	40011000 	.word	0x40011000
1000c5a4:	ffff8000 	.word	0xffff8000
1000c5a8:	e000e100 	.word	0xe000e100

1000c5ac <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000c5ac:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c5ae:	4a17      	ldr	r2, [pc, #92]	; (1000c60c <gpio0_combined_isr_handler+0x60>)
1000c5b0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c5b2:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c5b4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000c5b6:	2180      	movs	r1, #128	; 0x80
1000c5b8:	0209      	lsls	r1, r1, #8
1000c5ba:	4301      	orrs	r1, r0
1000c5bc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c5be:	0010      	movs	r0, r2
1000c5c0:	4d13      	ldr	r5, [pc, #76]	; (1000c610 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c5c2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c5c4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c5c6:	05db      	lsls	r3, r3, #23
1000c5c8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c5ca:	d011      	beq.n	1000c5f0 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000c5cc:	b2db      	uxtb	r3, r3
1000c5ce:	4259      	negs	r1, r3
1000c5d0:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000c5d2:	2b01      	cmp	r3, #1
1000c5d4:	d006      	beq.n	1000c5e4 <gpio0_combined_isr_handler+0x38>
1000c5d6:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000c5d8:	085b      	lsrs	r3, r3, #1
				index++;
1000c5da:	3101      	adds	r1, #1
1000c5dc:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000c5de:	2b01      	cmp	r3, #1
1000c5e0:	d1fa      	bne.n	1000c5d8 <gpio0_combined_isr_handler+0x2c>
1000c5e2:	e000      	b.n	1000c5e6 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c5e4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c5e6:	0023      	movs	r3, r4
1000c5e8:	408b      	lsls	r3, r1
1000c5ea:	b29b      	uxth	r3, r3
1000c5ec:	8703      	strh	r3, [r0, #56]	; 0x38
1000c5ee:	e003      	b.n	1000c5f8 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c5f0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000c5f2:	432b      	orrs	r3, r5
1000c5f4:	b29b      	uxth	r3, r3
1000c5f6:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000c5f8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c5fa:	05db      	lsls	r3, r3, #23
1000c5fc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c5fe:	d1e2      	bne.n	1000c5c6 <gpio0_combined_isr_handler+0x1a>
1000c600:	2180      	movs	r1, #128	; 0x80
1000c602:	3381      	adds	r3, #129	; 0x81
1000c604:	33ff      	adds	r3, #255	; 0xff
1000c606:	4a03      	ldr	r2, [pc, #12]	; (1000c614 <gpio0_combined_isr_handler+0x68>)
1000c608:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000c60a:	bd30      	pop	{r4, r5, pc}
1000c60c:	40010000 	.word	0x40010000
1000c610:	ffff8000 	.word	0xffff8000
1000c614:	e000e100 	.word	0xe000e100

1000c618 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000c618:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000c61a:	4b0c      	ldr	r3, [pc, #48]	; (1000c64c <PORT1_COMB_Handler+0x34>)
1000c61c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000c61e:	0b5b      	lsrs	r3, r3, #13
1000c620:	d010      	beq.n	1000c644 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000c622:	4b0b      	ldr	r3, [pc, #44]	; (1000c650 <PORT1_COMB_Handler+0x38>)
1000c624:	681b      	ldr	r3, [r3, #0]
1000c626:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000c628:	4a08      	ldr	r2, [pc, #32]	; (1000c64c <PORT1_COMB_Handler+0x34>)
1000c62a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c62c:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000c62e:	0b5b      	lsrs	r3, r3, #13
1000c630:	035b      	lsls	r3, r3, #13
1000c632:	430b      	orrs	r3, r1
1000c634:	8713      	strh	r3, [r2, #56]	; 0x38
1000c636:	2180      	movs	r1, #128	; 0x80
1000c638:	0049      	lsls	r1, r1, #1
1000c63a:	23c0      	movs	r3, #192	; 0xc0
1000c63c:	005b      	lsls	r3, r3, #1
1000c63e:	4a05      	ldr	r2, [pc, #20]	; (1000c654 <PORT1_COMB_Handler+0x3c>)
1000c640:	50d1      	str	r1, [r2, r3]
1000c642:	e001      	b.n	1000c648 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000c644:	4b04      	ldr	r3, [pc, #16]	; (1000c658 <PORT1_COMB_Handler+0x40>)
1000c646:	4798      	blx	r3
	}
}
1000c648:	bd10      	pop	{r4, pc}
1000c64a:	46c0      	nop			; (mov r8, r8)
1000c64c:	40011000 	.word	0x40011000
1000c650:	10015f64 	.word	0x10015f64
1000c654:	e000e100 	.word	0xe000e100
1000c658:	1000c53d 	.word	0x1000c53d

1000c65c <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000c65c:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000c65e:	2802      	cmp	r0, #2
1000c660:	d804      	bhi.n	1000c66c <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000c662:	0080      	lsls	r0, r0, #2
1000c664:	2200      	movs	r2, #0
1000c666:	4b02      	ldr	r3, [pc, #8]	; (1000c670 <wakeup_int_unregister_callback+0x14>)
1000c668:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000c66a:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000c66c:	0018      	movs	r0, r3
1000c66e:	4770      	bx	lr
1000c670:	10015f7c 	.word	0x10015f7c

1000c674 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000c674:	b510      	push	{r4, lr}
1000c676:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c678:	7803      	ldrb	r3, [r0, #0]
1000c67a:	2b01      	cmp	r3, #1
1000c67c:	d108      	bne.n	1000c690 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000c67e:	4b11      	ldr	r3, [pc, #68]	; (1000c6c4 <wakeup_active_event_callback+0x50>)
1000c680:	681b      	ldr	r3, [r3, #0]
1000c682:	2b00      	cmp	r3, #0
1000c684:	d000      	beq.n	1000c688 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000c686:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000c688:	23ff      	movs	r3, #255	; 0xff
1000c68a:	6822      	ldr	r2, [r4, #0]
1000c68c:	439a      	bics	r2, r3
1000c68e:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000c690:	7863      	ldrb	r3, [r4, #1]
1000c692:	2b01      	cmp	r3, #1
1000c694:	d108      	bne.n	1000c6a8 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000c696:	4b0b      	ldr	r3, [pc, #44]	; (1000c6c4 <wakeup_active_event_callback+0x50>)
1000c698:	685b      	ldr	r3, [r3, #4]
1000c69a:	2b00      	cmp	r3, #0
1000c69c:	d000      	beq.n	1000c6a0 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000c69e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000c6a0:	4b09      	ldr	r3, [pc, #36]	; (1000c6c8 <wakeup_active_event_callback+0x54>)
1000c6a2:	6822      	ldr	r2, [r4, #0]
1000c6a4:	4013      	ands	r3, r2
1000c6a6:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000c6a8:	78a3      	ldrb	r3, [r4, #2]
1000c6aa:	2b01      	cmp	r3, #1
1000c6ac:	d108      	bne.n	1000c6c0 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000c6ae:	4b05      	ldr	r3, [pc, #20]	; (1000c6c4 <wakeup_active_event_callback+0x50>)
1000c6b0:	689b      	ldr	r3, [r3, #8]
1000c6b2:	2b00      	cmp	r3, #0
1000c6b4:	d000      	beq.n	1000c6b8 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000c6b6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000c6b8:	4b04      	ldr	r3, [pc, #16]	; (1000c6cc <wakeup_active_event_callback+0x58>)
1000c6ba:	6822      	ldr	r2, [r4, #0]
1000c6bc:	4013      	ands	r3, r2
1000c6be:	6023      	str	r3, [r4, #0]
	}
}
1000c6c0:	bd10      	pop	{r4, pc}
1000c6c2:	46c0      	nop			; (mov r8, r8)
1000c6c4:	10015f7c 	.word	0x10015f7c
1000c6c8:	ffff00ff 	.word	0xffff00ff
1000c6cc:	ff00ffff 	.word	0xff00ffff

1000c6d0 <app_connected_event_handler>:
* @param[in] at_ble_connected_t
*/
static at_ble_status_t app_connected_event_handler(void *params)
{
	return AT_BLE_SUCCESS;
}
1000c6d0:	2000      	movs	r0, #0
1000c6d2:	4770      	bx	lr

1000c6d4 <app_disconnected_event_handler>:
/**
 * @brief app_connected_state ble manager notifies the application about state
 * @param[in] connected
 */
static at_ble_status_t app_disconnected_event_handler(void *params)
{
1000c6d4:	b510      	push	{r4, lr}
		/* Started advertisement */
		csc_prf_dev_adv();		
1000c6d6:	4b02      	ldr	r3, [pc, #8]	; (1000c6e0 <app_disconnected_event_handler+0xc>)
1000c6d8:	4798      	blx	r3

		return AT_BLE_SUCCESS;
}
1000c6da:	2000      	movs	r0, #0
1000c6dc:	bd10      	pop	{r4, pc}
1000c6de:	46c0      	nop			; (mov r8, r8)
1000c6e0:	1000a7e5 	.word	0x1000a7e5

1000c6e4 <uart_rx_callback>:
	NULL,
	NULL
};

static void uart_rx_callback(uint8_t input)
{
1000c6e4:	b570      	push	{r4, r5, r6, lr}
	if(input == '\r') {
1000c6e6:	280d      	cmp	r0, #13
1000c6e8:	d118      	bne.n	1000c71c <uart_rx_callback+0x38>
		if(send_length) {
1000c6ea:	4b19      	ldr	r3, [pc, #100]	; (1000c750 <uart_rx_callback+0x6c>)
1000c6ec:	881b      	ldrh	r3, [r3, #0]
1000c6ee:	2b00      	cmp	r3, #0
1000c6f0:	d02d      	beq.n	1000c74e <uart_rx_callback+0x6a>
			send_plf_int_msg_ind(UART_RX_COMPLETE, UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK, send_data, send_length);
1000c6f2:	4c18      	ldr	r4, [pc, #96]	; (1000c754 <uart_rx_callback+0x70>)
1000c6f4:	0022      	movs	r2, r4
1000c6f6:	2101      	movs	r1, #1
1000c6f8:	380b      	subs	r0, #11
1000c6fa:	4d17      	ldr	r5, [pc, #92]	; (1000c758 <uart_rx_callback+0x74>)
1000c6fc:	47a8      	blx	r5
			memset(send_data, 0, APP_TX_BUF_SIZE);
1000c6fe:	2296      	movs	r2, #150	; 0x96
1000c700:	2100      	movs	r1, #0
1000c702:	0020      	movs	r0, r4
1000c704:	4b15      	ldr	r3, [pc, #84]	; (1000c75c <uart_rx_callback+0x78>)
1000c706:	4798      	blx	r3
			send_length = 0;
1000c708:	2200      	movs	r2, #0
1000c70a:	4b11      	ldr	r3, [pc, #68]	; (1000c750 <uart_rx_callback+0x6c>)
1000c70c:	801a      	strh	r2, [r3, #0]
			DBG_LOG(" ");
1000c70e:	4814      	ldr	r0, [pc, #80]	; (1000c760 <uart_rx_callback+0x7c>)
1000c710:	4b14      	ldr	r3, [pc, #80]	; (1000c764 <uart_rx_callback+0x80>)
1000c712:	4798      	blx	r3
1000c714:	2020      	movs	r0, #32
1000c716:	4b14      	ldr	r3, [pc, #80]	; (1000c768 <uart_rx_callback+0x84>)
1000c718:	4798      	blx	r3
1000c71a:	e018      	b.n	1000c74e <uart_rx_callback+0x6a>
		}
	}
	else {
		send_data[send_length++] = input;
1000c71c:	4c0c      	ldr	r4, [pc, #48]	; (1000c750 <uart_rx_callback+0x6c>)
1000c71e:	8823      	ldrh	r3, [r4, #0]
1000c720:	1c5a      	adds	r2, r3, #1
1000c722:	8022      	strh	r2, [r4, #0]
1000c724:	4a0b      	ldr	r2, [pc, #44]	; (1000c754 <uart_rx_callback+0x70>)
1000c726:	54d0      	strb	r0, [r2, r3]
		DBG_LOG_CONT("%c", input);
1000c728:	4b0f      	ldr	r3, [pc, #60]	; (1000c768 <uart_rx_callback+0x84>)
1000c72a:	4798      	blx	r3
		
		if(send_length >= APP_TX_BUF_SIZE) {
1000c72c:	8823      	ldrh	r3, [r4, #0]
1000c72e:	2b95      	cmp	r3, #149	; 0x95
1000c730:	d90d      	bls.n	1000c74e <uart_rx_callback+0x6a>
			send_plf_int_msg_ind(UART_RX_COMPLETE, UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK, send_data, send_length);
1000c732:	4c08      	ldr	r4, [pc, #32]	; (1000c754 <uart_rx_callback+0x70>)
1000c734:	0022      	movs	r2, r4
1000c736:	2101      	movs	r1, #1
1000c738:	2002      	movs	r0, #2
1000c73a:	4d07      	ldr	r5, [pc, #28]	; (1000c758 <uart_rx_callback+0x74>)
1000c73c:	47a8      	blx	r5
			memset(send_data, 0, APP_TX_BUF_SIZE);
1000c73e:	2296      	movs	r2, #150	; 0x96
1000c740:	2100      	movs	r1, #0
1000c742:	0020      	movs	r0, r4
1000c744:	4b05      	ldr	r3, [pc, #20]	; (1000c75c <uart_rx_callback+0x78>)
1000c746:	4798      	blx	r3
			send_length = 0;
1000c748:	2200      	movs	r2, #0
1000c74a:	4b01      	ldr	r3, [pc, #4]	; (1000c750 <uart_rx_callback+0x6c>)
1000c74c:	801a      	strh	r2, [r3, #0]
		}
	}
}
1000c74e:	bd70      	pop	{r4, r5, r6, pc}
1000c750:	1001525c 	.word	0x1001525c
1000c754:	100177c0 	.word	0x100177c0
1000c758:	1000c255 	.word	0x1000c255
1000c75c:	10011119 	.word	0x10011119
1000c760:	10012c90 	.word	0x10012c90
1000c764:	10011249 	.word	0x10011249
1000c768:	1001115d 	.word	0x1001115d

1000c76c <csc_app_send_buf>:
	csc_app_recv_buf(report_info->recv_buff, report_info->recv_buff_len);
}

/* Function used for send data */
static void csc_app_send_buf(void)
{
1000c76c:	b510      	push	{r4, lr}
1000c76e:	b0a8      	sub	sp, #160	; 0xa0
	uint16_t plf_event_type;
	uint16_t plf_event_data_len;
	uint8_t plf_event_data[APP_TX_BUF_SIZE] = {0, };
1000c770:	2296      	movs	r2, #150	; 0x96
1000c772:	2100      	movs	r1, #0
1000c774:	a801      	add	r0, sp, #4
1000c776:	4b0a      	ldr	r3, [pc, #40]	; (1000c7a0 <csc_app_send_buf+0x34>)
1000c778:	4798      	blx	r3

	platform_event_get(&plf_event_type, plf_event_data, &plf_event_data_len);
1000c77a:	249e      	movs	r4, #158	; 0x9e
1000c77c:	446c      	add	r4, sp
1000c77e:	aa27      	add	r2, sp, #156	; 0x9c
1000c780:	a901      	add	r1, sp, #4
1000c782:	0020      	movs	r0, r4
1000c784:	4b07      	ldr	r3, [pc, #28]	; (1000c7a4 <csc_app_send_buf+0x38>)
1000c786:	4798      	blx	r3
	
	if(plf_event_type == ((UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK << 8) | UART_RX_COMPLETE)) {
1000c788:	8822      	ldrh	r2, [r4, #0]
1000c78a:	2381      	movs	r3, #129	; 0x81
1000c78c:	005b      	lsls	r3, r3, #1
1000c78e:	429a      	cmp	r2, r3
1000c790:	d104      	bne.n	1000c79c <csc_app_send_buf+0x30>
		csc_prf_send_data(plf_event_data, plf_event_data_len);
1000c792:	ab27      	add	r3, sp, #156	; 0x9c
1000c794:	8819      	ldrh	r1, [r3, #0]
1000c796:	a801      	add	r0, sp, #4
1000c798:	4b03      	ldr	r3, [pc, #12]	; (1000c7a8 <csc_app_send_buf+0x3c>)
1000c79a:	4798      	blx	r3
	}

}
1000c79c:	b028      	add	sp, #160	; 0xa0
1000c79e:	bd10      	pop	{r4, pc}
1000c7a0:	10011119 	.word	0x10011119
1000c7a4:	1000bde9 	.word	0x1000bde9
1000c7a8:	1000a7b5 	.word	0x1000a7b5

1000c7ac <csc_prf_report_ntf_cb>:
	Transfer(frameBuffer, 1, 128, &module);
}

/* Callback called for new data from remote device */
static void csc_prf_report_ntf_cb(csc_report_ntf_t *report_info)
{
1000c7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c7ae:	4647      	mov	r7, r8
1000c7b0:	b480      	push	{r7}
1000c7b2:	b084      	sub	sp, #16
1000c7b4:	0004      	movs	r4, r0
	DBG_LOG("\r\n");
1000c7b6:	4e1b      	ldr	r6, [pc, #108]	; (1000c824 <csc_prf_report_ntf_cb+0x78>)
1000c7b8:	0030      	movs	r0, r6
1000c7ba:	4d1b      	ldr	r5, [pc, #108]	; (1000c828 <csc_prf_report_ntf_cb+0x7c>)
1000c7bc:	47a8      	blx	r5
1000c7be:	0030      	movs	r0, r6
1000c7c0:	47a8      	blx	r5
	csc_app_recv_buf(report_info->recv_buff, report_info->recv_buff_len);
1000c7c2:	6823      	ldr	r3, [r4, #0]
1000c7c4:	4698      	mov	r8, r3
1000c7c6:	7926      	ldrb	r6, [r4, #4]

/* Function used for receive data */
static void csc_app_recv_buf(uint8_t *recv_data, uint8_t recv_len)
{
	uint16_t ind = 0;
	if (recv_len){
1000c7c8:	2e00      	cmp	r6, #0
1000c7ca:	d013      	beq.n	1000c7f4 <csc_prf_report_ntf_cb+0x48>
		for (ind = 0; ind < recv_len; ind++){
1000c7cc:	b2b5      	uxth	r5, r6
1000c7ce:	2d00      	cmp	r5, #0
1000c7d0:	d00a      	beq.n	1000c7e8 <csc_prf_report_ntf_cb+0x3c>
1000c7d2:	001c      	movs	r4, r3
1000c7d4:	3d01      	subs	r5, #1
1000c7d6:	b2ad      	uxth	r5, r5
1000c7d8:	3501      	adds	r5, #1
1000c7da:	4445      	add	r5, r8
			DBG_LOG_CONT("%c", recv_data[ind]);
1000c7dc:	4f13      	ldr	r7, [pc, #76]	; (1000c82c <csc_prf_report_ntf_cb+0x80>)
1000c7de:	7820      	ldrb	r0, [r4, #0]
1000c7e0:	47b8      	blx	r7
1000c7e2:	3401      	adds	r4, #1
/* Function used for receive data */
static void csc_app_recv_buf(uint8_t *recv_data, uint8_t recv_len)
{
	uint16_t ind = 0;
	if (recv_len){
		for (ind = 0; ind < recv_len; ind++){
1000c7e4:	42ac      	cmp	r4, r5
1000c7e6:	d1fa      	bne.n	1000c7de <csc_prf_report_ntf_cb+0x32>
			DBG_LOG_CONT("%c", recv_data[ind]);
		}
		DBG_LOG("\r\n");
1000c7e8:	4d0e      	ldr	r5, [pc, #56]	; (1000c824 <csc_prf_report_ntf_cb+0x78>)
1000c7ea:	0028      	movs	r0, r5
1000c7ec:	4c0e      	ldr	r4, [pc, #56]	; (1000c828 <csc_prf_report_ntf_cb+0x7c>)
1000c7ee:	47a0      	blx	r4
1000c7f0:	0028      	movs	r0, r5
1000c7f2:	47a0      	blx	r4
	}
	draw_string(recv_data, recv_len, frameBuffer, 1, 1, BLACK, WHITE);
1000c7f4:	4c0e      	ldr	r4, [pc, #56]	; (1000c830 <csc_prf_report_ntf_cb+0x84>)
1000c7f6:	4b0f      	ldr	r3, [pc, #60]	; (1000c834 <csc_prf_report_ntf_cb+0x88>)
1000c7f8:	781b      	ldrb	r3, [r3, #0]
1000c7fa:	9302      	str	r3, [sp, #8]
1000c7fc:	4b0e      	ldr	r3, [pc, #56]	; (1000c838 <csc_prf_report_ntf_cb+0x8c>)
1000c7fe:	781b      	ldrb	r3, [r3, #0]
1000c800:	9301      	str	r3, [sp, #4]
1000c802:	2301      	movs	r3, #1
1000c804:	9300      	str	r3, [sp, #0]
1000c806:	0022      	movs	r2, r4
1000c808:	0031      	movs	r1, r6
1000c80a:	4640      	mov	r0, r8
1000c80c:	4d0b      	ldr	r5, [pc, #44]	; (1000c83c <csc_prf_report_ntf_cb+0x90>)
1000c80e:	47a8      	blx	r5
	Transfer(frameBuffer, 1, 128, &module);
1000c810:	4b0b      	ldr	r3, [pc, #44]	; (1000c840 <csc_prf_report_ntf_cb+0x94>)
1000c812:	2280      	movs	r2, #128	; 0x80
1000c814:	2101      	movs	r1, #1
1000c816:	0020      	movs	r0, r4
1000c818:	4c0a      	ldr	r4, [pc, #40]	; (1000c844 <csc_prf_report_ntf_cb+0x98>)
1000c81a:	47a0      	blx	r4
/* Callback called for new data from remote device */
static void csc_prf_report_ntf_cb(csc_report_ntf_t *report_info)
{
	DBG_LOG("\r\n");
	csc_app_recv_buf(report_info->recv_buff, report_info->recv_buff_len);
}
1000c81c:	b004      	add	sp, #16
1000c81e:	bc04      	pop	{r2}
1000c820:	4690      	mov	r8, r2
1000c822:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c824:	10012c90 	.word	0x10012c90
1000c828:	10011249 	.word	0x10011249
1000c82c:	1001115d 	.word	0x1001115d
1000c830:	10015fc0 	.word	0x10015fc0
1000c834:	1001232d 	.word	0x1001232d
1000c838:	1001232c 	.word	0x1001232c
1000c83c:	10008981 	.word	0x10008981
1000c840:	10015f88 	.word	0x10015f88
1000c844:	10008cd1 	.word	0x10008cd1

1000c848 <dualtimer_callback2>:
	gpio_pin_set_output_level(PIN_LP_GPIO_16, false);
	gpio_pin_set_output_level(PIN_LP_GPIO_20, false);
}

static void dualtimer_callback2(void)
{
1000c848:	b510      	push	{r4, lr}
	gpio_pin_toggle_output_level(PIN_LP_GPIO_20);
1000c84a:	2014      	movs	r0, #20
1000c84c:	4b01      	ldr	r3, [pc, #4]	; (1000c854 <dualtimer_callback2+0xc>)
1000c84e:	4798      	blx	r3
}
1000c850:	bd10      	pop	{r4, pc}
1000c852:	46c0      	nop			; (mov r8, r8)
1000c854:	1000923d 	.word	0x1000923d

1000c858 <main>:
	register_uart_callback(uart_rx_callback);
}

bool app_exec = true;
int main( void)
{
1000c858:	b570      	push	{r4, r5, r6, lr}
1000c85a:	b088      	sub	sp, #32
	}
}

static void csc_init()
{
	platform_driver_init();
1000c85c:	4b37      	ldr	r3, [pc, #220]	; (1000c93c <main+0xe4>)
1000c85e:	4798      	blx	r3
	acquire_sleep_lock();
1000c860:	4b37      	ldr	r3, [pc, #220]	; (1000c940 <main+0xe8>)
1000c862:	4798      	blx	r3

	/* Initialize serial console  */
	serial_console_init();
1000c864:	4b37      	ldr	r3, [pc, #220]	; (1000c944 <main+0xec>)
1000c866:	4798      	blx	r3

	DBG_LOG("Initializing Custom Serial Chat Application");
1000c868:	4837      	ldr	r0, [pc, #220]	; (1000c948 <main+0xf0>)
1000c86a:	4b38      	ldr	r3, [pc, #224]	; (1000c94c <main+0xf4>)
1000c86c:	4798      	blx	r3
1000c86e:	4838      	ldr	r0, [pc, #224]	; (1000c950 <main+0xf8>)
1000c870:	4b38      	ldr	r3, [pc, #224]	; (1000c954 <main+0xfc>)
1000c872:	4798      	blx	r3
	
	/* Initialize the buffer address and buffer length based on user input */
	csc_prf_buf_init(&send_data[0], APP_TX_BUF_SIZE);
1000c874:	2196      	movs	r1, #150	; 0x96
1000c876:	4838      	ldr	r0, [pc, #224]	; (1000c958 <main+0x100>)
1000c878:	4b38      	ldr	r3, [pc, #224]	; (1000c95c <main+0x104>)
1000c87a:	4798      	blx	r3
	
	/* initialize the ble chip  and Set the device mac address */
	ble_device_init(NULL);
1000c87c:	2000      	movs	r0, #0
1000c87e:	4b38      	ldr	r3, [pc, #224]	; (1000c960 <main+0x108>)
1000c880:	4798      	blx	r3
	
	/* Initializing the profile */
	csc_prf_init(NULL);
1000c882:	2000      	movs	r0, #0
1000c884:	4b37      	ldr	r3, [pc, #220]	; (1000c964 <main+0x10c>)
1000c886:	4798      	blx	r3
	
	/* Started advertisement */
	csc_prf_dev_adv();
1000c888:	4b37      	ldr	r3, [pc, #220]	; (1000c968 <main+0x110>)
1000c88a:	4798      	blx	r3
	
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000c88c:	4a37      	ldr	r2, [pc, #220]	; (1000c96c <main+0x114>)
1000c88e:	2100      	movs	r1, #0
1000c890:	2000      	movs	r0, #0
1000c892:	4b37      	ldr	r3, [pc, #220]	; (1000c970 <main+0x118>)
1000c894:	4798      	blx	r3
	BLE_GAP_EVENT_TYPE,
	app_gap_handle);
	
	/* Register the notification handler */
	notify_recv_ntf_handler(csc_prf_report_ntf_cb);
1000c896:	4837      	ldr	r0, [pc, #220]	; (1000c974 <main+0x11c>)
1000c898:	4b37      	ldr	r3, [pc, #220]	; (1000c978 <main+0x120>)
1000c89a:	4798      	blx	r3
	
	/* Register the user event handler */
	register_ble_user_event_cb(csc_app_send_buf);
1000c89c:	4837      	ldr	r0, [pc, #220]	; (1000c97c <main+0x124>)
1000c89e:	4b38      	ldr	r3, [pc, #224]	; (1000c980 <main+0x128>)
1000c8a0:	4798      	blx	r3
	
	register_uart_callback(uart_rx_callback);
1000c8a2:	4838      	ldr	r0, [pc, #224]	; (1000c984 <main+0x12c>)
1000c8a4:	4b38      	ldr	r3, [pc, #224]	; (1000c988 <main+0x130>)
1000c8a6:	4798      	blx	r3
 }

static void configure_gpio_pins(void)
{
	struct gpio_config config_gpio_pin;
	gpio_get_config_defaults(&config_gpio_pin);
1000c8a8:	ac01      	add	r4, sp, #4
1000c8aa:	0020      	movs	r0, r4
1000c8ac:	4b37      	ldr	r3, [pc, #220]	; (1000c98c <main+0x134>)
1000c8ae:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000c8b0:	2301      	movs	r3, #1
1000c8b2:	7023      	strb	r3, [r4, #0]
	gpio_pin_set_config(PIN_LP_GPIO_16 , &config_gpio_pin);
1000c8b4:	0021      	movs	r1, r4
1000c8b6:	2010      	movs	r0, #16
1000c8b8:	4d35      	ldr	r5, [pc, #212]	; (1000c990 <main+0x138>)
1000c8ba:	47a8      	blx	r5
	gpio_pin_set_config(PIN_LP_GPIO_20 , &config_gpio_pin);
1000c8bc:	0021      	movs	r1, r4
1000c8be:	2014      	movs	r0, #20
1000c8c0:	47a8      	blx	r5
	gpio_pin_set_output_level(PIN_LP_GPIO_16, false);
1000c8c2:	2100      	movs	r1, #0
1000c8c4:	2010      	movs	r0, #16
1000c8c6:	4d33      	ldr	r5, [pc, #204]	; (1000c994 <main+0x13c>)
1000c8c8:	47a8      	blx	r5
	gpio_pin_set_output_level(PIN_LP_GPIO_20, false);
1000c8ca:	2100      	movs	r1, #0
1000c8cc:	2014      	movs	r0, #20
1000c8ce:	47a8      	blx	r5


static void configure_dualtimer(void)
{
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000c8d0:	0020      	movs	r0, r4
1000c8d2:	4b31      	ldr	r3, [pc, #196]	; (1000c998 <main+0x140>)
1000c8d4:	4798      	blx	r3
	config_dualtimer.timer1.load_value = 0;
1000c8d6:	2300      	movs	r3, #0
1000c8d8:	60a3      	str	r3, [r4, #8]
	config_dualtimer.timer2.load_value = 2600000;
1000c8da:	4a30      	ldr	r2, [pc, #192]	; (1000c99c <main+0x144>)
1000c8dc:	6162      	str	r2, [r4, #20]
	config_dualtimer.timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000c8de:	70e3      	strb	r3, [r4, #3]
	config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000c8e0:	7063      	strb	r3, [r4, #1]
	config_dualtimer.timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000c8e2:	73e3      	strb	r3, [r4, #15]
	config_dualtimer.timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000c8e4:	3302      	adds	r3, #2
1000c8e6:	7363      	strb	r3, [r4, #13]
	dualtimer_init(&config_dualtimer);
1000c8e8:	0020      	movs	r0, r4
1000c8ea:	4b2d      	ldr	r3, [pc, #180]	; (1000c9a0 <main+0x148>)
1000c8ec:	4798      	blx	r3
	gpio_pin_toggle_output_level(PIN_LP_GPIO_20);
}

static void configure_dualtimer_callback(void)
{
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000c8ee:	492d      	ldr	r1, [pc, #180]	; (1000c9a4 <main+0x14c>)
1000c8f0:	2001      	movs	r0, #1
1000c8f2:	4b2d      	ldr	r3, [pc, #180]	; (1000c9a8 <main+0x150>)
1000c8f4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c8f6:	2280      	movs	r2, #128	; 0x80
1000c8f8:	01d2      	lsls	r2, r2, #7
1000c8fa:	4b2c      	ldr	r3, [pc, #176]	; (1000c9ac <main+0x154>)
1000c8fc:	601a      	str	r2, [r3, #0]
	//configure_timer();
	//configure_timer_callback();
	configure_gpio_pins();
	configure_dualtimer();
	configure_dualtimer_callback();
	Setup(&module);
1000c8fe:	4c2c      	ldr	r4, [pc, #176]	; (1000c9b0 <main+0x158>)
1000c900:	0020      	movs	r0, r4
1000c902:	4b2c      	ldr	r3, [pc, #176]	; (1000c9b4 <main+0x15c>)
1000c904:	4798      	blx	r3
	ClearDisplay(&module);
1000c906:	0020      	movs	r0, r4
1000c908:	4d2b      	ldr	r5, [pc, #172]	; (1000c9b8 <main+0x160>)
1000c90a:	47a8      	blx	r5
	ClearDisplay(&module);
1000c90c:	0020      	movs	r0, r4
1000c90e:	47a8      	blx	r5
	ClearDisplay(&module);
1000c910:	0020      	movs	r0, r4
1000c912:	47a8      	blx	r5
	ClearBuffer(frameBuffer);
1000c914:	4829      	ldr	r0, [pc, #164]	; (1000c9bc <main+0x164>)
1000c916:	4b2a      	ldr	r3, [pc, #168]	; (1000c9c0 <main+0x168>)
1000c918:	4798      	blx	r3
	
	while(app_exec){
1000c91a:	4b2a      	ldr	r3, [pc, #168]	; (1000c9c4 <main+0x16c>)
1000c91c:	781b      	ldrb	r3, [r3, #0]
1000c91e:	2b00      	cmp	r3, #0
1000c920:	d008      	beq.n	1000c934 <main+0xdc>
		ble_event_task(BLE_EVENT_TIMEOUT);
1000c922:	2601      	movs	r6, #1
1000c924:	4276      	negs	r6, r6
1000c926:	4d28      	ldr	r5, [pc, #160]	; (1000c9c8 <main+0x170>)
	ClearDisplay(&module);
	ClearDisplay(&module);
	ClearDisplay(&module);
	ClearBuffer(frameBuffer);
	
	while(app_exec){
1000c928:	4c26      	ldr	r4, [pc, #152]	; (1000c9c4 <main+0x16c>)
		ble_event_task(BLE_EVENT_TIMEOUT);
1000c92a:	0030      	movs	r0, r6
1000c92c:	47a8      	blx	r5
	ClearDisplay(&module);
	ClearDisplay(&module);
	ClearDisplay(&module);
	ClearBuffer(frameBuffer);
	
	while(app_exec){
1000c92e:	7823      	ldrb	r3, [r4, #0]
1000c930:	2b00      	cmp	r3, #0
1000c932:	d1fa      	bne.n	1000c92a <main+0xd2>
		ble_event_task(BLE_EVENT_TIMEOUT);

	}
	return 0;
}
1000c934:	2000      	movs	r0, #0
1000c936:	b008      	add	sp, #32
1000c938:	bd70      	pop	{r4, r5, r6, pc}
1000c93a:	46c0      	nop			; (mov r8, r8)
1000c93c:	1000bfa5 	.word	0x1000bfa5
1000c940:	1000c4f9 	.word	0x1000c4f9
1000c944:	1000bbf5 	.word	0x1000bbf5
1000c948:	10012c90 	.word	0x10012c90
1000c94c:	10011249 	.word	0x10011249
1000c950:	1001365c 	.word	0x1001365c
1000c954:	10011129 	.word	0x10011129
1000c958:	100177c0 	.word	0x100177c0
1000c95c:	1000a73d 	.word	0x1000a73d
1000c960:	1000b201 	.word	0x1000b201
1000c964:	1000a749 	.word	0x1000a749
1000c968:	1000a7e5 	.word	0x1000a7e5
1000c96c:	10013688 	.word	0x10013688
1000c970:	1000b131 	.word	0x1000b131
1000c974:	1000c7ad 	.word	0x1000c7ad
1000c978:	1000a841 	.word	0x1000a841
1000c97c:	1000c76d 	.word	0x1000c76d
1000c980:	1000ba3d 	.word	0x1000ba3d
1000c984:	1000c6e5 	.word	0x1000c6e5
1000c988:	1000bd71 	.word	0x1000bd71
1000c98c:	10008fe9 	.word	0x10008fe9
1000c990:	10008ff9 	.word	0x10008ff9
1000c994:	100091b1 	.word	0x100091b1
1000c998:	10008e49 	.word	0x10008e49
1000c99c:	0027ac40 	.word	0x0027ac40
1000c9a0:	10008ecd 	.word	0x10008ecd
1000c9a4:	1000c849 	.word	0x1000c849
1000c9a8:	10008fd1 	.word	0x10008fd1
1000c9ac:	e000e100 	.word	0xe000e100
1000c9b0:	10015f88 	.word	0x10015f88
1000c9b4:	10008c5d 	.word	0x10008c5d
1000c9b8:	10008da5 	.word	0x10008da5
1000c9bc:	10015fc0 	.word	0x10015fc0
1000c9c0:	10008de5 	.word	0x10008de5
1000c9c4:	100137fc 	.word	0x100137fc
1000c9c8:	1000b945 	.word	0x1000b945

1000c9cc <internal_event_post>:
1000c9cc:	b570      	push	{r4, r5, r6, lr}
1000c9ce:	4d12      	ldr	r5, [pc, #72]	; (1000ca18 <internal_event_post+0x4c>)
1000c9d0:	682c      	ldr	r4, [r5, #0]
1000c9d2:	2c00      	cmp	r4, #0
1000c9d4:	d014      	beq.n	1000ca00 <internal_event_post+0x34>
1000c9d6:	6826      	ldr	r6, [r4, #0]
1000c9d8:	60e2      	str	r2, [r4, #12]
1000c9da:	602e      	str	r6, [r5, #0]
1000c9dc:	2500      	movs	r5, #0
1000c9de:	4a0f      	ldr	r2, [pc, #60]	; (1000ca1c <internal_event_post+0x50>)
1000c9e0:	8123      	strh	r3, [r4, #8]
1000c9e2:	6813      	ldr	r3, [r2, #0]
1000c9e4:	6025      	str	r5, [r4, #0]
1000c9e6:	80a0      	strh	r0, [r4, #4]
1000c9e8:	80e1      	strh	r1, [r4, #6]
1000c9ea:	42ab      	cmp	r3, r5
1000c9ec:	d101      	bne.n	1000c9f2 <internal_event_post+0x26>
1000c9ee:	6014      	str	r4, [r2, #0]
1000c9f0:	e011      	b.n	1000ca16 <internal_event_post+0x4a>
1000c9f2:	681a      	ldr	r2, [r3, #0]
1000c9f4:	2a00      	cmp	r2, #0
1000c9f6:	d001      	beq.n	1000c9fc <internal_event_post+0x30>
1000c9f8:	1c13      	adds	r3, r2, #0
1000c9fa:	e7fa      	b.n	1000c9f2 <internal_event_post+0x26>
1000c9fc:	601c      	str	r4, [r3, #0]
1000c9fe:	e00a      	b.n	1000ca16 <internal_event_post+0x4a>
1000ca00:	b2c4      	uxtb	r4, r0
1000ca02:	2c00      	cmp	r4, #0
1000ca04:	d107      	bne.n	1000ca16 <internal_event_post+0x4a>
1000ca06:	4c06      	ldr	r4, [pc, #24]	; (1000ca20 <internal_event_post+0x54>)
1000ca08:	60e2      	str	r2, [r4, #12]
1000ca0a:	2201      	movs	r2, #1
1000ca0c:	8123      	strh	r3, [r4, #8]
1000ca0e:	4b05      	ldr	r3, [pc, #20]	; (1000ca24 <internal_event_post+0x58>)
1000ca10:	80a0      	strh	r0, [r4, #4]
1000ca12:	80e1      	strh	r1, [r4, #6]
1000ca14:	701a      	strb	r2, [r3, #0]
1000ca16:	bd70      	pop	{r4, r5, r6, pc}
1000ca18:	10015278 	.word	0x10015278
1000ca1c:	10015274 	.word	0x10015274
1000ca20:	10015260 	.word	0x10015260
1000ca24:	10015270 	.word	0x10015270

1000ca28 <internal_event_init>:
1000ca28:	b510      	push	{r4, lr}
1000ca2a:	4b08      	ldr	r3, [pc, #32]	; (1000ca4c <internal_event_init+0x24>)
1000ca2c:	0900      	lsrs	r0, r0, #4
1000ca2e:	0100      	lsls	r0, r0, #4
1000ca30:	681a      	ldr	r2, [r3, #0]
1000ca32:	1808      	adds	r0, r1, r0
1000ca34:	4281      	cmp	r1, r0
1000ca36:	d003      	beq.n	1000ca40 <internal_event_init+0x18>
1000ca38:	600a      	str	r2, [r1, #0]
1000ca3a:	1c0a      	adds	r2, r1, #0
1000ca3c:	3110      	adds	r1, #16
1000ca3e:	e7f9      	b.n	1000ca34 <internal_event_init+0xc>
1000ca40:	601a      	str	r2, [r3, #0]
1000ca42:	2200      	movs	r2, #0
1000ca44:	4b02      	ldr	r3, [pc, #8]	; (1000ca50 <internal_event_init+0x28>)
1000ca46:	601a      	str	r2, [r3, #0]
1000ca48:	bd10      	pop	{r4, pc}
1000ca4a:	46c0      	nop			; (mov r8, r8)
1000ca4c:	10015278 	.word	0x10015278
1000ca50:	10015274 	.word	0x10015274

1000ca54 <special_events_handler>:
1000ca54:	b538      	push	{r3, r4, r5, lr}
1000ca56:	4c1b      	ldr	r4, [pc, #108]	; (1000cac4 <special_events_handler+0x70>)
1000ca58:	1c03      	adds	r3, r0, #0
1000ca5a:	8825      	ldrh	r5, [r4, #0]
1000ca5c:	1c08      	adds	r0, r1, #0
1000ca5e:	1c21      	adds	r1, r4, #0
1000ca60:	429d      	cmp	r5, r3
1000ca62:	d107      	bne.n	1000ca74 <special_events_handler+0x20>
1000ca64:	88a5      	ldrh	r5, [r4, #4]
1000ca66:	4285      	cmp	r5, r0
1000ca68:	d104      	bne.n	1000ca74 <special_events_handler+0x20>
1000ca6a:	2301      	movs	r3, #1
1000ca6c:	425b      	negs	r3, r3
1000ca6e:	8023      	strh	r3, [r4, #0]
1000ca70:	60a2      	str	r2, [r4, #8]
1000ca72:	e009      	b.n	1000ca88 <special_events_handler+0x34>
1000ca74:	884c      	ldrh	r4, [r1, #2]
1000ca76:	429c      	cmp	r4, r3
1000ca78:	d10a      	bne.n	1000ca90 <special_events_handler+0x3c>
1000ca7a:	888c      	ldrh	r4, [r1, #4]
1000ca7c:	4284      	cmp	r4, r0
1000ca7e:	d107      	bne.n	1000ca90 <special_events_handler+0x3c>
1000ca80:	2301      	movs	r3, #1
1000ca82:	425b      	negs	r3, r3
1000ca84:	804b      	strh	r3, [r1, #2]
1000ca86:	608a      	str	r2, [r1, #8]
1000ca88:	4b0f      	ldr	r3, [pc, #60]	; (1000cac8 <special_events_handler+0x74>)
1000ca8a:	4798      	blx	r3
1000ca8c:	2001      	movs	r0, #1
1000ca8e:	e017      	b.n	1000cac0 <special_events_handler+0x6c>
1000ca90:	490e      	ldr	r1, [pc, #56]	; (1000cacc <special_events_handler+0x78>)
1000ca92:	428b      	cmp	r3, r1
1000ca94:	d00e      	beq.n	1000cab4 <special_events_handler+0x60>
1000ca96:	490e      	ldr	r1, [pc, #56]	; (1000cad0 <special_events_handler+0x7c>)
1000ca98:	428b      	cmp	r3, r1
1000ca9a:	d007      	beq.n	1000caac <special_events_handler+0x58>
1000ca9c:	490d      	ldr	r1, [pc, #52]	; (1000cad4 <special_events_handler+0x80>)
1000ca9e:	2000      	movs	r0, #0
1000caa0:	428b      	cmp	r3, r1
1000caa2:	d10d      	bne.n	1000cac0 <special_events_handler+0x6c>
1000caa4:	1c10      	adds	r0, r2, #0
1000caa6:	4b0c      	ldr	r3, [pc, #48]	; (1000cad8 <special_events_handler+0x84>)
1000caa8:	4798      	blx	r3
1000caaa:	e7ef      	b.n	1000ca8c <special_events_handler+0x38>
1000caac:	1c11      	adds	r1, r2, #0
1000caae:	4b0b      	ldr	r3, [pc, #44]	; (1000cadc <special_events_handler+0x88>)
1000cab0:	2200      	movs	r2, #0
1000cab2:	e002      	b.n	1000caba <special_events_handler+0x66>
1000cab4:	1c11      	adds	r1, r2, #0
1000cab6:	2200      	movs	r2, #0
1000cab8:	4b09      	ldr	r3, [pc, #36]	; (1000cae0 <special_events_handler+0x8c>)
1000caba:	4798      	blx	r3
1000cabc:	4243      	negs	r3, r0
1000cabe:	4158      	adcs	r0, r3
1000cac0:	bd38      	pop	{r3, r4, r5, pc}
1000cac2:	46c0      	nop			; (mov r8, r8)
1000cac4:	10017c58 	.word	0x10017c58
1000cac8:	1000e599 	.word	0x1000e599
1000cacc:	00000e13 	.word	0x00000e13
1000cad0:	00000e15 	.word	0x00000e15
1000cad4:	00000e01 	.word	0x00000e01
1000cad8:	1000e909 	.word	0x1000e909
1000cadc:	1000eac9 	.word	0x1000eac9
1000cae0:	1000eba1 	.word	0x1000eba1

1000cae4 <at_ble_event_get>:
1000cae4:	2300      	movs	r3, #0
1000cae6:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cae8:	b087      	sub	sp, #28
1000caea:	9204      	str	r2, [sp, #16]
1000caec:	7003      	strb	r3, [r0, #0]
1000caee:	9b04      	ldr	r3, [sp, #16]
1000caf0:	9003      	str	r0, [sp, #12]
1000caf2:	3b01      	subs	r3, #1
1000caf4:	1c0d      	adds	r5, r1, #0
1000caf6:	9305      	str	r3, [sp, #20]
1000caf8:	3303      	adds	r3, #3
1000cafa:	d802      	bhi.n	1000cb02 <at_ble_event_get+0x1e>
1000cafc:	9804      	ldr	r0, [sp, #16]
1000cafe:	4bae      	ldr	r3, [pc, #696]	; (1000cdb8 <at_ble_event_get+0x2d4>)
1000cb00:	4798      	blx	r3
1000cb02:	9b05      	ldr	r3, [sp, #20]
1000cb04:	4cad      	ldr	r4, [pc, #692]	; (1000cdbc <at_ble_event_get+0x2d8>)
1000cb06:	3303      	adds	r3, #3
1000cb08:	d902      	bls.n	1000cb10 <at_ble_event_get+0x2c>
1000cb0a:	2300      	movs	r3, #0
1000cb0c:	9302      	str	r3, [sp, #8]
1000cb0e:	e015      	b.n	1000cb3c <at_ble_event_get+0x58>
1000cb10:	2300      	movs	r3, #0
1000cb12:	9302      	str	r3, [sp, #8]
1000cb14:	6823      	ldr	r3, [r4, #0]
1000cb16:	2b00      	cmp	r3, #0
1000cb18:	d113      	bne.n	1000cb42 <at_ble_event_get+0x5e>
1000cb1a:	9b02      	ldr	r3, [sp, #8]
1000cb1c:	2bd0      	cmp	r3, #208	; 0xd0
1000cb1e:	d100      	bne.n	1000cb22 <at_ble_event_get+0x3e>
1000cb20:	e2da      	b.n	1000d0d8 <at_ble_event_get+0x5f4>
1000cb22:	9804      	ldr	r0, [sp, #16]
1000cb24:	4ba6      	ldr	r3, [pc, #664]	; (1000cdc0 <at_ble_event_get+0x2dc>)
1000cb26:	4798      	blx	r3
1000cb28:	9002      	str	r0, [sp, #8]
1000cb2a:	2802      	cmp	r0, #2
1000cb2c:	d1f2      	bne.n	1000cb14 <at_ble_event_get+0x30>
1000cb2e:	e03f      	b.n	1000cbb0 <at_ble_event_get+0xcc>
1000cb30:	9804      	ldr	r0, [sp, #16]
1000cb32:	4ba3      	ldr	r3, [pc, #652]	; (1000cdc0 <at_ble_event_get+0x2dc>)
1000cb34:	4798      	blx	r3
1000cb36:	9002      	str	r0, [sp, #8]
1000cb38:	2802      	cmp	r0, #2
1000cb3a:	d039      	beq.n	1000cbb0 <at_ble_event_get+0xcc>
1000cb3c:	6823      	ldr	r3, [r4, #0]
1000cb3e:	2b00      	cmp	r3, #0
1000cb40:	d0f6      	beq.n	1000cb30 <at_ble_event_get+0x4c>
1000cb42:	9b02      	ldr	r3, [sp, #8]
1000cb44:	2bd0      	cmp	r3, #208	; 0xd0
1000cb46:	d100      	bne.n	1000cb4a <at_ble_event_get+0x66>
1000cb48:	e2c6      	b.n	1000d0d8 <at_ble_event_get+0x5f4>
1000cb4a:	9b02      	ldr	r3, [sp, #8]
1000cb4c:	3b03      	subs	r3, #3
1000cb4e:	1e5a      	subs	r2, r3, #1
1000cb50:	4193      	sbcs	r3, r2
1000cb52:	9a02      	ldr	r2, [sp, #8]
1000cb54:	425b      	negs	r3, r3
1000cb56:	401a      	ands	r2, r3
1000cb58:	6823      	ldr	r3, [r4, #0]
1000cb5a:	9202      	str	r2, [sp, #8]
1000cb5c:	2b00      	cmp	r3, #0
1000cb5e:	d100      	bne.n	1000cb62 <at_ble_event_get+0x7e>
1000cb60:	e2c2      	b.n	1000d0e8 <at_ble_event_get+0x604>
1000cb62:	681a      	ldr	r2, [r3, #0]
1000cb64:	68de      	ldr	r6, [r3, #12]
1000cb66:	6022      	str	r2, [r4, #0]
1000cb68:	88da      	ldrh	r2, [r3, #6]
1000cb6a:	9201      	str	r2, [sp, #4]
1000cb6c:	4a95      	ldr	r2, [pc, #596]	; (1000cdc4 <at_ble_event_get+0x2e0>)
1000cb6e:	889c      	ldrh	r4, [r3, #4]
1000cb70:	6811      	ldr	r1, [r2, #0]
1000cb72:	6013      	str	r3, [r2, #0]
1000cb74:	6019      	str	r1, [r3, #0]
1000cb76:	4b94      	ldr	r3, [pc, #592]	; (1000cdc8 <at_ble_event_get+0x2e4>)
1000cb78:	781b      	ldrb	r3, [r3, #0]
1000cb7a:	2b01      	cmp	r3, #1
1000cb7c:	d10f      	bne.n	1000cb9e <at_ble_event_get+0xba>
1000cb7e:	4b93      	ldr	r3, [pc, #588]	; (1000cdcc <at_ble_event_get+0x2e8>)
1000cb80:	4a92      	ldr	r2, [pc, #584]	; (1000cdcc <at_ble_event_get+0x2e8>)
1000cb82:	8898      	ldrh	r0, [r3, #4]
1000cb84:	88d9      	ldrh	r1, [r3, #6]
1000cb86:	68d2      	ldr	r2, [r2, #12]
1000cb88:	891b      	ldrh	r3, [r3, #8]
1000cb8a:	4f91      	ldr	r7, [pc, #580]	; (1000cdd0 <at_ble_event_get+0x2ec>)
1000cb8c:	47b8      	blx	r7
1000cb8e:	2210      	movs	r2, #16
1000cb90:	4b90      	ldr	r3, [pc, #576]	; (1000cdd4 <at_ble_event_get+0x2f0>)
1000cb92:	488e      	ldr	r0, [pc, #568]	; (1000cdcc <at_ble_event_get+0x2e8>)
1000cb94:	2100      	movs	r1, #0
1000cb96:	4798      	blx	r3
1000cb98:	2300      	movs	r3, #0
1000cb9a:	4a8b      	ldr	r2, [pc, #556]	; (1000cdc8 <at_ble_event_get+0x2e4>)
1000cb9c:	7013      	strb	r3, [r2, #0]
1000cb9e:	9b02      	ldr	r3, [sp, #8]
1000cba0:	2b00      	cmp	r3, #0
1000cba2:	d114      	bne.n	1000cbce <at_ble_event_get+0xea>
1000cba4:	4b8c      	ldr	r3, [pc, #560]	; (1000cdd8 <at_ble_event_get+0x2f4>)
1000cba6:	429c      	cmp	r4, r3
1000cba8:	d009      	beq.n	1000cbbe <at_ble_event_get+0xda>
1000cbaa:	4b8c      	ldr	r3, [pc, #560]	; (1000cddc <at_ble_event_get+0x2f8>)
1000cbac:	429c      	cmp	r4, r3
1000cbae:	d127      	bne.n	1000cc00 <at_ble_event_get+0x11c>
1000cbb0:	233a      	movs	r3, #58	; 0x3a
1000cbb2:	9a03      	ldr	r2, [sp, #12]
1000cbb4:	7013      	strb	r3, [r2, #0]
1000cbb6:	2300      	movs	r3, #0
1000cbb8:	9302      	str	r3, [sp, #8]
1000cbba:	1c1d      	adds	r5, r3, #0
1000cbbc:	e007      	b.n	1000cbce <at_ble_event_get+0xea>
1000cbbe:	9b01      	ldr	r3, [sp, #4]
1000cbc0:	42a3      	cmp	r3, r4
1000cbc2:	d000      	beq.n	1000cbc6 <at_ble_event_get+0xe2>
1000cbc4:	e28a      	b.n	1000d0dc <at_ble_event_get+0x5f8>
1000cbc6:	2338      	movs	r3, #56	; 0x38
1000cbc8:	9a03      	ldr	r2, [sp, #12]
1000cbca:	7013      	strb	r3, [r2, #0]
1000cbcc:	602e      	str	r6, [r5, #0]
1000cbce:	9b03      	ldr	r3, [sp, #12]
1000cbd0:	781b      	ldrb	r3, [r3, #0]
1000cbd2:	2b3b      	cmp	r3, #59	; 0x3b
1000cbd4:	d101      	bne.n	1000cbda <at_ble_event_get+0xf6>
1000cbd6:	4b82      	ldr	r3, [pc, #520]	; (1000cde0 <at_ble_event_get+0x2fc>)
1000cbd8:	4798      	blx	r3
1000cbda:	9b03      	ldr	r3, [sp, #12]
1000cbdc:	781b      	ldrb	r3, [r3, #0]
1000cbde:	2b3b      	cmp	r3, #59	; 0x3b
1000cbe0:	d003      	beq.n	1000cbea <at_ble_event_get+0x106>
1000cbe2:	9b05      	ldr	r3, [sp, #20]
1000cbe4:	3303      	adds	r3, #3
1000cbe6:	d904      	bls.n	1000cbf2 <at_ble_event_get+0x10e>
1000cbe8:	e283      	b.n	1000d0f2 <at_ble_event_get+0x60e>
1000cbea:	9b02      	ldr	r3, [sp, #8]
1000cbec:	2b00      	cmp	r3, #0
1000cbee:	d088      	beq.n	1000cb02 <at_ble_event_get+0x1e>
1000cbf0:	e7f7      	b.n	1000cbe2 <at_ble_event_get+0xfe>
1000cbf2:	9b02      	ldr	r3, [sp, #8]
1000cbf4:	2bd0      	cmp	r3, #208	; 0xd0
1000cbf6:	d100      	bne.n	1000cbfa <at_ble_event_get+0x116>
1000cbf8:	e27b      	b.n	1000d0f2 <at_ble_event_get+0x60e>
1000cbfa:	4b7a      	ldr	r3, [pc, #488]	; (1000cde4 <at_ble_event_get+0x300>)
1000cbfc:	4798      	blx	r3
1000cbfe:	e278      	b.n	1000d0f2 <at_ble_event_get+0x60e>
1000cc00:	9b01      	ldr	r3, [sp, #4]
1000cc02:	2bbb      	cmp	r3, #187	; 0xbb
1000cc04:	d125      	bne.n	1000cc52 <at_ble_event_get+0x16e>
1000cc06:	2cbb      	cmp	r4, #187	; 0xbb
1000cc08:	d123      	bne.n	1000cc52 <at_ble_event_get+0x16e>
1000cc0a:	466b      	mov	r3, sp
1000cc0c:	891b      	ldrh	r3, [r3, #8]
1000cc0e:	80ab      	strh	r3, [r5, #4]
1000cc10:	78b3      	ldrb	r3, [r6, #2]
1000cc12:	7872      	ldrb	r2, [r6, #1]
1000cc14:	78f0      	ldrb	r0, [r6, #3]
1000cc16:	021b      	lsls	r3, r3, #8
1000cc18:	4313      	orrs	r3, r2
1000cc1a:	7971      	ldrb	r1, [r6, #5]
1000cc1c:	7932      	ldrb	r2, [r6, #4]
1000cc1e:	70a8      	strb	r0, [r5, #2]
1000cc20:	4871      	ldr	r0, [pc, #452]	; (1000cde8 <at_ble_event_get+0x304>)
1000cc22:	802b      	strh	r3, [r5, #0]
1000cc24:	4283      	cmp	r3, r0
1000cc26:	d806      	bhi.n	1000cc36 <at_ble_event_get+0x152>
1000cc28:	4a70      	ldr	r2, [pc, #448]	; (1000cdec <at_ble_event_get+0x308>)
1000cc2a:	4293      	cmp	r3, r2
1000cc2c:	d20b      	bcs.n	1000cc46 <at_ble_event_get+0x162>
1000cc2e:	4a70      	ldr	r2, [pc, #448]	; (1000cdf0 <at_ble_event_get+0x30c>)
1000cc30:	4293      	cmp	r3, r2
1000cc32:	d008      	beq.n	1000cc46 <at_ble_event_get+0x162>
1000cc34:	e009      	b.n	1000cc4a <at_ble_event_get+0x166>
1000cc36:	486f      	ldr	r0, [pc, #444]	; (1000cdf4 <at_ble_event_get+0x310>)
1000cc38:	4283      	cmp	r3, r0
1000cc3a:	d106      	bne.n	1000cc4a <at_ble_event_get+0x166>
1000cc3c:	020b      	lsls	r3, r1, #8
1000cc3e:	4313      	orrs	r3, r2
1000cc40:	80ab      	strh	r3, [r5, #4]
1000cc42:	2337      	movs	r3, #55	; 0x37
1000cc44:	e002      	b.n	1000cc4c <at_ble_event_get+0x168>
1000cc46:	2336      	movs	r3, #54	; 0x36
1000cc48:	e000      	b.n	1000cc4c <at_ble_event_get+0x168>
1000cc4a:	2300      	movs	r3, #0
1000cc4c:	9a03      	ldr	r2, [sp, #12]
1000cc4e:	7013      	strb	r3, [r2, #0]
1000cc50:	e7bd      	b.n	1000cbce <at_ble_event_get+0xea>
1000cc52:	4b69      	ldr	r3, [pc, #420]	; (1000cdf8 <at_ble_event_get+0x314>)
1000cc54:	429c      	cmp	r4, r3
1000cc56:	d100      	bne.n	1000cc5a <at_ble_event_get+0x176>
1000cc58:	e144      	b.n	1000cee4 <at_ble_event_get+0x400>
1000cc5a:	d865      	bhi.n	1000cd28 <at_ble_event_get+0x244>
1000cc5c:	4b67      	ldr	r3, [pc, #412]	; (1000cdfc <at_ble_event_get+0x318>)
1000cc5e:	429c      	cmp	r4, r3
1000cc60:	d100      	bne.n	1000cc64 <at_ble_event_get+0x180>
1000cc62:	e1d5      	b.n	1000d010 <at_ble_event_get+0x52c>
1000cc64:	d82f      	bhi.n	1000ccc6 <at_ble_event_get+0x1e2>
1000cc66:	4b66      	ldr	r3, [pc, #408]	; (1000ce00 <at_ble_event_get+0x31c>)
1000cc68:	429c      	cmp	r4, r3
1000cc6a:	d100      	bne.n	1000cc6e <at_ble_event_get+0x18a>
1000cc6c:	e1e0      	b.n	1000d030 <at_ble_event_get+0x54c>
1000cc6e:	d813      	bhi.n	1000cc98 <at_ble_event_get+0x1b4>
1000cc70:	4b64      	ldr	r3, [pc, #400]	; (1000ce04 <at_ble_event_get+0x320>)
1000cc72:	429c      	cmp	r4, r3
1000cc74:	d100      	bne.n	1000cc78 <at_ble_event_get+0x194>
1000cc76:	e1a3      	b.n	1000cfc0 <at_ble_event_get+0x4dc>
1000cc78:	d804      	bhi.n	1000cc84 <at_ble_event_get+0x1a0>
1000cc7a:	2638      	movs	r6, #56	; 0x38
1000cc7c:	42b4      	cmp	r4, r6
1000cc7e:	d100      	bne.n	1000cc82 <at_ble_event_get+0x19e>
1000cc80:	e225      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cc82:	e117      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000cc84:	4b60      	ldr	r3, [pc, #384]	; (1000ce08 <at_ble_event_get+0x324>)
1000cc86:	429c      	cmp	r4, r3
1000cc88:	d100      	bne.n	1000cc8c <at_ble_event_get+0x1a8>
1000cc8a:	e19f      	b.n	1000cfcc <at_ble_event_get+0x4e8>
1000cc8c:	33fe      	adds	r3, #254	; 0xfe
1000cc8e:	33ff      	adds	r3, #255	; 0xff
1000cc90:	429c      	cmp	r4, r3
1000cc92:	d100      	bne.n	1000cc96 <at_ble_event_get+0x1b2>
1000cc94:	e1d3      	b.n	1000d03e <at_ble_event_get+0x55a>
1000cc96:	e10d      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000cc98:	4b5c      	ldr	r3, [pc, #368]	; (1000ce0c <at_ble_event_get+0x328>)
1000cc9a:	429c      	cmp	r4, r3
1000cc9c:	d100      	bne.n	1000cca0 <at_ble_event_get+0x1bc>
1000cc9e:	e1a9      	b.n	1000cff4 <at_ble_event_get+0x510>
1000cca0:	d808      	bhi.n	1000ccb4 <at_ble_event_get+0x1d0>
1000cca2:	4b5b      	ldr	r3, [pc, #364]	; (1000ce10 <at_ble_event_get+0x32c>)
1000cca4:	429c      	cmp	r4, r3
1000cca6:	d100      	bne.n	1000ccaa <at_ble_event_get+0x1c6>
1000cca8:	e196      	b.n	1000cfd8 <at_ble_event_get+0x4f4>
1000ccaa:	4b5a      	ldr	r3, [pc, #360]	; (1000ce14 <at_ble_event_get+0x330>)
1000ccac:	429c      	cmp	r4, r3
1000ccae:	d100      	bne.n	1000ccb2 <at_ble_event_get+0x1ce>
1000ccb0:	e199      	b.n	1000cfe6 <at_ble_event_get+0x502>
1000ccb2:	e0ff      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000ccb4:	4b58      	ldr	r3, [pc, #352]	; (1000ce18 <at_ble_event_get+0x334>)
1000ccb6:	429c      	cmp	r4, r3
1000ccb8:	d100      	bne.n	1000ccbc <at_ble_event_get+0x1d8>
1000ccba:	e1a2      	b.n	1000d002 <at_ble_event_get+0x51e>
1000ccbc:	4b57      	ldr	r3, [pc, #348]	; (1000ce1c <at_ble_event_get+0x338>)
1000ccbe:	429c      	cmp	r4, r3
1000ccc0:	d100      	bne.n	1000ccc4 <at_ble_event_get+0x1e0>
1000ccc2:	e1d4      	b.n	1000d06e <at_ble_event_get+0x58a>
1000ccc4:	e0f6      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000ccc6:	4b56      	ldr	r3, [pc, #344]	; (1000ce20 <at_ble_event_get+0x33c>)
1000ccc8:	429c      	cmp	r4, r3
1000ccca:	d100      	bne.n	1000ccce <at_ble_event_get+0x1ea>
1000cccc:	e1c8      	b.n	1000d060 <at_ble_event_get+0x57c>
1000ccce:	d812      	bhi.n	1000ccf6 <at_ble_event_get+0x212>
1000ccd0:	4b54      	ldr	r3, [pc, #336]	; (1000ce24 <at_ble_event_get+0x340>)
1000ccd2:	429c      	cmp	r4, r3
1000ccd4:	d100      	bne.n	1000ccd8 <at_ble_event_get+0x1f4>
1000ccd6:	e1d1      	b.n	1000d07c <at_ble_event_get+0x598>
1000ccd8:	d804      	bhi.n	1000cce4 <at_ble_event_get+0x200>
1000ccda:	4b53      	ldr	r3, [pc, #332]	; (1000ce28 <at_ble_event_get+0x344>)
1000ccdc:	429c      	cmp	r4, r3
1000ccde:	d100      	bne.n	1000cce2 <at_ble_event_get+0x1fe>
1000cce0:	e19b      	b.n	1000d01a <at_ble_event_get+0x536>
1000cce2:	e0e7      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000cce4:	4b51      	ldr	r3, [pc, #324]	; (1000ce2c <at_ble_event_get+0x348>)
1000cce6:	429c      	cmp	r4, r3
1000cce8:	d100      	bne.n	1000ccec <at_ble_event_get+0x208>
1000ccea:	e1ad      	b.n	1000d048 <at_ble_event_get+0x564>
1000ccec:	4b50      	ldr	r3, [pc, #320]	; (1000ce30 <at_ble_event_get+0x34c>)
1000ccee:	429c      	cmp	r4, r3
1000ccf0:	d100      	bne.n	1000ccf4 <at_ble_event_get+0x210>
1000ccf2:	e1b0      	b.n	1000d056 <at_ble_event_get+0x572>
1000ccf4:	e0de      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000ccf6:	4b4f      	ldr	r3, [pc, #316]	; (1000ce34 <at_ble_event_get+0x350>)
1000ccf8:	429c      	cmp	r4, r3
1000ccfa:	d100      	bne.n	1000ccfe <at_ble_event_get+0x21a>
1000ccfc:	e0e0      	b.n	1000cec0 <at_ble_event_get+0x3dc>
1000ccfe:	d809      	bhi.n	1000cd14 <at_ble_event_get+0x230>
1000cd00:	3b08      	subs	r3, #8
1000cd02:	429c      	cmp	r4, r3
1000cd04:	d100      	bne.n	1000cd08 <at_ble_event_get+0x224>
1000cd06:	e0d7      	b.n	1000ceb8 <at_ble_event_get+0x3d4>
1000cd08:	4b4b      	ldr	r3, [pc, #300]	; (1000ce38 <at_ble_event_get+0x354>)
1000cd0a:	2639      	movs	r6, #57	; 0x39
1000cd0c:	429c      	cmp	r4, r3
1000cd0e:	d100      	bne.n	1000cd12 <at_ble_event_get+0x22e>
1000cd10:	e1dd      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cd12:	e0cf      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000cd14:	23d1      	movs	r3, #209	; 0xd1
1000cd16:	011b      	lsls	r3, r3, #4
1000cd18:	429c      	cmp	r4, r3
1000cd1a:	d100      	bne.n	1000cd1e <at_ble_event_get+0x23a>
1000cd1c:	e0d6      	b.n	1000cecc <at_ble_event_get+0x3e8>
1000cd1e:	4b47      	ldr	r3, [pc, #284]	; (1000ce3c <at_ble_event_get+0x358>)
1000cd20:	429c      	cmp	r4, r3
1000cd22:	d100      	bne.n	1000cd26 <at_ble_event_get+0x242>
1000cd24:	e0d8      	b.n	1000ced8 <at_ble_event_get+0x3f4>
1000cd26:	e0c5      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000cd28:	4b45      	ldr	r3, [pc, #276]	; (1000ce40 <at_ble_event_get+0x35c>)
1000cd2a:	429c      	cmp	r4, r3
1000cd2c:	d100      	bne.n	1000cd30 <at_ble_event_get+0x24c>
1000cd2e:	e117      	b.n	1000cf60 <at_ble_event_get+0x47c>
1000cd30:	d82e      	bhi.n	1000cd90 <at_ble_event_get+0x2ac>
1000cd32:	4b44      	ldr	r3, [pc, #272]	; (1000ce44 <at_ble_event_get+0x360>)
1000cd34:	429c      	cmp	r4, r3
1000cd36:	d100      	bne.n	1000cd3a <at_ble_event_get+0x256>
1000cd38:	e13d      	b.n	1000cfb6 <at_ble_event_get+0x4d2>
1000cd3a:	d812      	bhi.n	1000cd62 <at_ble_event_get+0x27e>
1000cd3c:	4b42      	ldr	r3, [pc, #264]	; (1000ce48 <at_ble_event_get+0x364>)
1000cd3e:	429c      	cmp	r4, r3
1000cd40:	d100      	bne.n	1000cd44 <at_ble_event_get+0x260>
1000cd42:	e0e8      	b.n	1000cf16 <at_ble_event_get+0x432>
1000cd44:	d804      	bhi.n	1000cd50 <at_ble_event_get+0x26c>
1000cd46:	3b03      	subs	r3, #3
1000cd48:	429c      	cmp	r4, r3
1000cd4a:	d100      	bne.n	1000cd4e <at_ble_event_get+0x26a>
1000cd4c:	e0d0      	b.n	1000cef0 <at_ble_event_get+0x40c>
1000cd4e:	e0b1      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000cd50:	4b3e      	ldr	r3, [pc, #248]	; (1000ce4c <at_ble_event_get+0x368>)
1000cd52:	429c      	cmp	r4, r3
1000cd54:	d100      	bne.n	1000cd58 <at_ble_event_get+0x274>
1000cd56:	e0d0      	b.n	1000cefa <at_ble_event_get+0x416>
1000cd58:	4b3d      	ldr	r3, [pc, #244]	; (1000ce50 <at_ble_event_get+0x36c>)
1000cd5a:	429c      	cmp	r4, r3
1000cd5c:	d100      	bne.n	1000cd60 <at_ble_event_get+0x27c>
1000cd5e:	e0f9      	b.n	1000cf54 <at_ble_event_get+0x470>
1000cd60:	e0a8      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000cd62:	4b3c      	ldr	r3, [pc, #240]	; (1000ce54 <at_ble_event_get+0x370>)
1000cd64:	429c      	cmp	r4, r3
1000cd66:	d100      	bne.n	1000cd6a <at_ble_event_get+0x286>
1000cd68:	e0db      	b.n	1000cf22 <at_ble_event_get+0x43e>
1000cd6a:	d808      	bhi.n	1000cd7e <at_ble_event_get+0x29a>
1000cd6c:	4b3a      	ldr	r3, [pc, #232]	; (1000ce58 <at_ble_event_get+0x374>)
1000cd6e:	429c      	cmp	r4, r3
1000cd70:	d100      	bne.n	1000cd74 <at_ble_event_get+0x290>
1000cd72:	e11b      	b.n	1000cfac <at_ble_event_get+0x4c8>
1000cd74:	4b39      	ldr	r3, [pc, #228]	; (1000ce5c <at_ble_event_get+0x378>)
1000cd76:	429c      	cmp	r4, r3
1000cd78:	d100      	bne.n	1000cd7c <at_ble_event_get+0x298>
1000cd7a:	e0d8      	b.n	1000cf2e <at_ble_event_get+0x44a>
1000cd7c:	e09a      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000cd7e:	4b38      	ldr	r3, [pc, #224]	; (1000ce60 <at_ble_event_get+0x37c>)
1000cd80:	429c      	cmp	r4, r3
1000cd82:	d100      	bne.n	1000cd86 <at_ble_event_get+0x2a2>
1000cd84:	e0d8      	b.n	1000cf38 <at_ble_event_get+0x454>
1000cd86:	4b37      	ldr	r3, [pc, #220]	; (1000ce64 <at_ble_event_get+0x380>)
1000cd88:	429c      	cmp	r4, r3
1000cd8a:	d100      	bne.n	1000cd8e <at_ble_event_get+0x2aa>
1000cd8c:	e0db      	b.n	1000cf46 <at_ble_event_get+0x462>
1000cd8e:	e091      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000cd90:	4b35      	ldr	r3, [pc, #212]	; (1000ce68 <at_ble_event_get+0x384>)
1000cd92:	429c      	cmp	r4, r3
1000cd94:	d100      	bne.n	1000cd98 <at_ble_event_get+0x2b4>
1000cd96:	e0f7      	b.n	1000cf88 <at_ble_event_get+0x4a4>
1000cd98:	d876      	bhi.n	1000ce88 <at_ble_event_get+0x3a4>
1000cd9a:	4b34      	ldr	r3, [pc, #208]	; (1000ce6c <at_ble_event_get+0x388>)
1000cd9c:	429c      	cmp	r4, r3
1000cd9e:	d100      	bne.n	1000cda2 <at_ble_event_get+0x2be>
1000cda0:	e0f8      	b.n	1000cf94 <at_ble_event_get+0x4b0>
1000cda2:	d869      	bhi.n	1000ce78 <at_ble_event_get+0x394>
1000cda4:	4b32      	ldr	r3, [pc, #200]	; (1000ce70 <at_ble_event_get+0x38c>)
1000cda6:	429c      	cmp	r4, r3
1000cda8:	d100      	bne.n	1000cdac <at_ble_event_get+0x2c8>
1000cdaa:	e0e0      	b.n	1000cf6e <at_ble_event_get+0x48a>
1000cdac:	4b31      	ldr	r3, [pc, #196]	; (1000ce74 <at_ble_event_get+0x390>)
1000cdae:	429c      	cmp	r4, r3
1000cdb0:	d100      	bne.n	1000cdb4 <at_ble_event_get+0x2d0>
1000cdb2:	e0a9      	b.n	1000cf08 <at_ble_event_get+0x424>
1000cdb4:	e07e      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000cdb6:	46c0      	nop			; (mov r8, r8)
1000cdb8:	1000e5d1 	.word	0x1000e5d1
1000cdbc:	10015274 	.word	0x10015274
1000cdc0:	1000c295 	.word	0x1000c295
1000cdc4:	10015278 	.word	0x10015278
1000cdc8:	10015270 	.word	0x10015270
1000cdcc:	10015260 	.word	0x10015260
1000cdd0:	1000c9cd 	.word	0x1000c9cd
1000cdd4:	10011119 	.word	0x10011119
1000cdd8:	0000ffff 	.word	0x0000ffff
1000cddc:	0000fffe 	.word	0x0000fffe
1000cde0:	1000c50d 	.word	0x1000c50d
1000cde4:	1000e5d3 	.word	0x1000e5d3
1000cde8:	0000201e 	.word	0x0000201e
1000cdec:	0000201d 	.word	0x0000201d
1000cdf0:	00000c03 	.word	0x00000c03
1000cdf4:	0000201f 	.word	0x0000201f
1000cdf8:	00000d1c 	.word	0x00000d1c
1000cdfc:	00000c0c 	.word	0x00000c0c
1000ce00:	00000c02 	.word	0x00000c02
1000ce04:	00000a02 	.word	0x00000a02
1000ce08:	00000a03 	.word	0x00000a03
1000ce0c:	00000c06 	.word	0x00000c06
1000ce10:	00000c04 	.word	0x00000c04
1000ce14:	00000c05 	.word	0x00000c05
1000ce18:	00000c07 	.word	0x00000c07
1000ce1c:	00000c09 	.word	0x00000c09
1000ce20:	00000c17 	.word	0x00000c17
1000ce24:	00000c12 	.word	0x00000c12
1000ce28:	00000c0d 	.word	0x00000c0d
1000ce2c:	00000c13 	.word	0x00000c13
1000ce30:	00000c15 	.word	0x00000c15
1000ce34:	00000d08 	.word	0x00000d08
1000ce38:	00000d01 	.word	0x00000d01
1000ce3c:	00000d15 	.word	0x00000d15
1000ce40:	00000e1b 	.word	0x00000e1b
1000ce44:	00000e0f 	.word	0x00000e0f
1000ce48:	00000e03 	.word	0x00000e03
1000ce4c:	00000e06 	.word	0x00000e06
1000ce50:	00000e0a 	.word	0x00000e0a
1000ce54:	00000e15 	.word	0x00000e15
1000ce58:	00000e11 	.word	0x00000e11
1000ce5c:	00000e13 	.word	0x00000e13
1000ce60:	00000e17 	.word	0x00000e17
1000ce64:	00000e19 	.word	0x00000e19
1000ce68:	00000e27 	.word	0x00000e27
1000ce6c:	00000e21 	.word	0x00000e21
1000ce70:	00000e1c 	.word	0x00000e1c
1000ce74:	00000e1d 	.word	0x00000e1d
1000ce78:	4b9f      	ldr	r3, [pc, #636]	; (1000d0f8 <at_ble_event_get+0x614>)
1000ce7a:	429c      	cmp	r4, r3
1000ce7c:	d07e      	beq.n	1000cf7c <at_ble_event_get+0x498>
1000ce7e:	4b9f      	ldr	r3, [pc, #636]	; (1000d0fc <at_ble_event_get+0x618>)
1000ce80:	429c      	cmp	r4, r3
1000ce82:	d100      	bne.n	1000ce86 <at_ble_event_get+0x3a2>
1000ce84:	e08c      	b.n	1000cfa0 <at_ble_event_get+0x4bc>
1000ce86:	e015      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000ce88:	4b9d      	ldr	r3, [pc, #628]	; (1000d100 <at_ble_event_get+0x61c>)
1000ce8a:	429c      	cmp	r4, r3
1000ce8c:	d100      	bne.n	1000ce90 <at_ble_event_get+0x3ac>
1000ce8e:	e10a      	b.n	1000d0a6 <at_ble_event_get+0x5c2>
1000ce90:	d808      	bhi.n	1000cea4 <at_ble_event_get+0x3c0>
1000ce92:	4b9c      	ldr	r3, [pc, #624]	; (1000d104 <at_ble_event_get+0x620>)
1000ce94:	429c      	cmp	r4, r3
1000ce96:	d100      	bne.n	1000ce9a <at_ble_event_get+0x3b6>
1000ce98:	e0f7      	b.n	1000d08a <at_ble_event_get+0x5a6>
1000ce9a:	4b9b      	ldr	r3, [pc, #620]	; (1000d108 <at_ble_event_get+0x624>)
1000ce9c:	429c      	cmp	r4, r3
1000ce9e:	d100      	bne.n	1000cea2 <at_ble_event_get+0x3be>
1000cea0:	e0fa      	b.n	1000d098 <at_ble_event_get+0x5b4>
1000cea2:	e007      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000cea4:	4b99      	ldr	r3, [pc, #612]	; (1000d10c <at_ble_event_get+0x628>)
1000cea6:	429c      	cmp	r4, r3
1000cea8:	d100      	bne.n	1000ceac <at_ble_event_get+0x3c8>
1000ceaa:	e103      	b.n	1000d0b4 <at_ble_event_get+0x5d0>
1000ceac:	4b98      	ldr	r3, [pc, #608]	; (1000d110 <at_ble_event_get+0x62c>)
1000ceae:	429c      	cmp	r4, r3
1000ceb0:	d100      	bne.n	1000ceb4 <at_ble_event_get+0x3d0>
1000ceb2:	e106      	b.n	1000d0c2 <at_ble_event_get+0x5de>
1000ceb4:	2600      	movs	r6, #0
1000ceb6:	e10a      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000ceb8:	1c30      	adds	r0, r6, #0
1000ceba:	1c29      	adds	r1, r5, #0
1000cebc:	4b95      	ldr	r3, [pc, #596]	; (1000d114 <at_ble_event_get+0x630>)
1000cebe:	e014      	b.n	1000ceea <at_ble_event_get+0x406>
1000cec0:	1c30      	adds	r0, r6, #0
1000cec2:	1c29      	adds	r1, r5, #0
1000cec4:	4b94      	ldr	r3, [pc, #592]	; (1000d118 <at_ble_event_get+0x634>)
1000cec6:	4798      	blx	r3
1000cec8:	2604      	movs	r6, #4
1000ceca:	e100      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cecc:	1c30      	adds	r0, r6, #0
1000cece:	1c29      	adds	r1, r5, #0
1000ced0:	4b92      	ldr	r3, [pc, #584]	; (1000d11c <at_ble_event_get+0x638>)
1000ced2:	4798      	blx	r3
1000ced4:	2601      	movs	r6, #1
1000ced6:	e0fa      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000ced8:	1c30      	adds	r0, r6, #0
1000ceda:	1c29      	adds	r1, r5, #0
1000cedc:	4b90      	ldr	r3, [pc, #576]	; (1000d120 <at_ble_event_get+0x63c>)
1000cede:	4798      	blx	r3
1000cee0:	260f      	movs	r6, #15
1000cee2:	e0f4      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cee4:	1c30      	adds	r0, r6, #0
1000cee6:	1c29      	adds	r1, r5, #0
1000cee8:	4b8e      	ldr	r3, [pc, #568]	; (1000d124 <at_ble_event_get+0x640>)
1000ceea:	4798      	blx	r3
1000ceec:	1c06      	adds	r6, r0, #0
1000ceee:	e0ee      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cef0:	9801      	ldr	r0, [sp, #4]
1000cef2:	1c31      	adds	r1, r6, #0
1000cef4:	1c2a      	adds	r2, r5, #0
1000cef6:	4b8c      	ldr	r3, [pc, #560]	; (1000d128 <at_ble_event_get+0x644>)
1000cef8:	e017      	b.n	1000cf2a <at_ble_event_get+0x446>
1000cefa:	1c31      	adds	r1, r6, #0
1000cefc:	9801      	ldr	r0, [sp, #4]
1000cefe:	1c2a      	adds	r2, r5, #0
1000cf00:	4b8a      	ldr	r3, [pc, #552]	; (1000d12c <at_ble_event_get+0x648>)
1000cf02:	4798      	blx	r3
1000cf04:	2611      	movs	r6, #17
1000cf06:	e0e2      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cf08:	1c31      	adds	r1, r6, #0
1000cf0a:	9801      	ldr	r0, [sp, #4]
1000cf0c:	1c2a      	adds	r2, r5, #0
1000cf0e:	4b88      	ldr	r3, [pc, #544]	; (1000d130 <at_ble_event_get+0x64c>)
1000cf10:	4798      	blx	r3
1000cf12:	2612      	movs	r6, #18
1000cf14:	e0db      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cf16:	1c30      	adds	r0, r6, #0
1000cf18:	1c29      	adds	r1, r5, #0
1000cf1a:	4b86      	ldr	r3, [pc, #536]	; (1000d134 <at_ble_event_get+0x650>)
1000cf1c:	4798      	blx	r3
1000cf1e:	2606      	movs	r6, #6
1000cf20:	e0d5      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cf22:	1c31      	adds	r1, r6, #0
1000cf24:	1c2a      	adds	r2, r5, #0
1000cf26:	9801      	ldr	r0, [sp, #4]
1000cf28:	4b83      	ldr	r3, [pc, #524]	; (1000d138 <at_ble_event_get+0x654>)
1000cf2a:	4798      	blx	r3
1000cf2c:	e7de      	b.n	1000ceec <at_ble_event_get+0x408>
1000cf2e:	9801      	ldr	r0, [sp, #4]
1000cf30:	1c31      	adds	r1, r6, #0
1000cf32:	1c2a      	adds	r2, r5, #0
1000cf34:	4b81      	ldr	r3, [pc, #516]	; (1000d13c <at_ble_event_get+0x658>)
1000cf36:	e7f8      	b.n	1000cf2a <at_ble_event_get+0x446>
1000cf38:	1c31      	adds	r1, r6, #0
1000cf3a:	9801      	ldr	r0, [sp, #4]
1000cf3c:	1c2a      	adds	r2, r5, #0
1000cf3e:	4b80      	ldr	r3, [pc, #512]	; (1000d140 <at_ble_event_get+0x65c>)
1000cf40:	4798      	blx	r3
1000cf42:	260d      	movs	r6, #13
1000cf44:	e0c3      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cf46:	1c31      	adds	r1, r6, #0
1000cf48:	9801      	ldr	r0, [sp, #4]
1000cf4a:	1c2a      	adds	r2, r5, #0
1000cf4c:	4b7d      	ldr	r3, [pc, #500]	; (1000d144 <at_ble_event_get+0x660>)
1000cf4e:	4798      	blx	r3
1000cf50:	260e      	movs	r6, #14
1000cf52:	e0bc      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cf54:	9801      	ldr	r0, [sp, #4]
1000cf56:	1c31      	adds	r1, r6, #0
1000cf58:	1c2a      	adds	r2, r5, #0
1000cf5a:	4b7b      	ldr	r3, [pc, #492]	; (1000d148 <at_ble_event_get+0x664>)
1000cf5c:	4798      	blx	r3
1000cf5e:	e084      	b.n	1000d06a <at_ble_event_get+0x586>
1000cf60:	1c31      	adds	r1, r6, #0
1000cf62:	9801      	ldr	r0, [sp, #4]
1000cf64:	1c2a      	adds	r2, r5, #0
1000cf66:	4b79      	ldr	r3, [pc, #484]	; (1000d14c <at_ble_event_get+0x668>)
1000cf68:	4798      	blx	r3
1000cf6a:	260b      	movs	r6, #11
1000cf6c:	e0af      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cf6e:	1c31      	adds	r1, r6, #0
1000cf70:	9801      	ldr	r0, [sp, #4]
1000cf72:	1c2a      	adds	r2, r5, #0
1000cf74:	4b76      	ldr	r3, [pc, #472]	; (1000d150 <at_ble_event_get+0x66c>)
1000cf76:	4798      	blx	r3
1000cf78:	2610      	movs	r6, #16
1000cf7a:	e0a8      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cf7c:	1c30      	adds	r0, r6, #0
1000cf7e:	1c29      	adds	r1, r5, #0
1000cf80:	4b74      	ldr	r3, [pc, #464]	; (1000d154 <at_ble_event_get+0x670>)
1000cf82:	4798      	blx	r3
1000cf84:	2628      	movs	r6, #40	; 0x28
1000cf86:	e0a2      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cf88:	1c30      	adds	r0, r6, #0
1000cf8a:	1c29      	adds	r1, r5, #0
1000cf8c:	4b72      	ldr	r3, [pc, #456]	; (1000d158 <at_ble_event_get+0x674>)
1000cf8e:	4798      	blx	r3
1000cf90:	2629      	movs	r6, #41	; 0x29
1000cf92:	e09c      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cf94:	1c30      	adds	r0, r6, #0
1000cf96:	1c29      	adds	r1, r5, #0
1000cf98:	4b70      	ldr	r3, [pc, #448]	; (1000d15c <at_ble_event_get+0x678>)
1000cf9a:	4798      	blx	r3
1000cf9c:	2627      	movs	r6, #39	; 0x27
1000cf9e:	e096      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cfa0:	1c30      	adds	r0, r6, #0
1000cfa2:	1c29      	adds	r1, r5, #0
1000cfa4:	4b6e      	ldr	r3, [pc, #440]	; (1000d160 <at_ble_event_get+0x67c>)
1000cfa6:	4798      	blx	r3
1000cfa8:	262a      	movs	r6, #42	; 0x2a
1000cfaa:	e090      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cfac:	9801      	ldr	r0, [sp, #4]
1000cfae:	1c31      	adds	r1, r6, #0
1000cfb0:	1c2a      	adds	r2, r5, #0
1000cfb2:	4b6c      	ldr	r3, [pc, #432]	; (1000d164 <at_ble_event_get+0x680>)
1000cfb4:	e7b9      	b.n	1000cf2a <at_ble_event_get+0x446>
1000cfb6:	9801      	ldr	r0, [sp, #4]
1000cfb8:	1c31      	adds	r1, r6, #0
1000cfba:	1c2a      	adds	r2, r5, #0
1000cfbc:	4b6a      	ldr	r3, [pc, #424]	; (1000d168 <at_ble_event_get+0x684>)
1000cfbe:	e7b4      	b.n	1000cf2a <at_ble_event_get+0x446>
1000cfc0:	1c30      	adds	r0, r6, #0
1000cfc2:	1c29      	adds	r1, r5, #0
1000cfc4:	4b69      	ldr	r3, [pc, #420]	; (1000d16c <at_ble_event_get+0x688>)
1000cfc6:	4798      	blx	r3
1000cfc8:	262b      	movs	r6, #43	; 0x2b
1000cfca:	e080      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cfcc:	1c30      	adds	r0, r6, #0
1000cfce:	1c29      	adds	r1, r5, #0
1000cfd0:	4b67      	ldr	r3, [pc, #412]	; (1000d170 <at_ble_event_get+0x68c>)
1000cfd2:	4798      	blx	r3
1000cfd4:	262c      	movs	r6, #44	; 0x2c
1000cfd6:	e07a      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cfd8:	1c31      	adds	r1, r6, #0
1000cfda:	9801      	ldr	r0, [sp, #4]
1000cfdc:	1c2a      	adds	r2, r5, #0
1000cfde:	4b65      	ldr	r3, [pc, #404]	; (1000d174 <at_ble_event_get+0x690>)
1000cfe0:	4798      	blx	r3
1000cfe2:	2613      	movs	r6, #19
1000cfe4:	e073      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cfe6:	1c31      	adds	r1, r6, #0
1000cfe8:	9801      	ldr	r0, [sp, #4]
1000cfea:	1c2a      	adds	r2, r5, #0
1000cfec:	4b62      	ldr	r3, [pc, #392]	; (1000d178 <at_ble_event_get+0x694>)
1000cfee:	4798      	blx	r3
1000cff0:	2614      	movs	r6, #20
1000cff2:	e06c      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000cff4:	1c31      	adds	r1, r6, #0
1000cff6:	9801      	ldr	r0, [sp, #4]
1000cff8:	1c2a      	adds	r2, r5, #0
1000cffa:	4b60      	ldr	r3, [pc, #384]	; (1000d17c <at_ble_event_get+0x698>)
1000cffc:	4798      	blx	r3
1000cffe:	2615      	movs	r6, #21
1000d000:	e065      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d002:	1c31      	adds	r1, r6, #0
1000d004:	9801      	ldr	r0, [sp, #4]
1000d006:	1c2a      	adds	r2, r5, #0
1000d008:	4b5d      	ldr	r3, [pc, #372]	; (1000d180 <at_ble_event_get+0x69c>)
1000d00a:	4798      	blx	r3
1000d00c:	2616      	movs	r6, #22
1000d00e:	e05e      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d010:	9801      	ldr	r0, [sp, #4]
1000d012:	1c31      	adds	r1, r6, #0
1000d014:	1c2a      	adds	r2, r5, #0
1000d016:	4b5b      	ldr	r3, [pc, #364]	; (1000d184 <at_ble_event_get+0x6a0>)
1000d018:	e787      	b.n	1000cf2a <at_ble_event_get+0x446>
1000d01a:	1c31      	adds	r1, r6, #0
1000d01c:	9801      	ldr	r0, [sp, #4]
1000d01e:	1c2a      	adds	r2, r5, #0
1000d020:	4b58      	ldr	r3, [pc, #352]	; (1000d184 <at_ble_event_get+0x6a0>)
1000d022:	4798      	blx	r3
1000d024:	88a9      	ldrh	r1, [r5, #4]
1000d026:	1c06      	adds	r6, r0, #0
1000d028:	4b57      	ldr	r3, [pc, #348]	; (1000d188 <at_ble_event_get+0x6a4>)
1000d02a:	8828      	ldrh	r0, [r5, #0]
1000d02c:	4798      	blx	r3
1000d02e:	e04e      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d030:	1c31      	adds	r1, r6, #0
1000d032:	9801      	ldr	r0, [sp, #4]
1000d034:	1c2a      	adds	r2, r5, #0
1000d036:	4b55      	ldr	r3, [pc, #340]	; (1000d18c <at_ble_event_get+0x6a8>)
1000d038:	4798      	blx	r3
1000d03a:	2623      	movs	r6, #35	; 0x23
1000d03c:	e047      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d03e:	9801      	ldr	r0, [sp, #4]
1000d040:	1c31      	adds	r1, r6, #0
1000d042:	1c2a      	adds	r2, r5, #0
1000d044:	4b52      	ldr	r3, [pc, #328]	; (1000d190 <at_ble_event_get+0x6ac>)
1000d046:	e770      	b.n	1000cf2a <at_ble_event_get+0x446>
1000d048:	9b01      	ldr	r3, [sp, #4]
1000d04a:	1c30      	adds	r0, r6, #0
1000d04c:	0a1f      	lsrs	r7, r3, #8
1000d04e:	802f      	strh	r7, [r5, #0]
1000d050:	1c29      	adds	r1, r5, #0
1000d052:	4b50      	ldr	r3, [pc, #320]	; (1000d194 <at_ble_event_get+0x6b0>)
1000d054:	e749      	b.n	1000ceea <at_ble_event_get+0x406>
1000d056:	9801      	ldr	r0, [sp, #4]
1000d058:	1c31      	adds	r1, r6, #0
1000d05a:	1c2a      	adds	r2, r5, #0
1000d05c:	4b4e      	ldr	r3, [pc, #312]	; (1000d198 <at_ble_event_get+0x6b4>)
1000d05e:	e764      	b.n	1000cf2a <at_ble_event_get+0x446>
1000d060:	1c30      	adds	r0, r6, #0
1000d062:	1c29      	adds	r1, r5, #0
1000d064:	9a01      	ldr	r2, [sp, #4]
1000d066:	4b4d      	ldr	r3, [pc, #308]	; (1000d19c <at_ble_event_get+0x6b8>)
1000d068:	4798      	blx	r3
1000d06a:	263b      	movs	r6, #59	; 0x3b
1000d06c:	e02f      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d06e:	1c31      	adds	r1, r6, #0
1000d070:	9801      	ldr	r0, [sp, #4]
1000d072:	1c2a      	adds	r2, r5, #0
1000d074:	4b4a      	ldr	r3, [pc, #296]	; (1000d1a0 <at_ble_event_get+0x6bc>)
1000d076:	4798      	blx	r3
1000d078:	2618      	movs	r6, #24
1000d07a:	e028      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d07c:	1c31      	adds	r1, r6, #0
1000d07e:	9801      	ldr	r0, [sp, #4]
1000d080:	1c2a      	adds	r2, r5, #0
1000d082:	4b48      	ldr	r3, [pc, #288]	; (1000d1a4 <at_ble_event_get+0x6c0>)
1000d084:	4798      	blx	r3
1000d086:	2620      	movs	r6, #32
1000d088:	e021      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d08a:	1c31      	adds	r1, r6, #0
1000d08c:	9801      	ldr	r0, [sp, #4]
1000d08e:	1c2a      	adds	r2, r5, #0
1000d090:	4b45      	ldr	r3, [pc, #276]	; (1000d1a8 <at_ble_event_get+0x6c4>)
1000d092:	4798      	blx	r3
1000d094:	2633      	movs	r6, #51	; 0x33
1000d096:	e01a      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d098:	1c31      	adds	r1, r6, #0
1000d09a:	9801      	ldr	r0, [sp, #4]
1000d09c:	1c2a      	adds	r2, r5, #0
1000d09e:	4b43      	ldr	r3, [pc, #268]	; (1000d1ac <at_ble_event_get+0x6c8>)
1000d0a0:	4798      	blx	r3
1000d0a2:	2630      	movs	r6, #48	; 0x30
1000d0a4:	e013      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d0a6:	1c31      	adds	r1, r6, #0
1000d0a8:	9801      	ldr	r0, [sp, #4]
1000d0aa:	1c2a      	adds	r2, r5, #0
1000d0ac:	4b40      	ldr	r3, [pc, #256]	; (1000d1b0 <at_ble_event_get+0x6cc>)
1000d0ae:	4798      	blx	r3
1000d0b0:	2634      	movs	r6, #52	; 0x34
1000d0b2:	e00c      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d0b4:	1c31      	adds	r1, r6, #0
1000d0b6:	9801      	ldr	r0, [sp, #4]
1000d0b8:	1c2a      	adds	r2, r5, #0
1000d0ba:	4b3e      	ldr	r3, [pc, #248]	; (1000d1b4 <at_ble_event_get+0x6d0>)
1000d0bc:	4798      	blx	r3
1000d0be:	2635      	movs	r6, #53	; 0x35
1000d0c0:	e005      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d0c2:	1c31      	adds	r1, r6, #0
1000d0c4:	9801      	ldr	r0, [sp, #4]
1000d0c6:	1c2a      	adds	r2, r5, #0
1000d0c8:	4b3b      	ldr	r3, [pc, #236]	; (1000d1b8 <at_ble_event_get+0x6d4>)
1000d0ca:	4798      	blx	r3
1000d0cc:	2632      	movs	r6, #50	; 0x32
1000d0ce:	9b03      	ldr	r3, [sp, #12]
1000d0d0:	701e      	strb	r6, [r3, #0]
1000d0d2:	2300      	movs	r3, #0
1000d0d4:	9302      	str	r3, [sp, #8]
1000d0d6:	e57a      	b.n	1000cbce <at_ble_event_get+0xea>
1000d0d8:	23d0      	movs	r3, #208	; 0xd0
1000d0da:	e7fb      	b.n	1000d0d4 <at_ble_event_get+0x5f0>
1000d0dc:	9b01      	ldr	r3, [sp, #4]
1000d0de:	9e02      	ldr	r6, [sp, #8]
1000d0e0:	2bbb      	cmp	r3, #187	; 0xbb
1000d0e2:	d000      	beq.n	1000d0e6 <at_ble_event_get+0x602>
1000d0e4:	e6e6      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000d0e6:	e7f2      	b.n	1000d0ce <at_ble_event_get+0x5ea>
1000d0e8:	9b02      	ldr	r3, [sp, #8]
1000d0ea:	2b00      	cmp	r3, #0
1000d0ec:	d000      	beq.n	1000d0f0 <at_ble_event_get+0x60c>
1000d0ee:	e56e      	b.n	1000cbce <at_ble_event_get+0xea>
1000d0f0:	e6e0      	b.n	1000ceb4 <at_ble_event_get+0x3d0>
1000d0f2:	9802      	ldr	r0, [sp, #8]
1000d0f4:	b007      	add	sp, #28
1000d0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d0f8:	00000e22 	.word	0x00000e22
1000d0fc:	00000e25 	.word	0x00000e25
1000d100:	00001b05 	.word	0x00001b05
1000d104:	00001b01 	.word	0x00001b01
1000d108:	00001b03 	.word	0x00001b03
1000d10c:	00001b06 	.word	0x00001b06
1000d110:	00001b08 	.word	0x00001b08
1000d114:	1000f3fd 	.word	0x1000f3fd
1000d118:	1000f3e1 	.word	0x1000f3e1
1000d11c:	1000f67d 	.word	0x1000f67d
1000d120:	1000f76d 	.word	0x1000f76d
1000d124:	1000f791 	.word	0x1000f791
1000d128:	1000e775 	.word	0x1000e775
1000d12c:	1000eff5 	.word	0x1000eff5
1000d130:	1000f071 	.word	0x1000f071
1000d134:	1000ea2d 	.word	0x1000ea2d
1000d138:	1000eac9 	.word	0x1000eac9
1000d13c:	1000eba1 	.word	0x1000eba1
1000d140:	1000ee29 	.word	0x1000ee29
1000d144:	1000eec9 	.word	0x1000eec9
1000d148:	1000ef81 	.word	0x1000ef81
1000d14c:	1000efa9 	.word	0x1000efa9
1000d150:	1000efbf 	.word	0x1000efbf
1000d154:	1000f089 	.word	0x1000f089
1000d158:	1000f0b7 	.word	0x1000f0b7
1000d15c:	1000f0cd 	.word	0x1000f0cd
1000d160:	1000f0f7 	.word	0x1000f0f7
1000d164:	1000ef25 	.word	0x1000ef25
1000d168:	1000ef4f 	.word	0x1000ef4f
1000d16c:	1000e1b5 	.word	0x1000e1b5
1000d170:	1000e1e1 	.word	0x1000e1e1
1000d174:	1000fac9 	.word	0x1000fac9
1000d178:	1000fb05 	.word	0x1000fb05
1000d17c:	1000fb4d 	.word	0x1000fb4d
1000d180:	1000fb91 	.word	0x1000fb91
1000d184:	1000fbc5 	.word	0x1000fbc5
1000d188:	1000fa89 	.word	0x1000fa89
1000d18c:	1000fc91 	.word	0x1000fc91
1000d190:	1000fc19 	.word	0x1000fc19
1000d194:	1000e099 	.word	0x1000e099
1000d198:	1000e105 	.word	0x1000e105
1000d19c:	1000e0c9 	.word	0x1000e0c9
1000d1a0:	1000fca1 	.word	0x1000fca1
1000d1a4:	1000fce1 	.word	0x1000fce1
1000d1a8:	1000ffa9 	.word	0x1000ffa9
1000d1ac:	1000ffb3 	.word	0x1000ffb3
1000d1b0:	1000ffb9 	.word	0x1000ffb9
1000d1b4:	1000ffbf 	.word	0x1000ffbf
1000d1b8:	1000ffcb 	.word	0x1000ffcb

1000d1bc <internal_event_flush>:
1000d1bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d1be:	490e      	ldr	r1, [pc, #56]	; (1000d1f8 <internal_event_flush+0x3c>)
1000d1c0:	2400      	movs	r4, #0
1000d1c2:	680b      	ldr	r3, [r1, #0]
1000d1c4:	1c0f      	adds	r7, r1, #0
1000d1c6:	1c1e      	adds	r6, r3, #0
1000d1c8:	4a0c      	ldr	r2, [pc, #48]	; (1000d1fc <internal_event_flush+0x40>)
1000d1ca:	6815      	ldr	r5, [r2, #0]
1000d1cc:	9201      	str	r2, [sp, #4]
1000d1ce:	2b00      	cmp	r3, #0
1000d1d0:	d00e      	beq.n	1000d1f0 <internal_event_flush+0x34>
1000d1d2:	889a      	ldrh	r2, [r3, #4]
1000d1d4:	6819      	ldr	r1, [r3, #0]
1000d1d6:	4282      	cmp	r2, r0
1000d1d8:	d107      	bne.n	1000d1ea <internal_event_flush+0x2e>
1000d1da:	2c00      	cmp	r4, #0
1000d1dc:	d001      	beq.n	1000d1e2 <internal_event_flush+0x26>
1000d1de:	6021      	str	r1, [r4, #0]
1000d1e0:	e000      	b.n	1000d1e4 <internal_event_flush+0x28>
1000d1e2:	1c0e      	adds	r6, r1, #0
1000d1e4:	601d      	str	r5, [r3, #0]
1000d1e6:	1c1d      	adds	r5, r3, #0
1000d1e8:	1c23      	adds	r3, r4, #0
1000d1ea:	1c1c      	adds	r4, r3, #0
1000d1ec:	1c0b      	adds	r3, r1, #0
1000d1ee:	e7ee      	b.n	1000d1ce <internal_event_flush+0x12>
1000d1f0:	9b01      	ldr	r3, [sp, #4]
1000d1f2:	603e      	str	r6, [r7, #0]
1000d1f4:	601d      	str	r5, [r3, #0]
1000d1f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d1f8:	10015274 	.word	0x10015274
1000d1fc:	10015278 	.word	0x10015278

1000d200 <internal_conn_flush>:
1000d200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d202:	4a12      	ldr	r2, [pc, #72]	; (1000d24c <internal_conn_flush+0x4c>)
1000d204:	9000      	str	r0, [sp, #0]
1000d206:	6813      	ldr	r3, [r2, #0]
1000d208:	4811      	ldr	r0, [pc, #68]	; (1000d250 <internal_conn_flush+0x50>)
1000d20a:	1c1f      	adds	r7, r3, #0
1000d20c:	2100      	movs	r1, #0
1000d20e:	4684      	mov	ip, r0
1000d210:	6804      	ldr	r4, [r0, #0]
1000d212:	9201      	str	r2, [sp, #4]
1000d214:	2b00      	cmp	r3, #0
1000d216:	d014      	beq.n	1000d242 <internal_conn_flush+0x42>
1000d218:	88d8      	ldrh	r0, [r3, #6]
1000d21a:	9a00      	ldr	r2, [sp, #0]
1000d21c:	681d      	ldr	r5, [r3, #0]
1000d21e:	0a06      	lsrs	r6, r0, #8
1000d220:	4296      	cmp	r6, r2
1000d222:	d10b      	bne.n	1000d23c <internal_conn_flush+0x3c>
1000d224:	26fd      	movs	r6, #253	; 0xfd
1000d226:	4006      	ands	r6, r0
1000d228:	2e0c      	cmp	r6, #12
1000d22a:	d107      	bne.n	1000d23c <internal_conn_flush+0x3c>
1000d22c:	2900      	cmp	r1, #0
1000d22e:	d001      	beq.n	1000d234 <internal_conn_flush+0x34>
1000d230:	600d      	str	r5, [r1, #0]
1000d232:	e000      	b.n	1000d236 <internal_conn_flush+0x36>
1000d234:	1c2f      	adds	r7, r5, #0
1000d236:	601c      	str	r4, [r3, #0]
1000d238:	1c1c      	adds	r4, r3, #0
1000d23a:	1c0b      	adds	r3, r1, #0
1000d23c:	1c19      	adds	r1, r3, #0
1000d23e:	1c2b      	adds	r3, r5, #0
1000d240:	e7e8      	b.n	1000d214 <internal_conn_flush+0x14>
1000d242:	9b01      	ldr	r3, [sp, #4]
1000d244:	601f      	str	r7, [r3, #0]
1000d246:	4663      	mov	r3, ip
1000d248:	601c      	str	r4, [r3, #0]
1000d24a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d24c:	10015274 	.word	0x10015274
1000d250:	10015278 	.word	0x10015278

1000d254 <at_ble_device_name_set>:
1000d254:	b530      	push	{r4, r5, lr}
1000d256:	23cf      	movs	r3, #207	; 0xcf
1000d258:	2800      	cmp	r0, #0
1000d25a:	d010      	beq.n	1000d27e <at_ble_device_name_set+0x2a>
1000d25c:	1e4a      	subs	r2, r1, #1
1000d25e:	2a1f      	cmp	r2, #31
1000d260:	d80d      	bhi.n	1000d27e <at_ble_device_name_set+0x2a>
1000d262:	4a08      	ldr	r2, [pc, #32]	; (1000d284 <at_ble_device_name_set+0x30>)
1000d264:	1c13      	adds	r3, r2, #0
1000d266:	33aa      	adds	r3, #170	; 0xaa
1000d268:	8019      	strh	r1, [r3, #0]
1000d26a:	2300      	movs	r3, #0
1000d26c:	1c1c      	adds	r4, r3, #0
1000d26e:	5cc5      	ldrb	r5, [r0, r3]
1000d270:	34ac      	adds	r4, #172	; 0xac
1000d272:	3301      	adds	r3, #1
1000d274:	5515      	strb	r5, [r2, r4]
1000d276:	b2dc      	uxtb	r4, r3
1000d278:	428c      	cmp	r4, r1
1000d27a:	d3f7      	bcc.n	1000d26c <at_ble_device_name_set+0x18>
1000d27c:	2300      	movs	r3, #0
1000d27e:	1c18      	adds	r0, r3, #0
1000d280:	bd30      	pop	{r4, r5, pc}
1000d282:	46c0      	nop			; (mov r8, r8)
1000d284:	10017cf6 	.word	0x10017cf6

1000d288 <at_ble_addr_get>:
1000d288:	b510      	push	{r4, lr}
1000d28a:	1c04      	adds	r4, r0, #0
1000d28c:	20cf      	movs	r0, #207	; 0xcf
1000d28e:	2c00      	cmp	r4, #0
1000d290:	d006      	beq.n	1000d2a0 <at_ble_addr_get+0x18>
1000d292:	4b04      	ldr	r3, [pc, #16]	; (1000d2a4 <at_ble_addr_get+0x1c>)
1000d294:	38ce      	subs	r0, #206	; 0xce
1000d296:	1c21      	adds	r1, r4, #0
1000d298:	4798      	blx	r3
1000d29a:	4b03      	ldr	r3, [pc, #12]	; (1000d2a8 <at_ble_addr_get+0x20>)
1000d29c:	791b      	ldrb	r3, [r3, #4]
1000d29e:	7023      	strb	r3, [r4, #0]
1000d2a0:	bd10      	pop	{r4, pc}
1000d2a2:	46c0      	nop			; (mov r8, r8)
1000d2a4:	1000f291 	.word	0x1000f291
1000d2a8:	10017cf6 	.word	0x10017cf6

1000d2ac <at_ble_set_dev_config>:
1000d2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d2ae:	7906      	ldrb	r6, [r0, #4]
1000d2b0:	b089      	sub	sp, #36	; 0x24
1000d2b2:	25cf      	movs	r5, #207	; 0xcf
1000d2b4:	2e03      	cmp	r6, #3
1000d2b6:	d838      	bhi.n	1000d32a <at_ble_set_dev_config+0x7e>
1000d2b8:	7803      	ldrb	r3, [r0, #0]
1000d2ba:	3511      	adds	r5, #17
1000d2bc:	2b0f      	cmp	r3, #15
1000d2be:	d834      	bhi.n	1000d32a <at_ble_set_dev_config+0x7e>
1000d2c0:	2380      	movs	r3, #128	; 0x80
1000d2c2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000d2c4:	3d11      	subs	r5, #17
1000d2c6:	009b      	lsls	r3, r3, #2
1000d2c8:	429f      	cmp	r7, r3
1000d2ca:	d82e      	bhi.n	1000d32a <at_ble_set_dev_config+0x7e>
1000d2cc:	7fc5      	ldrb	r5, [r0, #31]
1000d2ce:	7f83      	ldrb	r3, [r0, #30]
1000d2d0:	01ad      	lsls	r5, r5, #6
1000d2d2:	015b      	lsls	r3, r3, #5
1000d2d4:	431d      	orrs	r5, r3
1000d2d6:	7ec3      	ldrb	r3, [r0, #27]
1000d2d8:	431d      	orrs	r5, r3
1000d2da:	7f43      	ldrb	r3, [r0, #29]
1000d2dc:	011b      	lsls	r3, r3, #4
1000d2de:	431d      	orrs	r5, r3
1000d2e0:	7f03      	ldrb	r3, [r0, #28]
1000d2e2:	009b      	lsls	r3, r3, #2
1000d2e4:	431d      	orrs	r5, r3
1000d2e6:	4b12      	ldr	r3, [pc, #72]	; (1000d330 <at_ble_set_dev_config+0x84>)
1000d2e8:	b2ed      	uxtb	r5, r5
1000d2ea:	711e      	strb	r6, [r3, #4]
1000d2ec:	7903      	ldrb	r3, [r0, #4]
1000d2ee:	3b02      	subs	r3, #2
1000d2f0:	2b01      	cmp	r3, #1
1000d2f2:	d801      	bhi.n	1000d2f8 <at_ble_set_dev_config+0x4c>
1000d2f4:	2302      	movs	r3, #2
1000d2f6:	7103      	strb	r3, [r0, #4]
1000d2f8:	1c04      	adds	r4, r0, #0
1000d2fa:	1c23      	adds	r3, r4, #0
1000d2fc:	330b      	adds	r3, #11
1000d2fe:	8861      	ldrh	r1, [r4, #2]
1000d300:	9307      	str	r3, [sp, #28]
1000d302:	7923      	ldrb	r3, [r4, #4]
1000d304:	7800      	ldrb	r0, [r0, #0]
1000d306:	9300      	str	r3, [sp, #0]
1000d308:	9501      	str	r5, [sp, #4]
1000d30a:	8c25      	ldrh	r5, [r4, #32]
1000d30c:	1d62      	adds	r2, r4, #5
1000d30e:	9502      	str	r5, [sp, #8]
1000d310:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000d312:	9b07      	ldr	r3, [sp, #28]
1000d314:	9503      	str	r5, [sp, #12]
1000d316:	9704      	str	r7, [sp, #16]
1000d318:	4d06      	ldr	r5, [pc, #24]	; (1000d334 <at_ble_set_dev_config+0x88>)
1000d31a:	47a8      	blx	r5
1000d31c:	7126      	strb	r6, [r4, #4]
1000d31e:	1c05      	adds	r5, r0, #0
1000d320:	1c21      	adds	r1, r4, #0
1000d322:	4803      	ldr	r0, [pc, #12]	; (1000d330 <at_ble_set_dev_config+0x84>)
1000d324:	2226      	movs	r2, #38	; 0x26
1000d326:	4b04      	ldr	r3, [pc, #16]	; (1000d338 <at_ble_set_dev_config+0x8c>)
1000d328:	4798      	blx	r3
1000d32a:	1c28      	adds	r0, r5, #0
1000d32c:	b009      	add	sp, #36	; 0x24
1000d32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d330:	10017cf6 	.word	0x10017cf6
1000d334:	1000f189 	.word	0x1000f189
1000d338:	10011107 	.word	0x10011107

1000d33c <at_ble_init>:
1000d33c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d33e:	b087      	sub	sp, #28
1000d340:	af03      	add	r7, sp, #12
1000d342:	4954      	ldr	r1, [pc, #336]	; (1000d494 <at_ble_init+0x158>)
1000d344:	220b      	movs	r2, #11
1000d346:	4b54      	ldr	r3, [pc, #336]	; (1000d498 <at_ble_init+0x15c>)
1000d348:	1c04      	adds	r4, r0, #0
1000d34a:	1c38      	adds	r0, r7, #0
1000d34c:	4798      	blx	r3
1000d34e:	2205      	movs	r2, #5
1000d350:	4b52      	ldr	r3, [pc, #328]	; (1000d49c <at_ble_init+0x160>)
1000d352:	2640      	movs	r6, #64	; 0x40
1000d354:	801a      	strh	r2, [r3, #0]
1000d356:	2300      	movs	r3, #0
1000d358:	4a51      	ldr	r2, [pc, #324]	; (1000d4a0 <at_ble_init+0x164>)
1000d35a:	6013      	str	r3, [r2, #0]
1000d35c:	4a51      	ldr	r2, [pc, #324]	; (1000d4a4 <at_ble_init+0x168>)
1000d35e:	7013      	strb	r3, [r2, #0]
1000d360:	4a51      	ldr	r2, [pc, #324]	; (1000d4a8 <at_ble_init+0x16c>)
1000d362:	7013      	strb	r3, [r2, #0]
1000d364:	4b51      	ldr	r3, [pc, #324]	; (1000d4ac <at_ble_init+0x170>)
1000d366:	4798      	blx	r3
1000d368:	4b51      	ldr	r3, [pc, #324]	; (1000d4b0 <at_ble_init+0x174>)
1000d36a:	4798      	blx	r3
1000d36c:	4b51      	ldr	r3, [pc, #324]	; (1000d4b4 <at_ble_init+0x178>)
1000d36e:	4798      	blx	r3
1000d370:	4b51      	ldr	r3, [pc, #324]	; (1000d4b8 <at_ble_init+0x17c>)
1000d372:	4798      	blx	r3
1000d374:	2c00      	cmp	r4, #0
1000d376:	d100      	bne.n	1000d37a <at_ble_init+0x3e>
1000d378:	e089      	b.n	1000d48e <at_ble_init+0x152>
1000d37a:	68a3      	ldr	r3, [r4, #8]
1000d37c:	2b00      	cmp	r3, #0
1000d37e:	d100      	bne.n	1000d382 <at_ble_init+0x46>
1000d380:	e085      	b.n	1000d48e <at_ble_init+0x152>
1000d382:	6923      	ldr	r3, [r4, #16]
1000d384:	2b00      	cmp	r3, #0
1000d386:	d100      	bne.n	1000d38a <at_ble_init+0x4e>
1000d388:	e081      	b.n	1000d48e <at_ble_init+0x152>
1000d38a:	6820      	ldr	r0, [r4, #0]
1000d38c:	2800      	cmp	r0, #0
1000d38e:	d102      	bne.n	1000d396 <at_ble_init+0x5a>
1000d390:	6863      	ldr	r3, [r4, #4]
1000d392:	2b00      	cmp	r3, #0
1000d394:	d17b      	bne.n	1000d48e <at_ble_init+0x152>
1000d396:	4b49      	ldr	r3, [pc, #292]	; (1000d4bc <at_ble_init+0x180>)
1000d398:	6861      	ldr	r1, [r4, #4]
1000d39a:	4798      	blx	r3
1000d39c:	4b48      	ldr	r3, [pc, #288]	; (1000d4c0 <at_ble_init+0x184>)
1000d39e:	4798      	blx	r3
1000d3a0:	2801      	cmp	r0, #1
1000d3a2:	d901      	bls.n	1000d3a8 <at_ble_init+0x6c>
1000d3a4:	26e2      	movs	r6, #226	; 0xe2
1000d3a6:	e072      	b.n	1000d48e <at_ble_init+0x152>
1000d3a8:	4846      	ldr	r0, [pc, #280]	; (1000d4c4 <at_ble_init+0x188>)
1000d3aa:	4b47      	ldr	r3, [pc, #284]	; (1000d4c8 <at_ble_init+0x18c>)
1000d3ac:	4798      	blx	r3
1000d3ae:	2800      	cmp	r0, #0
1000d3b0:	d1f8      	bne.n	1000d3a4 <at_ble_init+0x68>
1000d3b2:	1c20      	adds	r0, r4, #0
1000d3b4:	4b45      	ldr	r3, [pc, #276]	; (1000d4cc <at_ble_init+0x190>)
1000d3b6:	4798      	blx	r3
1000d3b8:	68e0      	ldr	r0, [r4, #12]
1000d3ba:	68a1      	ldr	r1, [r4, #8]
1000d3bc:	4b44      	ldr	r3, [pc, #272]	; (1000d4d0 <at_ble_init+0x194>)
1000d3be:	4798      	blx	r3
1000d3c0:	466b      	mov	r3, sp
1000d3c2:	2201      	movs	r2, #1
1000d3c4:	1cdc      	adds	r4, r3, #3
1000d3c6:	1c20      	adds	r0, r4, #0
1000d3c8:	a901      	add	r1, sp, #4
1000d3ca:	4252      	negs	r2, r2
1000d3cc:	4b41      	ldr	r3, [pc, #260]	; (1000d4d4 <at_ble_init+0x198>)
1000d3ce:	4798      	blx	r3
1000d3d0:	2800      	cmp	r0, #0
1000d3d2:	d102      	bne.n	1000d3da <at_ble_init+0x9e>
1000d3d4:	7823      	ldrb	r3, [r4, #0]
1000d3d6:	2b39      	cmp	r3, #57	; 0x39
1000d3d8:	d1f2      	bne.n	1000d3c0 <at_ble_init+0x84>
1000d3da:	4b3f      	ldr	r3, [pc, #252]	; (1000d4d8 <at_ble_init+0x19c>)
1000d3dc:	4798      	blx	r3
1000d3de:	1e06      	subs	r6, r0, #0
1000d3e0:	d155      	bne.n	1000d48e <at_ble_init+0x152>
1000d3e2:	1c03      	adds	r3, r0, #0
1000d3e4:	2101      	movs	r1, #1
1000d3e6:	4a3d      	ldr	r2, [pc, #244]	; (1000d4dc <at_ble_init+0x1a0>)
1000d3e8:	4249      	negs	r1, r1
1000d3ea:	189a      	adds	r2, r3, r2
1000d3ec:	3312      	adds	r3, #18
1000d3ee:	8151      	strh	r1, [r2, #10]
1000d3f0:	2b90      	cmp	r3, #144	; 0x90
1000d3f2:	d1f7      	bne.n	1000d3e4 <at_ble_init+0xa8>
1000d3f4:	4c3a      	ldr	r4, [pc, #232]	; (1000d4e0 <at_ble_init+0x1a4>)
1000d3f6:	3b81      	subs	r3, #129	; 0x81
1000d3f8:	7023      	strb	r3, [r4, #0]
1000d3fa:	4b3a      	ldr	r3, [pc, #232]	; (1000d4e4 <at_ble_init+0x1a8>)
1000d3fc:	4a3a      	ldr	r2, [pc, #232]	; (1000d4e8 <at_ble_init+0x1ac>)
1000d3fe:	8063      	strh	r3, [r4, #2]
1000d400:	2300      	movs	r3, #0
1000d402:	7123      	strb	r3, [r4, #4]
1000d404:	3301      	adds	r3, #1
1000d406:	1e58      	subs	r0, r3, #1
1000d408:	0119      	lsls	r1, r3, #4
1000d40a:	4301      	orrs	r1, r0
1000d40c:	3302      	adds	r3, #2
1000d40e:	7011      	strb	r1, [r2, #0]
1000d410:	3201      	adds	r2, #1
1000d412:	2b21      	cmp	r3, #33	; 0x21
1000d414:	d1f7      	bne.n	1000d406 <at_ble_init+0xca>
1000d416:	33e0      	adds	r3, #224	; 0xe0
1000d418:	33ff      	adds	r3, #255	; 0xff
1000d41a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000d41c:	1c23      	adds	r3, r4, #0
1000d41e:	2500      	movs	r5, #0
1000d420:	3373      	adds	r3, #115	; 0x73
1000d422:	701d      	strb	r5, [r3, #0]
1000d424:	1c23      	adds	r3, r4, #0
1000d426:	3372      	adds	r3, #114	; 0x72
1000d428:	701d      	strb	r5, [r3, #0]
1000d42a:	1c23      	adds	r3, r4, #0
1000d42c:	3376      	adds	r3, #118	; 0x76
1000d42e:	701d      	strb	r5, [r3, #0]
1000d430:	1c23      	adds	r3, r4, #0
1000d432:	33cc      	adds	r3, #204	; 0xcc
1000d434:	801d      	strh	r5, [r3, #0]
1000d436:	1c22      	adds	r2, r4, #0
1000d438:	23a0      	movs	r3, #160	; 0xa0
1000d43a:	32d0      	adds	r2, #208	; 0xd0
1000d43c:	005b      	lsls	r3, r3, #1
1000d43e:	8013      	strh	r3, [r2, #0]
1000d440:	1c22      	adds	r2, r4, #0
1000d442:	32ce      	adds	r2, #206	; 0xce
1000d444:	8013      	strh	r3, [r2, #0]
1000d446:	1c23      	adds	r3, r4, #0
1000d448:	33d2      	adds	r3, #210	; 0xd2
1000d44a:	801d      	strh	r5, [r3, #0]
1000d44c:	22fa      	movs	r2, #250	; 0xfa
1000d44e:	1c23      	adds	r3, r4, #0
1000d450:	0052      	lsls	r2, r2, #1
1000d452:	33d4      	adds	r3, #212	; 0xd4
1000d454:	801a      	strh	r2, [r3, #0]
1000d456:	1c23      	adds	r3, r4, #0
1000d458:	33d6      	adds	r3, #214	; 0xd6
1000d45a:	701d      	strb	r5, [r3, #0]
1000d45c:	1c20      	adds	r0, r4, #0
1000d45e:	4b23      	ldr	r3, [pc, #140]	; (1000d4ec <at_ble_init+0x1b0>)
1000d460:	76e5      	strb	r5, [r4, #27]
1000d462:	7725      	strb	r5, [r4, #28]
1000d464:	7765      	strb	r5, [r4, #29]
1000d466:	77a5      	strb	r5, [r4, #30]
1000d468:	77e5      	strb	r5, [r4, #31]
1000d46a:	8425      	strh	r5, [r4, #32]
1000d46c:	8465      	strh	r5, [r4, #34]	; 0x22
1000d46e:	4798      	blx	r3
1000d470:	1c23      	adds	r3, r4, #0
1000d472:	2207      	movs	r2, #7
1000d474:	3374      	adds	r3, #116	; 0x74
1000d476:	701a      	strb	r2, [r3, #0]
1000d478:	1c23      	adds	r3, r4, #0
1000d47a:	3204      	adds	r2, #4
1000d47c:	33aa      	adds	r3, #170	; 0xaa
1000d47e:	801a      	strh	r2, [r3, #0]
1000d480:	1c2b      	adds	r3, r5, #0
1000d482:	5d7a      	ldrb	r2, [r7, r5]
1000d484:	33ac      	adds	r3, #172	; 0xac
1000d486:	3501      	adds	r5, #1
1000d488:	54e2      	strb	r2, [r4, r3]
1000d48a:	2d0b      	cmp	r5, #11
1000d48c:	d1f8      	bne.n	1000d480 <at_ble_init+0x144>
1000d48e:	1c30      	adds	r0, r6, #0
1000d490:	b007      	add	sp, #28
1000d492:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d494:	100136d4 	.word	0x100136d4
1000d498:	10011107 	.word	0x10011107
1000d49c:	10017c64 	.word	0x10017c64
1000d4a0:	10015324 	.word	0x10015324
1000d4a4:	10015284 	.word	0x10015284
1000d4a8:	100137fd 	.word	0x100137fd
1000d4ac:	1000fcf1 	.word	0x1000fcf1
1000d4b0:	1000d7a1 	.word	0x1000d7a1
1000d4b4:	1000def5 	.word	0x1000def5
1000d4b8:	1000e1a9 	.word	0x1000e1a9
1000d4bc:	1000df31 	.word	0x1000df31
1000d4c0:	1000bfa5 	.word	0x1000bfa5
1000d4c4:	1000e4a9 	.word	0x1000e4a9
1000d4c8:	1000c1e9 	.word	0x1000c1e9
1000d4cc:	1000e551 	.word	0x1000e551
1000d4d0:	1000ca29 	.word	0x1000ca29
1000d4d4:	1000cae5 	.word	0x1000cae5
1000d4d8:	1000f119 	.word	0x1000f119
1000d4dc:	10017c66 	.word	0x10017c66
1000d4e0:	10017cf6 	.word	0x10017cf6
1000d4e4:	00003a98 	.word	0x00003a98
1000d4e8:	10017d01 	.word	0x10017d01
1000d4ec:	1000d2ad 	.word	0x1000d2ad

1000d4f0 <at_ble_addr_set>:
1000d4f0:	b538      	push	{r3, r4, r5, lr}
1000d4f2:	1c45      	adds	r5, r0, #1
1000d4f4:	1c03      	adds	r3, r0, #0
1000d4f6:	20cf      	movs	r0, #207	; 0xcf
1000d4f8:	2d00      	cmp	r5, #0
1000d4fa:	d018      	beq.n	1000d52e <at_ble_addr_set+0x3e>
1000d4fc:	781a      	ldrb	r2, [r3, #0]
1000d4fe:	2a03      	cmp	r2, #3
1000d500:	d815      	bhi.n	1000d52e <at_ble_addr_set+0x3e>
1000d502:	2a01      	cmp	r2, #1
1000d504:	d102      	bne.n	1000d50c <at_ble_addr_set+0x1c>
1000d506:	785a      	ldrb	r2, [r3, #1]
1000d508:	2a00      	cmp	r2, #0
1000d50a:	d010      	beq.n	1000d52e <at_ble_addr_set+0x3e>
1000d50c:	1c1c      	adds	r4, r3, #0
1000d50e:	1c29      	adds	r1, r5, #0
1000d510:	2206      	movs	r2, #6
1000d512:	4b07      	ldr	r3, [pc, #28]	; (1000d530 <at_ble_addr_set+0x40>)
1000d514:	4807      	ldr	r0, [pc, #28]	; (1000d534 <at_ble_addr_set+0x44>)
1000d516:	4798      	blx	r3
1000d518:	7823      	ldrb	r3, [r4, #0]
1000d51a:	4807      	ldr	r0, [pc, #28]	; (1000d538 <at_ble_addr_set+0x48>)
1000d51c:	7103      	strb	r3, [r0, #4]
1000d51e:	4b07      	ldr	r3, [pc, #28]	; (1000d53c <at_ble_addr_set+0x4c>)
1000d520:	4798      	blx	r3
1000d522:	7823      	ldrb	r3, [r4, #0]
1000d524:	2b00      	cmp	r3, #0
1000d526:	d102      	bne.n	1000d52e <at_ble_addr_set+0x3e>
1000d528:	1c28      	adds	r0, r5, #0
1000d52a:	4b05      	ldr	r3, [pc, #20]	; (1000d540 <at_ble_addr_set+0x50>)
1000d52c:	4798      	blx	r3
1000d52e:	bd38      	pop	{r3, r4, r5, pc}
1000d530:	10011107 	.word	0x10011107
1000d534:	10017cfb 	.word	0x10017cfb
1000d538:	10017cf6 	.word	0x10017cf6
1000d53c:	1000d2ad 	.word	0x1000d2ad
1000d540:	1000e5d5 	.word	0x1000e5d5

1000d544 <at_ble_adv_data_set>:
1000d544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d546:	4684      	mov	ip, r0
1000d548:	1c0f      	adds	r7, r1, #0
1000d54a:	1c16      	adds	r6, r2, #0
1000d54c:	1c1c      	adds	r4, r3, #0
1000d54e:	2800      	cmp	r0, #0
1000d550:	d102      	bne.n	1000d558 <at_ble_adv_data_set+0x14>
1000d552:	20e2      	movs	r0, #226	; 0xe2
1000d554:	2a00      	cmp	r2, #0
1000d556:	d02b      	beq.n	1000d5b0 <at_ble_adv_data_set+0x6c>
1000d558:	20cf      	movs	r0, #207	; 0xcf
1000d55a:	2f1f      	cmp	r7, #31
1000d55c:	d828      	bhi.n	1000d5b0 <at_ble_adv_data_set+0x6c>
1000d55e:	2c1f      	cmp	r4, #31
1000d560:	d826      	bhi.n	1000d5b0 <at_ble_adv_data_set+0x6c>
1000d562:	4663      	mov	r3, ip
1000d564:	2b00      	cmp	r3, #0
1000d566:	d00e      	beq.n	1000d586 <at_ble_adv_data_set+0x42>
1000d568:	4812      	ldr	r0, [pc, #72]	; (1000d5b4 <at_ble_adv_data_set+0x70>)
1000d56a:	4d13      	ldr	r5, [pc, #76]	; (1000d5b8 <at_ble_adv_data_set+0x74>)
1000d56c:	2f00      	cmp	r7, #0
1000d56e:	d104      	bne.n	1000d57a <at_ble_adv_data_set+0x36>
1000d570:	1c39      	adds	r1, r7, #0
1000d572:	221f      	movs	r2, #31
1000d574:	4b11      	ldr	r3, [pc, #68]	; (1000d5bc <at_ble_adv_data_set+0x78>)
1000d576:	4798      	blx	r3
1000d578:	e003      	b.n	1000d582 <at_ble_adv_data_set+0x3e>
1000d57a:	4661      	mov	r1, ip
1000d57c:	1c3a      	adds	r2, r7, #0
1000d57e:	4b10      	ldr	r3, [pc, #64]	; (1000d5c0 <at_ble_adv_data_set+0x7c>)
1000d580:	4798      	blx	r3
1000d582:	3572      	adds	r5, #114	; 0x72
1000d584:	702f      	strb	r7, [r5, #0]
1000d586:	1e30      	subs	r0, r6, #0
1000d588:	d012      	beq.n	1000d5b0 <at_ble_adv_data_set+0x6c>
1000d58a:	4d0b      	ldr	r5, [pc, #44]	; (1000d5b8 <at_ble_adv_data_set+0x74>)
1000d58c:	480d      	ldr	r0, [pc, #52]	; (1000d5c4 <at_ble_adv_data_set+0x80>)
1000d58e:	2c00      	cmp	r4, #0
1000d590:	d107      	bne.n	1000d5a2 <at_ble_adv_data_set+0x5e>
1000d592:	1c21      	adds	r1, r4, #0
1000d594:	221f      	movs	r2, #31
1000d596:	4b09      	ldr	r3, [pc, #36]	; (1000d5bc <at_ble_adv_data_set+0x78>)
1000d598:	3573      	adds	r5, #115	; 0x73
1000d59a:	4798      	blx	r3
1000d59c:	702c      	strb	r4, [r5, #0]
1000d59e:	1c20      	adds	r0, r4, #0
1000d5a0:	e006      	b.n	1000d5b0 <at_ble_adv_data_set+0x6c>
1000d5a2:	1c31      	adds	r1, r6, #0
1000d5a4:	1c22      	adds	r2, r4, #0
1000d5a6:	4b06      	ldr	r3, [pc, #24]	; (1000d5c0 <at_ble_adv_data_set+0x7c>)
1000d5a8:	4798      	blx	r3
1000d5aa:	2000      	movs	r0, #0
1000d5ac:	3573      	adds	r5, #115	; 0x73
1000d5ae:	702c      	strb	r4, [r5, #0]
1000d5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d5b2:	46c0      	nop			; (mov r8, r8)
1000d5b4:	10017d2a 	.word	0x10017d2a
1000d5b8:	10017cf6 	.word	0x10017cf6
1000d5bc:	10011119 	.word	0x10011119
1000d5c0:	10011107 	.word	0x10011107
1000d5c4:	10017d49 	.word	0x10017d49

1000d5c8 <at_ble_adv_start>:
1000d5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d5ca:	b091      	sub	sp, #68	; 0x44
1000d5cc:	1c1f      	adds	r7, r3, #0
1000d5ce:	ab16      	add	r3, sp, #88	; 0x58
1000d5d0:	881d      	ldrh	r5, [r3, #0]
1000d5d2:	ab17      	add	r3, sp, #92	; 0x5c
1000d5d4:	881b      	ldrh	r3, [r3, #0]
1000d5d6:	910d      	str	r1, [sp, #52]	; 0x34
1000d5d8:	930e      	str	r3, [sp, #56]	; 0x38
1000d5da:	ab18      	add	r3, sp, #96	; 0x60
1000d5dc:	781b      	ldrb	r3, [r3, #0]
1000d5de:	1c04      	adds	r4, r0, #0
1000d5e0:	930f      	str	r3, [sp, #60]	; 0x3c
1000d5e2:	4b42      	ldr	r3, [pc, #264]	; (1000d6ec <at_ble_adv_start+0x124>)
1000d5e4:	1c16      	adds	r6, r2, #0
1000d5e6:	3373      	adds	r3, #115	; 0x73
1000d5e8:	781b      	ldrb	r3, [r3, #0]
1000d5ea:	20cf      	movs	r0, #207	; 0xcf
1000d5ec:	930c      	str	r3, [sp, #48]	; 0x30
1000d5ee:	2c01      	cmp	r4, #1
1000d5f0:	d103      	bne.n	1000d5fa <at_ble_adv_start+0x32>
1000d5f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000d5f4:	2b00      	cmp	r3, #0
1000d5f6:	d176      	bne.n	1000d6e6 <at_ble_adv_start+0x11e>
1000d5f8:	e024      	b.n	1000d644 <at_ble_adv_start+0x7c>
1000d5fa:	2c04      	cmp	r4, #4
1000d5fc:	d873      	bhi.n	1000d6e6 <at_ble_adv_start+0x11e>
1000d5fe:	2380      	movs	r3, #128	; 0x80
1000d600:	01db      	lsls	r3, r3, #7
1000d602:	429d      	cmp	r5, r3
1000d604:	d86f      	bhi.n	1000d6e6 <at_ble_adv_start+0x11e>
1000d606:	2c00      	cmp	r4, #0
1000d608:	d102      	bne.n	1000d610 <at_ble_adv_start+0x48>
1000d60a:	2d1f      	cmp	r5, #31
1000d60c:	d96b      	bls.n	1000d6e6 <at_ble_adv_start+0x11e>
1000d60e:	e003      	b.n	1000d618 <at_ble_adv_start+0x50>
1000d610:	2d9f      	cmp	r5, #159	; 0x9f
1000d612:	d801      	bhi.n	1000d618 <at_ble_adv_start+0x50>
1000d614:	2c01      	cmp	r4, #1
1000d616:	d166      	bne.n	1000d6e6 <at_ble_adv_start+0x11e>
1000d618:	2f00      	cmp	r7, #0
1000d61a:	d009      	beq.n	1000d630 <at_ble_adv_start+0x68>
1000d61c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000d61e:	20cf      	movs	r0, #207	; 0xcf
1000d620:	3b01      	subs	r3, #1
1000d622:	2b01      	cmp	r3, #1
1000d624:	d95f      	bls.n	1000d6e6 <at_ble_adv_start+0x11e>
1000d626:	2c01      	cmp	r4, #1
1000d628:	d102      	bne.n	1000d630 <at_ble_adv_start+0x68>
1000d62a:	2d00      	cmp	r5, #0
1000d62c:	d100      	bne.n	1000d630 <at_ble_adv_start+0x68>
1000d62e:	3520      	adds	r5, #32
1000d630:	4b2f      	ldr	r3, [pc, #188]	; (1000d6f0 <at_ble_adv_start+0x128>)
1000d632:	4798      	blx	r3
1000d634:	1c01      	adds	r1, r0, #0
1000d636:	2e00      	cmp	r6, #0
1000d638:	d043      	beq.n	1000d6c2 <at_ble_adv_start+0xfa>
1000d63a:	7833      	ldrb	r3, [r6, #0]
1000d63c:	1e60      	subs	r0, r4, #1
1000d63e:	2b00      	cmp	r3, #0
1000d640:	d109      	bne.n	1000d656 <at_ble_adv_start+0x8e>
1000d642:	e03b      	b.n	1000d6bc <at_ble_adv_start+0xf4>
1000d644:	2380      	movs	r3, #128	; 0x80
1000d646:	01db      	lsls	r3, r3, #7
1000d648:	429d      	cmp	r5, r3
1000d64a:	d84c      	bhi.n	1000d6e6 <at_ble_adv_start+0x11e>
1000d64c:	2e00      	cmp	r6, #0
1000d64e:	d04a      	beq.n	1000d6e6 <at_ble_adv_start+0x11e>
1000d650:	2f00      	cmp	r7, #0
1000d652:	d1e3      	bne.n	1000d61c <at_ble_adv_start+0x54>
1000d654:	e02b      	b.n	1000d6ae <at_ble_adv_start+0xe6>
1000d656:	2301      	movs	r3, #1
1000d658:	2803      	cmp	r0, #3
1000d65a:	d93a      	bls.n	1000d6d2 <at_ble_adv_start+0x10a>
1000d65c:	200d      	movs	r0, #13
1000d65e:	1c72      	adds	r2, r6, #1
1000d660:	e002      	b.n	1000d668 <at_ble_adv_start+0xa0>
1000d662:	200e      	movs	r0, #14
1000d664:	1e32      	subs	r2, r6, #0
1000d666:	d1fa      	bne.n	1000d65e <at_ble_adv_start+0x96>
1000d668:	4c20      	ldr	r4, [pc, #128]	; (1000d6ec <at_ble_adv_start+0x124>)
1000d66a:	3474      	adds	r4, #116	; 0x74
1000d66c:	7826      	ldrb	r6, [r4, #0]
1000d66e:	2407      	movs	r4, #7
1000d670:	2e00      	cmp	r6, #0
1000d672:	d000      	beq.n	1000d676 <at_ble_adv_start+0xae>
1000d674:	1c34      	adds	r4, r6, #0
1000d676:	9200      	str	r2, [sp, #0]
1000d678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000d67a:	9403      	str	r4, [sp, #12]
1000d67c:	9204      	str	r2, [sp, #16]
1000d67e:	4a1b      	ldr	r2, [pc, #108]	; (1000d6ec <at_ble_adv_start+0x124>)
1000d680:	9501      	str	r5, [sp, #4]
1000d682:	9502      	str	r5, [sp, #8]
1000d684:	9705      	str	r7, [sp, #20]
1000d686:	3272      	adds	r2, #114	; 0x72
1000d688:	7812      	ldrb	r2, [r2, #0]
1000d68a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000d68c:	9206      	str	r2, [sp, #24]
1000d68e:	4a19      	ldr	r2, [pc, #100]	; (1000d6f4 <at_ble_adv_start+0x12c>)
1000d690:	9207      	str	r2, [sp, #28]
1000d692:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000d694:	9208      	str	r2, [sp, #32]
1000d696:	4a18      	ldr	r2, [pc, #96]	; (1000d6f8 <at_ble_adv_start+0x130>)
1000d698:	9209      	str	r2, [sp, #36]	; 0x24
1000d69a:	2264      	movs	r2, #100	; 0x64
1000d69c:	4362      	muls	r2, r4
1000d69e:	b292      	uxth	r2, r2
1000d6a0:	920a      	str	r2, [sp, #40]	; 0x28
1000d6a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000d6a4:	4c15      	ldr	r4, [pc, #84]	; (1000d6fc <at_ble_adv_start+0x134>)
1000d6a6:	920b      	str	r2, [sp, #44]	; 0x2c
1000d6a8:	4a15      	ldr	r2, [pc, #84]	; (1000d700 <at_ble_adv_start+0x138>)
1000d6aa:	47a0      	blx	r4
1000d6ac:	e01b      	b.n	1000d6e6 <at_ble_adv_start+0x11e>
1000d6ae:	2d00      	cmp	r5, #0
1000d6b0:	d1be      	bne.n	1000d630 <at_ble_adv_start+0x68>
1000d6b2:	4b0f      	ldr	r3, [pc, #60]	; (1000d6f0 <at_ble_adv_start+0x128>)
1000d6b4:	4798      	blx	r3
1000d6b6:	2520      	movs	r5, #32
1000d6b8:	1c01      	adds	r1, r0, #0
1000d6ba:	e7be      	b.n	1000d63a <at_ble_adv_start+0x72>
1000d6bc:	2803      	cmp	r0, #3
1000d6be:	d8cd      	bhi.n	1000d65c <at_ble_adv_start+0x94>
1000d6c0:	e006      	b.n	1000d6d0 <at_ble_adv_start+0x108>
1000d6c2:	1e60      	subs	r0, r4, #1
1000d6c4:	2803      	cmp	r0, #3
1000d6c6:	d903      	bls.n	1000d6d0 <at_ble_adv_start+0x108>
1000d6c8:	1c33      	adds	r3, r6, #0
1000d6ca:	200d      	movs	r0, #13
1000d6cc:	1c32      	adds	r2, r6, #0
1000d6ce:	e7cb      	b.n	1000d668 <at_ble_adv_start+0xa0>
1000d6d0:	2300      	movs	r3, #0
1000d6d2:	f002 fc7f 	bl	1000ffd4 <__gnu_thumb1_case_sqi>
1000d6d6:	06c6      	.short	0x06c6
1000d6d8:	0204      	.short	0x0204
1000d6da:	200f      	movs	r0, #15
1000d6dc:	e7c2      	b.n	1000d664 <at_ble_adv_start+0x9c>
1000d6de:	2200      	movs	r2, #0
1000d6e0:	920c      	str	r2, [sp, #48]	; 0x30
1000d6e2:	200c      	movs	r0, #12
1000d6e4:	e7be      	b.n	1000d664 <at_ble_adv_start+0x9c>
1000d6e6:	b011      	add	sp, #68	; 0x44
1000d6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6ea:	46c0      	nop			; (mov r8, r8)
1000d6ec:	10017cf6 	.word	0x10017cf6
1000d6f0:	1000f665 	.word	0x1000f665
1000d6f4:	10017d2a 	.word	0x10017d2a
1000d6f8:	10017d49 	.word	0x10017d49
1000d6fc:	1000f545 	.word	0x1000f545
1000d700:	00003a98 	.word	0x00003a98

1000d704 <at_ble_scan_stop>:
1000d704:	b510      	push	{r4, lr}
1000d706:	4b05      	ldr	r3, [pc, #20]	; (1000d71c <at_ble_scan_stop+0x18>)
1000d708:	4798      	blx	r3
1000d70a:	1e04      	subs	r4, r0, #0
1000d70c:	d103      	bne.n	1000d716 <at_ble_scan_stop+0x12>
1000d70e:	20d1      	movs	r0, #209	; 0xd1
1000d710:	4b03      	ldr	r3, [pc, #12]	; (1000d720 <at_ble_scan_stop+0x1c>)
1000d712:	0100      	lsls	r0, r0, #4
1000d714:	4798      	blx	r3
1000d716:	1c20      	adds	r0, r4, #0
1000d718:	bd10      	pop	{r4, pc}
1000d71a:	46c0      	nop			; (mov r8, r8)
1000d71c:	1000f371 	.word	0x1000f371
1000d720:	1000d1bd 	.word	0x1000d1bd

1000d724 <at_ble_disconnect>:
1000d724:	b538      	push	{r3, r4, r5, lr}
1000d726:	1c04      	adds	r4, r0, #0
1000d728:	4b04      	ldr	r3, [pc, #16]	; (1000d73c <at_ble_disconnect+0x18>)
1000d72a:	1c08      	adds	r0, r1, #0
1000d72c:	1c21      	adds	r1, r4, #0
1000d72e:	4798      	blx	r3
1000d730:	1c05      	adds	r5, r0, #0
1000d732:	4b03      	ldr	r3, [pc, #12]	; (1000d740 <at_ble_disconnect+0x1c>)
1000d734:	1c20      	adds	r0, r4, #0
1000d736:	4798      	blx	r3
1000d738:	1c28      	adds	r0, r5, #0
1000d73a:	bd38      	pop	{r3, r4, r5, pc}
1000d73c:	1000e9e9 	.word	0x1000e9e9
1000d740:	1000d201 	.word	0x1000d201

1000d744 <at_ble_conn_update_reply>:
1000d744:	b510      	push	{r4, lr}
1000d746:	4c01      	ldr	r4, [pc, #4]	; (1000d74c <at_ble_conn_update_reply+0x8>)
1000d748:	47a0      	blx	r4
1000d74a:	bd10      	pop	{r4, pc}
1000d74c:	1000eed9 	.word	0x1000eed9

1000d750 <at_ble_random_address_resolve>:
1000d750:	b510      	push	{r4, lr}
1000d752:	23cf      	movs	r3, #207	; 0xcf
1000d754:	2800      	cmp	r0, #0
1000d756:	d00a      	beq.n	1000d76e <at_ble_random_address_resolve+0x1e>
1000d758:	2900      	cmp	r1, #0
1000d75a:	d008      	beq.n	1000d76e <at_ble_random_address_resolve+0x1e>
1000d75c:	2a00      	cmp	r2, #0
1000d75e:	d006      	beq.n	1000d76e <at_ble_random_address_resolve+0x1e>
1000d760:	780c      	ldrb	r4, [r1, #0]
1000d762:	2c02      	cmp	r4, #2
1000d764:	d103      	bne.n	1000d76e <at_ble_random_address_resolve+0x1e>
1000d766:	4b03      	ldr	r3, [pc, #12]	; (1000d774 <at_ble_random_address_resolve+0x24>)
1000d768:	3101      	adds	r1, #1
1000d76a:	4798      	blx	r3
1000d76c:	2300      	movs	r3, #0
1000d76e:	1c18      	adds	r0, r3, #0
1000d770:	bd10      	pop	{r4, pc}
1000d772:	46c0      	nop			; (mov r8, r8)
1000d774:	1000f705 	.word	0x1000f705

1000d778 <at_ble_uuid_type2len>:
1000d778:	23cf      	movs	r3, #207	; 0xcf
1000d77a:	2802      	cmp	r0, #2
1000d77c:	d801      	bhi.n	1000d782 <at_ble_uuid_type2len+0xa>
1000d77e:	4b02      	ldr	r3, [pc, #8]	; (1000d788 <at_ble_uuid_type2len+0x10>)
1000d780:	5c1b      	ldrb	r3, [r3, r0]
1000d782:	1c18      	adds	r0, r3, #0
1000d784:	4770      	bx	lr
1000d786:	46c0      	nop			; (mov r8, r8)
1000d788:	100136df 	.word	0x100136df

1000d78c <at_ble_uuid_len2type>:
1000d78c:	1e83      	subs	r3, r0, #2
1000d78e:	b2db      	uxtb	r3, r3
1000d790:	2003      	movs	r0, #3
1000d792:	2b0e      	cmp	r3, #14
1000d794:	d801      	bhi.n	1000d79a <at_ble_uuid_len2type+0xe>
1000d796:	4a01      	ldr	r2, [pc, #4]	; (1000d79c <at_ble_uuid_len2type+0x10>)
1000d798:	5cd0      	ldrb	r0, [r2, r3]
1000d79a:	4770      	bx	lr
1000d79c:	100136e2 	.word	0x100136e2

1000d7a0 <init_gatt_client_module>:
1000d7a0:	2200      	movs	r2, #0
1000d7a2:	4b01      	ldr	r3, [pc, #4]	; (1000d7a8 <init_gatt_client_module+0x8>)
1000d7a4:	801a      	strh	r2, [r3, #0]
1000d7a6:	4770      	bx	lr
1000d7a8:	1001527c 	.word	0x1001527c

1000d7ac <at_ble_primary_service_discover_by_uuid>:
1000d7ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d7ae:	2b00      	cmp	r3, #0
1000d7b0:	d101      	bne.n	1000d7b6 <at_ble_primary_service_discover_by_uuid+0xa>
1000d7b2:	20cf      	movs	r0, #207	; 0xcf
1000d7b4:	e021      	b.n	1000d7fa <at_ble_primary_service_discover_by_uuid+0x4e>
1000d7b6:	2900      	cmp	r1, #0
1000d7b8:	d0fb      	beq.n	1000d7b2 <at_ble_primary_service_discover_by_uuid+0x6>
1000d7ba:	428a      	cmp	r2, r1
1000d7bc:	d3f9      	bcc.n	1000d7b2 <at_ble_primary_service_discover_by_uuid+0x6>
1000d7be:	1c1c      	adds	r4, r3, #0
1000d7c0:	1c07      	adds	r7, r0, #0
1000d7c2:	7818      	ldrb	r0, [r3, #0]
1000d7c4:	4b0d      	ldr	r3, [pc, #52]	; (1000d7fc <at_ble_primary_service_discover_by_uuid+0x50>)
1000d7c6:	1c16      	adds	r6, r2, #0
1000d7c8:	1c0d      	adds	r5, r1, #0
1000d7ca:	4798      	blx	r3
1000d7cc:	1c22      	adds	r2, r4, #0
1000d7ce:	1e01      	subs	r1, r0, #0
1000d7d0:	29cf      	cmp	r1, #207	; 0xcf
1000d7d2:	d0ee      	beq.n	1000d7b2 <at_ble_primary_service_discover_by_uuid+0x6>
1000d7d4:	1b13      	subs	r3, r2, r4
1000d7d6:	b2db      	uxtb	r3, r3
1000d7d8:	428b      	cmp	r3, r1
1000d7da:	d203      	bcs.n	1000d7e4 <at_ble_primary_service_discover_by_uuid+0x38>
1000d7dc:	3201      	adds	r2, #1
1000d7de:	7810      	ldrb	r0, [r2, #0]
1000d7e0:	2800      	cmp	r0, #0
1000d7e2:	d0f7      	beq.n	1000d7d4 <at_ble_primary_service_discover_by_uuid+0x28>
1000d7e4:	428b      	cmp	r3, r1
1000d7e6:	d0e4      	beq.n	1000d7b2 <at_ble_primary_service_discover_by_uuid+0x6>
1000d7e8:	3401      	adds	r4, #1
1000d7ea:	9400      	str	r4, [sp, #0]
1000d7ec:	2003      	movs	r0, #3
1000d7ee:	9701      	str	r7, [sp, #4]
1000d7f0:	1c2a      	adds	r2, r5, #0
1000d7f2:	1c33      	adds	r3, r6, #0
1000d7f4:	4c02      	ldr	r4, [pc, #8]	; (1000d800 <at_ble_primary_service_discover_by_uuid+0x54>)
1000d7f6:	47a0      	blx	r4
1000d7f8:	2000      	movs	r0, #0
1000d7fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d7fc:	1000d779 	.word	0x1000d779
1000d800:	1000f971 	.word	0x1000f971

1000d804 <at_ble_characteristic_discover_all>:
1000d804:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d806:	24cf      	movs	r4, #207	; 0xcf
1000d808:	2900      	cmp	r1, #0
1000d80a:	d00a      	beq.n	1000d822 <at_ble_characteristic_discover_all+0x1e>
1000d80c:	428a      	cmp	r2, r1
1000d80e:	d308      	bcc.n	1000d822 <at_ble_characteristic_discover_all+0x1e>
1000d810:	2400      	movs	r4, #0
1000d812:	1c13      	adds	r3, r2, #0
1000d814:	9001      	str	r0, [sp, #4]
1000d816:	1c0a      	adds	r2, r1, #0
1000d818:	9400      	str	r4, [sp, #0]
1000d81a:	2005      	movs	r0, #5
1000d81c:	1c21      	adds	r1, r4, #0
1000d81e:	4d02      	ldr	r5, [pc, #8]	; (1000d828 <at_ble_characteristic_discover_all+0x24>)
1000d820:	47a8      	blx	r5
1000d822:	1c20      	adds	r0, r4, #0
1000d824:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d826:	46c0      	nop			; (mov r8, r8)
1000d828:	1000f971 	.word	0x1000f971

1000d82c <at_ble_descriptor_discover_all>:
1000d82c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d82e:	24cf      	movs	r4, #207	; 0xcf
1000d830:	2900      	cmp	r1, #0
1000d832:	d00a      	beq.n	1000d84a <at_ble_descriptor_discover_all+0x1e>
1000d834:	428a      	cmp	r2, r1
1000d836:	d308      	bcc.n	1000d84a <at_ble_descriptor_discover_all+0x1e>
1000d838:	2400      	movs	r4, #0
1000d83a:	1c13      	adds	r3, r2, #0
1000d83c:	9001      	str	r0, [sp, #4]
1000d83e:	1c0a      	adds	r2, r1, #0
1000d840:	9400      	str	r4, [sp, #0]
1000d842:	2007      	movs	r0, #7
1000d844:	1c21      	adds	r1, r4, #0
1000d846:	4d02      	ldr	r5, [pc, #8]	; (1000d850 <at_ble_descriptor_discover_all+0x24>)
1000d848:	47a8      	blx	r5
1000d84a:	1c20      	adds	r0, r4, #0
1000d84c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d84e:	46c0      	nop			; (mov r8, r8)
1000d850:	1000f971 	.word	0x1000f971

1000d854 <at_ble_characteristic_write>:
1000d854:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d856:	b085      	sub	sp, #20
1000d858:	1c14      	adds	r4, r2, #0
1000d85a:	aa0a      	add	r2, sp, #40	; 0x28
1000d85c:	1c0d      	adds	r5, r1, #0
1000d85e:	ca02      	ldmia	r2!, {r1}
1000d860:	1c06      	adds	r6, r0, #0
1000d862:	a80c      	add	r0, sp, #48	; 0x30
1000d864:	7807      	ldrb	r7, [r0, #0]
1000d866:	7812      	ldrb	r2, [r2, #0]
1000d868:	20cf      	movs	r0, #207	; 0xcf
1000d86a:	2900      	cmp	r1, #0
1000d86c:	d014      	beq.n	1000d898 <at_ble_characteristic_write+0x44>
1000d86e:	2b00      	cmp	r3, #0
1000d870:	d012      	beq.n	1000d898 <at_ble_characteristic_write+0x44>
1000d872:	2f00      	cmp	r7, #0
1000d874:	d003      	beq.n	1000d87e <at_ble_characteristic_write+0x2a>
1000d876:	2a00      	cmp	r2, #0
1000d878:	d10e      	bne.n	1000d898 <at_ble_characteristic_write+0x44>
1000d87a:	38c3      	subs	r0, #195	; 0xc3
1000d87c:	e003      	b.n	1000d886 <at_ble_characteristic_write+0x32>
1000d87e:	1e50      	subs	r0, r2, #1
1000d880:	4182      	sbcs	r2, r0
1000d882:	320d      	adds	r2, #13
1000d884:	1c10      	adds	r0, r2, #0
1000d886:	9300      	str	r3, [sp, #0]
1000d888:	9101      	str	r1, [sp, #4]
1000d88a:	1c23      	adds	r3, r4, #0
1000d88c:	9602      	str	r6, [sp, #8]
1000d88e:	2101      	movs	r1, #1
1000d890:	1c2a      	adds	r2, r5, #0
1000d892:	4c02      	ldr	r4, [pc, #8]	; (1000d89c <at_ble_characteristic_write+0x48>)
1000d894:	47a0      	blx	r4
1000d896:	2000      	movs	r0, #0
1000d898:	b005      	add	sp, #20
1000d89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d89c:	1000fa01 	.word	0x1000fa01

1000d8a0 <db_searchATT>:
1000d8a0:	b570      	push	{r4, r5, r6, lr}
1000d8a2:	1c05      	adds	r5, r0, #0
1000d8a4:	2400      	movs	r4, #0
1000d8a6:	4b0c      	ldr	r3, [pc, #48]	; (1000d8d8 <db_searchATT+0x38>)
1000d8a8:	6819      	ldr	r1, [r3, #0]
1000d8aa:	4b0c      	ldr	r3, [pc, #48]	; (1000d8dc <db_searchATT+0x3c>)
1000d8ac:	681e      	ldr	r6, [r3, #0]
1000d8ae:	428c      	cmp	r4, r1
1000d8b0:	dc10      	bgt.n	1000d8d4 <db_searchATT+0x34>
1000d8b2:	200c      	movs	r0, #12
1000d8b4:	1863      	adds	r3, r4, r1
1000d8b6:	0fda      	lsrs	r2, r3, #31
1000d8b8:	18d3      	adds	r3, r2, r3
1000d8ba:	1c02      	adds	r2, r0, #0
1000d8bc:	105b      	asrs	r3, r3, #1
1000d8be:	435a      	muls	r2, r3
1000d8c0:	18b0      	adds	r0, r6, r2
1000d8c2:	8802      	ldrh	r2, [r0, #0]
1000d8c4:	42aa      	cmp	r2, r5
1000d8c6:	d201      	bcs.n	1000d8cc <db_searchATT+0x2c>
1000d8c8:	1e59      	subs	r1, r3, #1
1000d8ca:	e7f0      	b.n	1000d8ae <db_searchATT+0xe>
1000d8cc:	42aa      	cmp	r2, r5
1000d8ce:	d902      	bls.n	1000d8d6 <db_searchATT+0x36>
1000d8d0:	1c5c      	adds	r4, r3, #1
1000d8d2:	e7ec      	b.n	1000d8ae <db_searchATT+0xe>
1000d8d4:	2000      	movs	r0, #0
1000d8d6:	bd70      	pop	{r4, r5, r6, pc}
1000d8d8:	10015290 	.word	0x10015290
1000d8dc:	10015288 	.word	0x10015288

1000d8e0 <att_permissions>:
1000d8e0:	b530      	push	{r4, r5, lr}
1000d8e2:	2403      	movs	r4, #3
1000d8e4:	1c05      	adds	r5, r0, #0
1000d8e6:	2301      	movs	r3, #1
1000d8e8:	4025      	ands	r5, r4
1000d8ea:	42a5      	cmp	r5, r4
1000d8ec:	d009      	beq.n	1000d902 <att_permissions+0x22>
1000d8ee:	1c23      	adds	r3, r4, #0
1000d8f0:	1924      	adds	r4, r4, r4
1000d8f2:	4220      	tst	r0, r4
1000d8f4:	d105      	bne.n	1000d902 <att_permissions+0x22>
1000d8f6:	3b02      	subs	r3, #2
1000d8f8:	4218      	tst	r0, r3
1000d8fa:	d102      	bne.n	1000d902 <att_permissions+0x22>
1000d8fc:	1e4b      	subs	r3, r1, #1
1000d8fe:	4199      	sbcs	r1, r3
1000d900:	b28b      	uxth	r3, r1
1000d902:	2130      	movs	r1, #48	; 0x30
1000d904:	4001      	ands	r1, r0
1000d906:	2930      	cmp	r1, #48	; 0x30
1000d908:	d007      	beq.n	1000d91a <att_permissions+0x3a>
1000d90a:	0641      	lsls	r1, r0, #25
1000d90c:	d401      	bmi.n	1000d912 <att_permissions+0x32>
1000d90e:	0681      	lsls	r1, r0, #26
1000d910:	d501      	bpl.n	1000d916 <att_permissions+0x36>
1000d912:	4807      	ldr	r0, [pc, #28]	; (1000d930 <att_permissions+0x50>)
1000d914:	e009      	b.n	1000d92a <att_permissions+0x4a>
1000d916:	06c1      	lsls	r1, r0, #27
1000d918:	d501      	bpl.n	1000d91e <att_permissions+0x3e>
1000d91a:	4806      	ldr	r0, [pc, #24]	; (1000d934 <att_permissions+0x54>)
1000d91c:	e005      	b.n	1000d92a <att_permissions+0x4a>
1000d91e:	2a00      	cmp	r2, #0
1000d920:	d001      	beq.n	1000d926 <att_permissions+0x46>
1000d922:	2204      	movs	r2, #4
1000d924:	4313      	orrs	r3, r2
1000d926:	2080      	movs	r0, #128	; 0x80
1000d928:	0180      	lsls	r0, r0, #6
1000d92a:	4318      	orrs	r0, r3
1000d92c:	bd30      	pop	{r4, r5, pc}
1000d92e:	46c0      	nop			; (mov r8, r8)
1000d930:	0000200c 	.word	0x0000200c
1000d934:	00002004 	.word	0x00002004

1000d938 <char_permissions>:
1000d938:	b530      	push	{r4, r5, lr}
1000d93a:	2300      	movs	r3, #0
1000d93c:	0784      	lsls	r4, r0, #30
1000d93e:	d503      	bpl.n	1000d948 <char_permissions+0x10>
1000d940:	3301      	adds	r3, #1
1000d942:	4219      	tst	r1, r3
1000d944:	d100      	bne.n	1000d948 <char_permissions+0x10>
1000d946:	3302      	adds	r3, #2
1000d948:	0704      	lsls	r4, r0, #28
1000d94a:	d508      	bpl.n	1000d95e <char_permissions+0x26>
1000d94c:	06cc      	lsls	r4, r1, #27
1000d94e:	d501      	bpl.n	1000d954 <char_permissions+0x1c>
1000d950:	2404      	movs	r4, #4
1000d952:	e000      	b.n	1000d956 <char_permissions+0x1e>
1000d954:	240c      	movs	r4, #12
1000d956:	4323      	orrs	r3, r4
1000d958:	2480      	movs	r4, #128	; 0x80
1000d95a:	01a4      	lsls	r4, r4, #6
1000d95c:	4323      	orrs	r3, r4
1000d95e:	0684      	lsls	r4, r0, #26
1000d960:	d506      	bpl.n	1000d970 <char_permissions+0x38>
1000d962:	2406      	movs	r4, #6
1000d964:	4221      	tst	r1, r4
1000d966:	d101      	bne.n	1000d96c <char_permissions+0x34>
1000d968:	340a      	adds	r4, #10
1000d96a:	e000      	b.n	1000d96e <char_permissions+0x36>
1000d96c:	2430      	movs	r4, #48	; 0x30
1000d96e:	4323      	orrs	r3, r4
1000d970:	06c4      	lsls	r4, r0, #27
1000d972:	d506      	bpl.n	1000d982 <char_permissions+0x4a>
1000d974:	2406      	movs	r4, #6
1000d976:	4221      	tst	r1, r4
1000d978:	d101      	bne.n	1000d97e <char_permissions+0x46>
1000d97a:	343a      	adds	r4, #58	; 0x3a
1000d97c:	e000      	b.n	1000d980 <char_permissions+0x48>
1000d97e:	24c0      	movs	r4, #192	; 0xc0
1000d980:	4323      	orrs	r3, r4
1000d982:	2480      	movs	r4, #128	; 0x80
1000d984:	0064      	lsls	r4, r4, #1
1000d986:	4220      	tst	r0, r4
1000d988:	d000      	beq.n	1000d98c <char_permissions+0x54>
1000d98a:	4323      	orrs	r3, r4
1000d98c:	07c4      	lsls	r4, r0, #31
1000d98e:	d502      	bpl.n	1000d996 <char_permissions+0x5e>
1000d990:	2480      	movs	r4, #128	; 0x80
1000d992:	00a4      	lsls	r4, r4, #2
1000d994:	4323      	orrs	r3, r4
1000d996:	2404      	movs	r4, #4
1000d998:	4220      	tst	r0, r4
1000d99a:	d006      	beq.n	1000d9aa <char_permissions+0x72>
1000d99c:	06cd      	lsls	r5, r1, #27
1000d99e:	d400      	bmi.n	1000d9a2 <char_permissions+0x6a>
1000d9a0:	240c      	movs	r4, #12
1000d9a2:	4323      	orrs	r3, r4
1000d9a4:	2480      	movs	r4, #128	; 0x80
1000d9a6:	0124      	lsls	r4, r4, #4
1000d9a8:	4323      	orrs	r3, r4
1000d9aa:	0644      	lsls	r4, r0, #25
1000d9ac:	d501      	bpl.n	1000d9b2 <char_permissions+0x7a>
1000d9ae:	4c08      	ldr	r4, [pc, #32]	; (1000d9d0 <char_permissions+0x98>)
1000d9b0:	4323      	orrs	r3, r4
1000d9b2:	0600      	lsls	r0, r0, #24
1000d9b4:	d507      	bpl.n	1000d9c6 <char_permissions+0x8e>
1000d9b6:	2004      	movs	r0, #4
1000d9b8:	06c9      	lsls	r1, r1, #27
1000d9ba:	d400      	bmi.n	1000d9be <char_permissions+0x86>
1000d9bc:	200c      	movs	r0, #12
1000d9be:	4303      	orrs	r3, r0
1000d9c0:	2084      	movs	r0, #132	; 0x84
1000d9c2:	0180      	lsls	r0, r0, #6
1000d9c4:	4303      	orrs	r3, r0
1000d9c6:	0390      	lsls	r0, r2, #14
1000d9c8:	4303      	orrs	r3, r0
1000d9ca:	b298      	uxth	r0, r3
1000d9cc:	bd30      	pop	{r4, r5, pc}
1000d9ce:	46c0      	nop			; (mov r8, r8)
1000d9d0:	00001004 	.word	0x00001004

1000d9d4 <presentation_format_define>:
1000d9d4:	b507      	push	{r0, r1, r2, lr}
1000d9d6:	466a      	mov	r2, sp
1000d9d8:	780b      	ldrb	r3, [r1, #0]
1000d9da:	7013      	strb	r3, [r2, #0]
1000d9dc:	784b      	ldrb	r3, [r1, #1]
1000d9de:	7053      	strb	r3, [r2, #1]
1000d9e0:	884b      	ldrh	r3, [r1, #2]
1000d9e2:	7093      	strb	r3, [r2, #2]
1000d9e4:	0a1b      	lsrs	r3, r3, #8
1000d9e6:	70d3      	strb	r3, [r2, #3]
1000d9e8:	790b      	ldrb	r3, [r1, #4]
1000d9ea:	7113      	strb	r3, [r2, #4]
1000d9ec:	88cb      	ldrh	r3, [r1, #6]
1000d9ee:	2107      	movs	r1, #7
1000d9f0:	7153      	strb	r3, [r2, #5]
1000d9f2:	0a1b      	lsrs	r3, r3, #8
1000d9f4:	7193      	strb	r3, [r2, #6]
1000d9f6:	4b01      	ldr	r3, [pc, #4]	; (1000d9fc <presentation_format_define+0x28>)
1000d9f8:	4798      	blx	r3
1000d9fa:	bd0e      	pop	{r1, r2, r3, pc}
1000d9fc:	1000fe81 	.word	0x1000fe81

1000da00 <db_addATT>:
1000da00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000da02:	4c29      	ldr	r4, [pc, #164]	; (1000daa8 <db_addATT+0xa8>)
1000da04:	1c1d      	adds	r5, r3, #0
1000da06:	6823      	ldr	r3, [r4, #0]
1000da08:	9001      	str	r0, [sp, #4]
1000da0a:	26d3      	movs	r6, #211	; 0xd3
1000da0c:	2b00      	cmp	r3, #0
1000da0e:	d048      	beq.n	1000daa2 <db_addATT+0xa2>
1000da10:	1c1e      	adds	r6, r3, #0
1000da12:	3e0c      	subs	r6, #12
1000da14:	6026      	str	r6, [r4, #0]
1000da16:	2900      	cmp	r1, #0
1000da18:	d005      	beq.n	1000da26 <db_addATT+0x26>
1000da1a:	4f24      	ldr	r7, [pc, #144]	; (1000daac <db_addATT+0xac>)
1000da1c:	46bc      	mov	ip, r7
1000da1e:	4660      	mov	r0, ip
1000da20:	683f      	ldr	r7, [r7, #0]
1000da22:	18bf      	adds	r7, r7, r2
1000da24:	6007      	str	r7, [r0, #0]
1000da26:	4821      	ldr	r0, [pc, #132]	; (1000daac <db_addATT+0xac>)
1000da28:	6807      	ldr	r7, [r0, #0]
1000da2a:	4684      	mov	ip, r0
1000da2c:	42be      	cmp	r6, r7
1000da2e:	d932      	bls.n	1000da96 <db_addATT+0x96>
1000da30:	4668      	mov	r0, sp
1000da32:	8880      	ldrh	r0, [r0, #4]
1000da34:	3b0c      	subs	r3, #12
1000da36:	8018      	strh	r0, [r3, #0]
1000da38:	6823      	ldr	r3, [r4, #0]
1000da3a:	2900      	cmp	r1, #0
1000da3c:	d009      	beq.n	1000da52 <db_addATT+0x52>
1000da3e:	2a00      	cmp	r2, #0
1000da40:	d007      	beq.n	1000da52 <db_addATT+0x52>
1000da42:	4660      	mov	r0, ip
1000da44:	6800      	ldr	r0, [r0, #0]
1000da46:	809a      	strh	r2, [r3, #4]
1000da48:	1a80      	subs	r0, r0, r2
1000da4a:	6098      	str	r0, [r3, #8]
1000da4c:	4b18      	ldr	r3, [pc, #96]	; (1000dab0 <db_addATT+0xb0>)
1000da4e:	4798      	blx	r3
1000da50:	e002      	b.n	1000da58 <db_addATT+0x58>
1000da52:	2100      	movs	r1, #0
1000da54:	809a      	strh	r2, [r3, #4]
1000da56:	6099      	str	r1, [r3, #8]
1000da58:	2300      	movs	r3, #0
1000da5a:	6822      	ldr	r2, [r4, #0]
1000da5c:	7093      	strb	r3, [r2, #2]
1000da5e:	3303      	adds	r3, #3
1000da60:	402b      	ands	r3, r5
1000da62:	2b03      	cmp	r3, #3
1000da64:	d001      	beq.n	1000da6a <db_addATT+0x6a>
1000da66:	076b      	lsls	r3, r5, #29
1000da68:	d504      	bpl.n	1000da74 <db_addATT+0x74>
1000da6a:	2101      	movs	r1, #1
1000da6c:	6822      	ldr	r2, [r4, #0]
1000da6e:	7893      	ldrb	r3, [r2, #2]
1000da70:	430b      	orrs	r3, r1
1000da72:	7093      	strb	r3, [r2, #2]
1000da74:	2330      	movs	r3, #48	; 0x30
1000da76:	402b      	ands	r3, r5
1000da78:	2b30      	cmp	r3, #48	; 0x30
1000da7a:	d001      	beq.n	1000da80 <db_addATT+0x80>
1000da7c:	066b      	lsls	r3, r5, #25
1000da7e:	d504      	bpl.n	1000da8a <db_addATT+0x8a>
1000da80:	2102      	movs	r1, #2
1000da82:	6822      	ldr	r2, [r4, #0]
1000da84:	7893      	ldrb	r3, [r2, #2]
1000da86:	430b      	orrs	r3, r1
1000da88:	7093      	strb	r3, [r2, #2]
1000da8a:	4a0a      	ldr	r2, [pc, #40]	; (1000dab4 <db_addATT+0xb4>)
1000da8c:	2600      	movs	r6, #0
1000da8e:	6813      	ldr	r3, [r2, #0]
1000da90:	3301      	adds	r3, #1
1000da92:	6013      	str	r3, [r2, #0]
1000da94:	e005      	b.n	1000daa2 <db_addATT+0xa2>
1000da96:	6023      	str	r3, [r4, #0]
1000da98:	2611      	movs	r6, #17
1000da9a:	2900      	cmp	r1, #0
1000da9c:	d001      	beq.n	1000daa2 <db_addATT+0xa2>
1000da9e:	1aba      	subs	r2, r7, r2
1000daa0:	6002      	str	r2, [r0, #0]
1000daa2:	1c30      	adds	r0, r6, #0
1000daa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000daa6:	46c0      	nop			; (mov r8, r8)
1000daa8:	10015288 	.word	0x10015288
1000daac:	1001528c 	.word	0x1001528c
1000dab0:	10011107 	.word	0x10011107
1000dab4:	10015290 	.word	0x10015290

1000dab8 <user_description_define>:
1000dab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000daba:	1c05      	adds	r5, r0, #0
1000dabc:	20cf      	movs	r0, #207	; 0xcf
1000dabe:	2a00      	cmp	r2, #0
1000dac0:	d01c      	beq.n	1000dafc <user_description_define+0x44>
1000dac2:	1c14      	adds	r4, r2, #0
1000dac4:	2203      	movs	r2, #3
1000dac6:	1c1e      	adds	r6, r3, #0
1000dac8:	400a      	ands	r2, r1
1000daca:	1c0b      	adds	r3, r1, #0
1000dacc:	3a03      	subs	r2, #3
1000dace:	4251      	negs	r1, r2
1000dad0:	4151      	adcs	r1, r2
1000dad2:	075a      	lsls	r2, r3, #29
1000dad4:	0fd2      	lsrs	r2, r2, #31
1000dad6:	430a      	orrs	r2, r1
1000dad8:	03d2      	lsls	r2, r2, #15
1000dada:	4f09      	ldr	r7, [pc, #36]	; (1000db00 <user_description_define+0x48>)
1000dadc:	1c28      	adds	r0, r5, #0
1000dade:	2a00      	cmp	r2, #0
1000dae0:	d003      	beq.n	1000daea <user_description_define+0x32>
1000dae2:	1c21      	adds	r1, r4, #0
1000dae4:	1c32      	adds	r2, r6, #0
1000dae6:	47b8      	blx	r7
1000dae8:	e008      	b.n	1000dafc <user_description_define+0x44>
1000daea:	1c11      	adds	r1, r2, #0
1000daec:	47b8      	blx	r7
1000daee:	2800      	cmp	r0, #0
1000daf0:	d104      	bne.n	1000dafc <user_description_define+0x44>
1000daf2:	1c28      	adds	r0, r5, #0
1000daf4:	1c31      	adds	r1, r6, #0
1000daf6:	1c22      	adds	r2, r4, #0
1000daf8:	4b02      	ldr	r3, [pc, #8]	; (1000db04 <user_description_define+0x4c>)
1000dafa:	4798      	blx	r3
1000dafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000dafe:	46c0      	nop			; (mov r8, r8)
1000db00:	1000da01 	.word	0x1000da01
1000db04:	1000fe81 	.word	0x1000fe81

1000db08 <at_ble_read_authorize_reply.part.1>:
1000db08:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000db0a:	4b09      	ldr	r3, [pc, #36]	; (1000db30 <at_ble_read_authorize_reply.part.1+0x28>)
1000db0c:	1c05      	adds	r5, r0, #0
1000db0e:	1c08      	adds	r0, r1, #0
1000db10:	1c0c      	adds	r4, r1, #0
1000db12:	4798      	blx	r3
1000db14:	2800      	cmp	r0, #0
1000db16:	d009      	beq.n	1000db2c <at_ble_read_authorize_reply.part.1+0x24>
1000db18:	6882      	ldr	r2, [r0, #8]
1000db1a:	2a00      	cmp	r2, #0
1000db1c:	d006      	beq.n	1000db2c <at_ble_read_authorize_reply.part.1+0x24>
1000db1e:	8883      	ldrh	r3, [r0, #4]
1000db20:	1c29      	adds	r1, r5, #0
1000db22:	9200      	str	r2, [sp, #0]
1000db24:	1c20      	adds	r0, r4, #0
1000db26:	2200      	movs	r2, #0
1000db28:	4c02      	ldr	r4, [pc, #8]	; (1000db34 <at_ble_read_authorize_reply.part.1+0x2c>)
1000db2a:	47a0      	blx	r4
1000db2c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000db2e:	46c0      	nop			; (mov r8, r8)
1000db30:	1000d8a1 	.word	0x1000d8a1
1000db34:	1000f801 	.word	0x1000f801

1000db38 <internal_at_ble_service_define>:
1000db38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db3a:	b08b      	sub	sp, #44	; 0x2c
1000db3c:	9306      	str	r3, [sp, #24]
1000db3e:	ab10      	add	r3, sp, #64	; 0x40
1000db40:	9202      	str	r2, [sp, #8]
1000db42:	cb04      	ldmia	r3!, {r2}
1000db44:	1c05      	adds	r5, r0, #0
1000db46:	881b      	ldrh	r3, [r3, #0]
1000db48:	9105      	str	r1, [sp, #20]
1000db4a:	9303      	str	r3, [sp, #12]
1000db4c:	ab12      	add	r3, sp, #72	; 0x48
1000db4e:	781b      	ldrb	r3, [r3, #0]
1000db50:	20cf      	movs	r0, #207	; 0xcf
1000db52:	9304      	str	r3, [sp, #16]
1000db54:	2d00      	cmp	r5, #0
1000db56:	d100      	bne.n	1000db5a <internal_at_ble_service_define+0x22>
1000db58:	e1ca      	b.n	1000def0 <internal_at_ble_service_define+0x3b8>
1000db5a:	2900      	cmp	r1, #0
1000db5c:	d100      	bne.n	1000db60 <internal_at_ble_service_define+0x28>
1000db5e:	e1c7      	b.n	1000def0 <internal_at_ble_service_define+0x3b8>
1000db60:	2a00      	cmp	r2, #0
1000db62:	d100      	bne.n	1000db66 <internal_at_ble_service_define+0x2e>
1000db64:	e1c4      	b.n	1000def0 <internal_at_ble_service_define+0x3b8>
1000db66:	9b03      	ldr	r3, [sp, #12]
1000db68:	2b00      	cmp	r3, #0
1000db6a:	d100      	bne.n	1000db6e <internal_at_ble_service_define+0x36>
1000db6c:	e1c0      	b.n	1000def0 <internal_at_ble_service_define+0x3b8>
1000db6e:	4bc9      	ldr	r3, [pc, #804]	; (1000de94 <internal_at_ble_service_define+0x35c>)
1000db70:	3004      	adds	r0, #4
1000db72:	681e      	ldr	r6, [r3, #0]
1000db74:	2e00      	cmp	r6, #0
1000db76:	d100      	bne.n	1000db7a <internal_at_ble_service_define+0x42>
1000db78:	e1ba      	b.n	1000def0 <internal_at_ble_service_define+0x3b8>
1000db7a:	2400      	movs	r4, #0
1000db7c:	4bc6      	ldr	r3, [pc, #792]	; (1000de98 <internal_at_ble_service_define+0x360>)
1000db7e:	8034      	strh	r4, [r6, #0]
1000db80:	881b      	ldrh	r3, [r3, #0]
1000db82:	1db7      	adds	r7, r6, #6
1000db84:	1c21      	adds	r1, r4, #0
1000db86:	2210      	movs	r2, #16
1000db88:	8073      	strh	r3, [r6, #2]
1000db8a:	1c38      	adds	r0, r7, #0
1000db8c:	4bc3      	ldr	r3, [pc, #780]	; (1000de9c <internal_at_ble_service_define+0x364>)
1000db8e:	4798      	blx	r3
1000db90:	7828      	ldrb	r0, [r5, #0]
1000db92:	4bc3      	ldr	r3, [pc, #780]	; (1000dea0 <internal_at_ble_service_define+0x368>)
1000db94:	4798      	blx	r3
1000db96:	1c69      	adds	r1, r5, #1
1000db98:	1c02      	adds	r2, r0, #0
1000db9a:	4bc2      	ldr	r3, [pc, #776]	; (1000dea4 <internal_at_ble_service_define+0x36c>)
1000db9c:	1c38      	adds	r0, r7, #0
1000db9e:	4798      	blx	r3
1000dba0:	2204      	movs	r2, #4
1000dba2:	782b      	ldrb	r3, [r5, #0]
1000dba4:	9d02      	ldr	r5, [sp, #8]
1000dba6:	011b      	lsls	r3, r3, #4
1000dba8:	4313      	orrs	r3, r2
1000dbaa:	9a04      	ldr	r2, [sp, #16]
1000dbac:	7174      	strb	r4, [r6, #5]
1000dbae:	0192      	lsls	r2, r2, #6
1000dbb0:	4313      	orrs	r3, r2
1000dbb2:	7133      	strb	r3, [r6, #4]
1000dbb4:	2316      	movs	r3, #22
1000dbb6:	9a06      	ldr	r2, [sp, #24]
1000dbb8:	3512      	adds	r5, #18
1000dbba:	4353      	muls	r3, r2
1000dbbc:	9a02      	ldr	r2, [sp, #8]
1000dbbe:	3312      	adds	r3, #18
1000dbc0:	18d7      	adds	r7, r2, r3
1000dbc2:	42bd      	cmp	r5, r7
1000dbc4:	d00f      	beq.n	1000dbe6 <internal_at_ble_service_define+0xae>
1000dbc6:	4bb8      	ldr	r3, [pc, #736]	; (1000dea8 <internal_at_ble_service_define+0x370>)
1000dbc8:	8829      	ldrh	r1, [r5, #0]
1000dbca:	9300      	str	r3, [sp, #0]
1000dbcc:	230e      	movs	r3, #14
1000dbce:	aa06      	add	r2, sp, #24
1000dbd0:	189b      	adds	r3, r3, r2
1000dbd2:	9301      	str	r3, [sp, #4]
1000dbd4:	4cb5      	ldr	r4, [pc, #724]	; (1000deac <internal_at_ble_service_define+0x374>)
1000dbd6:	1c30      	adds	r0, r6, #0
1000dbd8:	2201      	movs	r2, #1
1000dbda:	2302      	movs	r3, #2
1000dbdc:	47a0      	blx	r4
1000dbde:	3516      	adds	r5, #22
1000dbe0:	1e04      	subs	r4, r0, #0
1000dbe2:	d0ee      	beq.n	1000dbc2 <internal_at_ble_service_define+0x8a>
1000dbe4:	e183      	b.n	1000deee <internal_at_ble_service_define+0x3b6>
1000dbe6:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000dbe8:	2300      	movs	r3, #0
1000dbea:	3714      	adds	r7, #20
1000dbec:	1c3d      	adds	r5, r7, #0
1000dbee:	9302      	str	r3, [sp, #8]
1000dbf0:	9b02      	ldr	r3, [sp, #8]
1000dbf2:	9a03      	ldr	r2, [sp, #12]
1000dbf4:	4293      	cmp	r3, r2
1000dbf6:	db00      	blt.n	1000dbfa <internal_at_ble_service_define+0xc2>
1000dbf8:	e0bf      	b.n	1000dd7a <internal_at_ble_service_define+0x242>
1000dbfa:	4bad      	ldr	r3, [pc, #692]	; (1000deb0 <internal_at_ble_service_define+0x378>)
1000dbfc:	aa06      	add	r2, sp, #24
1000dbfe:	9300      	str	r3, [sp, #0]
1000dc00:	230e      	movs	r3, #14
1000dc02:	189b      	adds	r3, r3, r2
1000dc04:	9301      	str	r3, [sp, #4]
1000dc06:	4ca9      	ldr	r4, [pc, #676]	; (1000deac <internal_at_ble_service_define+0x374>)
1000dc08:	1c30      	adds	r0, r6, #0
1000dc0a:	2104      	movs	r1, #4
1000dc0c:	2201      	movs	r2, #1
1000dc0e:	2302      	movs	r3, #2
1000dc10:	47a0      	blx	r4
1000dc12:	1e04      	subs	r4, r0, #0
1000dc14:	d000      	beq.n	1000dc18 <internal_at_ble_service_define+0xe0>
1000dc16:	e16a      	b.n	1000deee <internal_at_ble_service_define+0x3b6>
1000dc18:	1c2b      	adds	r3, r5, #0
1000dc1a:	3b12      	subs	r3, #18
1000dc1c:	7b2c      	ldrb	r4, [r5, #12]
1000dc1e:	781b      	ldrb	r3, [r3, #0]
1000dc20:	1c21      	adds	r1, r4, #0
1000dc22:	1c1a      	adds	r2, r3, #0
1000dc24:	9304      	str	r3, [sp, #16]
1000dc26:	8828      	ldrh	r0, [r5, #0]
1000dc28:	4ba2      	ldr	r3, [pc, #648]	; (1000deb4 <internal_at_ble_service_define+0x37c>)
1000dc2a:	4798      	blx	r3
1000dc2c:	2303      	movs	r3, #3
1000dc2e:	4023      	ands	r3, r4
1000dc30:	3b03      	subs	r3, #3
1000dc32:	4259      	negs	r1, r3
1000dc34:	4159      	adcs	r1, r3
1000dc36:	2301      	movs	r3, #1
1000dc38:	08a4      	lsrs	r4, r4, #2
1000dc3a:	401c      	ands	r4, r3
1000dc3c:	430c      	orrs	r4, r1
1000dc3e:	896b      	ldrh	r3, [r5, #10]
1000dc40:	03e4      	lsls	r4, r4, #15
1000dc42:	431c      	orrs	r4, r3
1000dc44:	9007      	str	r0, [sp, #28]
1000dc46:	4b96      	ldr	r3, [pc, #600]	; (1000dea0 <internal_at_ble_service_define+0x368>)
1000dc48:	9804      	ldr	r0, [sp, #16]
1000dc4a:	4798      	blx	r3
1000dc4c:	1c2a      	adds	r2, r5, #0
1000dc4e:	3a11      	subs	r2, #17
1000dc50:	9200      	str	r2, [sp, #0]
1000dc52:	3a03      	subs	r2, #3
1000dc54:	1c03      	adds	r3, r0, #0
1000dc56:	9201      	str	r2, [sp, #4]
1000dc58:	1c21      	adds	r1, r4, #0
1000dc5a:	1c30      	adds	r0, r6, #0
1000dc5c:	4c93      	ldr	r4, [pc, #588]	; (1000deac <internal_at_ble_service_define+0x374>)
1000dc5e:	9a07      	ldr	r2, [sp, #28]
1000dc60:	47a0      	blx	r4
1000dc62:	1e04      	subs	r4, r0, #0
1000dc64:	d000      	beq.n	1000dc68 <internal_at_ble_service_define+0x130>
1000dc66:	e142      	b.n	1000deee <internal_at_ble_service_define+0x3b6>
1000dc68:	22c0      	movs	r2, #192	; 0xc0
1000dc6a:	882b      	ldrh	r3, [r5, #0]
1000dc6c:	0052      	lsls	r2, r2, #1
1000dc6e:	4213      	tst	r3, r2
1000dc70:	d104      	bne.n	1000dc7c <internal_at_ble_service_define+0x144>
1000dc72:	8aab      	ldrh	r3, [r5, #20]
1000dc74:	9304      	str	r3, [sp, #16]
1000dc76:	2b00      	cmp	r3, #0
1000dc78:	d116      	bne.n	1000dca8 <internal_at_ble_service_define+0x170>
1000dc7a:	e03a      	b.n	1000dcf2 <internal_at_ble_service_define+0x1ba>
1000dc7c:	2201      	movs	r2, #1
1000dc7e:	09d9      	lsrs	r1, r3, #7
1000dc80:	4011      	ands	r1, r2
1000dc82:	05db      	lsls	r3, r3, #23
1000dc84:	d501      	bpl.n	1000dc8a <internal_at_ble_service_define+0x152>
1000dc86:	2302      	movs	r3, #2
1000dc88:	4319      	orrs	r1, r3
1000dc8a:	4b8b      	ldr	r3, [pc, #556]	; (1000deb8 <internal_at_ble_service_define+0x380>)
1000dc8c:	aa06      	add	r2, sp, #24
1000dc8e:	9300      	str	r3, [sp, #0]
1000dc90:	230e      	movs	r3, #14
1000dc92:	189b      	adds	r3, r3, r2
1000dc94:	9301      	str	r3, [sp, #4]
1000dc96:	4c85      	ldr	r4, [pc, #532]	; (1000deac <internal_at_ble_service_define+0x374>)
1000dc98:	0209      	lsls	r1, r1, #8
1000dc9a:	1c30      	adds	r0, r6, #0
1000dc9c:	2201      	movs	r2, #1
1000dc9e:	2302      	movs	r3, #2
1000dca0:	47a0      	blx	r4
1000dca2:	1e04      	subs	r4, r0, #0
1000dca4:	d0e5      	beq.n	1000dc72 <internal_at_ble_service_define+0x13a>
1000dca6:	e122      	b.n	1000deee <internal_at_ble_service_define+0x3b6>
1000dca8:	2380      	movs	r3, #128	; 0x80
1000dcaa:	882a      	ldrh	r2, [r5, #0]
1000dcac:	7f2c      	ldrb	r4, [r5, #28]
1000dcae:	005b      	lsls	r3, r3, #1
1000dcb0:	401a      	ands	r2, r3
1000dcb2:	1c20      	adds	r0, r4, #0
1000dcb4:	2101      	movs	r1, #1
1000dcb6:	2a00      	cmp	r2, #0
1000dcb8:	d000      	beq.n	1000dcbc <internal_at_ble_service_define+0x184>
1000dcba:	1c0a      	adds	r2, r1, #0
1000dcbc:	4b7f      	ldr	r3, [pc, #508]	; (1000debc <internal_at_ble_service_define+0x384>)
1000dcbe:	4798      	blx	r3
1000dcc0:	2203      	movs	r2, #3
1000dcc2:	4022      	ands	r2, r4
1000dcc4:	3a03      	subs	r2, #3
1000dcc6:	4251      	negs	r1, r2
1000dcc8:	4151      	adcs	r1, r2
1000dcca:	4b7d      	ldr	r3, [pc, #500]	; (1000dec0 <internal_at_ble_service_define+0x388>)
1000dccc:	1c0a      	adds	r2, r1, #0
1000dcce:	9300      	str	r3, [sp, #0]
1000dcd0:	1c2b      	adds	r3, r5, #0
1000dcd2:	0764      	lsls	r4, r4, #29
1000dcd4:	0fe4      	lsrs	r4, r4, #31
1000dcd6:	4322      	orrs	r2, r4
1000dcd8:	03d2      	lsls	r2, r2, #15
1000dcda:	4310      	orrs	r0, r2
1000dcdc:	3320      	adds	r3, #32
1000dcde:	b282      	uxth	r2, r0
1000dce0:	9301      	str	r3, [sp, #4]
1000dce2:	4c72      	ldr	r4, [pc, #456]	; (1000deac <internal_at_ble_service_define+0x374>)
1000dce4:	1c30      	adds	r0, r6, #0
1000dce6:	9904      	ldr	r1, [sp, #16]
1000dce8:	2302      	movs	r3, #2
1000dcea:	47a0      	blx	r4
1000dcec:	1e04      	subs	r4, r0, #0
1000dcee:	d000      	beq.n	1000dcf2 <internal_at_ble_service_define+0x1ba>
1000dcf0:	e0fd      	b.n	1000deee <internal_at_ble_service_define+0x3b6>
1000dcf2:	2101      	movs	r1, #1
1000dcf4:	882b      	ldrh	r3, [r5, #0]
1000dcf6:	420b      	tst	r3, r1
1000dcf8:	d011      	beq.n	1000dd1e <internal_at_ble_service_define+0x1e6>
1000dcfa:	7fa8      	ldrb	r0, [r5, #30]
1000dcfc:	4b6f      	ldr	r3, [pc, #444]	; (1000debc <internal_at_ble_service_define+0x384>)
1000dcfe:	2200      	movs	r2, #0
1000dd00:	4798      	blx	r3
1000dd02:	4b70      	ldr	r3, [pc, #448]	; (1000dec4 <internal_at_ble_service_define+0x38c>)
1000dd04:	1c02      	adds	r2, r0, #0
1000dd06:	9300      	str	r3, [sp, #0]
1000dd08:	1c2b      	adds	r3, r5, #0
1000dd0a:	3324      	adds	r3, #36	; 0x24
1000dd0c:	9301      	str	r3, [sp, #4]
1000dd0e:	4c67      	ldr	r4, [pc, #412]	; (1000deac <internal_at_ble_service_define+0x374>)
1000dd10:	1c30      	adds	r0, r6, #0
1000dd12:	496d      	ldr	r1, [pc, #436]	; (1000dec8 <internal_at_ble_service_define+0x390>)
1000dd14:	2302      	movs	r3, #2
1000dd16:	47a0      	blx	r4
1000dd18:	1e04      	subs	r4, r0, #0
1000dd1a:	d000      	beq.n	1000dd1e <internal_at_ble_service_define+0x1e6>
1000dd1c:	e0e7      	b.n	1000deee <internal_at_ble_service_define+0x3b6>
1000dd1e:	2330      	movs	r3, #48	; 0x30
1000dd20:	882a      	ldrh	r2, [r5, #0]
1000dd22:	421a      	tst	r2, r3
1000dd24:	d012      	beq.n	1000dd4c <internal_at_ble_service_define+0x214>
1000dd26:	2101      	movs	r1, #1
1000dd28:	7f68      	ldrb	r0, [r5, #29]
1000dd2a:	1c0a      	adds	r2, r1, #0
1000dd2c:	4b63      	ldr	r3, [pc, #396]	; (1000debc <internal_at_ble_service_define+0x384>)
1000dd2e:	4798      	blx	r3
1000dd30:	4b66      	ldr	r3, [pc, #408]	; (1000decc <internal_at_ble_service_define+0x394>)
1000dd32:	1c02      	adds	r2, r0, #0
1000dd34:	9300      	str	r3, [sp, #0]
1000dd36:	1c2b      	adds	r3, r5, #0
1000dd38:	3322      	adds	r3, #34	; 0x22
1000dd3a:	9301      	str	r3, [sp, #4]
1000dd3c:	4c5b      	ldr	r4, [pc, #364]	; (1000deac <internal_at_ble_service_define+0x374>)
1000dd3e:	1c30      	adds	r0, r6, #0
1000dd40:	4961      	ldr	r1, [pc, #388]	; (1000dec8 <internal_at_ble_service_define+0x390>)
1000dd42:	2302      	movs	r3, #2
1000dd44:	47a0      	blx	r4
1000dd46:	1e04      	subs	r4, r0, #0
1000dd48:	d000      	beq.n	1000dd4c <internal_at_ble_service_define+0x214>
1000dd4a:	e0d0      	b.n	1000deee <internal_at_ble_service_define+0x3b6>
1000dd4c:	69ab      	ldr	r3, [r5, #24]
1000dd4e:	2b00      	cmp	r3, #0
1000dd50:	d00e      	beq.n	1000dd70 <internal_at_ble_service_define+0x238>
1000dd52:	4b5f      	ldr	r3, [pc, #380]	; (1000ded0 <internal_at_ble_service_define+0x398>)
1000dd54:	aa06      	add	r2, sp, #24
1000dd56:	9300      	str	r3, [sp, #0]
1000dd58:	230e      	movs	r3, #14
1000dd5a:	189b      	adds	r3, r3, r2
1000dd5c:	9301      	str	r3, [sp, #4]
1000dd5e:	4c53      	ldr	r4, [pc, #332]	; (1000deac <internal_at_ble_service_define+0x374>)
1000dd60:	1c30      	adds	r0, r6, #0
1000dd62:	2107      	movs	r1, #7
1000dd64:	2201      	movs	r2, #1
1000dd66:	2302      	movs	r3, #2
1000dd68:	47a0      	blx	r4
1000dd6a:	1e04      	subs	r4, r0, #0
1000dd6c:	d000      	beq.n	1000dd70 <internal_at_ble_service_define+0x238>
1000dd6e:	e0be      	b.n	1000deee <internal_at_ble_service_define+0x3b6>
1000dd70:	9b02      	ldr	r3, [sp, #8]
1000dd72:	353c      	adds	r5, #60	; 0x3c
1000dd74:	3301      	adds	r3, #1
1000dd76:	9302      	str	r3, [sp, #8]
1000dd78:	e73a      	b.n	1000dbf0 <internal_at_ble_service_define+0xb8>
1000dd7a:	1c30      	adds	r0, r6, #0
1000dd7c:	4b55      	ldr	r3, [pc, #340]	; (1000ded4 <internal_at_ble_service_define+0x39c>)
1000dd7e:	4798      	blx	r3
1000dd80:	1e04      	subs	r4, r0, #0
1000dd82:	d000      	beq.n	1000dd86 <internal_at_ble_service_define+0x24e>
1000dd84:	e0b3      	b.n	1000deee <internal_at_ble_service_define+0x3b6>
1000dd86:	8833      	ldrh	r3, [r6, #0]
1000dd88:	9a05      	ldr	r2, [sp, #20]
1000dd8a:	8013      	strh	r3, [r2, #0]
1000dd8c:	8836      	ldrh	r6, [r6, #0]
1000dd8e:	9b06      	ldr	r3, [sp, #24]
1000dd90:	9a03      	ldr	r2, [sp, #12]
1000dd92:	18f6      	adds	r6, r6, r3
1000dd94:	b2b3      	uxth	r3, r6
1000dd96:	9302      	str	r3, [sp, #8]
1000dd98:	233c      	movs	r3, #60	; 0x3c
1000dd9a:	4353      	muls	r3, r2
1000dd9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000dd9e:	3314      	adds	r3, #20
1000dda0:	18d3      	adds	r3, r2, r3
1000dda2:	9304      	str	r3, [sp, #16]
1000dda4:	9b04      	ldr	r3, [sp, #16]
1000dda6:	429f      	cmp	r7, r3
1000dda8:	d100      	bne.n	1000ddac <internal_at_ble_service_define+0x274>
1000ddaa:	e0a0      	b.n	1000deee <internal_at_ble_service_define+0x3b6>
1000ddac:	9b02      	ldr	r3, [sp, #8]
1000ddae:	1c9d      	adds	r5, r3, #2
1000ddb0:	1c3b      	adds	r3, r7, #0
1000ddb2:	b2ad      	uxth	r5, r5
1000ddb4:	3b14      	subs	r3, #20
1000ddb6:	801d      	strh	r5, [r3, #0]
1000ddb8:	9303      	str	r3, [sp, #12]
1000ddba:	893b      	ldrh	r3, [r7, #8]
1000ddbc:	2b00      	cmp	r3, #0
1000ddbe:	d108      	bne.n	1000ddd2 <internal_at_ble_service_define+0x29a>
1000ddc0:	23c0      	movs	r3, #192	; 0xc0
1000ddc2:	883a      	ldrh	r2, [r7, #0]
1000ddc4:	005b      	lsls	r3, r3, #1
1000ddc6:	421a      	tst	r2, r3
1000ddc8:	d026      	beq.n	1000de18 <internal_at_ble_service_define+0x2e0>
1000ddca:	9e02      	ldr	r6, [sp, #8]
1000ddcc:	3603      	adds	r6, #3
1000ddce:	b2b5      	uxth	r5, r6
1000ddd0:	e022      	b.n	1000de18 <internal_at_ble_service_define+0x2e0>
1000ddd2:	2103      	movs	r1, #3
1000ddd4:	7b3b      	ldrb	r3, [r7, #12]
1000ddd6:	4019      	ands	r1, r3
1000ddd8:	3903      	subs	r1, #3
1000ddda:	424a      	negs	r2, r1
1000dddc:	414a      	adcs	r2, r1
1000ddde:	0759      	lsls	r1, r3, #29
1000dde0:	0fc9      	lsrs	r1, r1, #31
1000dde2:	4311      	orrs	r1, r2
1000dde4:	03c9      	lsls	r1, r1, #15
1000dde6:	897a      	ldrh	r2, [r7, #10]
1000dde8:	2900      	cmp	r1, #0
1000ddea:	d007      	beq.n	1000ddfc <internal_at_ble_service_define+0x2c4>
1000ddec:	6879      	ldr	r1, [r7, #4]
1000ddee:	2900      	cmp	r1, #0
1000ddf0:	d100      	bne.n	1000ddf4 <internal_at_ble_service_define+0x2bc>
1000ddf2:	4939      	ldr	r1, [pc, #228]	; (1000ded8 <internal_at_ble_service_define+0x3a0>)
1000ddf4:	1c28      	adds	r0, r5, #0
1000ddf6:	4e39      	ldr	r6, [pc, #228]	; (1000dedc <internal_at_ble_service_define+0x3a4>)
1000ddf8:	47b0      	blx	r6
1000ddfa:	e00a      	b.n	1000de12 <internal_at_ble_service_define+0x2da>
1000ddfc:	1c28      	adds	r0, r5, #0
1000ddfe:	4e37      	ldr	r6, [pc, #220]	; (1000dedc <internal_at_ble_service_define+0x3a4>)
1000de00:	47b0      	blx	r6
1000de02:	2800      	cmp	r0, #0
1000de04:	d172      	bne.n	1000deec <internal_at_ble_service_define+0x3b4>
1000de06:	9b03      	ldr	r3, [sp, #12]
1000de08:	8939      	ldrh	r1, [r7, #8]
1000de0a:	8818      	ldrh	r0, [r3, #0]
1000de0c:	687a      	ldr	r2, [r7, #4]
1000de0e:	4b34      	ldr	r3, [pc, #208]	; (1000dee0 <internal_at_ble_service_define+0x3a8>)
1000de10:	4798      	blx	r3
1000de12:	2800      	cmp	r0, #0
1000de14:	d0d4      	beq.n	1000ddc0 <internal_at_ble_service_define+0x288>
1000de16:	e069      	b.n	1000deec <internal_at_ble_service_define+0x3b4>
1000de18:	8abb      	ldrh	r3, [r7, #20]
1000de1a:	2b00      	cmp	r3, #0
1000de1c:	d00a      	beq.n	1000de34 <internal_at_ble_service_define+0x2fc>
1000de1e:	3501      	adds	r5, #1
1000de20:	b2ad      	uxth	r5, r5
1000de22:	843d      	strh	r5, [r7, #32]
1000de24:	7f39      	ldrb	r1, [r7, #28]
1000de26:	8afb      	ldrh	r3, [r7, #22]
1000de28:	1c28      	adds	r0, r5, #0
1000de2a:	693a      	ldr	r2, [r7, #16]
1000de2c:	4e2d      	ldr	r6, [pc, #180]	; (1000dee4 <internal_at_ble_service_define+0x3ac>)
1000de2e:	47b0      	blx	r6
1000de30:	2800      	cmp	r0, #0
1000de32:	d15b      	bne.n	1000deec <internal_at_ble_service_define+0x3b4>
1000de34:	883b      	ldrh	r3, [r7, #0]
1000de36:	07db      	lsls	r3, r3, #31
1000de38:	d50d      	bpl.n	1000de56 <internal_at_ble_service_define+0x31e>
1000de3a:	2200      	movs	r2, #0
1000de3c:	3501      	adds	r5, #1
1000de3e:	b2ad      	uxth	r5, r5
1000de40:	a909      	add	r1, sp, #36	; 0x24
1000de42:	84bd      	strh	r5, [r7, #36]	; 0x24
1000de44:	7fbb      	ldrb	r3, [r7, #30]
1000de46:	1c28      	adds	r0, r5, #0
1000de48:	700a      	strb	r2, [r1, #0]
1000de4a:	704a      	strb	r2, [r1, #1]
1000de4c:	4e23      	ldr	r6, [pc, #140]	; (1000dedc <internal_at_ble_service_define+0x3a4>)
1000de4e:	3202      	adds	r2, #2
1000de50:	47b0      	blx	r6
1000de52:	2800      	cmp	r0, #0
1000de54:	d14a      	bne.n	1000deec <internal_at_ble_service_define+0x3b4>
1000de56:	2330      	movs	r3, #48	; 0x30
1000de58:	883a      	ldrh	r2, [r7, #0]
1000de5a:	421a      	tst	r2, r3
1000de5c:	d00d      	beq.n	1000de7a <internal_at_ble_service_define+0x342>
1000de5e:	2200      	movs	r2, #0
1000de60:	3501      	adds	r5, #1
1000de62:	b2ad      	uxth	r5, r5
1000de64:	a909      	add	r1, sp, #36	; 0x24
1000de66:	847d      	strh	r5, [r7, #34]	; 0x22
1000de68:	7f7b      	ldrb	r3, [r7, #29]
1000de6a:	1c28      	adds	r0, r5, #0
1000de6c:	700a      	strb	r2, [r1, #0]
1000de6e:	704a      	strb	r2, [r1, #1]
1000de70:	4e1a      	ldr	r6, [pc, #104]	; (1000dedc <internal_at_ble_service_define+0x3a4>)
1000de72:	3202      	adds	r2, #2
1000de74:	47b0      	blx	r6
1000de76:	2800      	cmp	r0, #0
1000de78:	d138      	bne.n	1000deec <internal_at_ble_service_define+0x3b4>
1000de7a:	69b9      	ldr	r1, [r7, #24]
1000de7c:	2900      	cmp	r1, #0
1000de7e:	d006      	beq.n	1000de8e <internal_at_ble_service_define+0x356>
1000de80:	3501      	adds	r5, #1
1000de82:	b2ad      	uxth	r5, r5
1000de84:	1c28      	adds	r0, r5, #0
1000de86:	4b18      	ldr	r3, [pc, #96]	; (1000dee8 <internal_at_ble_service_define+0x3b0>)
1000de88:	4798      	blx	r3
1000de8a:	2800      	cmp	r0, #0
1000de8c:	d12e      	bne.n	1000deec <internal_at_ble_service_define+0x3b4>
1000de8e:	373c      	adds	r7, #60	; 0x3c
1000de90:	9502      	str	r5, [sp, #8]
1000de92:	e787      	b.n	1000dda4 <internal_at_ble_service_define+0x26c>
1000de94:	10015298 	.word	0x10015298
1000de98:	10017c64 	.word	0x10017c64
1000de9c:	10011119 	.word	0x10011119
1000dea0:	1000d779 	.word	0x1000d779
1000dea4:	10011107 	.word	0x10011107
1000dea8:	100136fb 	.word	0x100136fb
1000deac:	1000fe11 	.word	0x1000fe11
1000deb0:	100136fd 	.word	0x100136fd
1000deb4:	1000d939 	.word	0x1000d939
1000deb8:	100136f9 	.word	0x100136f9
1000debc:	1000d8e1 	.word	0x1000d8e1
1000dec0:	100136f5 	.word	0x100136f5
1000dec4:	100136f7 	.word	0x100136f7
1000dec8:	00008002 	.word	0x00008002
1000decc:	100136f1 	.word	0x100136f1
1000ded0:	100136f3 	.word	0x100136f3
1000ded4:	1000fd05 	.word	0x1000fd05
1000ded8:	10015284 	.word	0x10015284
1000dedc:	1000da01 	.word	0x1000da01
1000dee0:	1000fe81 	.word	0x1000fe81
1000dee4:	1000dab9 	.word	0x1000dab9
1000dee8:	1000d9d5 	.word	0x1000d9d5
1000deec:	1c04      	adds	r4, r0, #0
1000deee:	1c20      	adds	r0, r4, #0
1000def0:	b00b      	add	sp, #44	; 0x2c
1000def2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000def4 <initi_gatt_server_module>:
1000def4:	2300      	movs	r3, #0
1000def6:	4a07      	ldr	r2, [pc, #28]	; (1000df14 <initi_gatt_server_module+0x20>)
1000def8:	7013      	strb	r3, [r2, #0]
1000defa:	4a07      	ldr	r2, [pc, #28]	; (1000df18 <initi_gatt_server_module+0x24>)
1000defc:	6013      	str	r3, [r2, #0]
1000defe:	4a07      	ldr	r2, [pc, #28]	; (1000df1c <initi_gatt_server_module+0x28>)
1000df00:	6013      	str	r3, [r2, #0]
1000df02:	4a07      	ldr	r2, [pc, #28]	; (1000df20 <initi_gatt_server_module+0x2c>)
1000df04:	6013      	str	r3, [r2, #0]
1000df06:	4a07      	ldr	r2, [pc, #28]	; (1000df24 <initi_gatt_server_module+0x30>)
1000df08:	6013      	str	r3, [r2, #0]
1000df0a:	4a07      	ldr	r2, [pc, #28]	; (1000df28 <initi_gatt_server_module+0x34>)
1000df0c:	6013      	str	r3, [r2, #0]
1000df0e:	4a07      	ldr	r2, [pc, #28]	; (1000df2c <initi_gatt_server_module+0x38>)
1000df10:	6013      	str	r3, [r2, #0]
1000df12:	4770      	bx	lr
1000df14:	10015284 	.word	0x10015284
1000df18:	10015294 	.word	0x10015294
1000df1c:	10015290 	.word	0x10015290
1000df20:	10015280 	.word	0x10015280
1000df24:	1001528c 	.word	0x1001528c
1000df28:	10015288 	.word	0x10015288
1000df2c:	10015298 	.word	0x10015298

1000df30 <db_init>:
1000df30:	4b0a      	ldr	r3, [pc, #40]	; (1000df5c <db_init+0x2c>)
1000df32:	4a0b      	ldr	r2, [pc, #44]	; (1000df60 <db_init+0x30>)
1000df34:	6018      	str	r0, [r3, #0]
1000df36:	084b      	lsrs	r3, r1, #1
1000df38:	6013      	str	r3, [r2, #0]
1000df3a:	4a0a      	ldr	r2, [pc, #40]	; (1000df64 <db_init+0x34>)
1000df3c:	18c3      	adds	r3, r0, r3
1000df3e:	6013      	str	r3, [r2, #0]
1000df40:	4a09      	ldr	r2, [pc, #36]	; (1000df68 <db_init+0x38>)
1000df42:	1841      	adds	r1, r0, r1
1000df44:	6013      	str	r3, [r2, #0]
1000df46:	2303      	movs	r3, #3
1000df48:	2200      	movs	r2, #0
1000df4a:	3103      	adds	r1, #3
1000df4c:	4399      	bics	r1, r3
1000df4e:	4b07      	ldr	r3, [pc, #28]	; (1000df6c <db_init+0x3c>)
1000df50:	3904      	subs	r1, #4
1000df52:	6019      	str	r1, [r3, #0]
1000df54:	4b06      	ldr	r3, [pc, #24]	; (1000df70 <db_init+0x40>)
1000df56:	601a      	str	r2, [r3, #0]
1000df58:	4770      	bx	lr
1000df5a:	46c0      	nop			; (mov r8, r8)
1000df5c:	10015298 	.word	0x10015298
1000df60:	10015294 	.word	0x10015294
1000df64:	10015280 	.word	0x10015280
1000df68:	1001528c 	.word	0x1001528c
1000df6c:	10015288 	.word	0x10015288
1000df70:	10015290 	.word	0x10015290

1000df74 <at_ble_primary_service_define>:
1000df74:	b530      	push	{r4, r5, lr}
1000df76:	b085      	sub	sp, #20
1000df78:	ac08      	add	r4, sp, #32
1000df7a:	cc20      	ldmia	r4!, {r5}
1000df7c:	8824      	ldrh	r4, [r4, #0]
1000df7e:	9500      	str	r5, [sp, #0]
1000df80:	9401      	str	r4, [sp, #4]
1000df82:	2401      	movs	r4, #1
1000df84:	9402      	str	r4, [sp, #8]
1000df86:	4c02      	ldr	r4, [pc, #8]	; (1000df90 <at_ble_primary_service_define+0x1c>)
1000df88:	47a0      	blx	r4
1000df8a:	b005      	add	sp, #20
1000df8c:	bd30      	pop	{r4, r5, pc}
1000df8e:	46c0      	nop			; (mov r8, r8)
1000df90:	1000db39 	.word	0x1000db39

1000df94 <at_ble_characteristic_value_set>:
1000df94:	b570      	push	{r4, r5, r6, lr}
1000df96:	4b0b      	ldr	r3, [pc, #44]	; (1000dfc4 <at_ble_characteristic_value_set+0x30>)
1000df98:	1c06      	adds	r6, r0, #0
1000df9a:	1c0c      	adds	r4, r1, #0
1000df9c:	1c15      	adds	r5, r2, #0
1000df9e:	4798      	blx	r3
1000dfa0:	2800      	cmp	r0, #0
1000dfa2:	d008      	beq.n	1000dfb6 <at_ble_characteristic_value_set+0x22>
1000dfa4:	6880      	ldr	r0, [r0, #8]
1000dfa6:	2800      	cmp	r0, #0
1000dfa8:	d005      	beq.n	1000dfb6 <at_ble_characteristic_value_set+0x22>
1000dfaa:	1c21      	adds	r1, r4, #0
1000dfac:	1c2a      	adds	r2, r5, #0
1000dfae:	4b06      	ldr	r3, [pc, #24]	; (1000dfc8 <at_ble_characteristic_value_set+0x34>)
1000dfb0:	4798      	blx	r3
1000dfb2:	2000      	movs	r0, #0
1000dfb4:	e004      	b.n	1000dfc0 <at_ble_characteristic_value_set+0x2c>
1000dfb6:	1c30      	adds	r0, r6, #0
1000dfb8:	1c29      	adds	r1, r5, #0
1000dfba:	1c22      	adds	r2, r4, #0
1000dfbc:	4b03      	ldr	r3, [pc, #12]	; (1000dfcc <at_ble_characteristic_value_set+0x38>)
1000dfbe:	4798      	blx	r3
1000dfc0:	bd70      	pop	{r4, r5, r6, pc}
1000dfc2:	46c0      	nop			; (mov r8, r8)
1000dfc4:	1000d8a1 	.word	0x1000d8a1
1000dfc8:	10011107 	.word	0x10011107
1000dfcc:	1000fe81 	.word	0x1000fe81

1000dfd0 <at_ble_characteristic_value_get>:
1000dfd0:	b570      	push	{r4, r5, r6, lr}
1000dfd2:	4b0c      	ldr	r3, [pc, #48]	; (1000e004 <at_ble_characteristic_value_get+0x34>)
1000dfd4:	1c06      	adds	r6, r0, #0
1000dfd6:	1c0c      	adds	r4, r1, #0
1000dfd8:	1c15      	adds	r5, r2, #0
1000dfda:	4798      	blx	r3
1000dfdc:	2800      	cmp	r0, #0
1000dfde:	d00b      	beq.n	1000dff8 <at_ble_characteristic_value_get+0x28>
1000dfe0:	6883      	ldr	r3, [r0, #8]
1000dfe2:	2b00      	cmp	r3, #0
1000dfe4:	d008      	beq.n	1000dff8 <at_ble_characteristic_value_get+0x28>
1000dfe6:	8883      	ldrh	r3, [r0, #4]
1000dfe8:	802b      	strh	r3, [r5, #0]
1000dfea:	8882      	ldrh	r2, [r0, #4]
1000dfec:	6881      	ldr	r1, [r0, #8]
1000dfee:	4b06      	ldr	r3, [pc, #24]	; (1000e008 <at_ble_characteristic_value_get+0x38>)
1000dff0:	1c20      	adds	r0, r4, #0
1000dff2:	4798      	blx	r3
1000dff4:	2000      	movs	r0, #0
1000dff6:	e004      	b.n	1000e002 <at_ble_characteristic_value_get+0x32>
1000dff8:	1c30      	adds	r0, r6, #0
1000dffa:	1c29      	adds	r1, r5, #0
1000dffc:	1c22      	adds	r2, r4, #0
1000dffe:	4b03      	ldr	r3, [pc, #12]	; (1000e00c <at_ble_characteristic_value_get+0x3c>)
1000e000:	4798      	blx	r3
1000e002:	bd70      	pop	{r4, r5, r6, pc}
1000e004:	1000d8a1 	.word	0x1000d8a1
1000e008:	10011107 	.word	0x10011107
1000e00c:	1000ff0d 	.word	0x1000ff0d

1000e010 <at_ble_write_authorize_reply>:
1000e010:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e012:	b085      	sub	sp, #20
1000e014:	1c04      	adds	r4, r0, #0
1000e016:	9101      	str	r1, [sp, #4]
1000e018:	2900      	cmp	r1, #0
1000e01a:	d128      	bne.n	1000e06e <at_ble_write_authorize_reply+0x5e>
1000e01c:	8843      	ldrh	r3, [r0, #2]
1000e01e:	1c27      	adds	r7, r4, #0
1000e020:	9300      	str	r3, [sp, #0]
1000e022:	1c18      	adds	r0, r3, #0
1000e024:	4b16      	ldr	r3, [pc, #88]	; (1000e080 <at_ble_write_authorize_reply+0x70>)
1000e026:	4798      	blx	r3
1000e028:	3708      	adds	r7, #8
1000e02a:	2800      	cmp	r0, #0
1000e02c:	d009      	beq.n	1000e042 <at_ble_write_authorize_reply+0x32>
1000e02e:	6880      	ldr	r0, [r0, #8]
1000e030:	2800      	cmp	r0, #0
1000e032:	d006      	beq.n	1000e042 <at_ble_write_authorize_reply+0x32>
1000e034:	88a3      	ldrh	r3, [r4, #4]
1000e036:	88e2      	ldrh	r2, [r4, #6]
1000e038:	18c0      	adds	r0, r0, r3
1000e03a:	1c39      	adds	r1, r7, #0
1000e03c:	4b11      	ldr	r3, [pc, #68]	; (1000e084 <at_ble_write_authorize_reply+0x74>)
1000e03e:	4798      	blx	r3
1000e040:	e015      	b.n	1000e06e <at_ble_write_authorize_reply+0x5e>
1000e042:	ab02      	add	r3, sp, #8
1000e044:	1d9e      	adds	r6, r3, #6
1000e046:	2300      	movs	r3, #0
1000e048:	4d0f      	ldr	r5, [pc, #60]	; (1000e088 <at_ble_write_authorize_reply+0x78>)
1000e04a:	8033      	strh	r3, [r6, #0]
1000e04c:	6829      	ldr	r1, [r5, #0]
1000e04e:	1c32      	adds	r2, r6, #0
1000e050:	4b0e      	ldr	r3, [pc, #56]	; (1000e08c <at_ble_write_authorize_reply+0x7c>)
1000e052:	9800      	ldr	r0, [sp, #0]
1000e054:	4798      	blx	r3
1000e056:	682b      	ldr	r3, [r5, #0]
1000e058:	88a0      	ldrh	r0, [r4, #4]
1000e05a:	88e2      	ldrh	r2, [r4, #6]
1000e05c:	1818      	adds	r0, r3, r0
1000e05e:	1c39      	adds	r1, r7, #0
1000e060:	4b08      	ldr	r3, [pc, #32]	; (1000e084 <at_ble_write_authorize_reply+0x74>)
1000e062:	4798      	blx	r3
1000e064:	8860      	ldrh	r0, [r4, #2]
1000e066:	8832      	ldrh	r2, [r6, #0]
1000e068:	6829      	ldr	r1, [r5, #0]
1000e06a:	4b09      	ldr	r3, [pc, #36]	; (1000e090 <at_ble_write_authorize_reply+0x80>)
1000e06c:	4798      	blx	r3
1000e06e:	8860      	ldrh	r0, [r4, #2]
1000e070:	8821      	ldrh	r1, [r4, #0]
1000e072:	9a01      	ldr	r2, [sp, #4]
1000e074:	4b07      	ldr	r3, [pc, #28]	; (1000e094 <at_ble_write_authorize_reply+0x84>)
1000e076:	4798      	blx	r3
1000e078:	2000      	movs	r0, #0
1000e07a:	b005      	add	sp, #20
1000e07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e07e:	46c0      	nop			; (mov r8, r8)
1000e080:	1000d8a1 	.word	0x1000d8a1
1000e084:	10011107 	.word	0x10011107
1000e088:	10013800 	.word	0x10013800
1000e08c:	1000dfd1 	.word	0x1000dfd1
1000e090:	1000df95 	.word	0x1000df95
1000e094:	1000f86d 	.word	0x1000f86d

1000e098 <gatts_handle_read_req>:
1000e098:	b538      	push	{r3, r4, r5, lr}
1000e09a:	1c0c      	adds	r4, r1, #0
1000e09c:	4b07      	ldr	r3, [pc, #28]	; (1000e0bc <gatts_handle_read_req+0x24>)
1000e09e:	4798      	blx	r3
1000e0a0:	8865      	ldrh	r5, [r4, #2]
1000e0a2:	4b07      	ldr	r3, [pc, #28]	; (1000e0c0 <gatts_handle_read_req+0x28>)
1000e0a4:	1c28      	adds	r0, r5, #0
1000e0a6:	4798      	blx	r3
1000e0a8:	7883      	ldrb	r3, [r0, #2]
1000e0aa:	2026      	movs	r0, #38	; 0x26
1000e0ac:	07db      	lsls	r3, r3, #31
1000e0ae:	d404      	bmi.n	1000e0ba <gatts_handle_read_req+0x22>
1000e0b0:	8820      	ldrh	r0, [r4, #0]
1000e0b2:	1c29      	adds	r1, r5, #0
1000e0b4:	4b03      	ldr	r3, [pc, #12]	; (1000e0c4 <gatts_handle_read_req+0x2c>)
1000e0b6:	4798      	blx	r3
1000e0b8:	203b      	movs	r0, #59	; 0x3b
1000e0ba:	bd38      	pop	{r3, r4, r5, pc}
1000e0bc:	1000f7b1 	.word	0x1000f7b1
1000e0c0:	1000d8a1 	.word	0x1000d8a1
1000e0c4:	1000db09 	.word	0x1000db09

1000e0c8 <gatts_handle_att_info_req>:
1000e0c8:	b538      	push	{r3, r4, r5, lr}
1000e0ca:	1c0d      	adds	r5, r1, #0
1000e0cc:	4b0a      	ldr	r3, [pc, #40]	; (1000e0f8 <gatts_handle_att_info_req+0x30>)
1000e0ce:	1c14      	adds	r4, r2, #0
1000e0d0:	4798      	blx	r3
1000e0d2:	882d      	ldrh	r5, [r5, #0]
1000e0d4:	4b09      	ldr	r3, [pc, #36]	; (1000e0fc <gatts_handle_att_info_req+0x34>)
1000e0d6:	1c28      	adds	r0, r5, #0
1000e0d8:	4798      	blx	r3
1000e0da:	0a22      	lsrs	r2, r4, #8
1000e0dc:	1c03      	adds	r3, r0, #0
1000e0de:	4c08      	ldr	r4, [pc, #32]	; (1000e100 <gatts_handle_att_info_req+0x38>)
1000e0e0:	b291      	uxth	r1, r2
1000e0e2:	2800      	cmp	r0, #0
1000e0e4:	d003      	beq.n	1000e0ee <gatts_handle_att_info_req+0x26>
1000e0e6:	8882      	ldrh	r2, [r0, #4]
1000e0e8:	2300      	movs	r3, #0
1000e0ea:	1c28      	adds	r0, r5, #0
1000e0ec:	e001      	b.n	1000e0f2 <gatts_handle_att_info_req+0x2a>
1000e0ee:	1c28      	adds	r0, r5, #0
1000e0f0:	2201      	movs	r2, #1
1000e0f2:	47a0      	blx	r4
1000e0f4:	203b      	movs	r0, #59	; 0x3b
1000e0f6:	bd38      	pop	{r3, r4, r5, pc}
1000e0f8:	1000f7f5 	.word	0x1000f7f5
1000e0fc:	1000d8a1 	.word	0x1000d8a1
1000e100:	1000f8b1 	.word	0x1000f8b1

1000e104 <gatts_handle_write_req>:
1000e104:	b510      	push	{r4, lr}
1000e106:	1c14      	adds	r4, r2, #0
1000e108:	4b07      	ldr	r3, [pc, #28]	; (1000e128 <gatts_handle_write_req+0x24>)
1000e10a:	4798      	blx	r3
1000e10c:	4b07      	ldr	r3, [pc, #28]	; (1000e12c <gatts_handle_write_req+0x28>)
1000e10e:	8860      	ldrh	r0, [r4, #2]
1000e110:	4798      	blx	r3
1000e112:	2302      	movs	r3, #2
1000e114:	7881      	ldrb	r1, [r0, #2]
1000e116:	2022      	movs	r0, #34	; 0x22
1000e118:	4019      	ands	r1, r3
1000e11a:	d103      	bne.n	1000e124 <gatts_handle_write_req+0x20>
1000e11c:	1c20      	adds	r0, r4, #0
1000e11e:	4b04      	ldr	r3, [pc, #16]	; (1000e130 <gatts_handle_write_req+0x2c>)
1000e120:	4798      	blx	r3
1000e122:	201f      	movs	r0, #31
1000e124:	bd10      	pop	{r4, pc}
1000e126:	46c0      	nop			; (mov r8, r8)
1000e128:	1000f7bd 	.word	0x1000f7bd
1000e12c:	1000d8a1 	.word	0x1000d8a1
1000e130:	1000e011 	.word	0x1000e011

1000e134 <at_ble_notification_send>:
1000e134:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e136:	4d17      	ldr	r5, [pc, #92]	; (1000e194 <at_ble_notification_send+0x60>)
1000e138:	4c17      	ldr	r4, [pc, #92]	; (1000e198 <at_ble_notification_send+0x64>)
1000e13a:	682a      	ldr	r2, [r5, #0]
1000e13c:	44a5      	add	sp, r4
1000e13e:	23d2      	movs	r3, #210	; 0xd2
1000e140:	2a04      	cmp	r2, #4
1000e142:	d822      	bhi.n	1000e18a <at_ble_notification_send+0x56>
1000e144:	1c06      	adds	r6, r0, #0
1000e146:	4b15      	ldr	r3, [pc, #84]	; (1000e19c <at_ble_notification_send+0x68>)
1000e148:	1c08      	adds	r0, r1, #0
1000e14a:	1c0c      	adds	r4, r1, #0
1000e14c:	4798      	blx	r3
1000e14e:	2800      	cmp	r0, #0
1000e150:	d008      	beq.n	1000e164 <at_ble_notification_send+0x30>
1000e152:	6883      	ldr	r3, [r0, #8]
1000e154:	2b00      	cmp	r3, #0
1000e156:	d005      	beq.n	1000e164 <at_ble_notification_send+0x30>
1000e158:	8882      	ldrh	r2, [r0, #4]
1000e15a:	1c21      	adds	r1, r4, #0
1000e15c:	9200      	str	r2, [sp, #0]
1000e15e:	2012      	movs	r0, #18
1000e160:	1c32      	adds	r2, r6, #0
1000e162:	e00c      	b.n	1000e17e <at_ble_notification_send+0x4a>
1000e164:	270e      	movs	r7, #14
1000e166:	446f      	add	r7, sp
1000e168:	1c39      	adds	r1, r7, #0
1000e16a:	aa04      	add	r2, sp, #16
1000e16c:	4b0c      	ldr	r3, [pc, #48]	; (1000e1a0 <at_ble_notification_send+0x6c>)
1000e16e:	1c20      	adds	r0, r4, #0
1000e170:	4798      	blx	r3
1000e172:	2012      	movs	r0, #18
1000e174:	1c21      	adds	r1, r4, #0
1000e176:	1c32      	adds	r2, r6, #0
1000e178:	883b      	ldrh	r3, [r7, #0]
1000e17a:	9300      	str	r3, [sp, #0]
1000e17c:	ab04      	add	r3, sp, #16
1000e17e:	4c09      	ldr	r4, [pc, #36]	; (1000e1a4 <at_ble_notification_send+0x70>)
1000e180:	47a0      	blx	r4
1000e182:	682b      	ldr	r3, [r5, #0]
1000e184:	3301      	adds	r3, #1
1000e186:	602b      	str	r3, [r5, #0]
1000e188:	2300      	movs	r3, #0
1000e18a:	1c18      	adds	r0, r3, #0
1000e18c:	2385      	movs	r3, #133	; 0x85
1000e18e:	009b      	lsls	r3, r3, #2
1000e190:	449d      	add	sp, r3
1000e192:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e194:	10015324 	.word	0x10015324
1000e198:	fffffdec 	.word	0xfffffdec
1000e19c:	1000d8a1 	.word	0x1000d8a1
1000e1a0:	1000ff0d 	.word	0x1000ff0d
1000e1a4:	1000f8f9 	.word	0x1000f8f9

1000e1a8 <init_l2cc_task_module>:
1000e1a8:	220a      	movs	r2, #10
1000e1aa:	4b01      	ldr	r3, [pc, #4]	; (1000e1b0 <init_l2cc_task_module+0x8>)
1000e1ac:	701a      	strb	r2, [r3, #0]
1000e1ae:	4770      	bx	lr
1000e1b0:	100137fd 	.word	0x100137fd

1000e1b4 <l2cc_data_send_rsp_handler>:
1000e1b4:	b510      	push	{r4, lr}
1000e1b6:	7802      	ldrb	r2, [r0, #0]
1000e1b8:	700a      	strb	r2, [r1, #0]
1000e1ba:	7883      	ldrb	r3, [r0, #2]
1000e1bc:	7844      	ldrb	r4, [r0, #1]
1000e1be:	021b      	lsls	r3, r3, #8
1000e1c0:	4323      	orrs	r3, r4
1000e1c2:	804b      	strh	r3, [r1, #2]
1000e1c4:	7903      	ldrb	r3, [r0, #4]
1000e1c6:	78c0      	ldrb	r0, [r0, #3]
1000e1c8:	021b      	lsls	r3, r3, #8
1000e1ca:	4303      	orrs	r3, r0
1000e1cc:	808b      	strh	r3, [r1, #4]
1000e1ce:	2a00      	cmp	r2, #0
1000e1d0:	d103      	bne.n	1000e1da <l2cc_data_send_rsp_handler+0x26>
1000e1d2:	4a02      	ldr	r2, [pc, #8]	; (1000e1dc <l2cc_data_send_rsp_handler+0x28>)
1000e1d4:	7813      	ldrb	r3, [r2, #0]
1000e1d6:	3301      	adds	r3, #1
1000e1d8:	7013      	strb	r3, [r2, #0]
1000e1da:	bd10      	pop	{r4, pc}
1000e1dc:	100137fd 	.word	0x100137fd

1000e1e0 <l2cc_data_received_handler>:
1000e1e0:	b508      	push	{r3, lr}
1000e1e2:	1c03      	adds	r3, r0, #0
1000e1e4:	7842      	ldrb	r2, [r0, #1]
1000e1e6:	7800      	ldrb	r0, [r0, #0]
1000e1e8:	0212      	lsls	r2, r2, #8
1000e1ea:	4302      	orrs	r2, r0
1000e1ec:	800a      	strh	r2, [r1, #0]
1000e1ee:	78da      	ldrb	r2, [r3, #3]
1000e1f0:	7898      	ldrb	r0, [r3, #2]
1000e1f2:	0212      	lsls	r2, r2, #8
1000e1f4:	4302      	orrs	r2, r0
1000e1f6:	804a      	strh	r2, [r1, #2]
1000e1f8:	795a      	ldrb	r2, [r3, #5]
1000e1fa:	7918      	ldrb	r0, [r3, #4]
1000e1fc:	0212      	lsls	r2, r2, #8
1000e1fe:	4302      	orrs	r2, r0
1000e200:	808a      	strh	r2, [r1, #4]
1000e202:	1d88      	adds	r0, r1, #6
1000e204:	1d99      	adds	r1, r3, #6
1000e206:	4b01      	ldr	r3, [pc, #4]	; (1000e20c <l2cc_data_received_handler+0x2c>)
1000e208:	4798      	blx	r3
1000e20a:	bd08      	pop	{r3, pc}
1000e20c:	10011107 	.word	0x10011107

1000e210 <at_ble_authenticate>:
1000e210:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e212:	1c0c      	adds	r4, r1, #0
1000e214:	211f      	movs	r1, #31
1000e216:	b08b      	sub	sp, #44	; 0x2c
1000e218:	9307      	str	r3, [sp, #28]
1000e21a:	ab02      	add	r3, sp, #8
1000e21c:	18c9      	adds	r1, r1, r3
1000e21e:	230f      	movs	r3, #15
1000e220:	700b      	strb	r3, [r1, #0]
1000e222:	4b40      	ldr	r3, [pc, #256]	; (1000e324 <at_ble_authenticate+0x114>)
1000e224:	1c05      	adds	r5, r0, #0
1000e226:	1c16      	adds	r6, r2, #0
1000e228:	4798      	blx	r3
1000e22a:	1c07      	adds	r7, r0, #0
1000e22c:	2001      	movs	r0, #1
1000e22e:	2f07      	cmp	r7, #7
1000e230:	d875      	bhi.n	1000e31e <at_ble_authenticate+0x10e>
1000e232:	2c00      	cmp	r4, #0
1000e234:	d113      	bne.n	1000e25e <at_ble_authenticate+0x4e>
1000e236:	2312      	movs	r3, #18
1000e238:	435f      	muls	r7, r3
1000e23a:	4b3b      	ldr	r3, [pc, #236]	; (1000e328 <at_ble_authenticate+0x118>)
1000e23c:	5cfb      	ldrb	r3, [r7, r3]
1000e23e:	4283      	cmp	r3, r0
1000e240:	d001      	beq.n	1000e246 <at_ble_authenticate+0x36>
1000e242:	20cf      	movs	r0, #207	; 0xcf
1000e244:	e06b      	b.n	1000e31e <at_ble_authenticate+0x10e>
1000e246:	9504      	str	r5, [sp, #16]
1000e248:	9400      	str	r4, [sp, #0]
1000e24a:	9401      	str	r4, [sp, #4]
1000e24c:	9402      	str	r4, [sp, #8]
1000e24e:	9403      	str	r4, [sp, #12]
1000e250:	1c20      	adds	r0, r4, #0
1000e252:	1c21      	adds	r1, r4, #0
1000e254:	1c22      	adds	r2, r4, #0
1000e256:	1c23      	adds	r3, r4, #0
1000e258:	4d34      	ldr	r5, [pc, #208]	; (1000e32c <at_ble_authenticate+0x11c>)
1000e25a:	47a8      	blx	r5
1000e25c:	e05e      	b.n	1000e31c <at_ble_authenticate+0x10c>
1000e25e:	7922      	ldrb	r2, [r4, #4]
1000e260:	2a06      	cmp	r2, #6
1000e262:	d9ee      	bls.n	1000e242 <at_ble_authenticate+0x32>
1000e264:	7963      	ldrb	r3, [r4, #5]
1000e266:	2b10      	cmp	r3, #16
1000e268:	d8eb      	bhi.n	1000e242 <at_ble_authenticate+0x32>
1000e26a:	429a      	cmp	r2, r3
1000e26c:	d8e9      	bhi.n	1000e242 <at_ble_authenticate+0x32>
1000e26e:	7a23      	ldrb	r3, [r4, #8]
1000e270:	2b04      	cmp	r3, #4
1000e272:	d8e6      	bhi.n	1000e242 <at_ble_authenticate+0x32>
1000e274:	79a3      	ldrb	r3, [r4, #6]
1000e276:	2b07      	cmp	r3, #7
1000e278:	d8e3      	bhi.n	1000e242 <at_ble_authenticate+0x32>
1000e27a:	79e3      	ldrb	r3, [r4, #7]
1000e27c:	2b07      	cmp	r3, #7
1000e27e:	d8e0      	bhi.n	1000e242 <at_ble_authenticate+0x32>
1000e280:	78a3      	ldrb	r3, [r4, #2]
1000e282:	2b00      	cmp	r3, #0
1000e284:	d006      	beq.n	1000e294 <at_ble_authenticate+0x84>
1000e286:	2e00      	cmp	r6, #0
1000e288:	d0db      	beq.n	1000e242 <at_ble_authenticate+0x32>
1000e28a:	4829      	ldr	r0, [pc, #164]	; (1000e330 <at_ble_authenticate+0x120>)
1000e28c:	1c31      	adds	r1, r6, #0
1000e28e:	221c      	movs	r2, #28
1000e290:	4b28      	ldr	r3, [pc, #160]	; (1000e334 <at_ble_authenticate+0x124>)
1000e292:	4798      	blx	r3
1000e294:	9b07      	ldr	r3, [sp, #28]
1000e296:	2b00      	cmp	r3, #0
1000e298:	d005      	beq.n	1000e2a6 <at_ble_authenticate+0x96>
1000e29a:	4827      	ldr	r0, [pc, #156]	; (1000e338 <at_ble_authenticate+0x128>)
1000e29c:	1c19      	adds	r1, r3, #0
1000e29e:	309a      	adds	r0, #154	; 0x9a
1000e2a0:	2210      	movs	r2, #16
1000e2a2:	4b24      	ldr	r3, [pc, #144]	; (1000e334 <at_ble_authenticate+0x124>)
1000e2a4:	4798      	blx	r3
1000e2a6:	7863      	ldrb	r3, [r4, #1]
1000e2a8:	78a2      	ldrb	r2, [r4, #2]
1000e2aa:	009b      	lsls	r3, r3, #2
1000e2ac:	4313      	orrs	r3, r2
1000e2ae:	2212      	movs	r2, #18
1000e2b0:	4357      	muls	r7, r2
1000e2b2:	4a1d      	ldr	r2, [pc, #116]	; (1000e328 <at_ble_authenticate+0x118>)
1000e2b4:	b2db      	uxtb	r3, r3
1000e2b6:	5cba      	ldrb	r2, [r7, r2]
1000e2b8:	2a00      	cmp	r2, #0
1000e2ba:	d116      	bne.n	1000e2ea <at_ble_authenticate+0xda>
1000e2bc:	79a0      	ldrb	r0, [r4, #6]
1000e2be:	0742      	lsls	r2, r0, #29
1000e2c0:	d502      	bpl.n	1000e2c8 <at_ble_authenticate+0xb8>
1000e2c2:	9a07      	ldr	r2, [sp, #28]
1000e2c4:	2a00      	cmp	r2, #0
1000e2c6:	d0bc      	beq.n	1000e242 <at_ble_authenticate+0x32>
1000e2c8:	07c2      	lsls	r2, r0, #31
1000e2ca:	d501      	bpl.n	1000e2d0 <at_ble_authenticate+0xc0>
1000e2cc:	2e00      	cmp	r6, #0
1000e2ce:	d0b8      	beq.n	1000e242 <at_ble_authenticate+0x32>
1000e2d0:	7966      	ldrb	r6, [r4, #5]
1000e2d2:	7821      	ldrb	r1, [r4, #0]
1000e2d4:	78e2      	ldrb	r2, [r4, #3]
1000e2d6:	9600      	str	r6, [sp, #0]
1000e2d8:	9001      	str	r0, [sp, #4]
1000e2da:	79e0      	ldrb	r0, [r4, #7]
1000e2dc:	9002      	str	r0, [sp, #8]
1000e2de:	7a20      	ldrb	r0, [r4, #8]
1000e2e0:	4c16      	ldr	r4, [pc, #88]	; (1000e33c <at_ble_authenticate+0x12c>)
1000e2e2:	9003      	str	r0, [sp, #12]
1000e2e4:	1c28      	adds	r0, r5, #0
1000e2e6:	47a0      	blx	r4
1000e2e8:	e018      	b.n	1000e31c <at_ble_authenticate+0x10c>
1000e2ea:	2a01      	cmp	r2, #1
1000e2ec:	d1a9      	bne.n	1000e242 <at_ble_authenticate+0x32>
1000e2ee:	79e0      	ldrb	r0, [r4, #7]
1000e2f0:	0742      	lsls	r2, r0, #29
1000e2f2:	d502      	bpl.n	1000e2fa <at_ble_authenticate+0xea>
1000e2f4:	9a07      	ldr	r2, [sp, #28]
1000e2f6:	2a00      	cmp	r2, #0
1000e2f8:	d0a3      	beq.n	1000e242 <at_ble_authenticate+0x32>
1000e2fa:	07c2      	lsls	r2, r0, #31
1000e2fc:	d501      	bpl.n	1000e302 <at_ble_authenticate+0xf2>
1000e2fe:	2e00      	cmp	r6, #0
1000e300:	d09f      	beq.n	1000e242 <at_ble_authenticate+0x32>
1000e302:	7966      	ldrb	r6, [r4, #5]
1000e304:	7821      	ldrb	r1, [r4, #0]
1000e306:	78e2      	ldrb	r2, [r4, #3]
1000e308:	9600      	str	r6, [sp, #0]
1000e30a:	79a6      	ldrb	r6, [r4, #6]
1000e30c:	9002      	str	r0, [sp, #8]
1000e30e:	9601      	str	r6, [sp, #4]
1000e310:	7a20      	ldrb	r0, [r4, #8]
1000e312:	9504      	str	r5, [sp, #16]
1000e314:	9003      	str	r0, [sp, #12]
1000e316:	4c05      	ldr	r4, [pc, #20]	; (1000e32c <at_ble_authenticate+0x11c>)
1000e318:	2001      	movs	r0, #1
1000e31a:	47a0      	blx	r4
1000e31c:	2000      	movs	r0, #0
1000e31e:	b00b      	add	sp, #44	; 0x2c
1000e320:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e322:	46c0      	nop			; (mov r8, r8)
1000e324:	1000e711 	.word	0x1000e711
1000e328:	10017c66 	.word	0x10017c66
1000e32c:	1000ec81 	.word	0x1000ec81
1000e330:	10017d74 	.word	0x10017d74
1000e334:	10011107 	.word	0x10011107
1000e338:	10017cf6 	.word	0x10017cf6
1000e33c:	1000ea61 	.word	0x1000ea61

1000e340 <at_ble_pair_key_reply>:
1000e340:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e342:	b085      	sub	sp, #20
1000e344:	1c05      	adds	r5, r0, #0
1000e346:	1c0c      	adds	r4, r1, #0
1000e348:	1c16      	adds	r6, r2, #0
1000e34a:	2100      	movs	r1, #0
1000e34c:	4668      	mov	r0, sp
1000e34e:	2210      	movs	r2, #16
1000e350:	4b18      	ldr	r3, [pc, #96]	; (1000e3b4 <at_ble_pair_key_reply+0x74>)
1000e352:	4798      	blx	r3
1000e354:	2101      	movs	r1, #1
1000e356:	2e00      	cmp	r6, #0
1000e358:	d101      	bne.n	1000e35e <at_ble_pair_key_reply+0x1e>
1000e35a:	1c31      	adds	r1, r6, #0
1000e35c:	466e      	mov	r6, sp
1000e35e:	2c00      	cmp	r4, #0
1000e360:	d116      	bne.n	1000e390 <at_ble_pair_key_reply+0x50>
1000e362:	2701      	movs	r7, #1
1000e364:	1c23      	adds	r3, r4, #0
1000e366:	1d70      	adds	r0, r6, #5
1000e368:	3e01      	subs	r6, #1
1000e36a:	7802      	ldrb	r2, [r0, #0]
1000e36c:	3801      	subs	r0, #1
1000e36e:	3a30      	subs	r2, #48	; 0x30
1000e370:	437a      	muls	r2, r7
1000e372:	189b      	adds	r3, r3, r2
1000e374:	220a      	movs	r2, #10
1000e376:	4357      	muls	r7, r2
1000e378:	42b0      	cmp	r0, r6
1000e37a:	d1f6      	bne.n	1000e36a <at_ble_pair_key_reply+0x2a>
1000e37c:	466a      	mov	r2, sp
1000e37e:	4668      	mov	r0, sp
1000e380:	7013      	strb	r3, [r2, #0]
1000e382:	0a1a      	lsrs	r2, r3, #8
1000e384:	7042      	strb	r2, [r0, #1]
1000e386:	0c1a      	lsrs	r2, r3, #16
1000e388:	0e1b      	lsrs	r3, r3, #24
1000e38a:	7082      	strb	r2, [r0, #2]
1000e38c:	70c3      	strb	r3, [r0, #3]
1000e38e:	e009      	b.n	1000e3a4 <at_ble_pair_key_reply+0x64>
1000e390:	20cf      	movs	r0, #207	; 0xcf
1000e392:	2c01      	cmp	r4, #1
1000e394:	d10c      	bne.n	1000e3b0 <at_ble_pair_key_reply+0x70>
1000e396:	2300      	movs	r3, #0
1000e398:	4668      	mov	r0, sp
1000e39a:	5cf2      	ldrb	r2, [r6, r3]
1000e39c:	54c2      	strb	r2, [r0, r3]
1000e39e:	3301      	adds	r3, #1
1000e3a0:	2b10      	cmp	r3, #16
1000e3a2:	d1f9      	bne.n	1000e398 <at_ble_pair_key_reply+0x58>
1000e3a4:	2004      	movs	r0, #4
1000e3a6:	466a      	mov	r2, sp
1000e3a8:	1c2b      	adds	r3, r5, #0
1000e3aa:	4c03      	ldr	r4, [pc, #12]	; (1000e3b8 <at_ble_pair_key_reply+0x78>)
1000e3ac:	47a0      	blx	r4
1000e3ae:	2000      	movs	r0, #0
1000e3b0:	b005      	add	sp, #20
1000e3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e3b4:	10011119 	.word	0x10011119
1000e3b8:	1000ecfd 	.word	0x1000ecfd

1000e3bc <at_ble_send_slave_sec_request>:
1000e3bc:	b570      	push	{r4, r5, r6, lr}
1000e3be:	4b0c      	ldr	r3, [pc, #48]	; (1000e3f0 <at_ble_send_slave_sec_request+0x34>)
1000e3c0:	1c0e      	adds	r6, r1, #0
1000e3c2:	2100      	movs	r1, #0
1000e3c4:	1c05      	adds	r5, r0, #0
1000e3c6:	1c14      	adds	r4, r2, #0
1000e3c8:	4798      	blx	r3
1000e3ca:	2301      	movs	r3, #1
1000e3cc:	2807      	cmp	r0, #7
1000e3ce:	d80d      	bhi.n	1000e3ec <at_ble_send_slave_sec_request+0x30>
1000e3d0:	3311      	adds	r3, #17
1000e3d2:	4358      	muls	r0, r3
1000e3d4:	4b07      	ldr	r3, [pc, #28]	; (1000e3f4 <at_ble_send_slave_sec_request+0x38>)
1000e3d6:	5cc2      	ldrb	r2, [r0, r3]
1000e3d8:	23e0      	movs	r3, #224	; 0xe0
1000e3da:	2a01      	cmp	r2, #1
1000e3dc:	d106      	bne.n	1000e3ec <at_ble_send_slave_sec_request+0x30>
1000e3de:	00b1      	lsls	r1, r6, #2
1000e3e0:	430c      	orrs	r4, r1
1000e3e2:	4b05      	ldr	r3, [pc, #20]	; (1000e3f8 <at_ble_send_slave_sec_request+0x3c>)
1000e3e4:	b2e1      	uxtb	r1, r4
1000e3e6:	1c28      	adds	r0, r5, #0
1000e3e8:	4798      	blx	r3
1000e3ea:	2300      	movs	r3, #0
1000e3ec:	1c18      	adds	r0, r3, #0
1000e3ee:	bd70      	pop	{r4, r5, r6, pc}
1000e3f0:	1000e711 	.word	0x1000e711
1000e3f4:	10017c66 	.word	0x10017c66
1000e3f8:	1000ed4d 	.word	0x1000ed4d

1000e3fc <at_ble_encryption_start>:
1000e3fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e3fe:	23cf      	movs	r3, #207	; 0xcf
1000e400:	2900      	cmp	r1, #0
1000e402:	d02b      	beq.n	1000e45c <at_ble_encryption_start+0x60>
1000e404:	2a05      	cmp	r2, #5
1000e406:	d829      	bhi.n	1000e45c <at_ble_encryption_start+0x60>
1000e408:	2701      	movs	r7, #1
1000e40a:	1c3d      	adds	r5, r7, #0
1000e40c:	2433      	movs	r4, #51	; 0x33
1000e40e:	4095      	lsls	r5, r2
1000e410:	4225      	tst	r5, r4
1000e412:	d023      	beq.n	1000e45c <at_ble_encryption_start+0x60>
1000e414:	7e8c      	ldrb	r4, [r1, #26]
1000e416:	3c07      	subs	r4, #7
1000e418:	2c09      	cmp	r4, #9
1000e41a:	d81f      	bhi.n	1000e45c <at_ble_encryption_start+0x60>
1000e41c:	4b10      	ldr	r3, [pc, #64]	; (1000e460 <at_ble_encryption_start+0x64>)
1000e41e:	1c0c      	adds	r4, r1, #0
1000e420:	2100      	movs	r1, #0
1000e422:	1c15      	adds	r5, r2, #0
1000e424:	1c06      	adds	r6, r0, #0
1000e426:	4798      	blx	r3
1000e428:	1c3b      	adds	r3, r7, #0
1000e42a:	2807      	cmp	r0, #7
1000e42c:	d816      	bhi.n	1000e45c <at_ble_encryption_start+0x60>
1000e42e:	2312      	movs	r3, #18
1000e430:	4358      	muls	r0, r3
1000e432:	4b0c      	ldr	r3, [pc, #48]	; (1000e464 <at_ble_encryption_start+0x68>)
1000e434:	5cc7      	ldrb	r7, [r0, r3]
1000e436:	23e0      	movs	r3, #224	; 0xe0
1000e438:	2f00      	cmp	r7, #0
1000e43a:	d10f      	bne.n	1000e45c <at_ble_encryption_start+0x60>
1000e43c:	1c21      	adds	r1, r4, #0
1000e43e:	221c      	movs	r2, #28
1000e440:	4b09      	ldr	r3, [pc, #36]	; (1000e468 <at_ble_encryption_start+0x6c>)
1000e442:	480a      	ldr	r0, [pc, #40]	; (1000e46c <at_ble_encryption_start+0x70>)
1000e444:	4798      	blx	r3
1000e446:	1c23      	adds	r3, r4, #0
1000e448:	7ea1      	ldrb	r1, [r4, #26]
1000e44a:	8a22      	ldrh	r2, [r4, #16]
1000e44c:	3312      	adds	r3, #18
1000e44e:	9100      	str	r1, [sp, #0]
1000e450:	9501      	str	r5, [sp, #4]
1000e452:	1c21      	adds	r1, r4, #0
1000e454:	1c30      	adds	r0, r6, #0
1000e456:	4c06      	ldr	r4, [pc, #24]	; (1000e470 <at_ble_encryption_start+0x74>)
1000e458:	47a0      	blx	r4
1000e45a:	1c3b      	adds	r3, r7, #0
1000e45c:	1c18      	adds	r0, r3, #0
1000e45e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e460:	1000e711 	.word	0x1000e711
1000e464:	10017c66 	.word	0x10017c66
1000e468:	10011107 	.word	0x10011107
1000e46c:	10017d74 	.word	0x10017d74
1000e470:	1000ed8d 	.word	0x1000ed8d

1000e474 <at_ble_encryption_request_reply>:
1000e474:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e476:	24cf      	movs	r4, #207	; 0xcf
1000e478:	2b00      	cmp	r3, #0
1000e47a:	d011      	beq.n	1000e4a0 <at_ble_encryption_request_reply+0x2c>
1000e47c:	2a00      	cmp	r2, #0
1000e47e:	d00a      	beq.n	1000e496 <at_ble_encryption_request_reply+0x22>
1000e480:	2905      	cmp	r1, #5
1000e482:	d80d      	bhi.n	1000e4a0 <at_ble_encryption_request_reply+0x2c>
1000e484:	2501      	movs	r5, #1
1000e486:	2633      	movs	r6, #51	; 0x33
1000e488:	408d      	lsls	r5, r1
1000e48a:	4235      	tst	r5, r6
1000e48c:	d008      	beq.n	1000e4a0 <at_ble_encryption_request_reply+0x2c>
1000e48e:	7e9d      	ldrb	r5, [r3, #26]
1000e490:	3d07      	subs	r5, #7
1000e492:	2d09      	cmp	r5, #9
1000e494:	d804      	bhi.n	1000e4a0 <at_ble_encryption_request_reply+0x2c>
1000e496:	7e9c      	ldrb	r4, [r3, #26]
1000e498:	9400      	str	r4, [sp, #0]
1000e49a:	4c02      	ldr	r4, [pc, #8]	; (1000e4a4 <at_ble_encryption_request_reply+0x30>)
1000e49c:	47a0      	blx	r4
1000e49e:	2400      	movs	r4, #0
1000e4a0:	1c20      	adds	r0, r4, #0
1000e4a2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e4a4:	1000ee49 	.word	0x1000ee49

1000e4a8 <rx_callback>:
1000e4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e4aa:	8883      	ldrh	r3, [r0, #4]
1000e4ac:	1c01      	adds	r1, r0, #0
1000e4ae:	9301      	str	r3, [sp, #4]
1000e4b0:	88c5      	ldrh	r5, [r0, #6]
1000e4b2:	8806      	ldrh	r6, [r0, #0]
1000e4b4:	2d00      	cmp	r5, #0
1000e4b6:	d10f      	bne.n	1000e4d8 <rx_callback+0x30>
1000e4b8:	1c19      	adds	r1, r3, #0
1000e4ba:	1c30      	adds	r0, r6, #0
1000e4bc:	4b19      	ldr	r3, [pc, #100]	; (1000e524 <rx_callback+0x7c>)
1000e4be:	1c2a      	adds	r2, r5, #0
1000e4c0:	4798      	blx	r3
1000e4c2:	1e03      	subs	r3, r0, #0
1000e4c4:	d105      	bne.n	1000e4d2 <rx_callback+0x2a>
1000e4c6:	1c30      	adds	r0, r6, #0
1000e4c8:	9901      	ldr	r1, [sp, #4]
1000e4ca:	1c1a      	adds	r2, r3, #0
1000e4cc:	4c16      	ldr	r4, [pc, #88]	; (1000e528 <rx_callback+0x80>)
1000e4ce:	47a0      	blx	r4
1000e4d0:	e027      	b.n	1000e522 <rx_callback+0x7a>
1000e4d2:	4b16      	ldr	r3, [pc, #88]	; (1000e52c <rx_callback+0x84>)
1000e4d4:	4798      	blx	r3
1000e4d6:	e024      	b.n	1000e522 <rx_callback+0x7a>
1000e4d8:	4c15      	ldr	r4, [pc, #84]	; (1000e530 <rx_callback+0x88>)
1000e4da:	4a16      	ldr	r2, [pc, #88]	; (1000e534 <rx_callback+0x8c>)
1000e4dc:	6823      	ldr	r3, [r4, #0]
1000e4de:	6812      	ldr	r2, [r2, #0]
1000e4e0:	18eb      	adds	r3, r5, r3
1000e4e2:	4293      	cmp	r3, r2
1000e4e4:	d901      	bls.n	1000e4ea <rx_callback+0x42>
1000e4e6:	2300      	movs	r3, #0
1000e4e8:	6023      	str	r3, [r4, #0]
1000e4ea:	4f13      	ldr	r7, [pc, #76]	; (1000e538 <rx_callback+0x90>)
1000e4ec:	6822      	ldr	r2, [r4, #0]
1000e4ee:	683b      	ldr	r3, [r7, #0]
1000e4f0:	3108      	adds	r1, #8
1000e4f2:	1898      	adds	r0, r3, r2
1000e4f4:	1c2a      	adds	r2, r5, #0
1000e4f6:	4b11      	ldr	r3, [pc, #68]	; (1000e53c <rx_callback+0x94>)
1000e4f8:	4798      	blx	r3
1000e4fa:	683b      	ldr	r3, [r7, #0]
1000e4fc:	6822      	ldr	r2, [r4, #0]
1000e4fe:	1c30      	adds	r0, r6, #0
1000e500:	189a      	adds	r2, r3, r2
1000e502:	9901      	ldr	r1, [sp, #4]
1000e504:	4b07      	ldr	r3, [pc, #28]	; (1000e524 <rx_callback+0x7c>)
1000e506:	4798      	blx	r3
1000e508:	2800      	cmp	r0, #0
1000e50a:	d1e2      	bne.n	1000e4d2 <rx_callback+0x2a>
1000e50c:	6823      	ldr	r3, [r4, #0]
1000e50e:	683a      	ldr	r2, [r7, #0]
1000e510:	1c30      	adds	r0, r6, #0
1000e512:	18d2      	adds	r2, r2, r3
1000e514:	9901      	ldr	r1, [sp, #4]
1000e516:	1c2b      	adds	r3, r5, #0
1000e518:	4e03      	ldr	r6, [pc, #12]	; (1000e528 <rx_callback+0x80>)
1000e51a:	47b0      	blx	r6
1000e51c:	6823      	ldr	r3, [r4, #0]
1000e51e:	18ed      	adds	r5, r5, r3
1000e520:	6025      	str	r5, [r4, #0]
1000e522:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e524:	1000ca55 	.word	0x1000ca55
1000e528:	1000c9cd 	.word	0x1000c9cd
1000e52c:	1000c50d 	.word	0x1000c50d
1000e530:	10017dd0 	.word	0x10017dd0
1000e534:	100152a0 	.word	0x100152a0
1000e538:	1001529c 	.word	0x1001529c
1000e53c:	10011107 	.word	0x10011107

1000e540 <interface_send>:
1000e540:	b508      	push	{r3, lr}
1000e542:	4b02      	ldr	r3, [pc, #8]	; (1000e54c <interface_send+0xc>)
1000e544:	4798      	blx	r3
1000e546:	2000      	movs	r0, #0
1000e548:	bd08      	pop	{r3, pc}
1000e54a:	46c0      	nop			; (mov r8, r8)
1000e54c:	1000c205 	.word	0x1000c205

1000e550 <interface_init>:
1000e550:	2280      	movs	r2, #128	; 0x80
1000e552:	b510      	push	{r4, lr}
1000e554:	2100      	movs	r1, #0
1000e556:	1c04      	adds	r4, r0, #0
1000e558:	0092      	lsls	r2, r2, #2
1000e55a:	4b08      	ldr	r3, [pc, #32]	; (1000e57c <interface_init+0x2c>)
1000e55c:	4808      	ldr	r0, [pc, #32]	; (1000e580 <interface_init+0x30>)
1000e55e:	4798      	blx	r3
1000e560:	2200      	movs	r2, #0
1000e562:	4b08      	ldr	r3, [pc, #32]	; (1000e584 <interface_init+0x34>)
1000e564:	601a      	str	r2, [r3, #0]
1000e566:	4a08      	ldr	r2, [pc, #32]	; (1000e588 <interface_init+0x38>)
1000e568:	4b08      	ldr	r3, [pc, #32]	; (1000e58c <interface_init+0x3c>)
1000e56a:	601a      	str	r2, [r3, #0]
1000e56c:	4b08      	ldr	r3, [pc, #32]	; (1000e590 <interface_init+0x40>)
1000e56e:	6922      	ldr	r2, [r4, #16]
1000e570:	601a      	str	r2, [r3, #0]
1000e572:	6962      	ldr	r2, [r4, #20]
1000e574:	4b07      	ldr	r3, [pc, #28]	; (1000e594 <interface_init+0x44>)
1000e576:	601a      	str	r2, [r3, #0]
1000e578:	bd10      	pop	{r4, pc}
1000e57a:	46c0      	nop			; (mov r8, r8)
1000e57c:	10011119 	.word	0x10011119
1000e580:	10017fd4 	.word	0x10017fd4
1000e584:	10017dd0 	.word	0x10017dd0
1000e588:	10017dd4 	.word	0x10017dd4
1000e58c:	10013800 	.word	0x10013800
1000e590:	1001529c 	.word	0x1001529c
1000e594:	100152a0 	.word	0x100152a0

1000e598 <platform_cmd_cmpl_signal>:
1000e598:	2201      	movs	r2, #1
1000e59a:	4b01      	ldr	r3, [pc, #4]	; (1000e5a0 <platform_cmd_cmpl_signal+0x8>)
1000e59c:	601a      	str	r2, [r3, #0]
1000e59e:	4770      	bx	lr
1000e5a0:	100152a4 	.word	0x100152a4

1000e5a4 <platform_cmd_cmpl_wait>:
1000e5a4:	b510      	push	{r4, lr}
1000e5a6:	1c04      	adds	r4, r0, #0
1000e5a8:	4b07      	ldr	r3, [pc, #28]	; (1000e5c8 <platform_cmd_cmpl_wait+0x24>)
1000e5aa:	681a      	ldr	r2, [r3, #0]
1000e5ac:	2a01      	cmp	r2, #1
1000e5ae:	d003      	beq.n	1000e5b8 <platform_cmd_cmpl_wait+0x14>
1000e5b0:	4b06      	ldr	r3, [pc, #24]	; (1000e5cc <platform_cmd_cmpl_wait+0x28>)
1000e5b2:	2000      	movs	r0, #0
1000e5b4:	4798      	blx	r3
1000e5b6:	e7f7      	b.n	1000e5a8 <platform_cmd_cmpl_wait+0x4>
1000e5b8:	6819      	ldr	r1, [r3, #0]
1000e5ba:	2901      	cmp	r1, #1
1000e5bc:	d102      	bne.n	1000e5c4 <platform_cmd_cmpl_wait+0x20>
1000e5be:	2200      	movs	r2, #0
1000e5c0:	601a      	str	r2, [r3, #0]
1000e5c2:	e000      	b.n	1000e5c6 <platform_cmd_cmpl_wait+0x22>
1000e5c4:	7022      	strb	r2, [r4, #0]
1000e5c6:	bd10      	pop	{r4, pc}
1000e5c8:	100152a4 	.word	0x100152a4
1000e5cc:	1000c295 	.word	0x1000c295

1000e5d0 <start_timer>:
1000e5d0:	4770      	bx	lr

1000e5d2 <stop_timer>:
1000e5d2:	4770      	bx	lr

1000e5d4 <dbg_le_set_bd_addr_req_handler>:
1000e5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e5d6:	466b      	mov	r3, sp
1000e5d8:	1dde      	adds	r6, r3, #7
1000e5da:	2300      	movs	r3, #0
1000e5dc:	7033      	strb	r3, [r6, #0]
1000e5de:	230f      	movs	r3, #15
1000e5e0:	4c13      	ldr	r4, [pc, #76]	; (1000e630 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000e5e2:	2703      	movs	r7, #3
1000e5e4:	7023      	strb	r3, [r4, #0]
1000e5e6:	2300      	movs	r3, #0
1000e5e8:	70e3      	strb	r3, [r4, #3]
1000e5ea:	4b12      	ldr	r3, [pc, #72]	; (1000e634 <dbg_le_set_bd_addr_req_handler+0x60>)
1000e5ec:	1c01      	adds	r1, r0, #0
1000e5ee:	881a      	ldrh	r2, [r3, #0]
1000e5f0:	881b      	ldrh	r3, [r3, #0]
1000e5f2:	7122      	strb	r2, [r4, #4]
1000e5f4:	0a1b      	lsrs	r3, r3, #8
1000e5f6:	2206      	movs	r2, #6
1000e5f8:	7163      	strb	r3, [r4, #5]
1000e5fa:	480f      	ldr	r0, [pc, #60]	; (1000e638 <dbg_le_set_bd_addr_req_handler+0x64>)
1000e5fc:	4b0f      	ldr	r3, [pc, #60]	; (1000e63c <dbg_le_set_bd_addr_req_handler+0x68>)
1000e5fe:	7067      	strb	r7, [r4, #1]
1000e600:	70a7      	strb	r7, [r4, #2]
1000e602:	4798      	blx	r3
1000e604:	4d0e      	ldr	r5, [pc, #56]	; (1000e640 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000e606:	4b0f      	ldr	r3, [pc, #60]	; (1000e644 <dbg_le_set_bd_addr_req_handler+0x70>)
1000e608:	210e      	movs	r1, #14
1000e60a:	802b      	strh	r3, [r5, #0]
1000e60c:	2306      	movs	r3, #6
1000e60e:	71a3      	strb	r3, [r4, #6]
1000e610:	2300      	movs	r3, #0
1000e612:	1c20      	adds	r0, r4, #0
1000e614:	71e3      	strb	r3, [r4, #7]
1000e616:	4b0c      	ldr	r3, [pc, #48]	; (1000e648 <dbg_le_set_bd_addr_req_handler+0x74>)
1000e618:	80af      	strh	r7, [r5, #4]
1000e61a:	4798      	blx	r3
1000e61c:	1c30      	adds	r0, r6, #0
1000e61e:	4b0b      	ldr	r3, [pc, #44]	; (1000e64c <dbg_le_set_bd_addr_req_handler+0x78>)
1000e620:	4798      	blx	r3
1000e622:	7833      	ldrb	r3, [r6, #0]
1000e624:	20e2      	movs	r0, #226	; 0xe2
1000e626:	2b00      	cmp	r3, #0
1000e628:	d101      	bne.n	1000e62e <dbg_le_set_bd_addr_req_handler+0x5a>
1000e62a:	68ab      	ldr	r3, [r5, #8]
1000e62c:	7818      	ldrb	r0, [r3, #0]
1000e62e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e630:	10017fd4 	.word	0x10017fd4
1000e634:	10017c64 	.word	0x10017c64
1000e638:	10017fdc 	.word	0x10017fdc
1000e63c:	10011107 	.word	0x10011107
1000e640:	10017c58 	.word	0x10017c58
1000e644:	00000329 	.word	0x00000329
1000e648:	1000e541 	.word	0x1000e541
1000e64c:	1000e5a5 	.word	0x1000e5a5

1000e650 <gapc_get_dev_info_cfm.constprop.1>:
1000e650:	b538      	push	{r3, r4, r5, lr}
1000e652:	230b      	movs	r3, #11
1000e654:	4c27      	ldr	r4, [pc, #156]	; (1000e6f4 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000e656:	7023      	strb	r3, [r4, #0]
1000e658:	3303      	adds	r3, #3
1000e65a:	7063      	strb	r3, [r4, #1]
1000e65c:	3329      	adds	r3, #41	; 0x29
1000e65e:	70a3      	strb	r3, [r4, #2]
1000e660:	4b25      	ldr	r3, [pc, #148]	; (1000e6f8 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000e662:	70e1      	strb	r1, [r4, #3]
1000e664:	881a      	ldrh	r2, [r3, #0]
1000e666:	881b      	ldrh	r3, [r3, #0]
1000e668:	7122      	strb	r2, [r4, #4]
1000e66a:	0a1b      	lsrs	r3, r3, #8
1000e66c:	7163      	strb	r3, [r4, #5]
1000e66e:	2300      	movs	r3, #0
1000e670:	7220      	strb	r0, [r4, #8]
1000e672:	7263      	strb	r3, [r4, #9]
1000e674:	2801      	cmp	r0, #1
1000e676:	d02b      	beq.n	1000e6d0 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000e678:	4298      	cmp	r0, r3
1000e67a:	d01b      	beq.n	1000e6b4 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000e67c:	2802      	cmp	r0, #2
1000e67e:	d12f      	bne.n	1000e6e0 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000e680:	4b1e      	ldr	r3, [pc, #120]	; (1000e6fc <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e682:	2112      	movs	r1, #18
1000e684:	1c1a      	adds	r2, r3, #0
1000e686:	32ce      	adds	r2, #206	; 0xce
1000e688:	8812      	ldrh	r2, [r2, #0]
1000e68a:	72a2      	strb	r2, [r4, #10]
1000e68c:	0a12      	lsrs	r2, r2, #8
1000e68e:	72e2      	strb	r2, [r4, #11]
1000e690:	1c1a      	adds	r2, r3, #0
1000e692:	32d0      	adds	r2, #208	; 0xd0
1000e694:	8812      	ldrh	r2, [r2, #0]
1000e696:	7322      	strb	r2, [r4, #12]
1000e698:	0a12      	lsrs	r2, r2, #8
1000e69a:	7362      	strb	r2, [r4, #13]
1000e69c:	1c1a      	adds	r2, r3, #0
1000e69e:	32d2      	adds	r2, #210	; 0xd2
1000e6a0:	8812      	ldrh	r2, [r2, #0]
1000e6a2:	33d4      	adds	r3, #212	; 0xd4
1000e6a4:	73a2      	strb	r2, [r4, #14]
1000e6a6:	0a12      	lsrs	r2, r2, #8
1000e6a8:	73e2      	strb	r2, [r4, #15]
1000e6aa:	881b      	ldrh	r3, [r3, #0]
1000e6ac:	7423      	strb	r3, [r4, #16]
1000e6ae:	0a1b      	lsrs	r3, r3, #8
1000e6b0:	7463      	strb	r3, [r4, #17]
1000e6b2:	e016      	b.n	1000e6e2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e6b4:	4b11      	ldr	r3, [pc, #68]	; (1000e6fc <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e6b6:	4912      	ldr	r1, [pc, #72]	; (1000e700 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000e6b8:	33aa      	adds	r3, #170	; 0xaa
1000e6ba:	881d      	ldrh	r5, [r3, #0]
1000e6bc:	4811      	ldr	r0, [pc, #68]	; (1000e704 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000e6be:	0a2b      	lsrs	r3, r5, #8
1000e6c0:	72a5      	strb	r5, [r4, #10]
1000e6c2:	72e3      	strb	r3, [r4, #11]
1000e6c4:	1c2a      	adds	r2, r5, #0
1000e6c6:	4b10      	ldr	r3, [pc, #64]	; (1000e708 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000e6c8:	350c      	adds	r5, #12
1000e6ca:	4798      	blx	r3
1000e6cc:	b2a9      	uxth	r1, r5
1000e6ce:	e008      	b.n	1000e6e2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e6d0:	4b0a      	ldr	r3, [pc, #40]	; (1000e6fc <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e6d2:	210c      	movs	r1, #12
1000e6d4:	33cc      	adds	r3, #204	; 0xcc
1000e6d6:	881b      	ldrh	r3, [r3, #0]
1000e6d8:	72a3      	strb	r3, [r4, #10]
1000e6da:	0a1b      	lsrs	r3, r3, #8
1000e6dc:	72e3      	strb	r3, [r4, #11]
1000e6de:	e000      	b.n	1000e6e2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e6e0:	210a      	movs	r1, #10
1000e6e2:	1c0b      	adds	r3, r1, #0
1000e6e4:	3b08      	subs	r3, #8
1000e6e6:	71a3      	strb	r3, [r4, #6]
1000e6e8:	121b      	asrs	r3, r3, #8
1000e6ea:	71e3      	strb	r3, [r4, #7]
1000e6ec:	1c20      	adds	r0, r4, #0
1000e6ee:	4b07      	ldr	r3, [pc, #28]	; (1000e70c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000e6f0:	4798      	blx	r3
1000e6f2:	bd38      	pop	{r3, r4, r5, pc}
1000e6f4:	10017fd4 	.word	0x10017fd4
1000e6f8:	10017c64 	.word	0x10017c64
1000e6fc:	10017cf6 	.word	0x10017cf6
1000e700:	10017da2 	.word	0x10017da2
1000e704:	10017fe0 	.word	0x10017fe0
1000e708:	10011107 	.word	0x10011107
1000e70c:	1000e541 	.word	0x1000e541

1000e710 <check_ConnData_idx_role>:
1000e710:	4b0c      	ldr	r3, [pc, #48]	; (1000e744 <check_ConnData_idx_role+0x34>)
1000e712:	b570      	push	{r4, r5, r6, lr}
1000e714:	1c04      	adds	r4, r0, #0
1000e716:	2008      	movs	r0, #8
1000e718:	429c      	cmp	r4, r3
1000e71a:	d011      	beq.n	1000e740 <check_ConnData_idx_role+0x30>
1000e71c:	2300      	movs	r3, #0
1000e71e:	2212      	movs	r2, #18
1000e720:	435a      	muls	r2, r3
1000e722:	4d09      	ldr	r5, [pc, #36]	; (1000e748 <check_ConnData_idx_role+0x38>)
1000e724:	b2d8      	uxtb	r0, r3
1000e726:	1956      	adds	r6, r2, r5
1000e728:	8976      	ldrh	r6, [r6, #10]
1000e72a:	42a6      	cmp	r6, r4
1000e72c:	d104      	bne.n	1000e738 <check_ConnData_idx_role+0x28>
1000e72e:	2900      	cmp	r1, #0
1000e730:	d006      	beq.n	1000e740 <check_ConnData_idx_role+0x30>
1000e732:	5d53      	ldrb	r3, [r2, r5]
1000e734:	700b      	strb	r3, [r1, #0]
1000e736:	e003      	b.n	1000e740 <check_ConnData_idx_role+0x30>
1000e738:	3301      	adds	r3, #1
1000e73a:	2b08      	cmp	r3, #8
1000e73c:	d1ef      	bne.n	1000e71e <check_ConnData_idx_role+0xe>
1000e73e:	1c18      	adds	r0, r3, #0
1000e740:	bd70      	pop	{r4, r5, r6, pc}
1000e742:	46c0      	nop			; (mov r8, r8)
1000e744:	0000ffff 	.word	0x0000ffff
1000e748:	10017c66 	.word	0x10017c66

1000e74c <check_ConnData_emptyEntry>:
1000e74c:	2300      	movs	r3, #0
1000e74e:	2212      	movs	r2, #18
1000e750:	435a      	muls	r2, r3
1000e752:	4906      	ldr	r1, [pc, #24]	; (1000e76c <check_ConnData_emptyEntry+0x20>)
1000e754:	b2d8      	uxtb	r0, r3
1000e756:	1852      	adds	r2, r2, r1
1000e758:	8951      	ldrh	r1, [r2, #10]
1000e75a:	4a05      	ldr	r2, [pc, #20]	; (1000e770 <check_ConnData_emptyEntry+0x24>)
1000e75c:	4291      	cmp	r1, r2
1000e75e:	d003      	beq.n	1000e768 <check_ConnData_emptyEntry+0x1c>
1000e760:	3301      	adds	r3, #1
1000e762:	2b08      	cmp	r3, #8
1000e764:	d1f3      	bne.n	1000e74e <check_ConnData_emptyEntry+0x2>
1000e766:	1c18      	adds	r0, r3, #0
1000e768:	4770      	bx	lr
1000e76a:	46c0      	nop			; (mov r8, r8)
1000e76c:	10017c66 	.word	0x10017c66
1000e770:	0000ffff 	.word	0x0000ffff

1000e774 <gapc_cmp_evt>:
1000e774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e776:	780b      	ldrb	r3, [r1, #0]
1000e778:	1c05      	adds	r5, r0, #0
1000e77a:	1e58      	subs	r0, r3, #1
1000e77c:	784e      	ldrb	r6, [r1, #1]
1000e77e:	280f      	cmp	r0, #15
1000e780:	d85a      	bhi.n	1000e838 <gapc_cmp_evt+0xc4>
1000e782:	1c14      	adds	r4, r2, #0
1000e784:	f001 fc30 	bl	1000ffe8 <__gnu_thumb1_case_uqi>
1000e788:	5858440a 	.word	0x5858440a
1000e78c:	4b584444 	.word	0x4b584444
1000e790:	0825122d 	.word	0x0825122d
1000e794:	3e395858 	.word	0x3e395858
1000e798:	203b      	movs	r0, #59	; 0x3b
1000e79a:	e04e      	b.n	1000e83a <gapc_cmp_evt+0xc6>
1000e79c:	203b      	movs	r0, #59	; 0x3b
1000e79e:	2e00      	cmp	r6, #0
1000e7a0:	d04b      	beq.n	1000e83a <gapc_cmp_evt+0xc6>
1000e7a2:	0a2d      	lsrs	r5, r5, #8
1000e7a4:	8015      	strh	r5, [r2, #0]
1000e7a6:	7096      	strb	r6, [r2, #2]
1000e7a8:	3835      	subs	r0, #53	; 0x35
1000e7aa:	e046      	b.n	1000e83a <gapc_cmp_evt+0xc6>
1000e7ac:	466b      	mov	r3, sp
1000e7ae:	1ddf      	adds	r7, r3, #7
1000e7b0:	2301      	movs	r3, #1
1000e7b2:	0a2d      	lsrs	r5, r5, #8
1000e7b4:	703b      	strb	r3, [r7, #0]
1000e7b6:	1c28      	adds	r0, r5, #0
1000e7b8:	1c39      	adds	r1, r7, #0
1000e7ba:	4b20      	ldr	r3, [pc, #128]	; (1000e83c <gapc_cmp_evt+0xc8>)
1000e7bc:	4798      	blx	r3
1000e7be:	2807      	cmp	r0, #7
1000e7c0:	d803      	bhi.n	1000e7ca <gapc_cmp_evt+0x56>
1000e7c2:	783b      	ldrb	r3, [r7, #0]
1000e7c4:	203b      	movs	r0, #59	; 0x3b
1000e7c6:	2b00      	cmp	r3, #0
1000e7c8:	d037      	beq.n	1000e83a <gapc_cmp_evt+0xc6>
1000e7ca:	8065      	strh	r5, [r4, #2]
1000e7cc:	7126      	strb	r6, [r4, #4]
1000e7ce:	2009      	movs	r0, #9
1000e7d0:	e033      	b.n	1000e83a <gapc_cmp_evt+0xc6>
1000e7d2:	203b      	movs	r0, #59	; 0x3b
1000e7d4:	2e00      	cmp	r6, #0
1000e7d6:	d030      	beq.n	1000e83a <gapc_cmp_evt+0xc6>
1000e7d8:	0a2d      	lsrs	r5, r5, #8
1000e7da:	8015      	strh	r5, [r2, #0]
1000e7dc:	7096      	strb	r6, [r2, #2]
1000e7de:	382d      	subs	r0, #45	; 0x2d
1000e7e0:	e02b      	b.n	1000e83a <gapc_cmp_evt+0xc6>
1000e7e2:	203b      	movs	r0, #59	; 0x3b
1000e7e4:	2e00      	cmp	r6, #0
1000e7e6:	d028      	beq.n	1000e83a <gapc_cmp_evt+0xc6>
1000e7e8:	2300      	movs	r3, #0
1000e7ea:	0a2d      	lsrs	r5, r5, #8
1000e7ec:	8015      	strh	r5, [r2, #0]
1000e7ee:	7096      	strb	r6, [r2, #2]
1000e7f0:	8093      	strh	r3, [r2, #4]
1000e7f2:	80d3      	strh	r3, [r2, #6]
1000e7f4:	8113      	strh	r3, [r2, #8]
1000e7f6:	3834      	subs	r0, #52	; 0x34
1000e7f8:	e01f      	b.n	1000e83a <gapc_cmp_evt+0xc6>
1000e7fa:	203b      	movs	r0, #59	; 0x3b
1000e7fc:	2e00      	cmp	r6, #0
1000e7fe:	d01c      	beq.n	1000e83a <gapc_cmp_evt+0xc6>
1000e800:	7216      	strb	r6, [r2, #8]
1000e802:	e003      	b.n	1000e80c <gapc_cmp_evt+0x98>
1000e804:	203b      	movs	r0, #59	; 0x3b
1000e806:	2e00      	cmp	r6, #0
1000e808:	d017      	beq.n	1000e83a <gapc_cmp_evt+0xc6>
1000e80a:	7116      	strb	r6, [r2, #4]
1000e80c:	3812      	subs	r0, #18
1000e80e:	e014      	b.n	1000e83a <gapc_cmp_evt+0xc6>
1000e810:	203b      	movs	r0, #59	; 0x3b
1000e812:	2e00      	cmp	r6, #0
1000e814:	d011      	beq.n	1000e83a <gapc_cmp_evt+0xc6>
1000e816:	7093      	strb	r3, [r2, #2]
1000e818:	70d6      	strb	r6, [r2, #3]
1000e81a:	382a      	subs	r0, #42	; 0x2a
1000e81c:	e00d      	b.n	1000e83a <gapc_cmp_evt+0xc6>
1000e81e:	203b      	movs	r0, #59	; 0x3b
1000e820:	2e00      	cmp	r6, #0
1000e822:	d00a      	beq.n	1000e83a <gapc_cmp_evt+0xc6>
1000e824:	0a2d      	lsrs	r5, r5, #8
1000e826:	7016      	strb	r6, [r2, #0]
1000e828:	8055      	strh	r5, [r2, #2]
1000e82a:	1d10      	adds	r0, r2, #4
1000e82c:	2100      	movs	r1, #0
1000e82e:	2205      	movs	r2, #5
1000e830:	4b03      	ldr	r3, [pc, #12]	; (1000e840 <gapc_cmp_evt+0xcc>)
1000e832:	4798      	blx	r3
1000e834:	2012      	movs	r0, #18
1000e836:	e000      	b.n	1000e83a <gapc_cmp_evt+0xc6>
1000e838:	2000      	movs	r0, #0
1000e83a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e83c:	1000e711 	.word	0x1000e711
1000e840:	10011119 	.word	0x10011119

1000e844 <gapc_connection_cfm_handler>:
1000e844:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e846:	b085      	sub	sp, #20
1000e848:	1c1d      	adds	r5, r3, #0
1000e84a:	ab0a      	add	r3, sp, #40	; 0x28
1000e84c:	781b      	ldrb	r3, [r3, #0]
1000e84e:	9201      	str	r2, [sp, #4]
1000e850:	9302      	str	r3, [sp, #8]
1000e852:	ab0b      	add	r3, sp, #44	; 0x2c
1000e854:	781b      	ldrb	r3, [r3, #0]
1000e856:	1c07      	adds	r7, r0, #0
1000e858:	9303      	str	r3, [sp, #12]
1000e85a:	ab0c      	add	r3, sp, #48	; 0x30
1000e85c:	881a      	ldrh	r2, [r3, #0]
1000e85e:	2302      	movs	r3, #2
1000e860:	1c0e      	adds	r6, r1, #0
1000e862:	4c23      	ldr	r4, [pc, #140]	; (1000e8f0 <gapc_connection_cfm_handler+0xac>)
1000e864:	1c39      	adds	r1, r7, #0
1000e866:	7023      	strb	r3, [r4, #0]
1000e868:	330c      	adds	r3, #12
1000e86a:	7063      	strb	r3, [r4, #1]
1000e86c:	70a3      	strb	r3, [r4, #2]
1000e86e:	4b21      	ldr	r3, [pc, #132]	; (1000e8f4 <gapc_connection_cfm_handler+0xb0>)
1000e870:	70e2      	strb	r2, [r4, #3]
1000e872:	881a      	ldrh	r2, [r3, #0]
1000e874:	881b      	ldrh	r3, [r3, #0]
1000e876:	7122      	strb	r2, [r4, #4]
1000e878:	0a1b      	lsrs	r3, r3, #8
1000e87a:	4f1f      	ldr	r7, [pc, #124]	; (1000e8f8 <gapc_connection_cfm_handler+0xb4>)
1000e87c:	2210      	movs	r2, #16
1000e87e:	481f      	ldr	r0, [pc, #124]	; (1000e8fc <gapc_connection_cfm_handler+0xb8>)
1000e880:	7163      	strb	r3, [r4, #5]
1000e882:	47b8      	blx	r7
1000e884:	0a33      	lsrs	r3, r6, #8
1000e886:	7626      	strb	r6, [r4, #24]
1000e888:	7663      	strb	r3, [r4, #25]
1000e88a:	9901      	ldr	r1, [sp, #4]
1000e88c:	0c33      	lsrs	r3, r6, #16
1000e88e:	2210      	movs	r2, #16
1000e890:	0e36      	lsrs	r6, r6, #24
1000e892:	481b      	ldr	r0, [pc, #108]	; (1000e900 <gapc_connection_cfm_handler+0xbc>)
1000e894:	76a3      	strb	r3, [r4, #26]
1000e896:	76e6      	strb	r6, [r4, #27]
1000e898:	47b8      	blx	r7
1000e89a:	1c23      	adds	r3, r4, #0
1000e89c:	332c      	adds	r3, #44	; 0x2c
1000e89e:	701d      	strb	r5, [r3, #0]
1000e8a0:	1c23      	adds	r3, r4, #0
1000e8a2:	0a2a      	lsrs	r2, r5, #8
1000e8a4:	332d      	adds	r3, #45	; 0x2d
1000e8a6:	701a      	strb	r2, [r3, #0]
1000e8a8:	1c23      	adds	r3, r4, #0
1000e8aa:	0c2a      	lsrs	r2, r5, #16
1000e8ac:	332e      	adds	r3, #46	; 0x2e
1000e8ae:	701a      	strb	r2, [r3, #0]
1000e8b0:	1c23      	adds	r3, r4, #0
1000e8b2:	0e2d      	lsrs	r5, r5, #24
1000e8b4:	332f      	adds	r3, #47	; 0x2f
1000e8b6:	466a      	mov	r2, sp
1000e8b8:	701d      	strb	r5, [r3, #0]
1000e8ba:	1c23      	adds	r3, r4, #0
1000e8bc:	7a12      	ldrb	r2, [r2, #8]
1000e8be:	3330      	adds	r3, #48	; 0x30
1000e8c0:	701a      	strb	r2, [r3, #0]
1000e8c2:	1c23      	adds	r3, r4, #0
1000e8c4:	2500      	movs	r5, #0
1000e8c6:	3331      	adds	r3, #49	; 0x31
1000e8c8:	466a      	mov	r2, sp
1000e8ca:	701d      	strb	r5, [r3, #0]
1000e8cc:	1c23      	adds	r3, r4, #0
1000e8ce:	7b12      	ldrb	r2, [r2, #12]
1000e8d0:	3332      	adds	r3, #50	; 0x32
1000e8d2:	701a      	strb	r2, [r3, #0]
1000e8d4:	1c23      	adds	r3, r4, #0
1000e8d6:	3333      	adds	r3, #51	; 0x33
1000e8d8:	701d      	strb	r5, [r3, #0]
1000e8da:	232c      	movs	r3, #44	; 0x2c
1000e8dc:	1c20      	adds	r0, r4, #0
1000e8de:	71a3      	strb	r3, [r4, #6]
1000e8e0:	2134      	movs	r1, #52	; 0x34
1000e8e2:	4b08      	ldr	r3, [pc, #32]	; (1000e904 <gapc_connection_cfm_handler+0xc0>)
1000e8e4:	71e5      	strb	r5, [r4, #7]
1000e8e6:	4798      	blx	r3
1000e8e8:	1c28      	adds	r0, r5, #0
1000e8ea:	b005      	add	sp, #20
1000e8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e8ee:	46c0      	nop			; (mov r8, r8)
1000e8f0:	10017fd4 	.word	0x10017fd4
1000e8f4:	10017c64 	.word	0x10017c64
1000e8f8:	10011107 	.word	0x10011107
1000e8fc:	10017fdc 	.word	0x10017fdc
1000e900:	10017ff0 	.word	0x10017ff0
1000e904:	1000e541 	.word	0x1000e541

1000e908 <gapc_con_req_ind>:
1000e908:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e90a:	7845      	ldrb	r5, [r0, #1]
1000e90c:	7803      	ldrb	r3, [r0, #0]
1000e90e:	4c30      	ldr	r4, [pc, #192]	; (1000e9d0 <gapc_con_req_ind+0xc8>)
1000e910:	022d      	lsls	r5, r5, #8
1000e912:	431d      	orrs	r5, r3
1000e914:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000e916:	78c3      	ldrb	r3, [r0, #3]
1000e918:	7882      	ldrb	r2, [r0, #2]
1000e91a:	b08b      	sub	sp, #44	; 0x2c
1000e91c:	021b      	lsls	r3, r3, #8
1000e91e:	431a      	orrs	r2, r3
1000e920:	466b      	mov	r3, sp
1000e922:	9205      	str	r2, [sp, #20]
1000e924:	8a9b      	ldrh	r3, [r3, #20]
1000e926:	2120      	movs	r1, #32
1000e928:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000e92a:	7943      	ldrb	r3, [r0, #5]
1000e92c:	7902      	ldrb	r2, [r0, #4]
1000e92e:	021b      	lsls	r3, r3, #8
1000e930:	431a      	orrs	r2, r3
1000e932:	466b      	mov	r3, sp
1000e934:	9206      	str	r2, [sp, #24]
1000e936:	8b1b      	ldrh	r3, [r3, #24]
1000e938:	1c06      	adds	r6, r0, #0
1000e93a:	8623      	strh	r3, [r4, #48]	; 0x30
1000e93c:	79c3      	ldrb	r3, [r0, #7]
1000e93e:	7982      	ldrb	r2, [r0, #6]
1000e940:	021b      	lsls	r3, r3, #8
1000e942:	431a      	orrs	r2, r3
1000e944:	466b      	mov	r3, sp
1000e946:	9207      	str	r2, [sp, #28]
1000e948:	466a      	mov	r2, sp
1000e94a:	8b9b      	ldrh	r3, [r3, #28]
1000e94c:	1852      	adds	r2, r2, r1
1000e94e:	8663      	strh	r3, [r4, #50]	; 0x32
1000e950:	7a43      	ldrb	r3, [r0, #9]
1000e952:	1c01      	adds	r1, r0, #0
1000e954:	9308      	str	r3, [sp, #32]
1000e956:	1c23      	adds	r3, r4, #0
1000e958:	7812      	ldrb	r2, [r2, #0]
1000e95a:	3377      	adds	r3, #119	; 0x77
1000e95c:	3478      	adds	r4, #120	; 0x78
1000e95e:	701a      	strb	r2, [r3, #0]
1000e960:	310a      	adds	r1, #10
1000e962:	2206      	movs	r2, #6
1000e964:	4b1b      	ldr	r3, [pc, #108]	; (1000e9d4 <gapc_con_req_ind+0xcc>)
1000e966:	1c20      	adds	r0, r4, #0
1000e968:	4798      	blx	r3
1000e96a:	7c33      	ldrb	r3, [r6, #16]
1000e96c:	9309      	str	r3, [sp, #36]	; 0x24
1000e96e:	4b1a      	ldr	r3, [pc, #104]	; (1000e9d8 <gapc_con_req_ind+0xd0>)
1000e970:	4798      	blx	r3
1000e972:	4e1a      	ldr	r6, [pc, #104]	; (1000e9dc <gapc_con_req_ind+0xd4>)
1000e974:	1e07      	subs	r7, r0, #0
1000e976:	2f07      	cmp	r7, #7
1000e978:	d81b      	bhi.n	1000e9b2 <gapc_con_req_ind+0xaa>
1000e97a:	2312      	movs	r3, #18
1000e97c:	4343      	muls	r3, r0
1000e97e:	18f0      	adds	r0, r6, r3
1000e980:	8145      	strh	r5, [r0, #10]
1000e982:	4669      	mov	r1, sp
1000e984:	2524      	movs	r5, #36	; 0x24
1000e986:	1949      	adds	r1, r1, r5
1000e988:	7809      	ldrb	r1, [r1, #0]
1000e98a:	2206      	movs	r2, #6
1000e98c:	54f1      	strb	r1, [r6, r3]
1000e98e:	2120      	movs	r1, #32
1000e990:	466b      	mov	r3, sp
1000e992:	185b      	adds	r3, r3, r1
1000e994:	781b      	ldrb	r3, [r3, #0]
1000e996:	1c21      	adds	r1, r4, #0
1000e998:	7043      	strb	r3, [r0, #1]
1000e99a:	466b      	mov	r3, sp
1000e99c:	8a9b      	ldrh	r3, [r3, #20]
1000e99e:	3002      	adds	r0, #2
1000e9a0:	8143      	strh	r3, [r0, #10]
1000e9a2:	466b      	mov	r3, sp
1000e9a4:	8b1b      	ldrh	r3, [r3, #24]
1000e9a6:	8183      	strh	r3, [r0, #12]
1000e9a8:	466b      	mov	r3, sp
1000e9aa:	8b9b      	ldrh	r3, [r3, #28]
1000e9ac:	81c3      	strh	r3, [r0, #14]
1000e9ae:	4b09      	ldr	r3, [pc, #36]	; (1000e9d4 <gapc_con_req_ind+0xcc>)
1000e9b0:	4798      	blx	r3
1000e9b2:	2112      	movs	r1, #18
1000e9b4:	2300      	movs	r3, #0
1000e9b6:	434f      	muls	r7, r1
1000e9b8:	9300      	str	r3, [sp, #0]
1000e9ba:	9301      	str	r3, [sp, #4]
1000e9bc:	19f6      	adds	r6, r6, r7
1000e9be:	8971      	ldrh	r1, [r6, #10]
1000e9c0:	4a07      	ldr	r2, [pc, #28]	; (1000e9e0 <gapc_con_req_ind+0xd8>)
1000e9c2:	9102      	str	r1, [sp, #8]
1000e9c4:	1c10      	adds	r0, r2, #0
1000e9c6:	1c19      	adds	r1, r3, #0
1000e9c8:	4c06      	ldr	r4, [pc, #24]	; (1000e9e4 <gapc_con_req_ind+0xdc>)
1000e9ca:	47a0      	blx	r4
1000e9cc:	b00b      	add	sp, #44	; 0x2c
1000e9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e9d0:	10017cf6 	.word	0x10017cf6
1000e9d4:	10011107 	.word	0x10011107
1000e9d8:	1000e74d 	.word	0x1000e74d
1000e9dc:	10017c66 	.word	0x10017c66
1000e9e0:	100152a8 	.word	0x100152a8
1000e9e4:	1000e845 	.word	0x1000e845

1000e9e8 <gapc_disconnect_cmd_handler>:
1000e9e8:	2204      	movs	r2, #4
1000e9ea:	b510      	push	{r4, lr}
1000e9ec:	4b0c      	ldr	r3, [pc, #48]	; (1000ea20 <gapc_disconnect_cmd_handler+0x38>)
1000e9ee:	2400      	movs	r4, #0
1000e9f0:	701a      	strb	r2, [r3, #0]
1000e9f2:	320a      	adds	r2, #10
1000e9f4:	705a      	strb	r2, [r3, #1]
1000e9f6:	709a      	strb	r2, [r3, #2]
1000e9f8:	4a0a      	ldr	r2, [pc, #40]	; (1000ea24 <gapc_disconnect_cmd_handler+0x3c>)
1000e9fa:	70d9      	strb	r1, [r3, #3]
1000e9fc:	8811      	ldrh	r1, [r2, #0]
1000e9fe:	8812      	ldrh	r2, [r2, #0]
1000ea00:	7119      	strb	r1, [r3, #4]
1000ea02:	0a12      	lsrs	r2, r2, #8
1000ea04:	715a      	strb	r2, [r3, #5]
1000ea06:	2201      	movs	r2, #1
1000ea08:	721a      	strb	r2, [r3, #8]
1000ea0a:	1892      	adds	r2, r2, r2
1000ea0c:	7258      	strb	r0, [r3, #9]
1000ea0e:	719a      	strb	r2, [r3, #6]
1000ea10:	71dc      	strb	r4, [r3, #7]
1000ea12:	1c18      	adds	r0, r3, #0
1000ea14:	210a      	movs	r1, #10
1000ea16:	4b04      	ldr	r3, [pc, #16]	; (1000ea28 <gapc_disconnect_cmd_handler+0x40>)
1000ea18:	4798      	blx	r3
1000ea1a:	1c20      	adds	r0, r4, #0
1000ea1c:	bd10      	pop	{r4, pc}
1000ea1e:	46c0      	nop			; (mov r8, r8)
1000ea20:	10017fd4 	.word	0x10017fd4
1000ea24:	10017c64 	.word	0x10017c64
1000ea28:	1000e541 	.word	0x1000e541

1000ea2c <gapc_disconnect_ind>:
1000ea2c:	1c02      	adds	r2, r0, #0
1000ea2e:	b508      	push	{r3, lr}
1000ea30:	7843      	ldrb	r3, [r0, #1]
1000ea32:	7800      	ldrb	r0, [r0, #0]
1000ea34:	021b      	lsls	r3, r3, #8
1000ea36:	4318      	orrs	r0, r3
1000ea38:	8008      	strh	r0, [r1, #0]
1000ea3a:	7893      	ldrb	r3, [r2, #2]
1000ea3c:	708b      	strb	r3, [r1, #2]
1000ea3e:	2100      	movs	r1, #0
1000ea40:	4b05      	ldr	r3, [pc, #20]	; (1000ea58 <gapc_disconnect_ind+0x2c>)
1000ea42:	4798      	blx	r3
1000ea44:	2807      	cmp	r0, #7
1000ea46:	d806      	bhi.n	1000ea56 <gapc_disconnect_ind+0x2a>
1000ea48:	2312      	movs	r3, #18
1000ea4a:	4358      	muls	r0, r3
1000ea4c:	4b03      	ldr	r3, [pc, #12]	; (1000ea5c <gapc_disconnect_ind+0x30>)
1000ea4e:	1818      	adds	r0, r3, r0
1000ea50:	2301      	movs	r3, #1
1000ea52:	425b      	negs	r3, r3
1000ea54:	8143      	strh	r3, [r0, #10]
1000ea56:	bd08      	pop	{r3, pc}
1000ea58:	1000e711 	.word	0x1000e711
1000ea5c:	10017c66 	.word	0x10017c66

1000ea60 <gapc_bond_cmd_handler>:
1000ea60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ea62:	9300      	str	r3, [sp, #0]
1000ea64:	2312      	movs	r3, #18
1000ea66:	1c04      	adds	r4, r0, #0
1000ea68:	a808      	add	r0, sp, #32
1000ea6a:	7807      	ldrb	r7, [r0, #0]
1000ea6c:	a809      	add	r0, sp, #36	; 0x24
1000ea6e:	7806      	ldrb	r6, [r0, #0]
1000ea70:	a80a      	add	r0, sp, #40	; 0x28
1000ea72:	7805      	ldrb	r5, [r0, #0]
1000ea74:	a80b      	add	r0, sp, #44	; 0x2c
1000ea76:	7800      	ldrb	r0, [r0, #0]
1000ea78:	9001      	str	r0, [sp, #4]
1000ea7a:	4810      	ldr	r0, [pc, #64]	; (1000eabc <gapc_bond_cmd_handler+0x5c>)
1000ea7c:	7003      	strb	r3, [r0, #0]
1000ea7e:	230e      	movs	r3, #14
1000ea80:	70c4      	strb	r4, [r0, #3]
1000ea82:	4c0f      	ldr	r4, [pc, #60]	; (1000eac0 <gapc_bond_cmd_handler+0x60>)
1000ea84:	7043      	strb	r3, [r0, #1]
1000ea86:	7083      	strb	r3, [r0, #2]
1000ea88:	8823      	ldrh	r3, [r4, #0]
1000ea8a:	8824      	ldrh	r4, [r4, #0]
1000ea8c:	7103      	strb	r3, [r0, #4]
1000ea8e:	466b      	mov	r3, sp
1000ea90:	781b      	ldrb	r3, [r3, #0]
1000ea92:	0a24      	lsrs	r4, r4, #8
1000ea94:	72c3      	strb	r3, [r0, #11]
1000ea96:	466b      	mov	r3, sp
1000ea98:	791b      	ldrb	r3, [r3, #4]
1000ea9a:	7144      	strb	r4, [r0, #5]
1000ea9c:	73c3      	strb	r3, [r0, #15]
1000ea9e:	2308      	movs	r3, #8
1000eaa0:	7183      	strb	r3, [r0, #6]
1000eaa2:	2300      	movs	r3, #0
1000eaa4:	240a      	movs	r4, #10
1000eaa6:	7241      	strb	r1, [r0, #9]
1000eaa8:	71c3      	strb	r3, [r0, #7]
1000eaaa:	2110      	movs	r1, #16
1000eaac:	4b05      	ldr	r3, [pc, #20]	; (1000eac4 <gapc_bond_cmd_handler+0x64>)
1000eaae:	7307      	strb	r7, [r0, #12]
1000eab0:	7346      	strb	r6, [r0, #13]
1000eab2:	7385      	strb	r5, [r0, #14]
1000eab4:	7204      	strb	r4, [r0, #8]
1000eab6:	7282      	strb	r2, [r0, #10]
1000eab8:	4798      	blx	r3
1000eaba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000eabc:	10017fd4 	.word	0x10017fd4
1000eac0:	10017c64 	.word	0x10017c64
1000eac4:	1000e541 	.word	0x1000e541

1000eac8 <gapc_bond_ind>:
1000eac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eaca:	780e      	ldrb	r6, [r1, #0]
1000eacc:	1c03      	adds	r3, r0, #0
1000eace:	1eb0      	subs	r0, r6, #2
1000ead0:	2805      	cmp	r0, #5
1000ead2:	d85d      	bhi.n	1000eb90 <gapc_bond_ind+0xc8>
1000ead4:	1c15      	adds	r5, r2, #0
1000ead6:	1c0c      	adds	r4, r1, #0
1000ead8:	f001 fa86 	bl	1000ffe8 <__gnu_thumb1_case_uqi>
1000eadc:	2f5a030d 	.word	0x2f5a030d
1000eae0:	4740      	.short	0x4740
1000eae2:	2009      	movs	r0, #9
1000eae4:	2a00      	cmp	r2, #0
1000eae6:	d054      	beq.n	1000eb92 <gapc_bond_ind+0xca>
1000eae8:	0a1b      	lsrs	r3, r3, #8
1000eaea:	8053      	strh	r3, [r2, #2]
1000eaec:	788b      	ldrb	r3, [r1, #2]
1000eaee:	4829      	ldr	r0, [pc, #164]	; (1000eb94 <gapc_bond_ind+0xcc>)
1000eaf0:	7113      	strb	r3, [r2, #4]
1000eaf2:	2100      	movs	r1, #0
1000eaf4:	e01c      	b.n	1000eb30 <gapc_bond_ind+0x68>
1000eaf6:	2009      	movs	r0, #9
1000eaf8:	2a00      	cmp	r2, #0
1000eafa:	d04a      	beq.n	1000eb92 <gapc_bond_ind+0xca>
1000eafc:	4c25      	ldr	r4, [pc, #148]	; (1000eb94 <gapc_bond_ind+0xcc>)
1000eafe:	0a1b      	lsrs	r3, r3, #8
1000eb00:	8053      	strh	r3, [r2, #2]
1000eb02:	788b      	ldrb	r3, [r1, #2]
1000eb04:	2700      	movs	r7, #0
1000eb06:	1c10      	adds	r0, r2, #0
1000eb08:	1c21      	adds	r1, r4, #0
1000eb0a:	7013      	strb	r3, [r2, #0]
1000eb0c:	4e22      	ldr	r6, [pc, #136]	; (1000eb98 <gapc_bond_ind+0xd0>)
1000eb0e:	7117      	strb	r7, [r2, #4]
1000eb10:	312e      	adds	r1, #46	; 0x2e
1000eb12:	2217      	movs	r2, #23
1000eb14:	3032      	adds	r0, #50	; 0x32
1000eb16:	47b0      	blx	r6
1000eb18:	1c28      	adds	r0, r5, #0
1000eb1a:	1c21      	adds	r1, r4, #0
1000eb1c:	2210      	movs	r2, #16
1000eb1e:	311e      	adds	r1, #30
1000eb20:	3022      	adds	r0, #34	; 0x22
1000eb22:	47b0      	blx	r6
1000eb24:	1ca1      	adds	r1, r4, #2
1000eb26:	1da8      	adds	r0, r5, #6
1000eb28:	221c      	movs	r2, #28
1000eb2a:	47b0      	blx	r6
1000eb2c:	1c20      	adds	r0, r4, #0
1000eb2e:	1c39      	adds	r1, r7, #0
1000eb30:	2246      	movs	r2, #70	; 0x46
1000eb32:	4b1a      	ldr	r3, [pc, #104]	; (1000eb9c <gapc_bond_ind+0xd4>)
1000eb34:	4798      	blx	r3
1000eb36:	2009      	movs	r0, #9
1000eb38:	e02b      	b.n	1000eb92 <gapc_bond_ind+0xca>
1000eb3a:	4d16      	ldr	r5, [pc, #88]	; (1000eb94 <gapc_bond_ind+0xcc>)
1000eb3c:	3102      	adds	r1, #2
1000eb3e:	1c28      	adds	r0, r5, #0
1000eb40:	2210      	movs	r2, #16
1000eb42:	4e15      	ldr	r6, [pc, #84]	; (1000eb98 <gapc_bond_ind+0xd0>)
1000eb44:	302e      	adds	r0, #46	; 0x2e
1000eb46:	47b0      	blx	r6
1000eb48:	1c28      	adds	r0, r5, #0
1000eb4a:	1c21      	adds	r1, r4, #0
1000eb4c:	303f      	adds	r0, #63	; 0x3f
1000eb4e:	3112      	adds	r1, #18
1000eb50:	2206      	movs	r2, #6
1000eb52:	47b0      	blx	r6
1000eb54:	7e23      	ldrb	r3, [r4, #24]
1000eb56:	353e      	adds	r5, #62	; 0x3e
1000eb58:	702b      	strb	r3, [r5, #0]
1000eb5a:	e019      	b.n	1000eb90 <gapc_bond_ind+0xc8>
1000eb5c:	480d      	ldr	r0, [pc, #52]	; (1000eb94 <gapc_bond_ind+0xcc>)
1000eb5e:	3102      	adds	r1, #2
1000eb60:	2210      	movs	r2, #16
1000eb62:	4b0d      	ldr	r3, [pc, #52]	; (1000eb98 <gapc_bond_ind+0xd0>)
1000eb64:	301e      	adds	r0, #30
1000eb66:	4798      	blx	r3
1000eb68:	e012      	b.n	1000eb90 <gapc_bond_ind+0xc8>
1000eb6a:	4d0a      	ldr	r5, [pc, #40]	; (1000eb94 <gapc_bond_ind+0xcc>)
1000eb6c:	3102      	adds	r1, #2
1000eb6e:	2210      	movs	r2, #16
1000eb70:	4e09      	ldr	r6, [pc, #36]	; (1000eb98 <gapc_bond_ind+0xd0>)
1000eb72:	1ca8      	adds	r0, r5, #2
1000eb74:	47b0      	blx	r6
1000eb76:	1c28      	adds	r0, r5, #0
1000eb78:	1c21      	adds	r1, r4, #0
1000eb7a:	7ce3      	ldrb	r3, [r4, #19]
1000eb7c:	7ca2      	ldrb	r2, [r4, #18]
1000eb7e:	021b      	lsls	r3, r3, #8
1000eb80:	4313      	orrs	r3, r2
1000eb82:	3014      	adds	r0, #20
1000eb84:	3114      	adds	r1, #20
1000eb86:	2208      	movs	r2, #8
1000eb88:	826b      	strh	r3, [r5, #18]
1000eb8a:	47b0      	blx	r6
1000eb8c:	7f23      	ldrb	r3, [r4, #28]
1000eb8e:	772b      	strb	r3, [r5, #28]
1000eb90:	2000      	movs	r0, #0
1000eb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000eb94:	100152d8 	.word	0x100152d8
1000eb98:	10011107 	.word	0x10011107
1000eb9c:	10011119 	.word	0x10011119

1000eba0 <gapc_bond_req_ind>:
1000eba0:	b570      	push	{r4, r5, r6, lr}
1000eba2:	780c      	ldrb	r4, [r1, #0]
1000eba4:	1c03      	adds	r3, r0, #0
1000eba6:	7849      	ldrb	r1, [r1, #1]
1000eba8:	2c07      	cmp	r4, #7
1000ebaa:	d85c      	bhi.n	1000ec66 <gapc_bond_req_ind+0xc6>
1000ebac:	1c20      	adds	r0, r4, #0
1000ebae:	f001 fa1b 	bl	1000ffe8 <__gnu_thumb1_case_uqi>
1000ebb2:	5a04      	.short	0x5a04
1000ebb4:	5a0b5a5a 	.word	0x5a0b5a5a
1000ebb8:	1f1f      	.short	0x1f1f
1000ebba:	200a      	movs	r0, #10
1000ebbc:	2a00      	cmp	r2, #0
1000ebbe:	d053      	beq.n	1000ec68 <gapc_bond_req_ind+0xc8>
1000ebc0:	0a1b      	lsrs	r3, r3, #8
1000ebc2:	8013      	strh	r3, [r2, #0]
1000ebc4:	7091      	strb	r1, [r2, #2]
1000ebc6:	e04f      	b.n	1000ec68 <gapc_bond_req_ind+0xc8>
1000ebc8:	2a00      	cmp	r2, #0
1000ebca:	d00b      	beq.n	1000ebe4 <gapc_bond_req_ind+0x44>
1000ebcc:	0a1b      	lsrs	r3, r3, #8
1000ebce:	8013      	strh	r3, [r2, #0]
1000ebd0:	2900      	cmp	r1, #0
1000ebd2:	d102      	bne.n	1000ebda <gapc_bond_req_ind+0x3a>
1000ebd4:	2301      	movs	r3, #1
1000ebd6:	7093      	strb	r3, [r2, #2]
1000ebd8:	e004      	b.n	1000ebe4 <gapc_bond_req_ind+0x44>
1000ebda:	2300      	movs	r3, #0
1000ebdc:	7093      	strb	r3, [r2, #2]
1000ebde:	2902      	cmp	r1, #2
1000ebe0:	d102      	bne.n	1000ebe8 <gapc_bond_req_ind+0x48>
1000ebe2:	70d3      	strb	r3, [r2, #3]
1000ebe4:	200c      	movs	r0, #12
1000ebe6:	e03f      	b.n	1000ec68 <gapc_bond_req_ind+0xc8>
1000ebe8:	2901      	cmp	r1, #1
1000ebea:	d1fb      	bne.n	1000ebe4 <gapc_bond_req_ind+0x44>
1000ebec:	70d1      	strb	r1, [r2, #3]
1000ebee:	e7f9      	b.n	1000ebe4 <gapc_bond_req_ind+0x44>
1000ebf0:	2214      	movs	r2, #20
1000ebf2:	481e      	ldr	r0, [pc, #120]	; (1000ec6c <gapc_bond_req_ind+0xcc>)
1000ebf4:	0a1b      	lsrs	r3, r3, #8
1000ebf6:	70c3      	strb	r3, [r0, #3]
1000ebf8:	4b1d      	ldr	r3, [pc, #116]	; (1000ec70 <gapc_bond_req_ind+0xd0>)
1000ebfa:	7002      	strb	r2, [r0, #0]
1000ebfc:	3a06      	subs	r2, #6
1000ebfe:	7042      	strb	r2, [r0, #1]
1000ec00:	7082      	strb	r2, [r0, #2]
1000ec02:	881a      	ldrh	r2, [r3, #0]
1000ec04:	881b      	ldrh	r3, [r3, #0]
1000ec06:	4e1b      	ldr	r6, [pc, #108]	; (1000ec74 <gapc_bond_req_ind+0xd4>)
1000ec08:	0a1b      	lsrs	r3, r3, #8
1000ec0a:	7143      	strb	r3, [r0, #5]
1000ec0c:	2301      	movs	r3, #1
1000ec0e:	7102      	strb	r2, [r0, #4]
1000ec10:	7204      	strb	r4, [r0, #8]
1000ec12:	7243      	strb	r3, [r0, #9]
1000ec14:	1c05      	adds	r5, r0, #0
1000ec16:	1c31      	adds	r1, r6, #0
1000ec18:	300a      	adds	r0, #10
1000ec1a:	2c07      	cmp	r4, #7
1000ec1c:	d116      	bne.n	1000ec4c <gapc_bond_req_ind+0xac>
1000ec1e:	317e      	adds	r1, #126	; 0x7e
1000ec20:	2210      	movs	r2, #16
1000ec22:	4c15      	ldr	r4, [pc, #84]	; (1000ec78 <gapc_bond_req_ind+0xd8>)
1000ec24:	47a0      	blx	r4
1000ec26:	1c33      	adds	r3, r6, #0
1000ec28:	1c31      	adds	r1, r6, #0
1000ec2a:	1c28      	adds	r0, r5, #0
1000ec2c:	338e      	adds	r3, #142	; 0x8e
1000ec2e:	881b      	ldrh	r3, [r3, #0]
1000ec30:	3190      	adds	r1, #144	; 0x90
1000ec32:	76ab      	strb	r3, [r5, #26]
1000ec34:	2208      	movs	r2, #8
1000ec36:	0a1b      	lsrs	r3, r3, #8
1000ec38:	301c      	adds	r0, #28
1000ec3a:	76eb      	strb	r3, [r5, #27]
1000ec3c:	47a0      	blx	r4
1000ec3e:	1c31      	adds	r1, r6, #0
1000ec40:	3198      	adds	r1, #152	; 0x98
1000ec42:	780a      	ldrb	r2, [r1, #0]
1000ec44:	1d6b      	adds	r3, r5, #5
1000ec46:	77da      	strb	r2, [r3, #31]
1000ec48:	2125      	movs	r1, #37	; 0x25
1000ec4a:	e004      	b.n	1000ec56 <gapc_bond_req_ind+0xb6>
1000ec4c:	319a      	adds	r1, #154	; 0x9a
1000ec4e:	2210      	movs	r2, #16
1000ec50:	4b09      	ldr	r3, [pc, #36]	; (1000ec78 <gapc_bond_req_ind+0xd8>)
1000ec52:	4798      	blx	r3
1000ec54:	211a      	movs	r1, #26
1000ec56:	1c0b      	adds	r3, r1, #0
1000ec58:	2400      	movs	r4, #0
1000ec5a:	3b08      	subs	r3, #8
1000ec5c:	71ab      	strb	r3, [r5, #6]
1000ec5e:	1c28      	adds	r0, r5, #0
1000ec60:	4b06      	ldr	r3, [pc, #24]	; (1000ec7c <gapc_bond_req_ind+0xdc>)
1000ec62:	71ec      	strb	r4, [r5, #7]
1000ec64:	4798      	blx	r3
1000ec66:	2000      	movs	r0, #0
1000ec68:	bd70      	pop	{r4, r5, r6, pc}
1000ec6a:	46c0      	nop			; (mov r8, r8)
1000ec6c:	10017fd4 	.word	0x10017fd4
1000ec70:	10017c64 	.word	0x10017c64
1000ec74:	10017cf6 	.word	0x10017cf6
1000ec78:	10011107 	.word	0x10011107
1000ec7c:	1000e541 	.word	0x1000e541

1000ec80 <gapc_bond_cfm_handler_pair_resp>:
1000ec80:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ec82:	b085      	sub	sp, #20
1000ec84:	1c07      	adds	r7, r0, #0
1000ec86:	a80a      	add	r0, sp, #40	; 0x28
1000ec88:	7806      	ldrb	r6, [r0, #0]
1000ec8a:	a80b      	add	r0, sp, #44	; 0x2c
1000ec8c:	7805      	ldrb	r5, [r0, #0]
1000ec8e:	a80c      	add	r0, sp, #48	; 0x30
1000ec90:	7800      	ldrb	r0, [r0, #0]
1000ec92:	2414      	movs	r4, #20
1000ec94:	9002      	str	r0, [sp, #8]
1000ec96:	a80d      	add	r0, sp, #52	; 0x34
1000ec98:	7800      	ldrb	r0, [r0, #0]
1000ec9a:	9301      	str	r3, [sp, #4]
1000ec9c:	9003      	str	r0, [sp, #12]
1000ec9e:	a80e      	add	r0, sp, #56	; 0x38
1000eca0:	8800      	ldrh	r0, [r0, #0]
1000eca2:	4684      	mov	ip, r0
1000eca4:	4812      	ldr	r0, [pc, #72]	; (1000ecf0 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000eca6:	7004      	strb	r4, [r0, #0]
1000eca8:	3c06      	subs	r4, #6
1000ecaa:	7044      	strb	r4, [r0, #1]
1000ecac:	7084      	strb	r4, [r0, #2]
1000ecae:	4664      	mov	r4, ip
1000ecb0:	70c4      	strb	r4, [r0, #3]
1000ecb2:	4c10      	ldr	r4, [pc, #64]	; (1000ecf4 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000ecb4:	7247      	strb	r7, [r0, #9]
1000ecb6:	8823      	ldrh	r3, [r4, #0]
1000ecb8:	8824      	ldrh	r4, [r4, #0]
1000ecba:	7103      	strb	r3, [r0, #4]
1000ecbc:	466b      	mov	r3, sp
1000ecbe:	791b      	ldrb	r3, [r3, #4]
1000ecc0:	0a24      	lsrs	r4, r4, #8
1000ecc2:	7303      	strb	r3, [r0, #12]
1000ecc4:	466b      	mov	r3, sp
1000ecc6:	7a1b      	ldrb	r3, [r3, #8]
1000ecc8:	7144      	strb	r4, [r0, #5]
1000ecca:	73c3      	strb	r3, [r0, #15]
1000eccc:	466b      	mov	r3, sp
1000ecce:	7b1b      	ldrb	r3, [r3, #12]
1000ecd0:	2401      	movs	r4, #1
1000ecd2:	7403      	strb	r3, [r0, #16]
1000ecd4:	2309      	movs	r3, #9
1000ecd6:	7183      	strb	r3, [r0, #6]
1000ecd8:	2300      	movs	r3, #0
1000ecda:	7204      	strb	r4, [r0, #8]
1000ecdc:	7281      	strb	r1, [r0, #10]
1000ecde:	72c2      	strb	r2, [r0, #11]
1000ece0:	7346      	strb	r6, [r0, #13]
1000ece2:	7385      	strb	r5, [r0, #14]
1000ece4:	71c3      	strb	r3, [r0, #7]
1000ece6:	2111      	movs	r1, #17
1000ece8:	4b03      	ldr	r3, [pc, #12]	; (1000ecf8 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000ecea:	4798      	blx	r3
1000ecec:	b005      	add	sp, #20
1000ecee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ecf0:	10017fd4 	.word	0x10017fd4
1000ecf4:	10017c64 	.word	0x10017c64
1000ecf8:	1000e541 	.word	0x1000e541

1000ecfc <gapc_bond_cfm_handler_key_exch>:
1000ecfc:	b538      	push	{r3, r4, r5, lr}
1000ecfe:	2514      	movs	r5, #20
1000ed00:	4c0d      	ldr	r4, [pc, #52]	; (1000ed38 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000ed02:	70e3      	strb	r3, [r4, #3]
1000ed04:	4b0d      	ldr	r3, [pc, #52]	; (1000ed3c <gapc_bond_cfm_handler_key_exch+0x40>)
1000ed06:	7025      	strb	r5, [r4, #0]
1000ed08:	3d06      	subs	r5, #6
1000ed0a:	7065      	strb	r5, [r4, #1]
1000ed0c:	70a5      	strb	r5, [r4, #2]
1000ed0e:	881d      	ldrh	r5, [r3, #0]
1000ed10:	881b      	ldrh	r3, [r3, #0]
1000ed12:	7220      	strb	r0, [r4, #8]
1000ed14:	0a1b      	lsrs	r3, r3, #8
1000ed16:	7163      	strb	r3, [r4, #5]
1000ed18:	7261      	strb	r1, [r4, #9]
1000ed1a:	4b09      	ldr	r3, [pc, #36]	; (1000ed40 <gapc_bond_cfm_handler_key_exch+0x44>)
1000ed1c:	1c11      	adds	r1, r2, #0
1000ed1e:	4809      	ldr	r0, [pc, #36]	; (1000ed44 <gapc_bond_cfm_handler_key_exch+0x48>)
1000ed20:	2210      	movs	r2, #16
1000ed22:	7125      	strb	r5, [r4, #4]
1000ed24:	4798      	blx	r3
1000ed26:	2312      	movs	r3, #18
1000ed28:	71a3      	strb	r3, [r4, #6]
1000ed2a:	2300      	movs	r3, #0
1000ed2c:	1c20      	adds	r0, r4, #0
1000ed2e:	71e3      	strb	r3, [r4, #7]
1000ed30:	211a      	movs	r1, #26
1000ed32:	4b05      	ldr	r3, [pc, #20]	; (1000ed48 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000ed34:	4798      	blx	r3
1000ed36:	bd38      	pop	{r3, r4, r5, pc}
1000ed38:	10017fd4 	.word	0x10017fd4
1000ed3c:	10017c64 	.word	0x10017c64
1000ed40:	10011107 	.word	0x10011107
1000ed44:	10017fde 	.word	0x10017fde
1000ed48:	1000e541 	.word	0x1000e541

1000ed4c <gapc_security_cmd_handler>:
1000ed4c:	221a      	movs	r2, #26
1000ed4e:	b508      	push	{r3, lr}
1000ed50:	4b0b      	ldr	r3, [pc, #44]	; (1000ed80 <gapc_security_cmd_handler+0x34>)
1000ed52:	701a      	strb	r2, [r3, #0]
1000ed54:	3a0c      	subs	r2, #12
1000ed56:	705a      	strb	r2, [r3, #1]
1000ed58:	709a      	strb	r2, [r3, #2]
1000ed5a:	4a0a      	ldr	r2, [pc, #40]	; (1000ed84 <gapc_security_cmd_handler+0x38>)
1000ed5c:	70d8      	strb	r0, [r3, #3]
1000ed5e:	8810      	ldrh	r0, [r2, #0]
1000ed60:	8812      	ldrh	r2, [r2, #0]
1000ed62:	7118      	strb	r0, [r3, #4]
1000ed64:	0a12      	lsrs	r2, r2, #8
1000ed66:	715a      	strb	r2, [r3, #5]
1000ed68:	220c      	movs	r2, #12
1000ed6a:	721a      	strb	r2, [r3, #8]
1000ed6c:	3a0a      	subs	r2, #10
1000ed6e:	719a      	strb	r2, [r3, #6]
1000ed70:	2200      	movs	r2, #0
1000ed72:	7259      	strb	r1, [r3, #9]
1000ed74:	71da      	strb	r2, [r3, #7]
1000ed76:	1c18      	adds	r0, r3, #0
1000ed78:	210a      	movs	r1, #10
1000ed7a:	4b03      	ldr	r3, [pc, #12]	; (1000ed88 <gapc_security_cmd_handler+0x3c>)
1000ed7c:	4798      	blx	r3
1000ed7e:	bd08      	pop	{r3, pc}
1000ed80:	10017fd4 	.word	0x10017fd4
1000ed84:	10017c64 	.word	0x10017c64
1000ed88:	1000e541 	.word	0x1000e541

1000ed8c <gapc_encrypt_cmd_handler>:
1000ed8c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed8e:	2500      	movs	r5, #0
1000ed90:	b089      	sub	sp, #36	; 0x24
1000ed92:	9306      	str	r3, [sp, #24]
1000ed94:	ab0e      	add	r3, sp, #56	; 0x38
1000ed96:	781b      	ldrb	r3, [r3, #0]
1000ed98:	1c17      	adds	r7, r2, #0
1000ed9a:	9307      	str	r3, [sp, #28]
1000ed9c:	ab0f      	add	r3, sp, #60	; 0x3c
1000ed9e:	781b      	ldrb	r3, [r3, #0]
1000eda0:	4a19      	ldr	r2, [pc, #100]	; (1000ee08 <gapc_encrypt_cmd_handler+0x7c>)
1000eda2:	1c06      	adds	r6, r0, #0
1000eda4:	9105      	str	r1, [sp, #20]
1000eda6:	9300      	str	r3, [sp, #0]
1000eda8:	9002      	str	r0, [sp, #8]
1000edaa:	1c29      	adds	r1, r5, #0
1000edac:	1c2b      	adds	r3, r5, #0
1000edae:	9501      	str	r5, [sp, #4]
1000edb0:	1c10      	adds	r0, r2, #0
1000edb2:	4c16      	ldr	r4, [pc, #88]	; (1000ee0c <gapc_encrypt_cmd_handler+0x80>)
1000edb4:	47a0      	blx	r4
1000edb6:	2316      	movs	r3, #22
1000edb8:	4c15      	ldr	r4, [pc, #84]	; (1000ee10 <gapc_encrypt_cmd_handler+0x84>)
1000edba:	9905      	ldr	r1, [sp, #20]
1000edbc:	7023      	strb	r3, [r4, #0]
1000edbe:	3b08      	subs	r3, #8
1000edc0:	7063      	strb	r3, [r4, #1]
1000edc2:	70a3      	strb	r3, [r4, #2]
1000edc4:	4b13      	ldr	r3, [pc, #76]	; (1000ee14 <gapc_encrypt_cmd_handler+0x88>)
1000edc6:	70e6      	strb	r6, [r4, #3]
1000edc8:	881a      	ldrh	r2, [r3, #0]
1000edca:	881b      	ldrh	r3, [r3, #0]
1000edcc:	7122      	strb	r2, [r4, #4]
1000edce:	0a1b      	lsrs	r3, r3, #8
1000edd0:	7163      	strb	r3, [r4, #5]
1000edd2:	230b      	movs	r3, #11
1000edd4:	4e10      	ldr	r6, [pc, #64]	; (1000ee18 <gapc_encrypt_cmd_handler+0x8c>)
1000edd6:	2210      	movs	r2, #16
1000edd8:	4810      	ldr	r0, [pc, #64]	; (1000ee1c <gapc_encrypt_cmd_handler+0x90>)
1000edda:	7223      	strb	r3, [r4, #8]
1000eddc:	7265      	strb	r5, [r4, #9]
1000edde:	47b0      	blx	r6
1000ede0:	0a3b      	lsrs	r3, r7, #8
1000ede2:	9906      	ldr	r1, [sp, #24]
1000ede4:	2208      	movs	r2, #8
1000ede6:	480e      	ldr	r0, [pc, #56]	; (1000ee20 <gapc_encrypt_cmd_handler+0x94>)
1000ede8:	76e3      	strb	r3, [r4, #27]
1000edea:	76a7      	strb	r7, [r4, #26]
1000edec:	47b0      	blx	r6
1000edee:	466a      	mov	r2, sp
1000edf0:	7f12      	ldrb	r2, [r2, #28]
1000edf2:	1d63      	adds	r3, r4, #5
1000edf4:	77da      	strb	r2, [r3, #31]
1000edf6:	231d      	movs	r3, #29
1000edf8:	1c20      	adds	r0, r4, #0
1000edfa:	71a3      	strb	r3, [r4, #6]
1000edfc:	2125      	movs	r1, #37	; 0x25
1000edfe:	4b09      	ldr	r3, [pc, #36]	; (1000ee24 <gapc_encrypt_cmd_handler+0x98>)
1000ee00:	71e5      	strb	r5, [r4, #7]
1000ee02:	4798      	blx	r3
1000ee04:	b009      	add	sp, #36	; 0x24
1000ee06:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee08:	100152b8 	.word	0x100152b8
1000ee0c:	1000e845 	.word	0x1000e845
1000ee10:	10017fd4 	.word	0x10017fd4
1000ee14:	10017c64 	.word	0x10017c64
1000ee18:	10011107 	.word	0x10011107
1000ee1c:	10017fde 	.word	0x10017fde
1000ee20:	10017ff0 	.word	0x10017ff0
1000ee24:	1000e541 	.word	0x1000e541

1000ee28 <gapc_encrypt_req_ind>:
1000ee28:	b508      	push	{r3, lr}
1000ee2a:	0a00      	lsrs	r0, r0, #8
1000ee2c:	8010      	strh	r0, [r2, #0]
1000ee2e:	784b      	ldrb	r3, [r1, #1]
1000ee30:	7808      	ldrb	r0, [r1, #0]
1000ee32:	021b      	lsls	r3, r3, #8
1000ee34:	4303      	orrs	r3, r0
1000ee36:	8053      	strh	r3, [r2, #2]
1000ee38:	1d10      	adds	r0, r2, #4
1000ee3a:	3102      	adds	r1, #2
1000ee3c:	2208      	movs	r2, #8
1000ee3e:	4b01      	ldr	r3, [pc, #4]	; (1000ee44 <gapc_encrypt_req_ind+0x1c>)
1000ee40:	4798      	blx	r3
1000ee42:	bd08      	pop	{r3, pc}
1000ee44:	10011107 	.word	0x10011107

1000ee48 <gapc_encrypt_cfm_handler>:
1000ee48:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee4a:	2500      	movs	r5, #0
1000ee4c:	b087      	sub	sp, #28
1000ee4e:	9304      	str	r3, [sp, #16]
1000ee50:	ab0c      	add	r3, sp, #48	; 0x30
1000ee52:	781b      	ldrb	r3, [r3, #0]
1000ee54:	1c17      	adds	r7, r2, #0
1000ee56:	4a15      	ldr	r2, [pc, #84]	; (1000eeac <gapc_encrypt_cfm_handler+0x64>)
1000ee58:	1c06      	adds	r6, r0, #0
1000ee5a:	9305      	str	r3, [sp, #20]
1000ee5c:	9100      	str	r1, [sp, #0]
1000ee5e:	9002      	str	r0, [sp, #8]
1000ee60:	1c29      	adds	r1, r5, #0
1000ee62:	1c2b      	adds	r3, r5, #0
1000ee64:	9501      	str	r5, [sp, #4]
1000ee66:	1c10      	adds	r0, r2, #0
1000ee68:	4c11      	ldr	r4, [pc, #68]	; (1000eeb0 <gapc_encrypt_cfm_handler+0x68>)
1000ee6a:	47a0      	blx	r4
1000ee6c:	2318      	movs	r3, #24
1000ee6e:	4c11      	ldr	r4, [pc, #68]	; (1000eeb4 <gapc_encrypt_cfm_handler+0x6c>)
1000ee70:	9904      	ldr	r1, [sp, #16]
1000ee72:	7023      	strb	r3, [r4, #0]
1000ee74:	3b0a      	subs	r3, #10
1000ee76:	7063      	strb	r3, [r4, #1]
1000ee78:	70a3      	strb	r3, [r4, #2]
1000ee7a:	4b0f      	ldr	r3, [pc, #60]	; (1000eeb8 <gapc_encrypt_cfm_handler+0x70>)
1000ee7c:	480f      	ldr	r0, [pc, #60]	; (1000eebc <gapc_encrypt_cfm_handler+0x74>)
1000ee7e:	881a      	ldrh	r2, [r3, #0]
1000ee80:	881b      	ldrh	r3, [r3, #0]
1000ee82:	7122      	strb	r2, [r4, #4]
1000ee84:	0a1b      	lsrs	r3, r3, #8
1000ee86:	7163      	strb	r3, [r4, #5]
1000ee88:	2210      	movs	r2, #16
1000ee8a:	4b0d      	ldr	r3, [pc, #52]	; (1000eec0 <gapc_encrypt_cfm_handler+0x78>)
1000ee8c:	70e6      	strb	r6, [r4, #3]
1000ee8e:	7227      	strb	r7, [r4, #8]
1000ee90:	4798      	blx	r3
1000ee92:	466b      	mov	r3, sp
1000ee94:	7d1b      	ldrb	r3, [r3, #20]
1000ee96:	1c20      	adds	r0, r4, #0
1000ee98:	7663      	strb	r3, [r4, #25]
1000ee9a:	2312      	movs	r3, #18
1000ee9c:	211a      	movs	r1, #26
1000ee9e:	71a3      	strb	r3, [r4, #6]
1000eea0:	4b08      	ldr	r3, [pc, #32]	; (1000eec4 <gapc_encrypt_cfm_handler+0x7c>)
1000eea2:	71e5      	strb	r5, [r4, #7]
1000eea4:	4798      	blx	r3
1000eea6:	b007      	add	sp, #28
1000eea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eeaa:	46c0      	nop			; (mov r8, r8)
1000eeac:	100152c8 	.word	0x100152c8
1000eeb0:	1000e845 	.word	0x1000e845
1000eeb4:	10017fd4 	.word	0x10017fd4
1000eeb8:	10017c64 	.word	0x10017c64
1000eebc:	10017fdd 	.word	0x10017fdd
1000eec0:	10011107 	.word	0x10011107
1000eec4:	1000e541 	.word	0x1000e541

1000eec8 <gapc_encrypt_ind>:
1000eec8:	780b      	ldrb	r3, [r1, #0]
1000eeca:	0a00      	lsrs	r0, r0, #8
1000eecc:	70d3      	strb	r3, [r2, #3]
1000eece:	2300      	movs	r3, #0
1000eed0:	8010      	strh	r0, [r2, #0]
1000eed2:	7093      	strb	r3, [r2, #2]
1000eed4:	4770      	bx	lr
	...

1000eed8 <gapc_param_update_cfm_handler>:
1000eed8:	b538      	push	{r3, r4, r5, lr}
1000eeda:	2410      	movs	r4, #16
1000eedc:	1c05      	adds	r5, r0, #0
1000eede:	480e      	ldr	r0, [pc, #56]	; (1000ef18 <gapc_param_update_cfm_handler+0x40>)
1000eee0:	7004      	strb	r4, [r0, #0]
1000eee2:	3c02      	subs	r4, #2
1000eee4:	7044      	strb	r4, [r0, #1]
1000eee6:	7084      	strb	r4, [r0, #2]
1000eee8:	4c0c      	ldr	r4, [pc, #48]	; (1000ef1c <gapc_param_update_cfm_handler+0x44>)
1000eeea:	70c5      	strb	r5, [r0, #3]
1000eeec:	8825      	ldrh	r5, [r4, #0]
1000eeee:	8824      	ldrh	r4, [r4, #0]
1000eef0:	72c3      	strb	r3, [r0, #11]
1000eef2:	0a1b      	lsrs	r3, r3, #8
1000eef4:	0a24      	lsrs	r4, r4, #8
1000eef6:	7303      	strb	r3, [r0, #12]
1000eef8:	2305      	movs	r3, #5
1000eefa:	7144      	strb	r4, [r0, #5]
1000eefc:	2400      	movs	r4, #0
1000eefe:	7201      	strb	r1, [r0, #8]
1000ef00:	7242      	strb	r2, [r0, #9]
1000ef02:	7183      	strb	r3, [r0, #6]
1000ef04:	0a12      	lsrs	r2, r2, #8
1000ef06:	210d      	movs	r1, #13
1000ef08:	4b05      	ldr	r3, [pc, #20]	; (1000ef20 <gapc_param_update_cfm_handler+0x48>)
1000ef0a:	7105      	strb	r5, [r0, #4]
1000ef0c:	7282      	strb	r2, [r0, #10]
1000ef0e:	71c4      	strb	r4, [r0, #7]
1000ef10:	4798      	blx	r3
1000ef12:	1c20      	adds	r0, r4, #0
1000ef14:	bd38      	pop	{r3, r4, r5, pc}
1000ef16:	46c0      	nop			; (mov r8, r8)
1000ef18:	10017fd4 	.word	0x10017fd4
1000ef1c:	10017c64 	.word	0x10017c64
1000ef20:	1000e541 	.word	0x1000e541

1000ef24 <gapc_param_updated_ind>:
1000ef24:	2300      	movs	r3, #0
1000ef26:	0a00      	lsrs	r0, r0, #8
1000ef28:	8010      	strh	r0, [r2, #0]
1000ef2a:	7093      	strb	r3, [r2, #2]
1000ef2c:	784b      	ldrb	r3, [r1, #1]
1000ef2e:	7808      	ldrb	r0, [r1, #0]
1000ef30:	021b      	lsls	r3, r3, #8
1000ef32:	4303      	orrs	r3, r0
1000ef34:	8093      	strh	r3, [r2, #4]
1000ef36:	78cb      	ldrb	r3, [r1, #3]
1000ef38:	7888      	ldrb	r0, [r1, #2]
1000ef3a:	021b      	lsls	r3, r3, #8
1000ef3c:	4303      	orrs	r3, r0
1000ef3e:	80d3      	strh	r3, [r2, #6]
1000ef40:	794b      	ldrb	r3, [r1, #5]
1000ef42:	7909      	ldrb	r1, [r1, #4]
1000ef44:	021b      	lsls	r3, r3, #8
1000ef46:	430b      	orrs	r3, r1
1000ef48:	2007      	movs	r0, #7
1000ef4a:	8113      	strh	r3, [r2, #8]
1000ef4c:	4770      	bx	lr

1000ef4e <gapc_param_updated_req_ind>:
1000ef4e:	0a00      	lsrs	r0, r0, #8
1000ef50:	8010      	strh	r0, [r2, #0]
1000ef52:	784b      	ldrb	r3, [r1, #1]
1000ef54:	7808      	ldrb	r0, [r1, #0]
1000ef56:	021b      	lsls	r3, r3, #8
1000ef58:	4303      	orrs	r3, r0
1000ef5a:	8053      	strh	r3, [r2, #2]
1000ef5c:	78cb      	ldrb	r3, [r1, #3]
1000ef5e:	7888      	ldrb	r0, [r1, #2]
1000ef60:	021b      	lsls	r3, r3, #8
1000ef62:	4303      	orrs	r3, r0
1000ef64:	8093      	strh	r3, [r2, #4]
1000ef66:	794b      	ldrb	r3, [r1, #5]
1000ef68:	7908      	ldrb	r0, [r1, #4]
1000ef6a:	021b      	lsls	r3, r3, #8
1000ef6c:	4303      	orrs	r3, r0
1000ef6e:	80d3      	strh	r3, [r2, #6]
1000ef70:	79cb      	ldrb	r3, [r1, #7]
1000ef72:	7989      	ldrb	r1, [r1, #6]
1000ef74:	021b      	lsls	r3, r3, #8
1000ef76:	430b      	orrs	r3, r1
1000ef78:	2008      	movs	r0, #8
1000ef7a:	8113      	strh	r3, [r2, #8]
1000ef7c:	4770      	bx	lr
	...

1000ef80 <gapc_dev_info_req_ind_handler>:
1000ef80:	b508      	push	{r3, lr}
1000ef82:	1c0b      	adds	r3, r1, #0
1000ef84:	0a01      	lsrs	r1, r0, #8
1000ef86:	8011      	strh	r1, [r2, #0]
1000ef88:	7818      	ldrb	r0, [r3, #0]
1000ef8a:	7090      	strb	r0, [r2, #2]
1000ef8c:	2800      	cmp	r0, #0
1000ef8e:	d104      	bne.n	1000ef9a <gapc_dev_info_req_ind_handler+0x1a>
1000ef90:	4b03      	ldr	r3, [pc, #12]	; (1000efa0 <gapc_dev_info_req_ind_handler+0x20>)
1000ef92:	33aa      	adds	r3, #170	; 0xaa
1000ef94:	881b      	ldrh	r3, [r3, #0]
1000ef96:	2b00      	cmp	r3, #0
1000ef98:	d001      	beq.n	1000ef9e <gapc_dev_info_req_ind_handler+0x1e>
1000ef9a:	4b02      	ldr	r3, [pc, #8]	; (1000efa4 <gapc_dev_info_req_ind_handler+0x24>)
1000ef9c:	4798      	blx	r3
1000ef9e:	bd08      	pop	{r3, pc}
1000efa0:	10017cf6 	.word	0x10017cf6
1000efa4:	1000e651 	.word	0x1000e651

1000efa8 <gapc_sec_req_ind>:
1000efa8:	0a00      	lsrs	r0, r0, #8
1000efaa:	8010      	strh	r0, [r2, #0]
1000efac:	7809      	ldrb	r1, [r1, #0]
1000efae:	2301      	movs	r3, #1
1000efb0:	1c08      	adds	r0, r1, #0
1000efb2:	0889      	lsrs	r1, r1, #2
1000efb4:	4018      	ands	r0, r3
1000efb6:	400b      	ands	r3, r1
1000efb8:	70d0      	strb	r0, [r2, #3]
1000efba:	7113      	strb	r3, [r2, #4]
1000efbc:	4770      	bx	lr

1000efbe <gapc_sign_counter_ind_handler>:
1000efbe:	0a00      	lsrs	r0, r0, #8
1000efc0:	8010      	strh	r0, [r2, #0]
1000efc2:	784b      	ldrb	r3, [r1, #1]
1000efc4:	0218      	lsls	r0, r3, #8
1000efc6:	788b      	ldrb	r3, [r1, #2]
1000efc8:	041b      	lsls	r3, r3, #16
1000efca:	4303      	orrs	r3, r0
1000efcc:	7808      	ldrb	r0, [r1, #0]
1000efce:	4303      	orrs	r3, r0
1000efd0:	78c8      	ldrb	r0, [r1, #3]
1000efd2:	0600      	lsls	r0, r0, #24
1000efd4:	4303      	orrs	r3, r0
1000efd6:	6053      	str	r3, [r2, #4]
1000efd8:	794b      	ldrb	r3, [r1, #5]
1000efda:	0218      	lsls	r0, r3, #8
1000efdc:	798b      	ldrb	r3, [r1, #6]
1000efde:	041b      	lsls	r3, r3, #16
1000efe0:	4303      	orrs	r3, r0
1000efe2:	7908      	ldrb	r0, [r1, #4]
1000efe4:	79c9      	ldrb	r1, [r1, #7]
1000efe6:	4303      	orrs	r3, r0
1000efe8:	0609      	lsls	r1, r1, #24
1000efea:	430b      	orrs	r3, r1
1000efec:	2000      	movs	r0, #0
1000efee:	6093      	str	r3, [r2, #8]
1000eff0:	4770      	bx	lr
	...

1000eff4 <gapc_peer_att_info_ind_handler>:
1000eff4:	b510      	push	{r4, lr}
1000eff6:	0a00      	lsrs	r0, r0, #8
1000eff8:	8010      	strh	r0, [r2, #0]
1000effa:	7808      	ldrb	r0, [r1, #0]
1000effc:	7090      	strb	r0, [r2, #2]
1000effe:	788b      	ldrb	r3, [r1, #2]
1000f000:	784c      	ldrb	r4, [r1, #1]
1000f002:	021b      	lsls	r3, r3, #8
1000f004:	4323      	orrs	r3, r4
1000f006:	8093      	strh	r3, [r2, #4]
1000f008:	2801      	cmp	r0, #1
1000f00a:	d027      	beq.n	1000f05c <gapc_peer_att_info_ind_handler+0x68>
1000f00c:	2800      	cmp	r0, #0
1000f00e:	d017      	beq.n	1000f040 <gapc_peer_att_info_ind_handler+0x4c>
1000f010:	2802      	cmp	r0, #2
1000f012:	d12a      	bne.n	1000f06a <gapc_peer_att_info_ind_handler+0x76>
1000f014:	790b      	ldrb	r3, [r1, #4]
1000f016:	78c8      	ldrb	r0, [r1, #3]
1000f018:	021b      	lsls	r3, r3, #8
1000f01a:	4303      	orrs	r3, r0
1000f01c:	8113      	strh	r3, [r2, #8]
1000f01e:	798b      	ldrb	r3, [r1, #6]
1000f020:	7948      	ldrb	r0, [r1, #5]
1000f022:	021b      	lsls	r3, r3, #8
1000f024:	4303      	orrs	r3, r0
1000f026:	80d3      	strh	r3, [r2, #6]
1000f028:	7a0b      	ldrb	r3, [r1, #8]
1000f02a:	79c8      	ldrb	r0, [r1, #7]
1000f02c:	021b      	lsls	r3, r3, #8
1000f02e:	4303      	orrs	r3, r0
1000f030:	8193      	strh	r3, [r2, #12]
1000f032:	7a8b      	ldrb	r3, [r1, #10]
1000f034:	7a49      	ldrb	r1, [r1, #9]
1000f036:	021b      	lsls	r3, r3, #8
1000f038:	430b      	orrs	r3, r1
1000f03a:	8153      	strh	r3, [r2, #10]
1000f03c:	2306      	movs	r3, #6
1000f03e:	e013      	b.n	1000f068 <gapc_peer_att_info_ind_handler+0x74>
1000f040:	1c14      	adds	r4, r2, #0
1000f042:	1c20      	adds	r0, r4, #0
1000f044:	790a      	ldrb	r2, [r1, #4]
1000f046:	78cb      	ldrb	r3, [r1, #3]
1000f048:	0212      	lsls	r2, r2, #8
1000f04a:	431a      	orrs	r2, r3
1000f04c:	80e2      	strh	r2, [r4, #6]
1000f04e:	4b07      	ldr	r3, [pc, #28]	; (1000f06c <gapc_peer_att_info_ind_handler+0x78>)
1000f050:	3008      	adds	r0, #8
1000f052:	3105      	adds	r1, #5
1000f054:	4798      	blx	r3
1000f056:	2302      	movs	r3, #2
1000f058:	70a3      	strb	r3, [r4, #2]
1000f05a:	e006      	b.n	1000f06a <gapc_peer_att_info_ind_handler+0x76>
1000f05c:	790b      	ldrb	r3, [r1, #4]
1000f05e:	78c9      	ldrb	r1, [r1, #3]
1000f060:	021b      	lsls	r3, r3, #8
1000f062:	430b      	orrs	r3, r1
1000f064:	80d3      	strh	r3, [r2, #6]
1000f066:	2305      	movs	r3, #5
1000f068:	7093      	strb	r3, [r2, #2]
1000f06a:	bd10      	pop	{r4, pc}
1000f06c:	10011107 	.word	0x10011107

1000f070 <gapc_con_channel_map_ind_handler>:
1000f070:	b508      	push	{r3, lr}
1000f072:	2300      	movs	r3, #0
1000f074:	0a00      	lsrs	r0, r0, #8
1000f076:	7013      	strb	r3, [r2, #0]
1000f078:	8050      	strh	r0, [r2, #2]
1000f07a:	4b02      	ldr	r3, [pc, #8]	; (1000f084 <gapc_con_channel_map_ind_handler+0x14>)
1000f07c:	1d10      	adds	r0, r2, #4
1000f07e:	2205      	movs	r2, #5
1000f080:	4798      	blx	r3
1000f082:	bd08      	pop	{r3, pc}
1000f084:	10011107 	.word	0x10011107

1000f088 <gapc_lecb_connected>:
1000f088:	7843      	ldrb	r3, [r0, #1]
1000f08a:	7802      	ldrb	r2, [r0, #0]
1000f08c:	021b      	lsls	r3, r3, #8
1000f08e:	4313      	orrs	r3, r2
1000f090:	800b      	strh	r3, [r1, #0]
1000f092:	78c3      	ldrb	r3, [r0, #3]
1000f094:	7882      	ldrb	r2, [r0, #2]
1000f096:	021b      	lsls	r3, r3, #8
1000f098:	4313      	orrs	r3, r2
1000f09a:	804b      	strh	r3, [r1, #2]
1000f09c:	7943      	ldrb	r3, [r0, #5]
1000f09e:	7902      	ldrb	r2, [r0, #4]
1000f0a0:	021b      	lsls	r3, r3, #8
1000f0a2:	4313      	orrs	r3, r2
1000f0a4:	808b      	strh	r3, [r1, #4]
1000f0a6:	79c3      	ldrb	r3, [r0, #7]
1000f0a8:	7982      	ldrb	r2, [r0, #6]
1000f0aa:	021b      	lsls	r3, r3, #8
1000f0ac:	4313      	orrs	r3, r2
1000f0ae:	80cb      	strh	r3, [r1, #6]
1000f0b0:	2300      	movs	r3, #0
1000f0b2:	720b      	strb	r3, [r1, #8]
1000f0b4:	4770      	bx	lr

1000f0b6 <gapc_lecb_disconnected>:
1000f0b6:	7843      	ldrb	r3, [r0, #1]
1000f0b8:	7802      	ldrb	r2, [r0, #0]
1000f0ba:	021b      	lsls	r3, r3, #8
1000f0bc:	4313      	orrs	r3, r2
1000f0be:	800b      	strh	r3, [r1, #0]
1000f0c0:	78c3      	ldrb	r3, [r0, #3]
1000f0c2:	7882      	ldrb	r2, [r0, #2]
1000f0c4:	021b      	lsls	r3, r3, #8
1000f0c6:	4313      	orrs	r3, r2
1000f0c8:	804b      	strh	r3, [r1, #2]
1000f0ca:	4770      	bx	lr

1000f0cc <gapc_lecb_connect_req_ind>:
1000f0cc:	7843      	ldrb	r3, [r0, #1]
1000f0ce:	7802      	ldrb	r2, [r0, #0]
1000f0d0:	021b      	lsls	r3, r3, #8
1000f0d2:	4313      	orrs	r3, r2
1000f0d4:	800b      	strh	r3, [r1, #0]
1000f0d6:	78c3      	ldrb	r3, [r0, #3]
1000f0d8:	7882      	ldrb	r2, [r0, #2]
1000f0da:	021b      	lsls	r3, r3, #8
1000f0dc:	4313      	orrs	r3, r2
1000f0de:	804b      	strh	r3, [r1, #2]
1000f0e0:	7943      	ldrb	r3, [r0, #5]
1000f0e2:	7902      	ldrb	r2, [r0, #4]
1000f0e4:	021b      	lsls	r3, r3, #8
1000f0e6:	4313      	orrs	r3, r2
1000f0e8:	808b      	strh	r3, [r1, #4]
1000f0ea:	79c3      	ldrb	r3, [r0, #7]
1000f0ec:	7982      	ldrb	r2, [r0, #6]
1000f0ee:	021b      	lsls	r3, r3, #8
1000f0f0:	4313      	orrs	r3, r2
1000f0f2:	80cb      	strh	r3, [r1, #6]
1000f0f4:	4770      	bx	lr

1000f0f6 <gapc_lecb_add_credit_resp_handler>:
1000f0f6:	7843      	ldrb	r3, [r0, #1]
1000f0f8:	7802      	ldrb	r2, [r0, #0]
1000f0fa:	021b      	lsls	r3, r3, #8
1000f0fc:	4313      	orrs	r3, r2
1000f0fe:	800b      	strh	r3, [r1, #0]
1000f100:	78c3      	ldrb	r3, [r0, #3]
1000f102:	7882      	ldrb	r2, [r0, #2]
1000f104:	021b      	lsls	r3, r3, #8
1000f106:	4313      	orrs	r3, r2
1000f108:	804b      	strh	r3, [r1, #2]
1000f10a:	7943      	ldrb	r3, [r0, #5]
1000f10c:	7902      	ldrb	r2, [r0, #4]
1000f10e:	021b      	lsls	r3, r3, #8
1000f110:	4313      	orrs	r3, r2
1000f112:	808b      	strh	r3, [r1, #4]
1000f114:	4770      	bx	lr
	...

1000f118 <gapm_reset_req_handler>:
1000f118:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f11a:	466b      	mov	r3, sp
1000f11c:	4915      	ldr	r1, [pc, #84]	; (1000f174 <gapm_reset_req_handler+0x5c>)
1000f11e:	4816      	ldr	r0, [pc, #88]	; (1000f178 <gapm_reset_req_handler+0x60>)
1000f120:	880c      	ldrh	r4, [r1, #0]
1000f122:	8809      	ldrh	r1, [r1, #0]
1000f124:	1ddd      	adds	r5, r3, #7
1000f126:	0a09      	lsrs	r1, r1, #8
1000f128:	2300      	movs	r3, #0
1000f12a:	2202      	movs	r2, #2
1000f12c:	7141      	strb	r1, [r0, #5]
1000f12e:	26d0      	movs	r6, #208	; 0xd0
1000f130:	2101      	movs	r1, #1
1000f132:	7104      	strb	r4, [r0, #4]
1000f134:	4c11      	ldr	r4, [pc, #68]	; (1000f17c <gapm_reset_req_handler+0x64>)
1000f136:	702b      	strb	r3, [r5, #0]
1000f138:	7002      	strb	r2, [r0, #0]
1000f13a:	70c3      	strb	r3, [r0, #3]
1000f13c:	320b      	adds	r2, #11
1000f13e:	7201      	strb	r1, [r0, #8]
1000f140:	7181      	strb	r1, [r0, #6]
1000f142:	71c3      	strb	r3, [r0, #7]
1000f144:	3108      	adds	r1, #8
1000f146:	4b0e      	ldr	r3, [pc, #56]	; (1000f180 <gapm_reset_req_handler+0x68>)
1000f148:	0136      	lsls	r6, r6, #4
1000f14a:	7042      	strb	r2, [r0, #1]
1000f14c:	7082      	strb	r2, [r0, #2]
1000f14e:	80a2      	strh	r2, [r4, #4]
1000f150:	8026      	strh	r6, [r4, #0]
1000f152:	4798      	blx	r3
1000f154:	1c28      	adds	r0, r5, #0
1000f156:	4b0b      	ldr	r3, [pc, #44]	; (1000f184 <gapm_reset_req_handler+0x6c>)
1000f158:	4798      	blx	r3
1000f15a:	782b      	ldrb	r3, [r5, #0]
1000f15c:	20e2      	movs	r0, #226	; 0xe2
1000f15e:	2b00      	cmp	r3, #0
1000f160:	d106      	bne.n	1000f170 <gapm_reset_req_handler+0x58>
1000f162:	68a3      	ldr	r3, [r4, #8]
1000f164:	20e2      	movs	r0, #226	; 0xe2
1000f166:	781a      	ldrb	r2, [r3, #0]
1000f168:	785b      	ldrb	r3, [r3, #1]
1000f16a:	2a01      	cmp	r2, #1
1000f16c:	d100      	bne.n	1000f170 <gapm_reset_req_handler+0x58>
1000f16e:	1c18      	adds	r0, r3, #0
1000f170:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f172:	46c0      	nop			; (mov r8, r8)
1000f174:	10017c64 	.word	0x10017c64
1000f178:	10017fd4 	.word	0x10017fd4
1000f17c:	10017c58 	.word	0x10017c58
1000f180:	1000e541 	.word	0x1000e541
1000f184:	1000e5a5 	.word	0x1000e5a5

1000f188 <gapm_set_dev_config_cmd_handler>:
1000f188:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f18a:	b089      	sub	sp, #36	; 0x24
1000f18c:	9303      	str	r3, [sp, #12]
1000f18e:	ab0e      	add	r3, sp, #56	; 0x38
1000f190:	781b      	ldrb	r3, [r3, #0]
1000f192:	4c37      	ldr	r4, [pc, #220]	; (1000f270 <gapm_set_dev_config_cmd_handler+0xe8>)
1000f194:	9304      	str	r3, [sp, #16]
1000f196:	ab0f      	add	r3, sp, #60	; 0x3c
1000f198:	781b      	ldrb	r3, [r3, #0]
1000f19a:	270d      	movs	r7, #13
1000f19c:	9305      	str	r3, [sp, #20]
1000f19e:	ab10      	add	r3, sp, #64	; 0x40
1000f1a0:	881b      	ldrh	r3, [r3, #0]
1000f1a2:	72a1      	strb	r1, [r4, #10]
1000f1a4:	9300      	str	r3, [sp, #0]
1000f1a6:	ab11      	add	r3, sp, #68	; 0x44
1000f1a8:	881b      	ldrh	r3, [r3, #0]
1000f1aa:	0a09      	lsrs	r1, r1, #8
1000f1ac:	9301      	str	r3, [sp, #4]
1000f1ae:	ab12      	add	r3, sp, #72	; 0x48
1000f1b0:	881b      	ldrh	r3, [r3, #0]
1000f1b2:	7260      	strb	r0, [r4, #9]
1000f1b4:	9302      	str	r3, [sp, #8]
1000f1b6:	ab06      	add	r3, sp, #24
1000f1b8:	1dde      	adds	r6, r3, #7
1000f1ba:	2300      	movs	r3, #0
1000f1bc:	7033      	strb	r3, [r6, #0]
1000f1be:	2304      	movs	r3, #4
1000f1c0:	7023      	strb	r3, [r4, #0]
1000f1c2:	2300      	movs	r3, #0
1000f1c4:	70e3      	strb	r3, [r4, #3]
1000f1c6:	4b2b      	ldr	r3, [pc, #172]	; (1000f274 <gapm_set_dev_config_cmd_handler+0xec>)
1000f1c8:	72e1      	strb	r1, [r4, #11]
1000f1ca:	881d      	ldrh	r5, [r3, #0]
1000f1cc:	881b      	ldrh	r3, [r3, #0]
1000f1ce:	1c11      	adds	r1, r2, #0
1000f1d0:	0a1b      	lsrs	r3, r3, #8
1000f1d2:	7163      	strb	r3, [r4, #5]
1000f1d4:	2303      	movs	r3, #3
1000f1d6:	7125      	strb	r5, [r4, #4]
1000f1d8:	2206      	movs	r2, #6
1000f1da:	4d27      	ldr	r5, [pc, #156]	; (1000f278 <gapm_set_dev_config_cmd_handler+0xf0>)
1000f1dc:	4827      	ldr	r0, [pc, #156]	; (1000f27c <gapm_set_dev_config_cmd_handler+0xf4>)
1000f1de:	7223      	strb	r3, [r4, #8]
1000f1e0:	7067      	strb	r7, [r4, #1]
1000f1e2:	70a7      	strb	r7, [r4, #2]
1000f1e4:	47a8      	blx	r5
1000f1e6:	9903      	ldr	r1, [sp, #12]
1000f1e8:	2210      	movs	r2, #16
1000f1ea:	4825      	ldr	r0, [pc, #148]	; (1000f280 <gapm_set_dev_config_cmd_handler+0xf8>)
1000f1ec:	47a8      	blx	r5
1000f1ee:	466a      	mov	r2, sp
1000f1f0:	7c12      	ldrb	r2, [r2, #16]
1000f1f2:	1ce3      	adds	r3, r4, #3
1000f1f4:	77da      	strb	r2, [r3, #31]
1000f1f6:	466a      	mov	r2, sp
1000f1f8:	7d12      	ldrb	r2, [r2, #20]
1000f1fa:	1d23      	adds	r3, r4, #4
1000f1fc:	77da      	strb	r2, [r3, #31]
1000f1fe:	466a      	mov	r2, sp
1000f200:	7812      	ldrb	r2, [r2, #0]
1000f202:	1d63      	adds	r3, r4, #5
1000f204:	77da      	strb	r2, [r3, #31]
1000f206:	9b00      	ldr	r3, [sp, #0]
1000f208:	1da2      	adds	r2, r4, #6
1000f20a:	0a1b      	lsrs	r3, r3, #8
1000f20c:	77d3      	strb	r3, [r2, #31]
1000f20e:	466a      	mov	r2, sp
1000f210:	7912      	ldrb	r2, [r2, #4]
1000f212:	1de3      	adds	r3, r4, #7
1000f214:	77da      	strb	r2, [r3, #31]
1000f216:	1c22      	adds	r2, r4, #0
1000f218:	9b01      	ldr	r3, [sp, #4]
1000f21a:	3208      	adds	r2, #8
1000f21c:	0a1b      	lsrs	r3, r3, #8
1000f21e:	77d3      	strb	r3, [r2, #31]
1000f220:	466a      	mov	r2, sp
1000f222:	1c23      	adds	r3, r4, #0
1000f224:	7a12      	ldrb	r2, [r2, #8]
1000f226:	3328      	adds	r3, #40	; 0x28
1000f228:	701a      	strb	r2, [r3, #0]
1000f22a:	1c22      	adds	r2, r4, #0
1000f22c:	9b02      	ldr	r3, [sp, #8]
1000f22e:	3229      	adds	r2, #41	; 0x29
1000f230:	0a1b      	lsrs	r3, r3, #8
1000f232:	7013      	strb	r3, [r2, #0]
1000f234:	23d0      	movs	r3, #208	; 0xd0
1000f236:	4d13      	ldr	r5, [pc, #76]	; (1000f284 <gapm_set_dev_config_cmd_handler+0xfc>)
1000f238:	011b      	lsls	r3, r3, #4
1000f23a:	802b      	strh	r3, [r5, #0]
1000f23c:	2322      	movs	r3, #34	; 0x22
1000f23e:	71a3      	strb	r3, [r4, #6]
1000f240:	2300      	movs	r3, #0
1000f242:	212a      	movs	r1, #42	; 0x2a
1000f244:	71e3      	strb	r3, [r4, #7]
1000f246:	1c20      	adds	r0, r4, #0
1000f248:	4b0f      	ldr	r3, [pc, #60]	; (1000f288 <gapm_set_dev_config_cmd_handler+0x100>)
1000f24a:	80af      	strh	r7, [r5, #4]
1000f24c:	4798      	blx	r3
1000f24e:	1c30      	adds	r0, r6, #0
1000f250:	4b0e      	ldr	r3, [pc, #56]	; (1000f28c <gapm_set_dev_config_cmd_handler+0x104>)
1000f252:	4798      	blx	r3
1000f254:	7833      	ldrb	r3, [r6, #0]
1000f256:	20e2      	movs	r0, #226	; 0xe2
1000f258:	2b00      	cmp	r3, #0
1000f25a:	d106      	bne.n	1000f26a <gapm_set_dev_config_cmd_handler+0xe2>
1000f25c:	68ab      	ldr	r3, [r5, #8]
1000f25e:	20e2      	movs	r0, #226	; 0xe2
1000f260:	781a      	ldrb	r2, [r3, #0]
1000f262:	785b      	ldrb	r3, [r3, #1]
1000f264:	2a03      	cmp	r2, #3
1000f266:	d100      	bne.n	1000f26a <gapm_set_dev_config_cmd_handler+0xe2>
1000f268:	1c18      	adds	r0, r3, #0
1000f26a:	b009      	add	sp, #36	; 0x24
1000f26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f26e:	46c0      	nop			; (mov r8, r8)
1000f270:	10017fd4 	.word	0x10017fd4
1000f274:	10017c64 	.word	0x10017c64
1000f278:	10011107 	.word	0x10011107
1000f27c:	10017fe0 	.word	0x10017fe0
1000f280:	10017fe6 	.word	0x10017fe6
1000f284:	10017c58 	.word	0x10017c58
1000f288:	1000e541 	.word	0x1000e541
1000f28c:	1000e5a5 	.word	0x1000e5a5

1000f290 <gapm_get_dev_config_cmd_handler>:
1000f290:	4684      	mov	ip, r0
1000f292:	4663      	mov	r3, ip
1000f294:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f296:	b085      	sub	sp, #20
1000f298:	9100      	str	r1, [sp, #0]
1000f29a:	20cf      	movs	r0, #207	; 0xcf
1000f29c:	2b01      	cmp	r3, #1
1000f29e:	d854      	bhi.n	1000f34a <gapm_get_dev_config_cmd_handler+0xba>
1000f2a0:	2900      	cmp	r1, #0
1000f2a2:	d052      	beq.n	1000f34a <gapm_get_dev_config_cmd_handler+0xba>
1000f2a4:	2200      	movs	r2, #0
1000f2a6:	492a      	ldr	r1, [pc, #168]	; (1000f350 <gapm_get_dev_config_cmd_handler+0xc0>)
1000f2a8:	ab02      	add	r3, sp, #8
1000f2aa:	880c      	ldrh	r4, [r1, #0]
1000f2ac:	8809      	ldrh	r1, [r1, #0]
1000f2ae:	1d9f      	adds	r7, r3, #6
1000f2b0:	719a      	strb	r2, [r3, #6]
1000f2b2:	4b28      	ldr	r3, [pc, #160]	; (1000f354 <gapm_get_dev_config_cmd_handler+0xc4>)
1000f2b4:	0a09      	lsrs	r1, r1, #8
1000f2b6:	250d      	movs	r5, #13
1000f2b8:	2606      	movs	r6, #6
1000f2ba:	7159      	strb	r1, [r3, #5]
1000f2bc:	4661      	mov	r1, ip
1000f2be:	701e      	strb	r6, [r3, #0]
1000f2c0:	705d      	strb	r5, [r3, #1]
1000f2c2:	709d      	strb	r5, [r3, #2]
1000f2c4:	70da      	strb	r2, [r3, #3]
1000f2c6:	711c      	strb	r4, [r3, #4]
1000f2c8:	2901      	cmp	r1, #1
1000f2ca:	d13e      	bne.n	1000f34a <gapm_get_dev_config_cmd_handler+0xba>
1000f2cc:	21d0      	movs	r1, #208	; 0xd0
1000f2ce:	4c22      	ldr	r4, [pc, #136]	; (1000f358 <gapm_get_dev_config_cmd_handler+0xc8>)
1000f2d0:	0109      	lsls	r1, r1, #4
1000f2d2:	8061      	strh	r1, [r4, #2]
1000f2d4:	4921      	ldr	r1, [pc, #132]	; (1000f35c <gapm_get_dev_config_cmd_handler+0xcc>)
1000f2d6:	71da      	strb	r2, [r3, #7]
1000f2d8:	8021      	strh	r1, [r4, #0]
1000f2da:	4661      	mov	r1, ip
1000f2dc:	721e      	strb	r6, [r3, #8]
1000f2de:	7199      	strb	r1, [r3, #6]
1000f2e0:	1c18      	adds	r0, r3, #0
1000f2e2:	2109      	movs	r1, #9
1000f2e4:	4b1e      	ldr	r3, [pc, #120]	; (1000f360 <gapm_get_dev_config_cmd_handler+0xd0>)
1000f2e6:	80a5      	strh	r5, [r4, #4]
1000f2e8:	4798      	blx	r3
1000f2ea:	1c38      	adds	r0, r7, #0
1000f2ec:	4b1d      	ldr	r3, [pc, #116]	; (1000f364 <gapm_get_dev_config_cmd_handler+0xd4>)
1000f2ee:	4798      	blx	r3
1000f2f0:	783b      	ldrb	r3, [r7, #0]
1000f2f2:	20e2      	movs	r0, #226	; 0xe2
1000f2f4:	9301      	str	r3, [sp, #4]
1000f2f6:	2b00      	cmp	r3, #0
1000f2f8:	d127      	bne.n	1000f34a <gapm_get_dev_config_cmd_handler+0xba>
1000f2fa:	8821      	ldrh	r1, [r4, #0]
1000f2fc:	4a1a      	ldr	r2, [pc, #104]	; (1000f368 <gapm_get_dev_config_cmd_handler+0xd8>)
1000f2fe:	68a7      	ldr	r7, [r4, #8]
1000f300:	3b01      	subs	r3, #1
1000f302:	4291      	cmp	r1, r2
1000f304:	d001      	beq.n	1000f30a <gapm_get_dev_config_cmd_handler+0x7a>
1000f306:	8023      	strh	r3, [r4, #0]
1000f308:	e01a      	b.n	1000f340 <gapm_get_dev_config_cmd_handler+0xb0>
1000f30a:	8063      	strh	r3, [r4, #2]
1000f30c:	9b00      	ldr	r3, [sp, #0]
1000f30e:	1c39      	adds	r1, r7, #0
1000f310:	1c58      	adds	r0, r3, #1
1000f312:	1c32      	adds	r2, r6, #0
1000f314:	4b15      	ldr	r3, [pc, #84]	; (1000f36c <gapm_get_dev_config_cmd_handler+0xdc>)
1000f316:	4798      	blx	r3
1000f318:	79bb      	ldrb	r3, [r7, #6]
1000f31a:	9a00      	ldr	r2, [sp, #0]
1000f31c:	7013      	strb	r3, [r2, #0]
1000f31e:	23d0      	movs	r3, #208	; 0xd0
1000f320:	011b      	lsls	r3, r3, #4
1000f322:	8023      	strh	r3, [r4, #0]
1000f324:	ab02      	add	r3, sp, #8
1000f326:	80a5      	strh	r5, [r4, #4]
1000f328:	1ddd      	adds	r5, r3, #7
1000f32a:	466b      	mov	r3, sp
1000f32c:	791b      	ldrb	r3, [r3, #4]
1000f32e:	1c28      	adds	r0, r5, #0
1000f330:	702b      	strb	r3, [r5, #0]
1000f332:	4b0c      	ldr	r3, [pc, #48]	; (1000f364 <gapm_get_dev_config_cmd_handler+0xd4>)
1000f334:	4798      	blx	r3
1000f336:	782b      	ldrb	r3, [r5, #0]
1000f338:	20d0      	movs	r0, #208	; 0xd0
1000f33a:	2b00      	cmp	r3, #0
1000f33c:	d105      	bne.n	1000f34a <gapm_get_dev_config_cmd_handler+0xba>
1000f33e:	68a7      	ldr	r7, [r4, #8]
1000f340:	783b      	ldrb	r3, [r7, #0]
1000f342:	7878      	ldrb	r0, [r7, #1]
1000f344:	2b06      	cmp	r3, #6
1000f346:	d000      	beq.n	1000f34a <gapm_get_dev_config_cmd_handler+0xba>
1000f348:	20e2      	movs	r0, #226	; 0xe2
1000f34a:	b005      	add	sp, #20
1000f34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f34e:	46c0      	nop			; (mov r8, r8)
1000f350:	10017c64 	.word	0x10017c64
1000f354:	10017fd4 	.word	0x10017fd4
1000f358:	10017c58 	.word	0x10017c58
1000f35c:	00000d08 	.word	0x00000d08
1000f360:	1000e541 	.word	0x1000e541
1000f364:	1000e5a5 	.word	0x1000e5a5
1000f368:	0000ffff 	.word	0x0000ffff
1000f36c:	10011107 	.word	0x10011107

1000f370 <gapm_cancel_cmd_handler>:
1000f370:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f372:	4916      	ldr	r1, [pc, #88]	; (1000f3cc <gapm_cancel_cmd_handler+0x5c>)
1000f374:	4816      	ldr	r0, [pc, #88]	; (1000f3d0 <gapm_cancel_cmd_handler+0x60>)
1000f376:	880c      	ldrh	r4, [r1, #0]
1000f378:	8809      	ldrh	r1, [r1, #0]
1000f37a:	466b      	mov	r3, sp
1000f37c:	0a09      	lsrs	r1, r1, #8
1000f37e:	7141      	strb	r1, [r0, #5]
1000f380:	2102      	movs	r1, #2
1000f382:	2203      	movs	r2, #3
1000f384:	7201      	strb	r1, [r0, #8]
1000f386:	21d0      	movs	r1, #208	; 0xd0
1000f388:	1ddd      	adds	r5, r3, #7
1000f38a:	2300      	movs	r3, #0
1000f38c:	7104      	strb	r4, [r0, #4]
1000f38e:	4c11      	ldr	r4, [pc, #68]	; (1000f3d4 <gapm_cancel_cmd_handler+0x64>)
1000f390:	7002      	strb	r2, [r0, #0]
1000f392:	0109      	lsls	r1, r1, #4
1000f394:	320a      	adds	r2, #10
1000f396:	702b      	strb	r3, [r5, #0]
1000f398:	7042      	strb	r2, [r0, #1]
1000f39a:	7082      	strb	r2, [r0, #2]
1000f39c:	70c3      	strb	r3, [r0, #3]
1000f39e:	8021      	strh	r1, [r4, #0]
1000f3a0:	80a2      	strh	r2, [r4, #4]
1000f3a2:	71c3      	strb	r3, [r0, #7]
1000f3a4:	3a0c      	subs	r2, #12
1000f3a6:	2109      	movs	r1, #9
1000f3a8:	4b0b      	ldr	r3, [pc, #44]	; (1000f3d8 <gapm_cancel_cmd_handler+0x68>)
1000f3aa:	7182      	strb	r2, [r0, #6]
1000f3ac:	4798      	blx	r3
1000f3ae:	1c28      	adds	r0, r5, #0
1000f3b0:	4b0a      	ldr	r3, [pc, #40]	; (1000f3dc <gapm_cancel_cmd_handler+0x6c>)
1000f3b2:	4798      	blx	r3
1000f3b4:	7828      	ldrb	r0, [r5, #0]
1000f3b6:	2800      	cmp	r0, #0
1000f3b8:	d001      	beq.n	1000f3be <gapm_cancel_cmd_handler+0x4e>
1000f3ba:	20e2      	movs	r0, #226	; 0xe2
1000f3bc:	e004      	b.n	1000f3c8 <gapm_cancel_cmd_handler+0x58>
1000f3be:	68a3      	ldr	r3, [r4, #8]
1000f3c0:	785b      	ldrb	r3, [r3, #1]
1000f3c2:	2b44      	cmp	r3, #68	; 0x44
1000f3c4:	d000      	beq.n	1000f3c8 <gapm_cancel_cmd_handler+0x58>
1000f3c6:	1c18      	adds	r0, r3, #0
1000f3c8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f3ca:	46c0      	nop			; (mov r8, r8)
1000f3cc:	10017c64 	.word	0x10017c64
1000f3d0:	10017fd4 	.word	0x10017fd4
1000f3d4:	10017c58 	.word	0x10017c58
1000f3d8:	1000e541 	.word	0x1000e541
1000f3dc:	1000e5a5 	.word	0x1000e5a5

1000f3e0 <gapm_dev_bdaddr_ind_handler>:
1000f3e0:	b538      	push	{r3, r4, r5, lr}
1000f3e2:	1c05      	adds	r5, r0, #0
1000f3e4:	1c0c      	adds	r4, r1, #0
1000f3e6:	1c48      	adds	r0, r1, #1
1000f3e8:	2206      	movs	r2, #6
1000f3ea:	1c29      	adds	r1, r5, #0
1000f3ec:	4b02      	ldr	r3, [pc, #8]	; (1000f3f8 <gapm_dev_bdaddr_ind_handler+0x18>)
1000f3ee:	4798      	blx	r3
1000f3f0:	79ab      	ldrb	r3, [r5, #6]
1000f3f2:	2000      	movs	r0, #0
1000f3f4:	7023      	strb	r3, [r4, #0]
1000f3f6:	bd38      	pop	{r3, r4, r5, pc}
1000f3f8:	10011107 	.word	0x10011107

1000f3fc <gapm_cmp_evt>:
1000f3fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f3fe:	7803      	ldrb	r3, [r0, #0]
1000f400:	7845      	ldrb	r5, [r0, #1]
1000f402:	3b0c      	subs	r3, #12
1000f404:	1e18      	subs	r0, r3, #0
1000f406:	280b      	cmp	r0, #11
1000f408:	d900      	bls.n	1000f40c <gapm_cmp_evt+0x10>
1000f40a:	e08d      	b.n	1000f528 <gapm_cmp_evt+0x12c>
1000f40c:	1c0c      	adds	r4, r1, #0
1000f40e:	f000 fdeb 	bl	1000ffe8 <__gnu_thumb1_case_uqi>
1000f412:	1952      	.short	0x1952
1000f414:	068b1919 	.word	0x068b1919
1000f418:	8b595906 	.word	0x8b595906
1000f41c:	0d8b      	.short	0x0d8b
1000f41e:	2300      	movs	r3, #0
1000f420:	2d45      	cmp	r5, #69	; 0x45
1000f422:	d000      	beq.n	1000f426 <gapm_cmp_evt+0x2a>
1000f424:	1c2b      	adds	r3, r5, #0
1000f426:	7023      	strb	r3, [r4, #0]
1000f428:	2002      	movs	r0, #2
1000f42a:	e07e      	b.n	1000f52a <gapm_cmp_evt+0x12e>
1000f42c:	203b      	movs	r0, #59	; 0x3b
1000f42e:	2d00      	cmp	r5, #0
1000f430:	d100      	bne.n	1000f434 <gapm_cmp_evt+0x38>
1000f432:	e07a      	b.n	1000f52a <gapm_cmp_evt+0x12e>
1000f434:	700d      	strb	r5, [r1, #0]
1000f436:	1c48      	adds	r0, r1, #1
1000f438:	2210      	movs	r2, #16
1000f43a:	2100      	movs	r1, #0
1000f43c:	4b3b      	ldr	r3, [pc, #236]	; (1000f52c <gapm_cmp_evt+0x130>)
1000f43e:	4798      	blx	r3
1000f440:	200f      	movs	r0, #15
1000f442:	e072      	b.n	1000f52a <gapm_cmp_evt+0x12e>
1000f444:	2d00      	cmp	r5, #0
1000f446:	d134      	bne.n	1000f4b2 <gapm_cmp_evt+0xb6>
1000f448:	4b39      	ldr	r3, [pc, #228]	; (1000f530 <gapm_cmp_evt+0x134>)
1000f44a:	4798      	blx	r3
1000f44c:	1e43      	subs	r3, r0, #1
1000f44e:	b2db      	uxtb	r3, r3
1000f450:	1c28      	adds	r0, r5, #0
1000f452:	2b06      	cmp	r3, #6
1000f454:	d869      	bhi.n	1000f52a <gapm_cmp_evt+0x12e>
1000f456:	466b      	mov	r3, sp
1000f458:	4e36      	ldr	r6, [pc, #216]	; (1000f534 <gapm_cmp_evt+0x138>)
1000f45a:	1dd9      	adds	r1, r3, #7
1000f45c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f45e:	4b36      	ldr	r3, [pc, #216]	; (1000f538 <gapm_cmp_evt+0x13c>)
1000f460:	4798      	blx	r3
1000f462:	2312      	movs	r3, #18
1000f464:	4358      	muls	r0, r3
1000f466:	4935      	ldr	r1, [pc, #212]	; (1000f53c <gapm_cmp_evt+0x140>)
1000f468:	1809      	adds	r1, r1, r0
1000f46a:	1c0b      	adds	r3, r1, #0
1000f46c:	894a      	ldrh	r2, [r1, #10]
1000f46e:	3308      	adds	r3, #8
1000f470:	8122      	strh	r2, [r4, #8]
1000f472:	784f      	ldrb	r7, [r1, #1]
1000f474:	72a5      	strb	r5, [r4, #10]
1000f476:	7027      	strb	r7, [r4, #0]
1000f478:	898a      	ldrh	r2, [r1, #12]
1000f47a:	1c60      	adds	r0, r4, #1
1000f47c:	81a2      	strh	r2, [r4, #12]
1000f47e:	88db      	ldrh	r3, [r3, #6]
1000f480:	3102      	adds	r1, #2
1000f482:	81e3      	strh	r3, [r4, #14]
1000f484:	89cb      	ldrh	r3, [r1, #14]
1000f486:	2206      	movs	r2, #6
1000f488:	8223      	strh	r3, [r4, #16]
1000f48a:	4b2d      	ldr	r3, [pc, #180]	; (1000f540 <gapm_cmp_evt+0x144>)
1000f48c:	4798      	blx	r3
1000f48e:	2f00      	cmp	r7, #0
1000f490:	d00a      	beq.n	1000f4a8 <gapm_cmp_evt+0xac>
1000f492:	79a3      	ldrb	r3, [r4, #6]
1000f494:	223f      	movs	r2, #63	; 0x3f
1000f496:	1c19      	adds	r1, r3, #0
1000f498:	3501      	adds	r5, #1
1000f49a:	4391      	bics	r1, r2
1000f49c:	29c0      	cmp	r1, #192	; 0xc0
1000f49e:	d003      	beq.n	1000f4a8 <gapm_cmp_evt+0xac>
1000f4a0:	065b      	lsls	r3, r3, #25
1000f4a2:	0fdb      	lsrs	r3, r3, #31
1000f4a4:	3502      	adds	r5, #2
1000f4a6:	1aed      	subs	r5, r5, r3
1000f4a8:	2301      	movs	r3, #1
1000f4aa:	425b      	negs	r3, r3
1000f4ac:	7025      	strb	r5, [r4, #0]
1000f4ae:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f4b0:	e038      	b.n	1000f524 <gapm_cmp_evt+0x128>
1000f4b2:	700d      	strb	r5, [r1, #0]
1000f4b4:	e004      	b.n	1000f4c0 <gapm_cmp_evt+0xc4>
1000f4b6:	2300      	movs	r3, #0
1000f4b8:	2d45      	cmp	r5, #69	; 0x45
1000f4ba:	d000      	beq.n	1000f4be <gapm_cmp_evt+0xc2>
1000f4bc:	1c2b      	adds	r3, r5, #0
1000f4be:	7023      	strb	r3, [r4, #0]
1000f4c0:	2003      	movs	r0, #3
1000f4c2:	e032      	b.n	1000f52a <gapm_cmp_evt+0x12e>
1000f4c4:	4e1b      	ldr	r6, [pc, #108]	; (1000f534 <gapm_cmp_evt+0x138>)
1000f4c6:	2100      	movs	r1, #0
1000f4c8:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f4ca:	4b1b      	ldr	r3, [pc, #108]	; (1000f538 <gapm_cmp_evt+0x13c>)
1000f4cc:	4798      	blx	r3
1000f4ce:	2807      	cmp	r0, #7
1000f4d0:	d818      	bhi.n	1000f504 <gapm_cmp_evt+0x108>
1000f4d2:	2301      	movs	r3, #1
1000f4d4:	425b      	negs	r3, r3
1000f4d6:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f4d8:	3313      	adds	r3, #19
1000f4da:	4358      	muls	r0, r3
1000f4dc:	4917      	ldr	r1, [pc, #92]	; (1000f53c <gapm_cmp_evt+0x140>)
1000f4de:	1809      	adds	r1, r1, r0
1000f4e0:	1c0b      	adds	r3, r1, #0
1000f4e2:	894a      	ldrh	r2, [r1, #10]
1000f4e4:	3308      	adds	r3, #8
1000f4e6:	8122      	strh	r2, [r4, #8]
1000f4e8:	784a      	ldrb	r2, [r1, #1]
1000f4ea:	72a5      	strb	r5, [r4, #10]
1000f4ec:	7022      	strb	r2, [r4, #0]
1000f4ee:	898a      	ldrh	r2, [r1, #12]
1000f4f0:	1c60      	adds	r0, r4, #1
1000f4f2:	81a2      	strh	r2, [r4, #12]
1000f4f4:	88db      	ldrh	r3, [r3, #6]
1000f4f6:	3102      	adds	r1, #2
1000f4f8:	81e3      	strh	r3, [r4, #14]
1000f4fa:	89cb      	ldrh	r3, [r1, #14]
1000f4fc:	2206      	movs	r2, #6
1000f4fe:	8223      	strh	r3, [r4, #16]
1000f500:	4b0f      	ldr	r3, [pc, #60]	; (1000f540 <gapm_cmp_evt+0x144>)
1000f502:	4798      	blx	r3
1000f504:	2200      	movs	r2, #0
1000f506:	7823      	ldrb	r3, [r4, #0]
1000f508:	4293      	cmp	r3, r2
1000f50a:	d00a      	beq.n	1000f522 <gapm_cmp_evt+0x126>
1000f50c:	79a3      	ldrb	r3, [r4, #6]
1000f50e:	323f      	adds	r2, #63	; 0x3f
1000f510:	1c19      	adds	r1, r3, #0
1000f512:	4391      	bics	r1, r2
1000f514:	3a3e      	subs	r2, #62	; 0x3e
1000f516:	29c0      	cmp	r1, #192	; 0xc0
1000f518:	d003      	beq.n	1000f522 <gapm_cmp_evt+0x126>
1000f51a:	065b      	lsls	r3, r3, #25
1000f51c:	0fdb      	lsrs	r3, r3, #31
1000f51e:	3202      	adds	r2, #2
1000f520:	1ad2      	subs	r2, r2, r3
1000f522:	7022      	strb	r2, [r4, #0]
1000f524:	2005      	movs	r0, #5
1000f526:	e000      	b.n	1000f52a <gapm_cmp_evt+0x12e>
1000f528:	2000      	movs	r0, #0
1000f52a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f52c:	10011119 	.word	0x10011119
1000f530:	1000e74d 	.word	0x1000e74d
1000f534:	10017cf6 	.word	0x10017cf6
1000f538:	1000e711 	.word	0x1000e711
1000f53c:	10017c66 	.word	0x10017c66
1000f540:	10011107 	.word	0x10011107

1000f544 <gapm_start_adv_cmd_handler>:
1000f544:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f546:	b089      	sub	sp, #36	; 0x24
1000f548:	9303      	str	r3, [sp, #12]
1000f54a:	ab0e      	add	r3, sp, #56	; 0x38
1000f54c:	9102      	str	r1, [sp, #8]
1000f54e:	cb02      	ldmia	r3!, {r1}
1000f550:	aa08      	add	r2, sp, #32
1000f552:	881b      	ldrh	r3, [r3, #0]
1000f554:	4e3c      	ldr	r6, [pc, #240]	; (1000f648 <gapm_start_adv_cmd_handler+0x104>)
1000f556:	9300      	str	r3, [sp, #0]
1000f558:	ab10      	add	r3, sp, #64	; 0x40
1000f55a:	881b      	ldrh	r3, [r3, #0]
1000f55c:	240d      	movs	r4, #13
1000f55e:	469c      	mov	ip, r3
1000f560:	ab11      	add	r3, sp, #68	; 0x44
1000f562:	781b      	ldrb	r3, [r3, #0]
1000f564:	9304      	str	r3, [sp, #16]
1000f566:	ab12      	add	r3, sp, #72	; 0x48
1000f568:	781b      	ldrb	r3, [r3, #0]
1000f56a:	9305      	str	r3, [sp, #20]
1000f56c:	ab13      	add	r3, sp, #76	; 0x4c
1000f56e:	781b      	ldrb	r3, [r3, #0]
1000f570:	9306      	str	r3, [sp, #24]
1000f572:	ab14      	add	r3, sp, #80	; 0x50
1000f574:	781b      	ldrb	r3, [r3, #0]
1000f576:	9301      	str	r3, [sp, #4]
1000f578:	2319      	movs	r3, #25
1000f57a:	189b      	adds	r3, r3, r2
1000f57c:	7fdd      	ldrb	r5, [r3, #31]
1000f57e:	ab18      	add	r3, sp, #96	; 0x60
1000f580:	881f      	ldrh	r7, [r3, #0]
1000f582:	ab19      	add	r3, sp, #100	; 0x64
1000f584:	781b      	ldrb	r3, [r3, #0]
1000f586:	8832      	ldrh	r2, [r6, #0]
1000f588:	9307      	str	r3, [sp, #28]
1000f58a:	4b30      	ldr	r3, [pc, #192]	; (1000f64c <gapm_start_adv_cmd_handler+0x108>)
1000f58c:	8836      	ldrh	r6, [r6, #0]
1000f58e:	711a      	strb	r2, [r3, #4]
1000f590:	466a      	mov	r2, sp
1000f592:	7a12      	ldrb	r2, [r2, #8]
1000f594:	701c      	strb	r4, [r3, #0]
1000f596:	705c      	strb	r4, [r3, #1]
1000f598:	709c      	strb	r4, [r3, #2]
1000f59a:	725a      	strb	r2, [r3, #9]
1000f59c:	2400      	movs	r4, #0
1000f59e:	466a      	mov	r2, sp
1000f5a0:	0a36      	lsrs	r6, r6, #8
1000f5a2:	70dc      	strb	r4, [r3, #3]
1000f5a4:	7218      	strb	r0, [r3, #8]
1000f5a6:	729c      	strb	r4, [r3, #10]
1000f5a8:	715e      	strb	r6, [r3, #5]
1000f5aa:	72dc      	strb	r4, [r3, #11]
1000f5ac:	7812      	ldrb	r2, [r2, #0]
1000f5ae:	380e      	subs	r0, #14
1000f5b0:	731a      	strb	r2, [r3, #12]
1000f5b2:	9a00      	ldr	r2, [sp, #0]
1000f5b4:	0a14      	lsrs	r4, r2, #8
1000f5b6:	4662      	mov	r2, ip
1000f5b8:	739a      	strb	r2, [r3, #14]
1000f5ba:	4662      	mov	r2, ip
1000f5bc:	735c      	strb	r4, [r3, #13]
1000f5be:	0a14      	lsrs	r4, r2, #8
1000f5c0:	466a      	mov	r2, sp
1000f5c2:	7c12      	ldrb	r2, [r2, #16]
1000f5c4:	73dc      	strb	r4, [r3, #15]
1000f5c6:	741a      	strb	r2, [r3, #16]
1000f5c8:	1c1c      	adds	r4, r3, #0
1000f5ca:	2801      	cmp	r0, #1
1000f5cc:	d809      	bhi.n	1000f5e2 <gapm_start_adv_cmd_handler+0x9e>
1000f5ce:	2900      	cmp	r1, #0
1000f5d0:	d003      	beq.n	1000f5da <gapm_start_adv_cmd_handler+0x96>
1000f5d2:	481f      	ldr	r0, [pc, #124]	; (1000f650 <gapm_start_adv_cmd_handler+0x10c>)
1000f5d4:	2206      	movs	r2, #6
1000f5d6:	4b1f      	ldr	r3, [pc, #124]	; (1000f654 <gapm_start_adv_cmd_handler+0x110>)
1000f5d8:	4798      	blx	r3
1000f5da:	466b      	mov	r3, sp
1000f5dc:	7b1b      	ldrb	r3, [r3, #12]
1000f5de:	75e3      	strb	r3, [r4, #23]
1000f5e0:	e014      	b.n	1000f60c <gapm_start_adv_cmd_handler+0xc8>
1000f5e2:	466b      	mov	r3, sp
1000f5e4:	7d1b      	ldrb	r3, [r3, #20]
1000f5e6:	9915      	ldr	r1, [sp, #84]	; 0x54
1000f5e8:	7463      	strb	r3, [r4, #17]
1000f5ea:	466b      	mov	r3, sp
1000f5ec:	7e1b      	ldrb	r3, [r3, #24]
1000f5ee:	9a01      	ldr	r2, [sp, #4]
1000f5f0:	74a3      	strb	r3, [r4, #18]
1000f5f2:	466b      	mov	r3, sp
1000f5f4:	791b      	ldrb	r3, [r3, #4]
1000f5f6:	4818      	ldr	r0, [pc, #96]	; (1000f658 <gapm_start_adv_cmd_handler+0x114>)
1000f5f8:	4e16      	ldr	r6, [pc, #88]	; (1000f654 <gapm_start_adv_cmd_handler+0x110>)
1000f5fa:	74e3      	strb	r3, [r4, #19]
1000f5fc:	47b0      	blx	r6
1000f5fe:	1c23      	adds	r3, r4, #0
1000f600:	4816      	ldr	r0, [pc, #88]	; (1000f65c <gapm_start_adv_cmd_handler+0x118>)
1000f602:	3330      	adds	r3, #48	; 0x30
1000f604:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000f606:	1c2a      	adds	r2, r5, #0
1000f608:	701d      	strb	r5, [r3, #0]
1000f60a:	47b0      	blx	r6
1000f60c:	1c22      	adds	r2, r4, #0
1000f60e:	23a5      	movs	r3, #165	; 0xa5
1000f610:	3250      	adds	r2, #80	; 0x50
1000f612:	7013      	strb	r3, [r2, #0]
1000f614:	1c22      	adds	r2, r4, #0
1000f616:	3251      	adds	r2, #81	; 0x51
1000f618:	7013      	strb	r3, [r2, #0]
1000f61a:	1c23      	adds	r3, r4, #0
1000f61c:	1c22      	adds	r2, r4, #0
1000f61e:	3352      	adds	r3, #82	; 0x52
1000f620:	701f      	strb	r7, [r3, #0]
1000f622:	3253      	adds	r2, #83	; 0x53
1000f624:	0a3b      	lsrs	r3, r7, #8
1000f626:	7013      	strb	r3, [r2, #0]
1000f628:	466a      	mov	r2, sp
1000f62a:	1c23      	adds	r3, r4, #0
1000f62c:	7f12      	ldrb	r2, [r2, #28]
1000f62e:	3354      	adds	r3, #84	; 0x54
1000f630:	701a      	strb	r2, [r3, #0]
1000f632:	234d      	movs	r3, #77	; 0x4d
1000f634:	2500      	movs	r5, #0
1000f636:	71a3      	strb	r3, [r4, #6]
1000f638:	1c20      	adds	r0, r4, #0
1000f63a:	2155      	movs	r1, #85	; 0x55
1000f63c:	4b08      	ldr	r3, [pc, #32]	; (1000f660 <gapm_start_adv_cmd_handler+0x11c>)
1000f63e:	71e5      	strb	r5, [r4, #7]
1000f640:	4798      	blx	r3
1000f642:	1c28      	adds	r0, r5, #0
1000f644:	b009      	add	sp, #36	; 0x24
1000f646:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f648:	10017c64 	.word	0x10017c64
1000f64c:	10017fd4 	.word	0x10017fd4
1000f650:	10017fe5 	.word	0x10017fe5
1000f654:	10011107 	.word	0x10011107
1000f658:	10017fe8 	.word	0x10017fe8
1000f65c:	10018005 	.word	0x10018005
1000f660:	1000e541 	.word	0x1000e541

1000f664 <get_gap_local_addr_type>:
1000f664:	4b04      	ldr	r3, [pc, #16]	; (1000f678 <get_gap_local_addr_type+0x14>)
1000f666:	2001      	movs	r0, #1
1000f668:	791b      	ldrb	r3, [r3, #4]
1000f66a:	2b02      	cmp	r3, #2
1000f66c:	d003      	beq.n	1000f676 <get_gap_local_addr_type+0x12>
1000f66e:	3b03      	subs	r3, #3
1000f670:	4258      	negs	r0, r3
1000f672:	4158      	adcs	r0, r3
1000f674:	0040      	lsls	r0, r0, #1
1000f676:	4770      	bx	lr
1000f678:	10017cf6 	.word	0x10017cf6

1000f67c <gapm_adv_report_evt_handler>:
1000f67c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f67e:	7843      	ldrb	r3, [r0, #1]
1000f680:	1c05      	adds	r5, r0, #0
1000f682:	9301      	str	r3, [sp, #4]
1000f684:	466b      	mov	r3, sp
1000f686:	1c0c      	adds	r4, r1, #0
1000f688:	791b      	ldrb	r3, [r3, #4]
1000f68a:	7806      	ldrb	r6, [r0, #0]
1000f68c:	2206      	movs	r2, #6
1000f68e:	704b      	strb	r3, [r1, #1]
1000f690:	1c88      	adds	r0, r1, #2
1000f692:	4f1b      	ldr	r7, [pc, #108]	; (1000f700 <gapm_adv_report_evt_handler+0x84>)
1000f694:	1ca9      	adds	r1, r5, #2
1000f696:	47b8      	blx	r7
1000f698:	1c20      	adds	r0, r4, #0
1000f69a:	1c29      	adds	r1, r5, #0
1000f69c:	7a2a      	ldrb	r2, [r5, #8]
1000f69e:	3008      	adds	r0, #8
1000f6a0:	77c2      	strb	r2, [r0, #31]
1000f6a2:	3109      	adds	r1, #9
1000f6a4:	3528      	adds	r5, #40	; 0x28
1000f6a6:	47b8      	blx	r7
1000f6a8:	782b      	ldrb	r3, [r5, #0]
1000f6aa:	b25a      	sxtb	r2, r3
1000f6ac:	2a00      	cmp	r2, #0
1000f6ae:	da01      	bge.n	1000f6b4 <gapm_adv_report_evt_handler+0x38>
1000f6b0:	3301      	adds	r3, #1
1000f6b2:	b2db      	uxtb	r3, r3
1000f6b4:	1c22      	adds	r2, r4, #0
1000f6b6:	3228      	adds	r2, #40	; 0x28
1000f6b8:	7013      	strb	r3, [r2, #0]
1000f6ba:	2200      	movs	r2, #0
1000f6bc:	9b01      	ldr	r3, [sp, #4]
1000f6be:	4293      	cmp	r3, r2
1000f6c0:	d00a      	beq.n	1000f6d8 <gapm_adv_report_evt_handler+0x5c>
1000f6c2:	79e3      	ldrb	r3, [r4, #7]
1000f6c4:	323f      	adds	r2, #63	; 0x3f
1000f6c6:	1c19      	adds	r1, r3, #0
1000f6c8:	4391      	bics	r1, r2
1000f6ca:	3a3e      	subs	r2, #62	; 0x3e
1000f6cc:	29c0      	cmp	r1, #192	; 0xc0
1000f6ce:	d003      	beq.n	1000f6d8 <gapm_adv_report_evt_handler+0x5c>
1000f6d0:	065b      	lsls	r3, r3, #25
1000f6d2:	0fdb      	lsrs	r3, r3, #31
1000f6d4:	3202      	adds	r2, #2
1000f6d6:	1ad2      	subs	r2, r2, r3
1000f6d8:	7062      	strb	r2, [r4, #1]
1000f6da:	2e04      	cmp	r6, #4
1000f6dc:	d80f      	bhi.n	1000f6fe <gapm_adv_report_evt_handler+0x82>
1000f6de:	1c30      	adds	r0, r6, #0
1000f6e0:	f000 fc82 	bl	1000ffe8 <__gnu_thumb1_case_uqi>
1000f6e4:	09070503 	.word	0x09070503
1000f6e8:	0b          	.byte	0x0b
1000f6e9:	00          	.byte	0x00
1000f6ea:	2300      	movs	r3, #0
1000f6ec:	e006      	b.n	1000f6fc <gapm_adv_report_evt_handler+0x80>
1000f6ee:	2301      	movs	r3, #1
1000f6f0:	e004      	b.n	1000f6fc <gapm_adv_report_evt_handler+0x80>
1000f6f2:	2302      	movs	r3, #2
1000f6f4:	e002      	b.n	1000f6fc <gapm_adv_report_evt_handler+0x80>
1000f6f6:	2303      	movs	r3, #3
1000f6f8:	e000      	b.n	1000f6fc <gapm_adv_report_evt_handler+0x80>
1000f6fa:	2305      	movs	r3, #5
1000f6fc:	7023      	strb	r3, [r4, #0]
1000f6fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f700:	10011107 	.word	0x10011107

1000f704 <gapm_resolv_addr_cmd_handler>:
1000f704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f706:	2314      	movs	r3, #20
1000f708:	4c12      	ldr	r4, [pc, #72]	; (1000f754 <gapm_resolv_addr_cmd_handler+0x50>)
1000f70a:	1c17      	adds	r7, r2, #0
1000f70c:	7023      	strb	r3, [r4, #0]
1000f70e:	3b07      	subs	r3, #7
1000f710:	7063      	strb	r3, [r4, #1]
1000f712:	70a3      	strb	r3, [r4, #2]
1000f714:	2300      	movs	r3, #0
1000f716:	70e3      	strb	r3, [r4, #3]
1000f718:	4b0f      	ldr	r3, [pc, #60]	; (1000f758 <gapm_resolv_addr_cmd_handler+0x54>)
1000f71a:	1c05      	adds	r5, r0, #0
1000f71c:	881a      	ldrh	r2, [r3, #0]
1000f71e:	881b      	ldrh	r3, [r3, #0]
1000f720:	4e0e      	ldr	r6, [pc, #56]	; (1000f75c <gapm_resolv_addr_cmd_handler+0x58>)
1000f722:	0a1b      	lsrs	r3, r3, #8
1000f724:	7163      	strb	r3, [r4, #5]
1000f726:	2317      	movs	r3, #23
1000f728:	012d      	lsls	r5, r5, #4
1000f72a:	7122      	strb	r2, [r4, #4]
1000f72c:	7260      	strb	r0, [r4, #9]
1000f72e:	2206      	movs	r2, #6
1000f730:	480b      	ldr	r0, [pc, #44]	; (1000f760 <gapm_resolv_addr_cmd_handler+0x5c>)
1000f732:	7223      	strb	r3, [r4, #8]
1000f734:	47b0      	blx	r6
1000f736:	1c39      	adds	r1, r7, #0
1000f738:	1c2a      	adds	r2, r5, #0
1000f73a:	480a      	ldr	r0, [pc, #40]	; (1000f764 <gapm_resolv_addr_cmd_handler+0x60>)
1000f73c:	47b0      	blx	r6
1000f73e:	1c29      	adds	r1, r5, #0
1000f740:	3110      	adds	r1, #16
1000f742:	1c0b      	adds	r3, r1, #0
1000f744:	3b08      	subs	r3, #8
1000f746:	71a3      	strb	r3, [r4, #6]
1000f748:	121b      	asrs	r3, r3, #8
1000f74a:	71e3      	strb	r3, [r4, #7]
1000f74c:	1c20      	adds	r0, r4, #0
1000f74e:	4b06      	ldr	r3, [pc, #24]	; (1000f768 <gapm_resolv_addr_cmd_handler+0x64>)
1000f750:	4798      	blx	r3
1000f752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f754:	10017fd4 	.word	0x10017fd4
1000f758:	10017c64 	.word	0x10017c64
1000f75c:	10011107 	.word	0x10011107
1000f760:	10017fde 	.word	0x10017fde
1000f764:	10017fe4 	.word	0x10017fe4
1000f768:	1000e541 	.word	0x1000e541

1000f76c <gapm_addr_solved_ind_handler>:
1000f76c:	b570      	push	{r4, r5, r6, lr}
1000f76e:	1c04      	adds	r4, r0, #0
1000f770:	1c08      	adds	r0, r1, #0
1000f772:	1c0d      	adds	r5, r1, #0
1000f774:	4e05      	ldr	r6, [pc, #20]	; (1000f78c <gapm_addr_solved_ind_handler+0x20>)
1000f776:	1c21      	adds	r1, r4, #0
1000f778:	2206      	movs	r2, #6
1000f77a:	3011      	adds	r0, #17
1000f77c:	47b0      	blx	r6
1000f77e:	1c68      	adds	r0, r5, #1
1000f780:	1da1      	adds	r1, r4, #6
1000f782:	2210      	movs	r2, #16
1000f784:	47b0      	blx	r6
1000f786:	2300      	movs	r3, #0
1000f788:	702b      	strb	r3, [r5, #0]
1000f78a:	bd70      	pop	{r4, r5, r6, pc}
1000f78c:	10011107 	.word	0x10011107

1000f790 <gapm_profile_added_ind_handler>:
1000f790:	b510      	push	{r4, lr}
1000f792:	7843      	ldrb	r3, [r0, #1]
1000f794:	7902      	ldrb	r2, [r0, #4]
1000f796:	7944      	ldrb	r4, [r0, #5]
1000f798:	7800      	ldrb	r0, [r0, #0]
1000f79a:	021b      	lsls	r3, r3, #8
1000f79c:	4303      	orrs	r3, r0
1000f79e:	2b1b      	cmp	r3, #27
1000f7a0:	d104      	bne.n	1000f7ac <gapm_profile_added_ind_handler+0x1c>
1000f7a2:	2300      	movs	r3, #0
1000f7a4:	700b      	strb	r3, [r1, #0]
1000f7a6:	0223      	lsls	r3, r4, #8
1000f7a8:	4313      	orrs	r3, r2
1000f7aa:	804b      	strh	r3, [r1, #2]
1000f7ac:	203b      	movs	r0, #59	; 0x3b
1000f7ae:	bd10      	pop	{r4, pc}

1000f7b0 <gattc_read_req_ind_parser>:
1000f7b0:	7843      	ldrb	r3, [r0, #1]
1000f7b2:	7802      	ldrb	r2, [r0, #0]
1000f7b4:	021b      	lsls	r3, r3, #8
1000f7b6:	4313      	orrs	r3, r2
1000f7b8:	804b      	strh	r3, [r1, #2]
1000f7ba:	4770      	bx	lr

1000f7bc <gattc_write_req_ind_parser>:
1000f7bc:	b508      	push	{r3, lr}
1000f7be:	1c13      	adds	r3, r2, #0
1000f7c0:	0a00      	lsrs	r0, r0, #8
1000f7c2:	8010      	strh	r0, [r2, #0]
1000f7c4:	784a      	ldrb	r2, [r1, #1]
1000f7c6:	7808      	ldrb	r0, [r1, #0]
1000f7c8:	0212      	lsls	r2, r2, #8
1000f7ca:	4302      	orrs	r2, r0
1000f7cc:	805a      	strh	r2, [r3, #2]
1000f7ce:	78ca      	ldrb	r2, [r1, #3]
1000f7d0:	7888      	ldrb	r0, [r1, #2]
1000f7d2:	0212      	lsls	r2, r2, #8
1000f7d4:	4302      	orrs	r2, r0
1000f7d6:	809a      	strh	r2, [r3, #4]
1000f7d8:	794a      	ldrb	r2, [r1, #5]
1000f7da:	7908      	ldrb	r0, [r1, #4]
1000f7dc:	0212      	lsls	r2, r2, #8
1000f7de:	4302      	orrs	r2, r0
1000f7e0:	80da      	strh	r2, [r3, #6]
1000f7e2:	3308      	adds	r3, #8
1000f7e4:	1c18      	adds	r0, r3, #0
1000f7e6:	3106      	adds	r1, #6
1000f7e8:	4b01      	ldr	r3, [pc, #4]	; (1000f7f0 <gattc_write_req_ind_parser+0x34>)
1000f7ea:	4798      	blx	r3
1000f7ec:	bd08      	pop	{r3, pc}
1000f7ee:	46c0      	nop			; (mov r8, r8)
1000f7f0:	10011107 	.word	0x10011107

1000f7f4 <gattc_att_info_req_parser>:
1000f7f4:	7843      	ldrb	r3, [r0, #1]
1000f7f6:	7802      	ldrb	r2, [r0, #0]
1000f7f8:	021b      	lsls	r3, r3, #8
1000f7fa:	4313      	orrs	r3, r2
1000f7fc:	800b      	strh	r3, [r1, #0]
1000f7fe:	4770      	bx	lr

1000f800 <gattc_read_cfm>:
1000f800:	b538      	push	{r3, r4, r5, lr}
1000f802:	2514      	movs	r5, #20
1000f804:	1c1c      	adds	r4, r3, #0
1000f806:	4b14      	ldr	r3, [pc, #80]	; (1000f858 <gattc_read_cfm+0x58>)
1000f808:	70d9      	strb	r1, [r3, #3]
1000f80a:	4914      	ldr	r1, [pc, #80]	; (1000f85c <gattc_read_cfm+0x5c>)
1000f80c:	701d      	strb	r5, [r3, #0]
1000f80e:	3d08      	subs	r5, #8
1000f810:	705d      	strb	r5, [r3, #1]
1000f812:	709d      	strb	r5, [r3, #2]
1000f814:	880d      	ldrh	r5, [r1, #0]
1000f816:	8809      	ldrh	r1, [r1, #0]
1000f818:	7218      	strb	r0, [r3, #8]
1000f81a:	0a09      	lsrs	r1, r1, #8
1000f81c:	7159      	strb	r1, [r3, #5]
1000f81e:	0a00      	lsrs	r0, r0, #8
1000f820:	0a21      	lsrs	r1, r4, #8
1000f822:	711d      	strb	r5, [r3, #4]
1000f824:	7258      	strb	r0, [r3, #9]
1000f826:	729c      	strb	r4, [r3, #10]
1000f828:	72d9      	strb	r1, [r3, #11]
1000f82a:	731a      	strb	r2, [r3, #12]
1000f82c:	1c1d      	adds	r5, r3, #0
1000f82e:	2c00      	cmp	r4, #0
1000f830:	d007      	beq.n	1000f842 <gattc_read_cfm+0x42>
1000f832:	9904      	ldr	r1, [sp, #16]
1000f834:	1c22      	adds	r2, r4, #0
1000f836:	480a      	ldr	r0, [pc, #40]	; (1000f860 <gattc_read_cfm+0x60>)
1000f838:	4b0a      	ldr	r3, [pc, #40]	; (1000f864 <gattc_read_cfm+0x64>)
1000f83a:	340d      	adds	r4, #13
1000f83c:	4798      	blx	r3
1000f83e:	b2a1      	uxth	r1, r4
1000f840:	e001      	b.n	1000f846 <gattc_read_cfm+0x46>
1000f842:	210e      	movs	r1, #14
1000f844:	735c      	strb	r4, [r3, #13]
1000f846:	1c0b      	adds	r3, r1, #0
1000f848:	3b08      	subs	r3, #8
1000f84a:	71ab      	strb	r3, [r5, #6]
1000f84c:	121b      	asrs	r3, r3, #8
1000f84e:	71eb      	strb	r3, [r5, #7]
1000f850:	1c28      	adds	r0, r5, #0
1000f852:	4b05      	ldr	r3, [pc, #20]	; (1000f868 <gattc_read_cfm+0x68>)
1000f854:	4798      	blx	r3
1000f856:	bd38      	pop	{r3, r4, r5, pc}
1000f858:	10017fd4 	.word	0x10017fd4
1000f85c:	10017c64 	.word	0x10017c64
1000f860:	10017fe1 	.word	0x10017fe1
1000f864:	10011107 	.word	0x10011107
1000f868:	1000e541 	.word	0x1000e541

1000f86c <gattc_write_cfm>:
1000f86c:	4b0d      	ldr	r3, [pc, #52]	; (1000f8a4 <gattc_write_cfm+0x38>)
1000f86e:	b510      	push	{r4, lr}
1000f870:	729a      	strb	r2, [r3, #10]
1000f872:	2203      	movs	r2, #3
1000f874:	2416      	movs	r4, #22
1000f876:	719a      	strb	r2, [r3, #6]
1000f878:	2200      	movs	r2, #0
1000f87a:	70d9      	strb	r1, [r3, #3]
1000f87c:	490a      	ldr	r1, [pc, #40]	; (1000f8a8 <gattc_write_cfm+0x3c>)
1000f87e:	701c      	strb	r4, [r3, #0]
1000f880:	3c0a      	subs	r4, #10
1000f882:	705c      	strb	r4, [r3, #1]
1000f884:	709c      	strb	r4, [r3, #2]
1000f886:	880c      	ldrh	r4, [r1, #0]
1000f888:	8809      	ldrh	r1, [r1, #0]
1000f88a:	7218      	strb	r0, [r3, #8]
1000f88c:	0a09      	lsrs	r1, r1, #8
1000f88e:	0a00      	lsrs	r0, r0, #8
1000f890:	711c      	strb	r4, [r3, #4]
1000f892:	7159      	strb	r1, [r3, #5]
1000f894:	7258      	strb	r0, [r3, #9]
1000f896:	71da      	strb	r2, [r3, #7]
1000f898:	1c18      	adds	r0, r3, #0
1000f89a:	210b      	movs	r1, #11
1000f89c:	4b03      	ldr	r3, [pc, #12]	; (1000f8ac <gattc_write_cfm+0x40>)
1000f89e:	4798      	blx	r3
1000f8a0:	bd10      	pop	{r4, pc}
1000f8a2:	46c0      	nop			; (mov r8, r8)
1000f8a4:	10017fd4 	.word	0x10017fd4
1000f8a8:	10017c64 	.word	0x10017c64
1000f8ac:	1000e541 	.word	0x1000e541

1000f8b0 <gattc_att_info_cfm>:
1000f8b0:	b538      	push	{r3, r4, r5, lr}
1000f8b2:	4c0e      	ldr	r4, [pc, #56]	; (1000f8ec <gattc_att_info_cfm+0x3c>)
1000f8b4:	2518      	movs	r5, #24
1000f8b6:	7323      	strb	r3, [r4, #12]
1000f8b8:	2305      	movs	r3, #5
1000f8ba:	71a3      	strb	r3, [r4, #6]
1000f8bc:	2300      	movs	r3, #0
1000f8be:	70e1      	strb	r1, [r4, #3]
1000f8c0:	490b      	ldr	r1, [pc, #44]	; (1000f8f0 <gattc_att_info_cfm+0x40>)
1000f8c2:	7025      	strb	r5, [r4, #0]
1000f8c4:	3d0c      	subs	r5, #12
1000f8c6:	7065      	strb	r5, [r4, #1]
1000f8c8:	70a5      	strb	r5, [r4, #2]
1000f8ca:	880d      	ldrh	r5, [r1, #0]
1000f8cc:	8809      	ldrh	r1, [r1, #0]
1000f8ce:	7220      	strb	r0, [r4, #8]
1000f8d0:	0a09      	lsrs	r1, r1, #8
1000f8d2:	0a00      	lsrs	r0, r0, #8
1000f8d4:	7161      	strb	r1, [r4, #5]
1000f8d6:	7260      	strb	r0, [r4, #9]
1000f8d8:	72a2      	strb	r2, [r4, #10]
1000f8da:	71e3      	strb	r3, [r4, #7]
1000f8dc:	0a12      	lsrs	r2, r2, #8
1000f8de:	1c20      	adds	r0, r4, #0
1000f8e0:	210d      	movs	r1, #13
1000f8e2:	4b04      	ldr	r3, [pc, #16]	; (1000f8f4 <gattc_att_info_cfm+0x44>)
1000f8e4:	7125      	strb	r5, [r4, #4]
1000f8e6:	72e2      	strb	r2, [r4, #11]
1000f8e8:	4798      	blx	r3
1000f8ea:	bd38      	pop	{r3, r4, r5, pc}
1000f8ec:	10017fd4 	.word	0x10017fd4
1000f8f0:	10017c64 	.word	0x10017c64
1000f8f4:	1000e541 	.word	0x1000e541

1000f8f8 <gattc_send_evt_cmd_handler>:
1000f8f8:	b570      	push	{r4, r5, r6, lr}
1000f8fa:	2610      	movs	r6, #16
1000f8fc:	ac04      	add	r4, sp, #16
1000f8fe:	8825      	ldrh	r5, [r4, #0]
1000f900:	4c15      	ldr	r4, [pc, #84]	; (1000f958 <gattc_send_evt_cmd_handler+0x60>)
1000f902:	70e2      	strb	r2, [r4, #3]
1000f904:	4a15      	ldr	r2, [pc, #84]	; (1000f95c <gattc_send_evt_cmd_handler+0x64>)
1000f906:	7026      	strb	r6, [r4, #0]
1000f908:	3e04      	subs	r6, #4
1000f90a:	7066      	strb	r6, [r4, #1]
1000f90c:	70a6      	strb	r6, [r4, #2]
1000f90e:	8816      	ldrh	r6, [r2, #0]
1000f910:	8812      	ldrh	r2, [r2, #0]
1000f912:	7220      	strb	r0, [r4, #8]
1000f914:	0a12      	lsrs	r2, r2, #8
1000f916:	7162      	strb	r2, [r4, #5]
1000f918:	4a11      	ldr	r2, [pc, #68]	; (1000f960 <gattc_send_evt_cmd_handler+0x68>)
1000f91a:	7321      	strb	r1, [r4, #12]
1000f91c:	8812      	ldrh	r2, [r2, #0]
1000f91e:	73a5      	strb	r5, [r4, #14]
1000f920:	3201      	adds	r2, #1
1000f922:	7262      	strb	r2, [r4, #9]
1000f924:	1212      	asrs	r2, r2, #8
1000f926:	72a2      	strb	r2, [r4, #10]
1000f928:	2200      	movs	r2, #0
1000f92a:	72e2      	strb	r2, [r4, #11]
1000f92c:	0a0a      	lsrs	r2, r1, #8
1000f92e:	7362      	strb	r2, [r4, #13]
1000f930:	0a2a      	lsrs	r2, r5, #8
1000f932:	73e2      	strb	r2, [r4, #15]
1000f934:	1c19      	adds	r1, r3, #0
1000f936:	1c2a      	adds	r2, r5, #0
1000f938:	4b0a      	ldr	r3, [pc, #40]	; (1000f964 <gattc_send_evt_cmd_handler+0x6c>)
1000f93a:	3510      	adds	r5, #16
1000f93c:	480a      	ldr	r0, [pc, #40]	; (1000f968 <gattc_send_evt_cmd_handler+0x70>)
1000f93e:	7126      	strb	r6, [r4, #4]
1000f940:	4798      	blx	r3
1000f942:	b2a9      	uxth	r1, r5
1000f944:	1c0b      	adds	r3, r1, #0
1000f946:	3b08      	subs	r3, #8
1000f948:	71a3      	strb	r3, [r4, #6]
1000f94a:	121b      	asrs	r3, r3, #8
1000f94c:	71e3      	strb	r3, [r4, #7]
1000f94e:	1c20      	adds	r0, r4, #0
1000f950:	4b06      	ldr	r3, [pc, #24]	; (1000f96c <gattc_send_evt_cmd_handler+0x74>)
1000f952:	4798      	blx	r3
1000f954:	bd70      	pop	{r4, r5, r6, pc}
1000f956:	46c0      	nop			; (mov r8, r8)
1000f958:	10017fd4 	.word	0x10017fd4
1000f95c:	10017c64 	.word	0x10017c64
1000f960:	10015320 	.word	0x10015320
1000f964:	10011107 	.word	0x10011107
1000f968:	10017fe4 	.word	0x10017fe4
1000f96c:	1000e541 	.word	0x1000e541

1000f970 <gattc_disc_cmd_handler>:
1000f970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f972:	2603      	movs	r6, #3
1000f974:	ac06      	add	r4, sp, #24
1000f976:	1c0d      	adds	r5, r1, #0
1000f978:	cc02      	ldmia	r4!, {r1}
1000f97a:	8827      	ldrh	r7, [r4, #0]
1000f97c:	4c1a      	ldr	r4, [pc, #104]	; (1000f9e8 <gattc_disc_cmd_handler+0x78>)
1000f97e:	7026      	strb	r6, [r4, #0]
1000f980:	3609      	adds	r6, #9
1000f982:	7066      	strb	r6, [r4, #1]
1000f984:	70a6      	strb	r6, [r4, #2]
1000f986:	4e19      	ldr	r6, [pc, #100]	; (1000f9ec <gattc_disc_cmd_handler+0x7c>)
1000f988:	70e7      	strb	r7, [r4, #3]
1000f98a:	8837      	ldrh	r7, [r6, #0]
1000f98c:	8836      	ldrh	r6, [r6, #0]
1000f98e:	7127      	strb	r7, [r4, #4]
1000f990:	0a36      	lsrs	r6, r6, #8
1000f992:	7166      	strb	r6, [r4, #5]
1000f994:	7220      	strb	r0, [r4, #8]
1000f996:	2900      	cmp	r1, #0
1000f998:	d102      	bne.n	1000f9a0 <gattc_disc_cmd_handler+0x30>
1000f99a:	2002      	movs	r0, #2
1000f99c:	7260      	strb	r0, [r4, #9]
1000f99e:	e000      	b.n	1000f9a2 <gattc_disc_cmd_handler+0x32>
1000f9a0:	7265      	strb	r5, [r4, #9]
1000f9a2:	4e13      	ldr	r6, [pc, #76]	; (1000f9f0 <gattc_disc_cmd_handler+0x80>)
1000f9a4:	7322      	strb	r2, [r4, #12]
1000f9a6:	8830      	ldrh	r0, [r6, #0]
1000f9a8:	0a12      	lsrs	r2, r2, #8
1000f9aa:	0a07      	lsrs	r7, r0, #8
1000f9ac:	72a0      	strb	r0, [r4, #10]
1000f9ae:	73a3      	strb	r3, [r4, #14]
1000f9b0:	3001      	adds	r0, #1
1000f9b2:	0a1b      	lsrs	r3, r3, #8
1000f9b4:	72e7      	strb	r7, [r4, #11]
1000f9b6:	8030      	strh	r0, [r6, #0]
1000f9b8:	7362      	strb	r2, [r4, #13]
1000f9ba:	73e3      	strb	r3, [r4, #15]
1000f9bc:	2900      	cmp	r1, #0
1000f9be:	d103      	bne.n	1000f9c8 <gattc_disc_cmd_handler+0x58>
1000f9c0:	7421      	strb	r1, [r4, #16]
1000f9c2:	7461      	strb	r1, [r4, #17]
1000f9c4:	3112      	adds	r1, #18
1000f9c6:	e005      	b.n	1000f9d4 <gattc_disc_cmd_handler+0x64>
1000f9c8:	480a      	ldr	r0, [pc, #40]	; (1000f9f4 <gattc_disc_cmd_handler+0x84>)
1000f9ca:	1c2a      	adds	r2, r5, #0
1000f9cc:	4b0a      	ldr	r3, [pc, #40]	; (1000f9f8 <gattc_disc_cmd_handler+0x88>)
1000f9ce:	4798      	blx	r3
1000f9d0:	1c29      	adds	r1, r5, #0
1000f9d2:	3110      	adds	r1, #16
1000f9d4:	1c0b      	adds	r3, r1, #0
1000f9d6:	3b08      	subs	r3, #8
1000f9d8:	71a3      	strb	r3, [r4, #6]
1000f9da:	121b      	asrs	r3, r3, #8
1000f9dc:	71e3      	strb	r3, [r4, #7]
1000f9de:	1c20      	adds	r0, r4, #0
1000f9e0:	4b06      	ldr	r3, [pc, #24]	; (1000f9fc <gattc_disc_cmd_handler+0x8c>)
1000f9e2:	4798      	blx	r3
1000f9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f9e6:	46c0      	nop			; (mov r8, r8)
1000f9e8:	10017fd4 	.word	0x10017fd4
1000f9ec:	10017c64 	.word	0x10017c64
1000f9f0:	1001531e 	.word	0x1001531e
1000f9f4:	10017fe4 	.word	0x10017fe4
1000f9f8:	10011107 	.word	0x10011107
1000f9fc:	1000e541 	.word	0x1000e541

1000fa00 <gattc_write_cmd_handler>:
1000fa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fa02:	260a      	movs	r6, #10
1000fa04:	ac06      	add	r4, sp, #24
1000fa06:	8825      	ldrh	r5, [r4, #0]
1000fa08:	ac08      	add	r4, sp, #32
1000fa0a:	8827      	ldrh	r7, [r4, #0]
1000fa0c:	4c18      	ldr	r4, [pc, #96]	; (1000fa70 <gattc_write_cmd_handler+0x70>)
1000fa0e:	73a3      	strb	r3, [r4, #14]
1000fa10:	0a1b      	lsrs	r3, r3, #8
1000fa12:	73e3      	strb	r3, [r4, #15]
1000fa14:	0a2b      	lsrs	r3, r5, #8
1000fa16:	7463      	strb	r3, [r4, #17]
1000fa18:	2300      	movs	r3, #0
1000fa1a:	7026      	strb	r6, [r4, #0]
1000fa1c:	3602      	adds	r6, #2
1000fa1e:	7066      	strb	r6, [r4, #1]
1000fa20:	70a6      	strb	r6, [r4, #2]
1000fa22:	4e14      	ldr	r6, [pc, #80]	; (1000fa74 <gattc_write_cmd_handler+0x74>)
1000fa24:	7220      	strb	r0, [r4, #8]
1000fa26:	4814      	ldr	r0, [pc, #80]	; (1000fa78 <gattc_write_cmd_handler+0x78>)
1000fa28:	70e7      	strb	r7, [r4, #3]
1000fa2a:	8837      	ldrh	r7, [r6, #0]
1000fa2c:	8836      	ldrh	r6, [r6, #0]
1000fa2e:	7261      	strb	r1, [r4, #9]
1000fa30:	8801      	ldrh	r1, [r0, #0]
1000fa32:	0a36      	lsrs	r6, r6, #8
1000fa34:	7166      	strb	r6, [r4, #5]
1000fa36:	72a1      	strb	r1, [r4, #10]
1000fa38:	0a0e      	lsrs	r6, r1, #8
1000fa3a:	7322      	strb	r2, [r4, #12]
1000fa3c:	3101      	adds	r1, #1
1000fa3e:	0a12      	lsrs	r2, r2, #8
1000fa40:	8001      	strh	r1, [r0, #0]
1000fa42:	7362      	strb	r2, [r4, #13]
1000fa44:	7425      	strb	r5, [r4, #16]
1000fa46:	1c2a      	adds	r2, r5, #0
1000fa48:	74a3      	strb	r3, [r4, #18]
1000fa4a:	74e3      	strb	r3, [r4, #19]
1000fa4c:	9907      	ldr	r1, [sp, #28]
1000fa4e:	3514      	adds	r5, #20
1000fa50:	4b0a      	ldr	r3, [pc, #40]	; (1000fa7c <gattc_write_cmd_handler+0x7c>)
1000fa52:	480b      	ldr	r0, [pc, #44]	; (1000fa80 <gattc_write_cmd_handler+0x80>)
1000fa54:	7127      	strb	r7, [r4, #4]
1000fa56:	72e6      	strb	r6, [r4, #11]
1000fa58:	4798      	blx	r3
1000fa5a:	b2a9      	uxth	r1, r5
1000fa5c:	1c0b      	adds	r3, r1, #0
1000fa5e:	3b08      	subs	r3, #8
1000fa60:	71a3      	strb	r3, [r4, #6]
1000fa62:	121b      	asrs	r3, r3, #8
1000fa64:	71e3      	strb	r3, [r4, #7]
1000fa66:	1c20      	adds	r0, r4, #0
1000fa68:	4b06      	ldr	r3, [pc, #24]	; (1000fa84 <gattc_write_cmd_handler+0x84>)
1000fa6a:	4798      	blx	r3
1000fa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fa6e:	46c0      	nop			; (mov r8, r8)
1000fa70:	10017fd4 	.word	0x10017fd4
1000fa74:	10017c64 	.word	0x10017c64
1000fa78:	1001531e 	.word	0x1001531e
1000fa7c:	10011107 	.word	0x10011107
1000fa80:	10017fe8 	.word	0x10017fe8
1000fa84:	1000e541 	.word	0x1000e541

1000fa88 <gattc_event_cfm_handler>:
1000fa88:	220e      	movs	r2, #14
1000fa8a:	b508      	push	{r3, lr}
1000fa8c:	4b0b      	ldr	r3, [pc, #44]	; (1000fabc <gattc_event_cfm_handler+0x34>)
1000fa8e:	701a      	strb	r2, [r3, #0]
1000fa90:	3a02      	subs	r2, #2
1000fa92:	705a      	strb	r2, [r3, #1]
1000fa94:	709a      	strb	r2, [r3, #2]
1000fa96:	4a0a      	ldr	r2, [pc, #40]	; (1000fac0 <gattc_event_cfm_handler+0x38>)
1000fa98:	70d8      	strb	r0, [r3, #3]
1000fa9a:	8810      	ldrh	r0, [r2, #0]
1000fa9c:	8812      	ldrh	r2, [r2, #0]
1000fa9e:	7219      	strb	r1, [r3, #8]
1000faa0:	0a12      	lsrs	r2, r2, #8
1000faa2:	715a      	strb	r2, [r3, #5]
1000faa4:	2202      	movs	r2, #2
1000faa6:	719a      	strb	r2, [r3, #6]
1000faa8:	2200      	movs	r2, #0
1000faaa:	0a09      	lsrs	r1, r1, #8
1000faac:	7118      	strb	r0, [r3, #4]
1000faae:	7259      	strb	r1, [r3, #9]
1000fab0:	71da      	strb	r2, [r3, #7]
1000fab2:	1c18      	adds	r0, r3, #0
1000fab4:	210a      	movs	r1, #10
1000fab6:	4b03      	ldr	r3, [pc, #12]	; (1000fac4 <gattc_event_cfm_handler+0x3c>)
1000fab8:	4798      	blx	r3
1000faba:	bd08      	pop	{r3, pc}
1000fabc:	10017fd4 	.word	0x10017fd4
1000fac0:	10017c64 	.word	0x10017c64
1000fac4:	1000e541 	.word	0x1000e541

1000fac8 <gattc_disc_svc_ind_parser>:
1000fac8:	b570      	push	{r4, r5, r6, lr}
1000faca:	1c15      	adds	r5, r2, #0
1000facc:	0a00      	lsrs	r0, r0, #8
1000face:	8010      	strh	r0, [r2, #0]
1000fad0:	784b      	ldrb	r3, [r1, #1]
1000fad2:	780a      	ldrb	r2, [r1, #0]
1000fad4:	021b      	lsls	r3, r3, #8
1000fad6:	4313      	orrs	r3, r2
1000fad8:	806b      	strh	r3, [r5, #2]
1000fada:	78cb      	ldrb	r3, [r1, #3]
1000fadc:	788a      	ldrb	r2, [r1, #2]
1000fade:	021b      	lsls	r3, r3, #8
1000fae0:	4313      	orrs	r3, r2
1000fae2:	80ab      	strh	r3, [r5, #4]
1000fae4:	790e      	ldrb	r6, [r1, #4]
1000fae6:	4b05      	ldr	r3, [pc, #20]	; (1000fafc <gattc_disc_svc_ind_parser+0x34>)
1000fae8:	1c30      	adds	r0, r6, #0
1000faea:	1c0c      	adds	r4, r1, #0
1000faec:	4798      	blx	r3
1000faee:	1c32      	adds	r2, r6, #0
1000faf0:	71a8      	strb	r0, [r5, #6]
1000faf2:	1d61      	adds	r1, r4, #5
1000faf4:	1de8      	adds	r0, r5, #7
1000faf6:	4b02      	ldr	r3, [pc, #8]	; (1000fb00 <gattc_disc_svc_ind_parser+0x38>)
1000faf8:	4798      	blx	r3
1000fafa:	bd70      	pop	{r4, r5, r6, pc}
1000fafc:	1000d78d 	.word	0x1000d78d
1000fb00:	10011107 	.word	0x10011107

1000fb04 <gattc_disc_svc_incl_ind_parser>:
1000fb04:	b570      	push	{r4, r5, r6, lr}
1000fb06:	1c15      	adds	r5, r2, #0
1000fb08:	0a00      	lsrs	r0, r0, #8
1000fb0a:	8010      	strh	r0, [r2, #0]
1000fb0c:	784b      	ldrb	r3, [r1, #1]
1000fb0e:	780a      	ldrb	r2, [r1, #0]
1000fb10:	021b      	lsls	r3, r3, #8
1000fb12:	4313      	orrs	r3, r2
1000fb14:	806b      	strh	r3, [r5, #2]
1000fb16:	78cb      	ldrb	r3, [r1, #3]
1000fb18:	788a      	ldrb	r2, [r1, #2]
1000fb1a:	021b      	lsls	r3, r3, #8
1000fb1c:	4313      	orrs	r3, r2
1000fb1e:	80ab      	strh	r3, [r5, #4]
1000fb20:	794b      	ldrb	r3, [r1, #5]
1000fb22:	790a      	ldrb	r2, [r1, #4]
1000fb24:	021b      	lsls	r3, r3, #8
1000fb26:	4313      	orrs	r3, r2
1000fb28:	80eb      	strh	r3, [r5, #6]
1000fb2a:	798e      	ldrb	r6, [r1, #6]
1000fb2c:	4b05      	ldr	r3, [pc, #20]	; (1000fb44 <gattc_disc_svc_incl_ind_parser+0x40>)
1000fb2e:	1c30      	adds	r0, r6, #0
1000fb30:	1c0c      	adds	r4, r1, #0
1000fb32:	4798      	blx	r3
1000fb34:	7228      	strb	r0, [r5, #8]
1000fb36:	1c28      	adds	r0, r5, #0
1000fb38:	1c32      	adds	r2, r6, #0
1000fb3a:	1de1      	adds	r1, r4, #7
1000fb3c:	4b02      	ldr	r3, [pc, #8]	; (1000fb48 <gattc_disc_svc_incl_ind_parser+0x44>)
1000fb3e:	3009      	adds	r0, #9
1000fb40:	4798      	blx	r3
1000fb42:	bd70      	pop	{r4, r5, r6, pc}
1000fb44:	1000d78d 	.word	0x1000d78d
1000fb48:	10011107 	.word	0x10011107

1000fb4c <gattc_disc_char_ind_parser>:
1000fb4c:	b570      	push	{r4, r5, r6, lr}
1000fb4e:	1c15      	adds	r5, r2, #0
1000fb50:	0a00      	lsrs	r0, r0, #8
1000fb52:	8010      	strh	r0, [r2, #0]
1000fb54:	784b      	ldrb	r3, [r1, #1]
1000fb56:	780a      	ldrb	r2, [r1, #0]
1000fb58:	021b      	lsls	r3, r3, #8
1000fb5a:	4313      	orrs	r3, r2
1000fb5c:	806b      	strh	r3, [r5, #2]
1000fb5e:	78cb      	ldrb	r3, [r1, #3]
1000fb60:	788a      	ldrb	r2, [r1, #2]
1000fb62:	021b      	lsls	r3, r3, #8
1000fb64:	4313      	orrs	r3, r2
1000fb66:	80ab      	strh	r3, [r5, #4]
1000fb68:	790b      	ldrb	r3, [r1, #4]
1000fb6a:	1c0c      	adds	r4, r1, #0
1000fb6c:	71ab      	strb	r3, [r5, #6]
1000fb6e:	794e      	ldrb	r6, [r1, #5]
1000fb70:	4b05      	ldr	r3, [pc, #20]	; (1000fb88 <gattc_disc_char_ind_parser+0x3c>)
1000fb72:	1c30      	adds	r0, r6, #0
1000fb74:	4798      	blx	r3
1000fb76:	71e8      	strb	r0, [r5, #7]
1000fb78:	1c28      	adds	r0, r5, #0
1000fb7a:	1c32      	adds	r2, r6, #0
1000fb7c:	1da1      	adds	r1, r4, #6
1000fb7e:	4b03      	ldr	r3, [pc, #12]	; (1000fb8c <gattc_disc_char_ind_parser+0x40>)
1000fb80:	3008      	adds	r0, #8
1000fb82:	4798      	blx	r3
1000fb84:	bd70      	pop	{r4, r5, r6, pc}
1000fb86:	46c0      	nop			; (mov r8, r8)
1000fb88:	1000d78d 	.word	0x1000d78d
1000fb8c:	10011107 	.word	0x10011107

1000fb90 <gattc_disc_char_desc_ind_parser>:
1000fb90:	b570      	push	{r4, r5, r6, lr}
1000fb92:	1c15      	adds	r5, r2, #0
1000fb94:	0a00      	lsrs	r0, r0, #8
1000fb96:	8010      	strh	r0, [r2, #0]
1000fb98:	784b      	ldrb	r3, [r1, #1]
1000fb9a:	780a      	ldrb	r2, [r1, #0]
1000fb9c:	021b      	lsls	r3, r3, #8
1000fb9e:	4313      	orrs	r3, r2
1000fba0:	806b      	strh	r3, [r5, #2]
1000fba2:	788e      	ldrb	r6, [r1, #2]
1000fba4:	4b05      	ldr	r3, [pc, #20]	; (1000fbbc <gattc_disc_char_desc_ind_parser+0x2c>)
1000fba6:	1c30      	adds	r0, r6, #0
1000fba8:	1c0c      	adds	r4, r1, #0
1000fbaa:	4798      	blx	r3
1000fbac:	1c32      	adds	r2, r6, #0
1000fbae:	7128      	strb	r0, [r5, #4]
1000fbb0:	1ce1      	adds	r1, r4, #3
1000fbb2:	1d68      	adds	r0, r5, #5
1000fbb4:	4b02      	ldr	r3, [pc, #8]	; (1000fbc0 <gattc_disc_char_desc_ind_parser+0x30>)
1000fbb6:	4798      	blx	r3
1000fbb8:	bd70      	pop	{r4, r5, r6, pc}
1000fbba:	46c0      	nop			; (mov r8, r8)
1000fbbc:	1000d78d 	.word	0x1000d78d
1000fbc0:	10011107 	.word	0x10011107

1000fbc4 <gattc_event_ind_and_notification_parser>:
1000fbc4:	b510      	push	{r4, lr}
1000fbc6:	780c      	ldrb	r4, [r1, #0]
1000fbc8:	1c13      	adds	r3, r2, #0
1000fbca:	2c12      	cmp	r4, #18
1000fbcc:	d10e      	bne.n	1000fbec <gattc_event_ind_and_notification_parser+0x28>
1000fbce:	0a00      	lsrs	r0, r0, #8
1000fbd0:	8010      	strh	r0, [r2, #0]
1000fbd2:	788a      	ldrb	r2, [r1, #2]
1000fbd4:	709a      	strb	r2, [r3, #2]
1000fbd6:	7948      	ldrb	r0, [r1, #5]
1000fbd8:	790c      	ldrb	r4, [r1, #4]
1000fbda:	0200      	lsls	r0, r0, #8
1000fbdc:	4320      	orrs	r0, r4
1000fbde:	8098      	strh	r0, [r3, #4]
1000fbe0:	3106      	adds	r1, #6
1000fbe2:	1d98      	adds	r0, r3, #6
1000fbe4:	4b0b      	ldr	r3, [pc, #44]	; (1000fc14 <gattc_event_ind_and_notification_parser+0x50>)
1000fbe6:	4798      	blx	r3
1000fbe8:	221b      	movs	r2, #27
1000fbea:	e010      	b.n	1000fc0e <gattc_event_ind_and_notification_parser+0x4a>
1000fbec:	2200      	movs	r2, #0
1000fbee:	2c13      	cmp	r4, #19
1000fbf0:	d10d      	bne.n	1000fc0e <gattc_event_ind_and_notification_parser+0x4a>
1000fbf2:	0a00      	lsrs	r0, r0, #8
1000fbf4:	8018      	strh	r0, [r3, #0]
1000fbf6:	788a      	ldrb	r2, [r1, #2]
1000fbf8:	709a      	strb	r2, [r3, #2]
1000fbfa:	7908      	ldrb	r0, [r1, #4]
1000fbfc:	78cc      	ldrb	r4, [r1, #3]
1000fbfe:	0200      	lsls	r0, r0, #8
1000fc00:	4320      	orrs	r0, r4
1000fc02:	8098      	strh	r0, [r3, #4]
1000fc04:	3106      	adds	r1, #6
1000fc06:	1d98      	adds	r0, r3, #6
1000fc08:	4b02      	ldr	r3, [pc, #8]	; (1000fc14 <gattc_event_ind_and_notification_parser+0x50>)
1000fc0a:	4798      	blx	r3
1000fc0c:	221c      	movs	r2, #28
1000fc0e:	1c10      	adds	r0, r2, #0
1000fc10:	bd10      	pop	{r4, pc}
1000fc12:	46c0      	nop			; (mov r8, r8)
1000fc14:	10011107 	.word	0x10011107

1000fc18 <gattc_complete_evt_handler>:
1000fc18:	b500      	push	{lr}
1000fc1a:	0a00      	lsrs	r0, r0, #8
1000fc1c:	8010      	strh	r0, [r2, #0]
1000fc1e:	7808      	ldrb	r0, [r1, #0]
1000fc20:	7090      	strb	r0, [r2, #2]
1000fc22:	784b      	ldrb	r3, [r1, #1]
1000fc24:	3801      	subs	r0, #1
1000fc26:	70d3      	strb	r3, [r2, #3]
1000fc28:	2813      	cmp	r0, #19
1000fc2a:	d82c      	bhi.n	1000fc86 <gattc_complete_evt_handler+0x6e>
1000fc2c:	f000 f9dc 	bl	1000ffe8 <__gnu_thumb1_case_uqi>
1000fc30:	0a0a0a0c 	.word	0x0a0a0a0c
1000fc34:	210a0a0a 	.word	0x210a0a0a
1000fc38:	111f2121 	.word	0x111f2121
1000fc3c:	2b111111 	.word	0x2b111111
1000fc40:	2919132b 	.word	0x2919132b
1000fc44:	2017      	movs	r0, #23
1000fc46:	e01f      	b.n	1000fc88 <gattc_complete_evt_handler+0x70>
1000fc48:	2024      	movs	r0, #36	; 0x24
1000fc4a:	2b00      	cmp	r3, #0
1000fc4c:	d11c      	bne.n	1000fc88 <gattc_complete_evt_handler+0x70>
1000fc4e:	3017      	adds	r0, #23
1000fc50:	e01a      	b.n	1000fc88 <gattc_complete_evt_handler+0x70>
1000fc52:	2025      	movs	r0, #37	; 0x25
1000fc54:	e018      	b.n	1000fc88 <gattc_complete_evt_handler+0x70>
1000fc56:	4a0d      	ldr	r2, [pc, #52]	; (1000fc8c <gattc_complete_evt_handler+0x74>)
1000fc58:	201d      	movs	r0, #29
1000fc5a:	6813      	ldr	r3, [r2, #0]
1000fc5c:	3b01      	subs	r3, #1
1000fc5e:	6013      	str	r3, [r2, #0]
1000fc60:	e012      	b.n	1000fc88 <gattc_complete_evt_handler+0x70>
1000fc62:	4a0a      	ldr	r2, [pc, #40]	; (1000fc8c <gattc_complete_evt_handler+0x74>)
1000fc64:	201e      	movs	r0, #30
1000fc66:	6813      	ldr	r3, [r2, #0]
1000fc68:	3b01      	subs	r3, #1
1000fc6a:	6013      	str	r3, [r2, #0]
1000fc6c:	e00c      	b.n	1000fc88 <gattc_complete_evt_handler+0x70>
1000fc6e:	2019      	movs	r0, #25
1000fc70:	e00a      	b.n	1000fc88 <gattc_complete_evt_handler+0x70>
1000fc72:	203b      	movs	r0, #59	; 0x3b
1000fc74:	2b00      	cmp	r3, #0
1000fc76:	d007      	beq.n	1000fc88 <gattc_complete_evt_handler+0x70>
1000fc78:	2182      	movs	r1, #130	; 0x82
1000fc7a:	0089      	lsls	r1, r1, #2
1000fc7c:	5453      	strb	r3, [r2, r1]
1000fc7e:	3823      	subs	r0, #35	; 0x23
1000fc80:	e002      	b.n	1000fc88 <gattc_complete_evt_handler+0x70>
1000fc82:	2021      	movs	r0, #33	; 0x21
1000fc84:	e000      	b.n	1000fc88 <gattc_complete_evt_handler+0x70>
1000fc86:	2000      	movs	r0, #0
1000fc88:	bd00      	pop	{pc}
1000fc8a:	46c0      	nop			; (mov r8, r8)
1000fc8c:	10015324 	.word	0x10015324

1000fc90 <gattc_event_mtu_changed_ind_parser>:
1000fc90:	0a00      	lsrs	r0, r0, #8
1000fc92:	8010      	strh	r0, [r2, #0]
1000fc94:	784b      	ldrb	r3, [r1, #1]
1000fc96:	7809      	ldrb	r1, [r1, #0]
1000fc98:	021b      	lsls	r3, r3, #8
1000fc9a:	430b      	orrs	r3, r1
1000fc9c:	8053      	strh	r3, [r2, #2]
1000fc9e:	4770      	bx	lr

1000fca0 <gattc_read_ind_parser>:
1000fca0:	0a00      	lsrs	r0, r0, #8
1000fca2:	b508      	push	{r3, lr}
1000fca4:	8010      	strh	r0, [r2, #0]
1000fca6:	1c13      	adds	r3, r2, #0
1000fca8:	2282      	movs	r2, #130	; 0x82
1000fcaa:	2000      	movs	r0, #0
1000fcac:	0092      	lsls	r2, r2, #2
1000fcae:	5498      	strb	r0, [r3, r2]
1000fcb0:	784a      	ldrb	r2, [r1, #1]
1000fcb2:	7808      	ldrb	r0, [r1, #0]
1000fcb4:	0212      	lsls	r2, r2, #8
1000fcb6:	4302      	orrs	r2, r0
1000fcb8:	805a      	strh	r2, [r3, #2]
1000fcba:	78ca      	ldrb	r2, [r1, #3]
1000fcbc:	7888      	ldrb	r0, [r1, #2]
1000fcbe:	0212      	lsls	r2, r2, #8
1000fcc0:	4302      	orrs	r2, r0
1000fcc2:	80da      	strh	r2, [r3, #6]
1000fcc4:	794a      	ldrb	r2, [r1, #5]
1000fcc6:	7908      	ldrb	r0, [r1, #4]
1000fcc8:	0212      	lsls	r2, r2, #8
1000fcca:	4302      	orrs	r2, r0
1000fccc:	809a      	strh	r2, [r3, #4]
1000fcce:	3308      	adds	r3, #8
1000fcd0:	1c18      	adds	r0, r3, #0
1000fcd2:	3106      	adds	r1, #6
1000fcd4:	4b01      	ldr	r3, [pc, #4]	; (1000fcdc <gattc_read_ind_parser+0x3c>)
1000fcd6:	4798      	blx	r3
1000fcd8:	bd08      	pop	{r3, pc}
1000fcda:	46c0      	nop			; (mov r8, r8)
1000fcdc:	10011107 	.word	0x10011107

1000fce0 <gattc_svc_changed_cfg_ind_parser>:
1000fce0:	0a00      	lsrs	r0, r0, #8
1000fce2:	8010      	strh	r0, [r2, #0]
1000fce4:	784b      	ldrb	r3, [r1, #1]
1000fce6:	7809      	ldrb	r1, [r1, #0]
1000fce8:	021b      	lsls	r3, r3, #8
1000fcea:	430b      	orrs	r3, r1
1000fcec:	8053      	strh	r3, [r2, #2]
1000fcee:	4770      	bx	lr

1000fcf0 <init_gattc_task_module>:
1000fcf0:	2300      	movs	r3, #0
1000fcf2:	4a02      	ldr	r2, [pc, #8]	; (1000fcfc <init_gattc_task_module+0xc>)
1000fcf4:	8013      	strh	r3, [r2, #0]
1000fcf6:	4a02      	ldr	r2, [pc, #8]	; (1000fd00 <init_gattc_task_module+0x10>)
1000fcf8:	8013      	strh	r3, [r2, #0]
1000fcfa:	4770      	bx	lr
1000fcfc:	1001531e 	.word	0x1001531e
1000fd00:	10015320 	.word	0x10015320

1000fd04 <gattm_add_svc_req_handler>:
1000fd04:	2200      	movs	r2, #0
1000fd06:	210b      	movs	r1, #11
1000fd08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fd0a:	1c04      	adds	r4, r0, #0
1000fd0c:	7943      	ldrb	r3, [r0, #5]
1000fd0e:	b085      	sub	sp, #20
1000fd10:	9301      	str	r3, [sp, #4]
1000fd12:	ab02      	add	r3, sp, #8
1000fd14:	71da      	strb	r2, [r3, #7]
1000fd16:	4b37      	ldr	r3, [pc, #220]	; (1000fdf4 <gattm_add_svc_req_handler+0xf0>)
1000fd18:	7059      	strb	r1, [r3, #1]
1000fd1a:	7099      	strb	r1, [r3, #2]
1000fd1c:	4936      	ldr	r1, [pc, #216]	; (1000fdf8 <gattm_add_svc_req_handler+0xf4>)
1000fd1e:	701a      	strb	r2, [r3, #0]
1000fd20:	8808      	ldrh	r0, [r1, #0]
1000fd22:	8809      	ldrh	r1, [r1, #0]
1000fd24:	70da      	strb	r2, [r3, #3]
1000fd26:	0a09      	lsrs	r1, r1, #8
1000fd28:	7118      	strb	r0, [r3, #4]
1000fd2a:	7159      	strb	r1, [r3, #5]
1000fd2c:	8821      	ldrh	r1, [r4, #0]
1000fd2e:	7219      	strb	r1, [r3, #8]
1000fd30:	8821      	ldrh	r1, [r4, #0]
1000fd32:	0a09      	lsrs	r1, r1, #8
1000fd34:	7259      	strb	r1, [r3, #9]
1000fd36:	8861      	ldrh	r1, [r4, #2]
1000fd38:	7299      	strb	r1, [r3, #10]
1000fd3a:	8861      	ldrh	r1, [r4, #2]
1000fd3c:	0a09      	lsrs	r1, r1, #8
1000fd3e:	72d9      	strb	r1, [r3, #11]
1000fd40:	7921      	ldrb	r1, [r4, #4]
1000fd42:	7319      	strb	r1, [r3, #12]
1000fd44:	4669      	mov	r1, sp
1000fd46:	7909      	ldrb	r1, [r1, #4]
1000fd48:	7359      	strb	r1, [r3, #13]
1000fd4a:	18a1      	adds	r1, r4, r2
1000fd4c:	7988      	ldrb	r0, [r1, #6]
1000fd4e:	1899      	adds	r1, r3, r2
1000fd50:	3201      	adds	r2, #1
1000fd52:	7388      	strb	r0, [r1, #14]
1000fd54:	2a10      	cmp	r2, #16
1000fd56:	d1f8      	bne.n	1000fd4a <gattm_add_svc_req_handler+0x46>
1000fd58:	1c27      	adds	r7, r4, #0
1000fd5a:	2300      	movs	r3, #0
1000fd5c:	251e      	movs	r5, #30
1000fd5e:	3716      	adds	r7, #22
1000fd60:	9300      	str	r3, [sp, #0]
1000fd62:	9b00      	ldr	r3, [sp, #0]
1000fd64:	9a01      	ldr	r2, [sp, #4]
1000fd66:	4e23      	ldr	r6, [pc, #140]	; (1000fdf4 <gattm_add_svc_req_handler+0xf0>)
1000fd68:	4293      	cmp	r3, r2
1000fd6a:	da21      	bge.n	1000fdb0 <gattm_add_svc_req_handler+0xac>
1000fd6c:	1c39      	adds	r1, r7, #0
1000fd6e:	1970      	adds	r0, r6, r5
1000fd70:	2210      	movs	r2, #16
1000fd72:	4b22      	ldr	r3, [pc, #136]	; (1000fdfc <gattm_add_svc_req_handler+0xf8>)
1000fd74:	4798      	blx	r3
1000fd76:	1c2b      	adds	r3, r5, #0
1000fd78:	8a3a      	ldrh	r2, [r7, #16]
1000fd7a:	3310      	adds	r3, #16
1000fd7c:	b29b      	uxth	r3, r3
1000fd7e:	54f2      	strb	r2, [r6, r3]
1000fd80:	1c2b      	adds	r3, r5, #0
1000fd82:	8a3a      	ldrh	r2, [r7, #16]
1000fd84:	3311      	adds	r3, #17
1000fd86:	b29b      	uxth	r3, r3
1000fd88:	0a12      	lsrs	r2, r2, #8
1000fd8a:	54f2      	strb	r2, [r6, r3]
1000fd8c:	1c2a      	adds	r2, r5, #0
1000fd8e:	1c2b      	adds	r3, r5, #0
1000fd90:	8a79      	ldrh	r1, [r7, #18]
1000fd92:	3212      	adds	r2, #18
1000fd94:	b292      	uxth	r2, r2
1000fd96:	54b1      	strb	r1, [r6, r2]
1000fd98:	8a7a      	ldrh	r2, [r7, #18]
1000fd9a:	3313      	adds	r3, #19
1000fd9c:	b29b      	uxth	r3, r3
1000fd9e:	0a12      	lsrs	r2, r2, #8
1000fda0:	54f2      	strb	r2, [r6, r3]
1000fda2:	9b00      	ldr	r3, [sp, #0]
1000fda4:	3514      	adds	r5, #20
1000fda6:	3301      	adds	r3, #1
1000fda8:	b2ad      	uxth	r5, r5
1000fdaa:	9300      	str	r3, [sp, #0]
1000fdac:	3714      	adds	r7, #20
1000fdae:	e7d8      	b.n	1000fd62 <gattm_add_svc_req_handler+0x5e>
1000fdb0:	2114      	movs	r1, #20
1000fdb2:	4d13      	ldr	r5, [pc, #76]	; (1000fe00 <gattm_add_svc_req_handler+0xfc>)
1000fdb4:	4b13      	ldr	r3, [pc, #76]	; (1000fe04 <gattm_add_svc_req_handler+0x100>)
1000fdb6:	4351      	muls	r1, r2
1000fdb8:	802b      	strh	r3, [r5, #0]
1000fdba:	230b      	movs	r3, #11
1000fdbc:	311e      	adds	r1, #30
1000fdbe:	80ab      	strh	r3, [r5, #4]
1000fdc0:	1c0b      	adds	r3, r1, #0
1000fdc2:	3b08      	subs	r3, #8
1000fdc4:	71b3      	strb	r3, [r6, #6]
1000fdc6:	121b      	asrs	r3, r3, #8
1000fdc8:	71f3      	strb	r3, [r6, #7]
1000fdca:	1c30      	adds	r0, r6, #0
1000fdcc:	4b0e      	ldr	r3, [pc, #56]	; (1000fe08 <gattm_add_svc_req_handler+0x104>)
1000fdce:	4798      	blx	r3
1000fdd0:	ab02      	add	r3, sp, #8
1000fdd2:	1dde      	adds	r6, r3, #7
1000fdd4:	1c30      	adds	r0, r6, #0
1000fdd6:	4b0d      	ldr	r3, [pc, #52]	; (1000fe0c <gattm_add_svc_req_handler+0x108>)
1000fdd8:	4798      	blx	r3
1000fdda:	7833      	ldrb	r3, [r6, #0]
1000fddc:	20e2      	movs	r0, #226	; 0xe2
1000fdde:	2b00      	cmp	r3, #0
1000fde0:	d106      	bne.n	1000fdf0 <gattm_add_svc_req_handler+0xec>
1000fde2:	68aa      	ldr	r2, [r5, #8]
1000fde4:	7853      	ldrb	r3, [r2, #1]
1000fde6:	7811      	ldrb	r1, [r2, #0]
1000fde8:	021b      	lsls	r3, r3, #8
1000fdea:	430b      	orrs	r3, r1
1000fdec:	8023      	strh	r3, [r4, #0]
1000fdee:	7890      	ldrb	r0, [r2, #2]
1000fdf0:	b005      	add	sp, #20
1000fdf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fdf4:	10017fd4 	.word	0x10017fd4
1000fdf8:	10017c64 	.word	0x10017c64
1000fdfc:	10011107 	.word	0x10011107
1000fe00:	10017c58 	.word	0x10017c58
1000fe04:	00000b01 	.word	0x00000b01
1000fe08:	1000e541 	.word	0x1000e541
1000fe0c:	1000e5a5 	.word	0x1000e5a5

1000fe10 <gattm_add_attribute_req_handler>:
1000fe10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fe12:	1c1f      	adds	r7, r3, #0
1000fe14:	4b16      	ldr	r3, [pc, #88]	; (1000fe70 <gattm_add_attribute_req_handler+0x60>)
1000fe16:	9100      	str	r1, [sp, #0]
1000fe18:	9201      	str	r2, [sp, #4]
1000fe1a:	1c05      	adds	r5, r0, #0
1000fe1c:	7946      	ldrb	r6, [r0, #5]
1000fe1e:	6818      	ldr	r0, [r3, #0]
1000fe20:	2114      	movs	r1, #20
1000fe22:	4b14      	ldr	r3, [pc, #80]	; (1000fe74 <gattm_add_attribute_req_handler+0x64>)
1000fe24:	382a      	subs	r0, #42	; 0x2a
1000fe26:	4798      	blx	r3
1000fe28:	2311      	movs	r3, #17
1000fe2a:	4286      	cmp	r6, r0
1000fe2c:	d21e      	bcs.n	1000fe6c <gattm_add_attribute_req_handler+0x5c>
1000fe2e:	2414      	movs	r4, #20
1000fe30:	4366      	muls	r6, r4
1000fe32:	19a8      	adds	r0, r5, r6
1000fe34:	2100      	movs	r1, #0
1000fe36:	2210      	movs	r2, #16
1000fe38:	4b0f      	ldr	r3, [pc, #60]	; (1000fe78 <gattm_add_attribute_req_handler+0x68>)
1000fe3a:	3016      	adds	r0, #22
1000fe3c:	4798      	blx	r3
1000fe3e:	7968      	ldrb	r0, [r5, #5]
1000fe40:	1c3a      	adds	r2, r7, #0
1000fe42:	4360      	muls	r0, r4
1000fe44:	1828      	adds	r0, r5, r0
1000fe46:	4b0d      	ldr	r3, [pc, #52]	; (1000fe7c <gattm_add_attribute_req_handler+0x6c>)
1000fe48:	3016      	adds	r0, #22
1000fe4a:	9908      	ldr	r1, [sp, #32]
1000fe4c:	4798      	blx	r3
1000fe4e:	466a      	mov	r2, sp
1000fe50:	796b      	ldrb	r3, [r5, #5]
1000fe52:	8812      	ldrh	r2, [r2, #0]
1000fe54:	435c      	muls	r4, r3
1000fe56:	192c      	adds	r4, r5, r4
1000fe58:	8522      	strh	r2, [r4, #40]	; 0x28
1000fe5a:	466a      	mov	r2, sp
1000fe5c:	8892      	ldrh	r2, [r2, #4]
1000fe5e:	84e2      	strh	r2, [r4, #38]	; 0x26
1000fe60:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000fe62:	8013      	strh	r3, [r2, #0]
1000fe64:	796b      	ldrb	r3, [r5, #5]
1000fe66:	3301      	adds	r3, #1
1000fe68:	716b      	strb	r3, [r5, #5]
1000fe6a:	2300      	movs	r3, #0
1000fe6c:	1c18      	adds	r0, r3, #0
1000fe6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fe70:	10015294 	.word	0x10015294
1000fe74:	1000fffd 	.word	0x1000fffd
1000fe78:	10011119 	.word	0x10011119
1000fe7c:	10011107 	.word	0x10011107

1000fe80 <gattm_att_set_value_req_handler>:
1000fe80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fe82:	466b      	mov	r3, sp
1000fe84:	1dde      	adds	r6, r3, #7
1000fe86:	2300      	movs	r3, #0
1000fe88:	1c0d      	adds	r5, r1, #0
1000fe8a:	210c      	movs	r1, #12
1000fe8c:	270b      	movs	r7, #11
1000fe8e:	4c17      	ldr	r4, [pc, #92]	; (1000feec <gattm_att_set_value_req_handler+0x6c>)
1000fe90:	7033      	strb	r3, [r6, #0]
1000fe92:	70e3      	strb	r3, [r4, #3]
1000fe94:	4b16      	ldr	r3, [pc, #88]	; (1000fef0 <gattm_att_set_value_req_handler+0x70>)
1000fe96:	7021      	strb	r1, [r4, #0]
1000fe98:	8819      	ldrh	r1, [r3, #0]
1000fe9a:	881b      	ldrh	r3, [r3, #0]
1000fe9c:	7220      	strb	r0, [r4, #8]
1000fe9e:	0a1b      	lsrs	r3, r3, #8
1000fea0:	7163      	strb	r3, [r4, #5]
1000fea2:	0a00      	lsrs	r0, r0, #8
1000fea4:	0a2b      	lsrs	r3, r5, #8
1000fea6:	7121      	strb	r1, [r4, #4]
1000fea8:	7260      	strb	r0, [r4, #9]
1000feaa:	1c11      	adds	r1, r2, #0
1000feac:	72a5      	strb	r5, [r4, #10]
1000feae:	1c2a      	adds	r2, r5, #0
1000feb0:	72e3      	strb	r3, [r4, #11]
1000feb2:	350c      	adds	r5, #12
1000feb4:	4b0f      	ldr	r3, [pc, #60]	; (1000fef4 <gattm_att_set_value_req_handler+0x74>)
1000feb6:	4810      	ldr	r0, [pc, #64]	; (1000fef8 <gattm_att_set_value_req_handler+0x78>)
1000feb8:	7067      	strb	r7, [r4, #1]
1000feba:	70a7      	strb	r7, [r4, #2]
1000febc:	4798      	blx	r3
1000febe:	b2a9      	uxth	r1, r5
1000fec0:	4b0e      	ldr	r3, [pc, #56]	; (1000fefc <gattm_att_set_value_req_handler+0x7c>)
1000fec2:	4d0f      	ldr	r5, [pc, #60]	; (1000ff00 <gattm_att_set_value_req_handler+0x80>)
1000fec4:	1c20      	adds	r0, r4, #0
1000fec6:	802b      	strh	r3, [r5, #0]
1000fec8:	1c0b      	adds	r3, r1, #0
1000feca:	3b08      	subs	r3, #8
1000fecc:	71a3      	strb	r3, [r4, #6]
1000fece:	121b      	asrs	r3, r3, #8
1000fed0:	71e3      	strb	r3, [r4, #7]
1000fed2:	4b0c      	ldr	r3, [pc, #48]	; (1000ff04 <gattm_att_set_value_req_handler+0x84>)
1000fed4:	80af      	strh	r7, [r5, #4]
1000fed6:	4798      	blx	r3
1000fed8:	1c30      	adds	r0, r6, #0
1000feda:	4b0b      	ldr	r3, [pc, #44]	; (1000ff08 <gattm_att_set_value_req_handler+0x88>)
1000fedc:	4798      	blx	r3
1000fede:	7833      	ldrb	r3, [r6, #0]
1000fee0:	20e2      	movs	r0, #226	; 0xe2
1000fee2:	2b00      	cmp	r3, #0
1000fee4:	d101      	bne.n	1000feea <gattm_att_set_value_req_handler+0x6a>
1000fee6:	68ab      	ldr	r3, [r5, #8]
1000fee8:	7898      	ldrb	r0, [r3, #2]
1000feea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000feec:	10017fd4 	.word	0x10017fd4
1000fef0:	10017c64 	.word	0x10017c64
1000fef4:	10011107 	.word	0x10011107
1000fef8:	10017fe0 	.word	0x10017fe0
1000fefc:	00000b0d 	.word	0x00000b0d
1000ff00:	10017c58 	.word	0x10017c58
1000ff04:	1000e541 	.word	0x1000e541
1000ff08:	1000e5a5 	.word	0x1000e5a5

1000ff0c <gattm_att_get_value_req_handler>:
1000ff0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff0e:	b085      	sub	sp, #20
1000ff10:	9201      	str	r2, [sp, #4]
1000ff12:	220a      	movs	r2, #10
1000ff14:	1c04      	adds	r4, r0, #0
1000ff16:	481d      	ldr	r0, [pc, #116]	; (1000ff8c <gattm_att_get_value_req_handler+0x80>)
1000ff18:	ab02      	add	r3, sp, #8
1000ff1a:	1dde      	adds	r6, r3, #7
1000ff1c:	7002      	strb	r2, [r0, #0]
1000ff1e:	2300      	movs	r3, #0
1000ff20:	220b      	movs	r2, #11
1000ff22:	4d1b      	ldr	r5, [pc, #108]	; (1000ff90 <gattm_att_get_value_req_handler+0x84>)
1000ff24:	1c0f      	adds	r7, r1, #0
1000ff26:	8829      	ldrh	r1, [r5, #0]
1000ff28:	882d      	ldrh	r5, [r5, #0]
1000ff2a:	7101      	strb	r1, [r0, #4]
1000ff2c:	0a2d      	lsrs	r5, r5, #8
1000ff2e:	7145      	strb	r5, [r0, #5]
1000ff30:	0a25      	lsrs	r5, r4, #8
1000ff32:	7245      	strb	r5, [r0, #9]
1000ff34:	4917      	ldr	r1, [pc, #92]	; (1000ff94 <gattm_att_get_value_req_handler+0x88>)
1000ff36:	4d18      	ldr	r5, [pc, #96]	; (1000ff98 <gattm_att_get_value_req_handler+0x8c>)
1000ff38:	7033      	strb	r3, [r6, #0]
1000ff3a:	7042      	strb	r2, [r0, #1]
1000ff3c:	7082      	strb	r2, [r0, #2]
1000ff3e:	70c3      	strb	r3, [r0, #3]
1000ff40:	8029      	strh	r1, [r5, #0]
1000ff42:	80aa      	strh	r2, [r5, #4]
1000ff44:	71c3      	strb	r3, [r0, #7]
1000ff46:	3a09      	subs	r2, #9
1000ff48:	210a      	movs	r1, #10
1000ff4a:	4b14      	ldr	r3, [pc, #80]	; (1000ff9c <gattm_att_get_value_req_handler+0x90>)
1000ff4c:	7182      	strb	r2, [r0, #6]
1000ff4e:	7204      	strb	r4, [r0, #8]
1000ff50:	4798      	blx	r3
1000ff52:	1c30      	adds	r0, r6, #0
1000ff54:	4b12      	ldr	r3, [pc, #72]	; (1000ffa0 <gattm_att_get_value_req_handler+0x94>)
1000ff56:	4798      	blx	r3
1000ff58:	7833      	ldrb	r3, [r6, #0]
1000ff5a:	20e2      	movs	r0, #226	; 0xe2
1000ff5c:	2b00      	cmp	r3, #0
1000ff5e:	d112      	bne.n	1000ff86 <gattm_att_get_value_req_handler+0x7a>
1000ff60:	68a9      	ldr	r1, [r5, #8]
1000ff62:	9801      	ldr	r0, [sp, #4]
1000ff64:	784d      	ldrb	r5, [r1, #1]
1000ff66:	780b      	ldrb	r3, [r1, #0]
1000ff68:	78ca      	ldrb	r2, [r1, #3]
1000ff6a:	022d      	lsls	r5, r5, #8
1000ff6c:	431d      	orrs	r5, r3
1000ff6e:	788b      	ldrb	r3, [r1, #2]
1000ff70:	0212      	lsls	r2, r2, #8
1000ff72:	431a      	orrs	r2, r3
1000ff74:	803a      	strh	r2, [r7, #0]
1000ff76:	790e      	ldrb	r6, [r1, #4]
1000ff78:	4b0a      	ldr	r3, [pc, #40]	; (1000ffa4 <gattm_att_get_value_req_handler+0x98>)
1000ff7a:	3105      	adds	r1, #5
1000ff7c:	4798      	blx	r3
1000ff7e:	20e2      	movs	r0, #226	; 0xe2
1000ff80:	42ac      	cmp	r4, r5
1000ff82:	d100      	bne.n	1000ff86 <gattm_att_get_value_req_handler+0x7a>
1000ff84:	1c30      	adds	r0, r6, #0
1000ff86:	b005      	add	sp, #20
1000ff88:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ff8a:	46c0      	nop			; (mov r8, r8)
1000ff8c:	10017fd4 	.word	0x10017fd4
1000ff90:	10017c64 	.word	0x10017c64
1000ff94:	00000b0b 	.word	0x00000b0b
1000ff98:	10017c58 	.word	0x10017c58
1000ff9c:	1000e541 	.word	0x1000e541
1000ffa0:	1000e5a5 	.word	0x1000e5a5
1000ffa4:	10011107 	.word	0x10011107

1000ffa8 <htpt_enable_rsp_handler>:
1000ffa8:	780b      	ldrb	r3, [r1, #0]
1000ffaa:	7013      	strb	r3, [r2, #0]
1000ffac:	784b      	ldrb	r3, [r1, #1]
1000ffae:	7053      	strb	r3, [r2, #1]
1000ffb0:	4770      	bx	lr

1000ffb2 <htpt_temp_send_rsp_handler>:
1000ffb2:	780b      	ldrb	r3, [r1, #0]
1000ffb4:	7013      	strb	r3, [r2, #0]
1000ffb6:	4770      	bx	lr

1000ffb8 <htpt_meas_intv_upd_rsp_handler>:
1000ffb8:	780b      	ldrb	r3, [r1, #0]
1000ffba:	7013      	strb	r3, [r2, #0]
1000ffbc:	4770      	bx	lr

1000ffbe <htpt_meas_intv_chg_req_ind_handler>:
1000ffbe:	78cb      	ldrb	r3, [r1, #3]
1000ffc0:	7889      	ldrb	r1, [r1, #2]
1000ffc2:	021b      	lsls	r3, r3, #8
1000ffc4:	430b      	orrs	r3, r1
1000ffc6:	8013      	strh	r3, [r2, #0]
1000ffc8:	4770      	bx	lr

1000ffca <htpt_cfg_indntf_ind_handler>:
1000ffca:	780b      	ldrb	r3, [r1, #0]
1000ffcc:	7013      	strb	r3, [r2, #0]
1000ffce:	784b      	ldrb	r3, [r1, #1]
1000ffd0:	7053      	strb	r3, [r2, #1]
1000ffd2:	4770      	bx	lr

1000ffd4 <__gnu_thumb1_case_sqi>:
1000ffd4:	b402      	push	{r1}
1000ffd6:	4671      	mov	r1, lr
1000ffd8:	0849      	lsrs	r1, r1, #1
1000ffda:	0049      	lsls	r1, r1, #1
1000ffdc:	5609      	ldrsb	r1, [r1, r0]
1000ffde:	0049      	lsls	r1, r1, #1
1000ffe0:	448e      	add	lr, r1
1000ffe2:	bc02      	pop	{r1}
1000ffe4:	4770      	bx	lr
1000ffe6:	46c0      	nop			; (mov r8, r8)

1000ffe8 <__gnu_thumb1_case_uqi>:
1000ffe8:	b402      	push	{r1}
1000ffea:	4671      	mov	r1, lr
1000ffec:	0849      	lsrs	r1, r1, #1
1000ffee:	0049      	lsls	r1, r1, #1
1000fff0:	5c09      	ldrb	r1, [r1, r0]
1000fff2:	0049      	lsls	r1, r1, #1
1000fff4:	448e      	add	lr, r1
1000fff6:	bc02      	pop	{r1}
1000fff8:	4770      	bx	lr
1000fffa:	46c0      	nop			; (mov r8, r8)

1000fffc <__aeabi_uidiv>:
1000fffc:	2200      	movs	r2, #0
1000fffe:	0843      	lsrs	r3, r0, #1
10010000:	428b      	cmp	r3, r1
10010002:	d374      	bcc.n	100100ee <__aeabi_uidiv+0xf2>
10010004:	0903      	lsrs	r3, r0, #4
10010006:	428b      	cmp	r3, r1
10010008:	d35f      	bcc.n	100100ca <__aeabi_uidiv+0xce>
1001000a:	0a03      	lsrs	r3, r0, #8
1001000c:	428b      	cmp	r3, r1
1001000e:	d344      	bcc.n	1001009a <__aeabi_uidiv+0x9e>
10010010:	0b03      	lsrs	r3, r0, #12
10010012:	428b      	cmp	r3, r1
10010014:	d328      	bcc.n	10010068 <__aeabi_uidiv+0x6c>
10010016:	0c03      	lsrs	r3, r0, #16
10010018:	428b      	cmp	r3, r1
1001001a:	d30d      	bcc.n	10010038 <__aeabi_uidiv+0x3c>
1001001c:	22ff      	movs	r2, #255	; 0xff
1001001e:	0209      	lsls	r1, r1, #8
10010020:	ba12      	rev	r2, r2
10010022:	0c03      	lsrs	r3, r0, #16
10010024:	428b      	cmp	r3, r1
10010026:	d302      	bcc.n	1001002e <__aeabi_uidiv+0x32>
10010028:	1212      	asrs	r2, r2, #8
1001002a:	0209      	lsls	r1, r1, #8
1001002c:	d065      	beq.n	100100fa <__aeabi_uidiv+0xfe>
1001002e:	0b03      	lsrs	r3, r0, #12
10010030:	428b      	cmp	r3, r1
10010032:	d319      	bcc.n	10010068 <__aeabi_uidiv+0x6c>
10010034:	e000      	b.n	10010038 <__aeabi_uidiv+0x3c>
10010036:	0a09      	lsrs	r1, r1, #8
10010038:	0bc3      	lsrs	r3, r0, #15
1001003a:	428b      	cmp	r3, r1
1001003c:	d301      	bcc.n	10010042 <__aeabi_uidiv+0x46>
1001003e:	03cb      	lsls	r3, r1, #15
10010040:	1ac0      	subs	r0, r0, r3
10010042:	4152      	adcs	r2, r2
10010044:	0b83      	lsrs	r3, r0, #14
10010046:	428b      	cmp	r3, r1
10010048:	d301      	bcc.n	1001004e <__aeabi_uidiv+0x52>
1001004a:	038b      	lsls	r3, r1, #14
1001004c:	1ac0      	subs	r0, r0, r3
1001004e:	4152      	adcs	r2, r2
10010050:	0b43      	lsrs	r3, r0, #13
10010052:	428b      	cmp	r3, r1
10010054:	d301      	bcc.n	1001005a <__aeabi_uidiv+0x5e>
10010056:	034b      	lsls	r3, r1, #13
10010058:	1ac0      	subs	r0, r0, r3
1001005a:	4152      	adcs	r2, r2
1001005c:	0b03      	lsrs	r3, r0, #12
1001005e:	428b      	cmp	r3, r1
10010060:	d301      	bcc.n	10010066 <__aeabi_uidiv+0x6a>
10010062:	030b      	lsls	r3, r1, #12
10010064:	1ac0      	subs	r0, r0, r3
10010066:	4152      	adcs	r2, r2
10010068:	0ac3      	lsrs	r3, r0, #11
1001006a:	428b      	cmp	r3, r1
1001006c:	d301      	bcc.n	10010072 <__aeabi_uidiv+0x76>
1001006e:	02cb      	lsls	r3, r1, #11
10010070:	1ac0      	subs	r0, r0, r3
10010072:	4152      	adcs	r2, r2
10010074:	0a83      	lsrs	r3, r0, #10
10010076:	428b      	cmp	r3, r1
10010078:	d301      	bcc.n	1001007e <__aeabi_uidiv+0x82>
1001007a:	028b      	lsls	r3, r1, #10
1001007c:	1ac0      	subs	r0, r0, r3
1001007e:	4152      	adcs	r2, r2
10010080:	0a43      	lsrs	r3, r0, #9
10010082:	428b      	cmp	r3, r1
10010084:	d301      	bcc.n	1001008a <__aeabi_uidiv+0x8e>
10010086:	024b      	lsls	r3, r1, #9
10010088:	1ac0      	subs	r0, r0, r3
1001008a:	4152      	adcs	r2, r2
1001008c:	0a03      	lsrs	r3, r0, #8
1001008e:	428b      	cmp	r3, r1
10010090:	d301      	bcc.n	10010096 <__aeabi_uidiv+0x9a>
10010092:	020b      	lsls	r3, r1, #8
10010094:	1ac0      	subs	r0, r0, r3
10010096:	4152      	adcs	r2, r2
10010098:	d2cd      	bcs.n	10010036 <__aeabi_uidiv+0x3a>
1001009a:	09c3      	lsrs	r3, r0, #7
1001009c:	428b      	cmp	r3, r1
1001009e:	d301      	bcc.n	100100a4 <__aeabi_uidiv+0xa8>
100100a0:	01cb      	lsls	r3, r1, #7
100100a2:	1ac0      	subs	r0, r0, r3
100100a4:	4152      	adcs	r2, r2
100100a6:	0983      	lsrs	r3, r0, #6
100100a8:	428b      	cmp	r3, r1
100100aa:	d301      	bcc.n	100100b0 <__aeabi_uidiv+0xb4>
100100ac:	018b      	lsls	r3, r1, #6
100100ae:	1ac0      	subs	r0, r0, r3
100100b0:	4152      	adcs	r2, r2
100100b2:	0943      	lsrs	r3, r0, #5
100100b4:	428b      	cmp	r3, r1
100100b6:	d301      	bcc.n	100100bc <__aeabi_uidiv+0xc0>
100100b8:	014b      	lsls	r3, r1, #5
100100ba:	1ac0      	subs	r0, r0, r3
100100bc:	4152      	adcs	r2, r2
100100be:	0903      	lsrs	r3, r0, #4
100100c0:	428b      	cmp	r3, r1
100100c2:	d301      	bcc.n	100100c8 <__aeabi_uidiv+0xcc>
100100c4:	010b      	lsls	r3, r1, #4
100100c6:	1ac0      	subs	r0, r0, r3
100100c8:	4152      	adcs	r2, r2
100100ca:	08c3      	lsrs	r3, r0, #3
100100cc:	428b      	cmp	r3, r1
100100ce:	d301      	bcc.n	100100d4 <__aeabi_uidiv+0xd8>
100100d0:	00cb      	lsls	r3, r1, #3
100100d2:	1ac0      	subs	r0, r0, r3
100100d4:	4152      	adcs	r2, r2
100100d6:	0883      	lsrs	r3, r0, #2
100100d8:	428b      	cmp	r3, r1
100100da:	d301      	bcc.n	100100e0 <__aeabi_uidiv+0xe4>
100100dc:	008b      	lsls	r3, r1, #2
100100de:	1ac0      	subs	r0, r0, r3
100100e0:	4152      	adcs	r2, r2
100100e2:	0843      	lsrs	r3, r0, #1
100100e4:	428b      	cmp	r3, r1
100100e6:	d301      	bcc.n	100100ec <__aeabi_uidiv+0xf0>
100100e8:	004b      	lsls	r3, r1, #1
100100ea:	1ac0      	subs	r0, r0, r3
100100ec:	4152      	adcs	r2, r2
100100ee:	1a41      	subs	r1, r0, r1
100100f0:	d200      	bcs.n	100100f4 <__aeabi_uidiv+0xf8>
100100f2:	4601      	mov	r1, r0
100100f4:	4152      	adcs	r2, r2
100100f6:	4610      	mov	r0, r2
100100f8:	4770      	bx	lr
100100fa:	e7ff      	b.n	100100fc <__aeabi_uidiv+0x100>
100100fc:	b501      	push	{r0, lr}
100100fe:	2000      	movs	r0, #0
10010100:	f000 f806 	bl	10010110 <__aeabi_idiv0>
10010104:	bd02      	pop	{r1, pc}
10010106:	46c0      	nop			; (mov r8, r8)

10010108 <__aeabi_uidivmod>:
10010108:	2900      	cmp	r1, #0
1001010a:	d0f7      	beq.n	100100fc <__aeabi_uidiv+0x100>
1001010c:	e776      	b.n	1000fffc <__aeabi_uidiv>
1001010e:	4770      	bx	lr

10010110 <__aeabi_idiv0>:
10010110:	4770      	bx	lr
10010112:	46c0      	nop			; (mov r8, r8)

10010114 <__aeabi_d2uiz>:
10010114:	b570      	push	{r4, r5, r6, lr}
10010116:	2200      	movs	r2, #0
10010118:	4b0c      	ldr	r3, [pc, #48]	; (1001014c <__aeabi_d2uiz+0x38>)
1001011a:	0004      	movs	r4, r0
1001011c:	000d      	movs	r5, r1
1001011e:	f000 fe87 	bl	10010e30 <__aeabi_dcmpge>
10010122:	2800      	cmp	r0, #0
10010124:	d104      	bne.n	10010130 <__aeabi_d2uiz+0x1c>
10010126:	0020      	movs	r0, r4
10010128:	0029      	movs	r1, r5
1001012a:	f000 fddf 	bl	10010cec <__aeabi_d2iz>
1001012e:	bd70      	pop	{r4, r5, r6, pc}
10010130:	4b06      	ldr	r3, [pc, #24]	; (1001014c <__aeabi_d2uiz+0x38>)
10010132:	2200      	movs	r2, #0
10010134:	0020      	movs	r0, r4
10010136:	0029      	movs	r1, r5
10010138:	f000 fa84 	bl	10010644 <__aeabi_dsub>
1001013c:	f000 fdd6 	bl	10010cec <__aeabi_d2iz>
10010140:	2380      	movs	r3, #128	; 0x80
10010142:	061b      	lsls	r3, r3, #24
10010144:	469c      	mov	ip, r3
10010146:	4460      	add	r0, ip
10010148:	e7f1      	b.n	1001012e <__aeabi_d2uiz+0x1a>
1001014a:	46c0      	nop			; (mov r8, r8)
1001014c:	41e00000 	.word	0x41e00000

10010150 <__aeabi_dmul>:
10010150:	b5f0      	push	{r4, r5, r6, r7, lr}
10010152:	465f      	mov	r7, fp
10010154:	4656      	mov	r6, sl
10010156:	464d      	mov	r5, r9
10010158:	4644      	mov	r4, r8
1001015a:	b4f0      	push	{r4, r5, r6, r7}
1001015c:	030d      	lsls	r5, r1, #12
1001015e:	4699      	mov	r9, r3
10010160:	004e      	lsls	r6, r1, #1
10010162:	0b2b      	lsrs	r3, r5, #12
10010164:	b087      	sub	sp, #28
10010166:	0007      	movs	r7, r0
10010168:	4692      	mov	sl, r2
1001016a:	4680      	mov	r8, r0
1001016c:	469b      	mov	fp, r3
1001016e:	0d76      	lsrs	r6, r6, #21
10010170:	0fcc      	lsrs	r4, r1, #31
10010172:	2e00      	cmp	r6, #0
10010174:	d069      	beq.n	1001024a <__aeabi_dmul+0xfa>
10010176:	4b6d      	ldr	r3, [pc, #436]	; (1001032c <__aeabi_dmul+0x1dc>)
10010178:	429e      	cmp	r6, r3
1001017a:	d035      	beq.n	100101e8 <__aeabi_dmul+0x98>
1001017c:	465b      	mov	r3, fp
1001017e:	2280      	movs	r2, #128	; 0x80
10010180:	00dd      	lsls	r5, r3, #3
10010182:	0412      	lsls	r2, r2, #16
10010184:	0f43      	lsrs	r3, r0, #29
10010186:	4313      	orrs	r3, r2
10010188:	432b      	orrs	r3, r5
1001018a:	469b      	mov	fp, r3
1001018c:	00c3      	lsls	r3, r0, #3
1001018e:	4698      	mov	r8, r3
10010190:	4b67      	ldr	r3, [pc, #412]	; (10010330 <__aeabi_dmul+0x1e0>)
10010192:	2700      	movs	r7, #0
10010194:	469c      	mov	ip, r3
10010196:	2300      	movs	r3, #0
10010198:	4466      	add	r6, ip
1001019a:	9301      	str	r3, [sp, #4]
1001019c:	464a      	mov	r2, r9
1001019e:	0315      	lsls	r5, r2, #12
100101a0:	0050      	lsls	r0, r2, #1
100101a2:	0fd2      	lsrs	r2, r2, #31
100101a4:	4653      	mov	r3, sl
100101a6:	0b2d      	lsrs	r5, r5, #12
100101a8:	0d40      	lsrs	r0, r0, #21
100101aa:	4691      	mov	r9, r2
100101ac:	d100      	bne.n	100101b0 <__aeabi_dmul+0x60>
100101ae:	e076      	b.n	1001029e <__aeabi_dmul+0x14e>
100101b0:	4a5e      	ldr	r2, [pc, #376]	; (1001032c <__aeabi_dmul+0x1dc>)
100101b2:	4290      	cmp	r0, r2
100101b4:	d06c      	beq.n	10010290 <__aeabi_dmul+0x140>
100101b6:	2280      	movs	r2, #128	; 0x80
100101b8:	0f5b      	lsrs	r3, r3, #29
100101ba:	0412      	lsls	r2, r2, #16
100101bc:	4313      	orrs	r3, r2
100101be:	4a5c      	ldr	r2, [pc, #368]	; (10010330 <__aeabi_dmul+0x1e0>)
100101c0:	00ed      	lsls	r5, r5, #3
100101c2:	4694      	mov	ip, r2
100101c4:	431d      	orrs	r5, r3
100101c6:	4653      	mov	r3, sl
100101c8:	2200      	movs	r2, #0
100101ca:	00db      	lsls	r3, r3, #3
100101cc:	4460      	add	r0, ip
100101ce:	4649      	mov	r1, r9
100101d0:	1836      	adds	r6, r6, r0
100101d2:	1c70      	adds	r0, r6, #1
100101d4:	4061      	eors	r1, r4
100101d6:	9002      	str	r0, [sp, #8]
100101d8:	4317      	orrs	r7, r2
100101da:	2f0f      	cmp	r7, #15
100101dc:	d900      	bls.n	100101e0 <__aeabi_dmul+0x90>
100101de:	e0af      	b.n	10010340 <__aeabi_dmul+0x1f0>
100101e0:	4854      	ldr	r0, [pc, #336]	; (10010334 <__aeabi_dmul+0x1e4>)
100101e2:	00bf      	lsls	r7, r7, #2
100101e4:	59c7      	ldr	r7, [r0, r7]
100101e6:	46bf      	mov	pc, r7
100101e8:	465b      	mov	r3, fp
100101ea:	431f      	orrs	r7, r3
100101ec:	d000      	beq.n	100101f0 <__aeabi_dmul+0xa0>
100101ee:	e088      	b.n	10010302 <__aeabi_dmul+0x1b2>
100101f0:	2300      	movs	r3, #0
100101f2:	469b      	mov	fp, r3
100101f4:	4698      	mov	r8, r3
100101f6:	3302      	adds	r3, #2
100101f8:	2708      	movs	r7, #8
100101fa:	9301      	str	r3, [sp, #4]
100101fc:	e7ce      	b.n	1001019c <__aeabi_dmul+0x4c>
100101fe:	4649      	mov	r1, r9
10010200:	2a02      	cmp	r2, #2
10010202:	d06a      	beq.n	100102da <__aeabi_dmul+0x18a>
10010204:	2a03      	cmp	r2, #3
10010206:	d100      	bne.n	1001020a <__aeabi_dmul+0xba>
10010208:	e209      	b.n	1001061e <__aeabi_dmul+0x4ce>
1001020a:	2a01      	cmp	r2, #1
1001020c:	d000      	beq.n	10010210 <__aeabi_dmul+0xc0>
1001020e:	e1bb      	b.n	10010588 <__aeabi_dmul+0x438>
10010210:	4011      	ands	r1, r2
10010212:	2200      	movs	r2, #0
10010214:	2300      	movs	r3, #0
10010216:	2500      	movs	r5, #0
10010218:	4690      	mov	r8, r2
1001021a:	b2cc      	uxtb	r4, r1
1001021c:	2100      	movs	r1, #0
1001021e:	032d      	lsls	r5, r5, #12
10010220:	0d0a      	lsrs	r2, r1, #20
10010222:	0512      	lsls	r2, r2, #20
10010224:	0b2d      	lsrs	r5, r5, #12
10010226:	4315      	orrs	r5, r2
10010228:	4a43      	ldr	r2, [pc, #268]	; (10010338 <__aeabi_dmul+0x1e8>)
1001022a:	051b      	lsls	r3, r3, #20
1001022c:	4015      	ands	r5, r2
1001022e:	431d      	orrs	r5, r3
10010230:	006d      	lsls	r5, r5, #1
10010232:	07e4      	lsls	r4, r4, #31
10010234:	086d      	lsrs	r5, r5, #1
10010236:	4325      	orrs	r5, r4
10010238:	4640      	mov	r0, r8
1001023a:	0029      	movs	r1, r5
1001023c:	b007      	add	sp, #28
1001023e:	bc3c      	pop	{r2, r3, r4, r5}
10010240:	4690      	mov	r8, r2
10010242:	4699      	mov	r9, r3
10010244:	46a2      	mov	sl, r4
10010246:	46ab      	mov	fp, r5
10010248:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001024a:	4303      	orrs	r3, r0
1001024c:	d052      	beq.n	100102f4 <__aeabi_dmul+0x1a4>
1001024e:	465b      	mov	r3, fp
10010250:	2b00      	cmp	r3, #0
10010252:	d100      	bne.n	10010256 <__aeabi_dmul+0x106>
10010254:	e18a      	b.n	1001056c <__aeabi_dmul+0x41c>
10010256:	4658      	mov	r0, fp
10010258:	f000 fdf4 	bl	10010e44 <__clzsi2>
1001025c:	0003      	movs	r3, r0
1001025e:	3b0b      	subs	r3, #11
10010260:	2b1c      	cmp	r3, #28
10010262:	dd00      	ble.n	10010266 <__aeabi_dmul+0x116>
10010264:	e17b      	b.n	1001055e <__aeabi_dmul+0x40e>
10010266:	221d      	movs	r2, #29
10010268:	1ad3      	subs	r3, r2, r3
1001026a:	003a      	movs	r2, r7
1001026c:	0001      	movs	r1, r0
1001026e:	465d      	mov	r5, fp
10010270:	40da      	lsrs	r2, r3
10010272:	3908      	subs	r1, #8
10010274:	408d      	lsls	r5, r1
10010276:	0013      	movs	r3, r2
10010278:	408f      	lsls	r7, r1
1001027a:	432b      	orrs	r3, r5
1001027c:	469b      	mov	fp, r3
1001027e:	46b8      	mov	r8, r7
10010280:	4b2e      	ldr	r3, [pc, #184]	; (1001033c <__aeabi_dmul+0x1ec>)
10010282:	2700      	movs	r7, #0
10010284:	469c      	mov	ip, r3
10010286:	2300      	movs	r3, #0
10010288:	4460      	add	r0, ip
1001028a:	4246      	negs	r6, r0
1001028c:	9301      	str	r3, [sp, #4]
1001028e:	e785      	b.n	1001019c <__aeabi_dmul+0x4c>
10010290:	4652      	mov	r2, sl
10010292:	432a      	orrs	r2, r5
10010294:	d12c      	bne.n	100102f0 <__aeabi_dmul+0x1a0>
10010296:	2500      	movs	r5, #0
10010298:	2300      	movs	r3, #0
1001029a:	2202      	movs	r2, #2
1001029c:	e797      	b.n	100101ce <__aeabi_dmul+0x7e>
1001029e:	4652      	mov	r2, sl
100102a0:	432a      	orrs	r2, r5
100102a2:	d021      	beq.n	100102e8 <__aeabi_dmul+0x198>
100102a4:	2d00      	cmp	r5, #0
100102a6:	d100      	bne.n	100102aa <__aeabi_dmul+0x15a>
100102a8:	e154      	b.n	10010554 <__aeabi_dmul+0x404>
100102aa:	0028      	movs	r0, r5
100102ac:	f000 fdca 	bl	10010e44 <__clzsi2>
100102b0:	0003      	movs	r3, r0
100102b2:	3b0b      	subs	r3, #11
100102b4:	2b1c      	cmp	r3, #28
100102b6:	dd00      	ble.n	100102ba <__aeabi_dmul+0x16a>
100102b8:	e146      	b.n	10010548 <__aeabi_dmul+0x3f8>
100102ba:	211d      	movs	r1, #29
100102bc:	1acb      	subs	r3, r1, r3
100102be:	4651      	mov	r1, sl
100102c0:	0002      	movs	r2, r0
100102c2:	40d9      	lsrs	r1, r3
100102c4:	4653      	mov	r3, sl
100102c6:	3a08      	subs	r2, #8
100102c8:	4095      	lsls	r5, r2
100102ca:	4093      	lsls	r3, r2
100102cc:	430d      	orrs	r5, r1
100102ce:	4a1b      	ldr	r2, [pc, #108]	; (1001033c <__aeabi_dmul+0x1ec>)
100102d0:	4694      	mov	ip, r2
100102d2:	4460      	add	r0, ip
100102d4:	4240      	negs	r0, r0
100102d6:	2200      	movs	r2, #0
100102d8:	e779      	b.n	100101ce <__aeabi_dmul+0x7e>
100102da:	2401      	movs	r4, #1
100102dc:	2200      	movs	r2, #0
100102de:	400c      	ands	r4, r1
100102e0:	4b12      	ldr	r3, [pc, #72]	; (1001032c <__aeabi_dmul+0x1dc>)
100102e2:	2500      	movs	r5, #0
100102e4:	4690      	mov	r8, r2
100102e6:	e799      	b.n	1001021c <__aeabi_dmul+0xcc>
100102e8:	2500      	movs	r5, #0
100102ea:	2300      	movs	r3, #0
100102ec:	2201      	movs	r2, #1
100102ee:	e76e      	b.n	100101ce <__aeabi_dmul+0x7e>
100102f0:	2203      	movs	r2, #3
100102f2:	e76c      	b.n	100101ce <__aeabi_dmul+0x7e>
100102f4:	2300      	movs	r3, #0
100102f6:	469b      	mov	fp, r3
100102f8:	4698      	mov	r8, r3
100102fa:	3301      	adds	r3, #1
100102fc:	2704      	movs	r7, #4
100102fe:	9301      	str	r3, [sp, #4]
10010300:	e74c      	b.n	1001019c <__aeabi_dmul+0x4c>
10010302:	2303      	movs	r3, #3
10010304:	270c      	movs	r7, #12
10010306:	9301      	str	r3, [sp, #4]
10010308:	e748      	b.n	1001019c <__aeabi_dmul+0x4c>
1001030a:	2300      	movs	r3, #0
1001030c:	2580      	movs	r5, #128	; 0x80
1001030e:	4698      	mov	r8, r3
10010310:	2400      	movs	r4, #0
10010312:	032d      	lsls	r5, r5, #12
10010314:	4b05      	ldr	r3, [pc, #20]	; (1001032c <__aeabi_dmul+0x1dc>)
10010316:	e781      	b.n	1001021c <__aeabi_dmul+0xcc>
10010318:	465d      	mov	r5, fp
1001031a:	4643      	mov	r3, r8
1001031c:	9a01      	ldr	r2, [sp, #4]
1001031e:	e76f      	b.n	10010200 <__aeabi_dmul+0xb0>
10010320:	465d      	mov	r5, fp
10010322:	4643      	mov	r3, r8
10010324:	0021      	movs	r1, r4
10010326:	9a01      	ldr	r2, [sp, #4]
10010328:	e76a      	b.n	10010200 <__aeabi_dmul+0xb0>
1001032a:	46c0      	nop			; (mov r8, r8)
1001032c:	000007ff 	.word	0x000007ff
10010330:	fffffc01 	.word	0xfffffc01
10010334:	10013700 	.word	0x10013700
10010338:	800fffff 	.word	0x800fffff
1001033c:	000003f3 	.word	0x000003f3
10010340:	4642      	mov	r2, r8
10010342:	0c12      	lsrs	r2, r2, #16
10010344:	4691      	mov	r9, r2
10010346:	0c1a      	lsrs	r2, r3, #16
10010348:	4694      	mov	ip, r2
1001034a:	4642      	mov	r2, r8
1001034c:	0417      	lsls	r7, r2, #16
1001034e:	464a      	mov	r2, r9
10010350:	041b      	lsls	r3, r3, #16
10010352:	0c1b      	lsrs	r3, r3, #16
10010354:	435a      	muls	r2, r3
10010356:	4660      	mov	r0, ip
10010358:	4690      	mov	r8, r2
1001035a:	464a      	mov	r2, r9
1001035c:	4342      	muls	r2, r0
1001035e:	0010      	movs	r0, r2
10010360:	9203      	str	r2, [sp, #12]
10010362:	4662      	mov	r2, ip
10010364:	001c      	movs	r4, r3
10010366:	0c3f      	lsrs	r7, r7, #16
10010368:	437a      	muls	r2, r7
1001036a:	437c      	muls	r4, r7
1001036c:	4442      	add	r2, r8
1001036e:	9201      	str	r2, [sp, #4]
10010370:	0c22      	lsrs	r2, r4, #16
10010372:	4692      	mov	sl, r2
10010374:	9a01      	ldr	r2, [sp, #4]
10010376:	4452      	add	r2, sl
10010378:	4590      	cmp	r8, r2
1001037a:	d906      	bls.n	1001038a <__aeabi_dmul+0x23a>
1001037c:	4682      	mov	sl, r0
1001037e:	2080      	movs	r0, #128	; 0x80
10010380:	0240      	lsls	r0, r0, #9
10010382:	4680      	mov	r8, r0
10010384:	44c2      	add	sl, r8
10010386:	4650      	mov	r0, sl
10010388:	9003      	str	r0, [sp, #12]
1001038a:	0c10      	lsrs	r0, r2, #16
1001038c:	9004      	str	r0, [sp, #16]
1001038e:	4648      	mov	r0, r9
10010390:	0424      	lsls	r4, r4, #16
10010392:	0c24      	lsrs	r4, r4, #16
10010394:	0412      	lsls	r2, r2, #16
10010396:	1912      	adds	r2, r2, r4
10010398:	9205      	str	r2, [sp, #20]
1001039a:	0c2a      	lsrs	r2, r5, #16
1001039c:	042d      	lsls	r5, r5, #16
1001039e:	0c2d      	lsrs	r5, r5, #16
100103a0:	4368      	muls	r0, r5
100103a2:	002c      	movs	r4, r5
100103a4:	4682      	mov	sl, r0
100103a6:	4648      	mov	r0, r9
100103a8:	437c      	muls	r4, r7
100103aa:	4350      	muls	r0, r2
100103ac:	4681      	mov	r9, r0
100103ae:	0c20      	lsrs	r0, r4, #16
100103b0:	4680      	mov	r8, r0
100103b2:	4357      	muls	r7, r2
100103b4:	4457      	add	r7, sl
100103b6:	4447      	add	r7, r8
100103b8:	45ba      	cmp	sl, r7
100103ba:	d903      	bls.n	100103c4 <__aeabi_dmul+0x274>
100103bc:	2080      	movs	r0, #128	; 0x80
100103be:	0240      	lsls	r0, r0, #9
100103c0:	4680      	mov	r8, r0
100103c2:	44c1      	add	r9, r8
100103c4:	0c38      	lsrs	r0, r7, #16
100103c6:	043f      	lsls	r7, r7, #16
100103c8:	46b8      	mov	r8, r7
100103ca:	4448      	add	r0, r9
100103cc:	0424      	lsls	r4, r4, #16
100103ce:	0c24      	lsrs	r4, r4, #16
100103d0:	9001      	str	r0, [sp, #4]
100103d2:	9804      	ldr	r0, [sp, #16]
100103d4:	44a0      	add	r8, r4
100103d6:	4440      	add	r0, r8
100103d8:	9004      	str	r0, [sp, #16]
100103da:	4658      	mov	r0, fp
100103dc:	0c00      	lsrs	r0, r0, #16
100103de:	4681      	mov	r9, r0
100103e0:	4658      	mov	r0, fp
100103e2:	0404      	lsls	r4, r0, #16
100103e4:	0c20      	lsrs	r0, r4, #16
100103e6:	4682      	mov	sl, r0
100103e8:	0007      	movs	r7, r0
100103ea:	4648      	mov	r0, r9
100103ec:	435f      	muls	r7, r3
100103ee:	464c      	mov	r4, r9
100103f0:	4343      	muls	r3, r0
100103f2:	4660      	mov	r0, ip
100103f4:	4360      	muls	r0, r4
100103f6:	4664      	mov	r4, ip
100103f8:	4683      	mov	fp, r0
100103fa:	4650      	mov	r0, sl
100103fc:	4344      	muls	r4, r0
100103fe:	0c38      	lsrs	r0, r7, #16
10010400:	4684      	mov	ip, r0
10010402:	18e4      	adds	r4, r4, r3
10010404:	4464      	add	r4, ip
10010406:	42a3      	cmp	r3, r4
10010408:	d903      	bls.n	10010412 <__aeabi_dmul+0x2c2>
1001040a:	2380      	movs	r3, #128	; 0x80
1001040c:	025b      	lsls	r3, r3, #9
1001040e:	469c      	mov	ip, r3
10010410:	44e3      	add	fp, ip
10010412:	4648      	mov	r0, r9
10010414:	043f      	lsls	r7, r7, #16
10010416:	0c23      	lsrs	r3, r4, #16
10010418:	0c3f      	lsrs	r7, r7, #16
1001041a:	0424      	lsls	r4, r4, #16
1001041c:	19e4      	adds	r4, r4, r7
1001041e:	4657      	mov	r7, sl
10010420:	4368      	muls	r0, r5
10010422:	436f      	muls	r7, r5
10010424:	4684      	mov	ip, r0
10010426:	464d      	mov	r5, r9
10010428:	4650      	mov	r0, sl
1001042a:	4355      	muls	r5, r2
1001042c:	4342      	muls	r2, r0
1001042e:	0c38      	lsrs	r0, r7, #16
10010430:	4681      	mov	r9, r0
10010432:	4462      	add	r2, ip
10010434:	444a      	add	r2, r9
10010436:	445b      	add	r3, fp
10010438:	4594      	cmp	ip, r2
1001043a:	d903      	bls.n	10010444 <__aeabi_dmul+0x2f4>
1001043c:	2080      	movs	r0, #128	; 0x80
1001043e:	0240      	lsls	r0, r0, #9
10010440:	4684      	mov	ip, r0
10010442:	4465      	add	r5, ip
10010444:	9803      	ldr	r0, [sp, #12]
10010446:	043f      	lsls	r7, r7, #16
10010448:	4683      	mov	fp, r0
1001044a:	9804      	ldr	r0, [sp, #16]
1001044c:	0c3f      	lsrs	r7, r7, #16
1001044e:	4684      	mov	ip, r0
10010450:	44e3      	add	fp, ip
10010452:	45c3      	cmp	fp, r8
10010454:	4180      	sbcs	r0, r0
10010456:	4240      	negs	r0, r0
10010458:	4682      	mov	sl, r0
1001045a:	0410      	lsls	r0, r2, #16
1001045c:	4684      	mov	ip, r0
1001045e:	9801      	ldr	r0, [sp, #4]
10010460:	4467      	add	r7, ip
10010462:	4684      	mov	ip, r0
10010464:	4467      	add	r7, ip
10010466:	44a3      	add	fp, r4
10010468:	46bc      	mov	ip, r7
1001046a:	45a3      	cmp	fp, r4
1001046c:	41a4      	sbcs	r4, r4
1001046e:	4699      	mov	r9, r3
10010470:	44d4      	add	ip, sl
10010472:	4264      	negs	r4, r4
10010474:	4287      	cmp	r7, r0
10010476:	41bf      	sbcs	r7, r7
10010478:	45d4      	cmp	ip, sl
1001047a:	4180      	sbcs	r0, r0
1001047c:	44e1      	add	r9, ip
1001047e:	46a0      	mov	r8, r4
10010480:	4599      	cmp	r9, r3
10010482:	419b      	sbcs	r3, r3
10010484:	427f      	negs	r7, r7
10010486:	4240      	negs	r0, r0
10010488:	44c8      	add	r8, r9
1001048a:	4307      	orrs	r7, r0
1001048c:	0c12      	lsrs	r2, r2, #16
1001048e:	18ba      	adds	r2, r7, r2
10010490:	45a0      	cmp	r8, r4
10010492:	41a4      	sbcs	r4, r4
10010494:	425f      	negs	r7, r3
10010496:	003b      	movs	r3, r7
10010498:	4264      	negs	r4, r4
1001049a:	4323      	orrs	r3, r4
1001049c:	18d7      	adds	r7, r2, r3
1001049e:	4643      	mov	r3, r8
100104a0:	197d      	adds	r5, r7, r5
100104a2:	0ddb      	lsrs	r3, r3, #23
100104a4:	026d      	lsls	r5, r5, #9
100104a6:	431d      	orrs	r5, r3
100104a8:	465b      	mov	r3, fp
100104aa:	025a      	lsls	r2, r3, #9
100104ac:	9b05      	ldr	r3, [sp, #20]
100104ae:	431a      	orrs	r2, r3
100104b0:	1e53      	subs	r3, r2, #1
100104b2:	419a      	sbcs	r2, r3
100104b4:	465b      	mov	r3, fp
100104b6:	0ddb      	lsrs	r3, r3, #23
100104b8:	431a      	orrs	r2, r3
100104ba:	4643      	mov	r3, r8
100104bc:	025b      	lsls	r3, r3, #9
100104be:	4313      	orrs	r3, r2
100104c0:	01ea      	lsls	r2, r5, #7
100104c2:	d507      	bpl.n	100104d4 <__aeabi_dmul+0x384>
100104c4:	2201      	movs	r2, #1
100104c6:	085c      	lsrs	r4, r3, #1
100104c8:	4013      	ands	r3, r2
100104ca:	4323      	orrs	r3, r4
100104cc:	07ea      	lsls	r2, r5, #31
100104ce:	9e02      	ldr	r6, [sp, #8]
100104d0:	4313      	orrs	r3, r2
100104d2:	086d      	lsrs	r5, r5, #1
100104d4:	4a57      	ldr	r2, [pc, #348]	; (10010634 <__aeabi_dmul+0x4e4>)
100104d6:	18b2      	adds	r2, r6, r2
100104d8:	2a00      	cmp	r2, #0
100104da:	dd4b      	ble.n	10010574 <__aeabi_dmul+0x424>
100104dc:	0758      	lsls	r0, r3, #29
100104de:	d009      	beq.n	100104f4 <__aeabi_dmul+0x3a4>
100104e0:	200f      	movs	r0, #15
100104e2:	4018      	ands	r0, r3
100104e4:	2804      	cmp	r0, #4
100104e6:	d005      	beq.n	100104f4 <__aeabi_dmul+0x3a4>
100104e8:	1d18      	adds	r0, r3, #4
100104ea:	4298      	cmp	r0, r3
100104ec:	419b      	sbcs	r3, r3
100104ee:	425b      	negs	r3, r3
100104f0:	18ed      	adds	r5, r5, r3
100104f2:	0003      	movs	r3, r0
100104f4:	01e8      	lsls	r0, r5, #7
100104f6:	d504      	bpl.n	10010502 <__aeabi_dmul+0x3b2>
100104f8:	4a4f      	ldr	r2, [pc, #316]	; (10010638 <__aeabi_dmul+0x4e8>)
100104fa:	4015      	ands	r5, r2
100104fc:	2280      	movs	r2, #128	; 0x80
100104fe:	00d2      	lsls	r2, r2, #3
10010500:	18b2      	adds	r2, r6, r2
10010502:	484e      	ldr	r0, [pc, #312]	; (1001063c <__aeabi_dmul+0x4ec>)
10010504:	4282      	cmp	r2, r0
10010506:	dd00      	ble.n	1001050a <__aeabi_dmul+0x3ba>
10010508:	e6e7      	b.n	100102da <__aeabi_dmul+0x18a>
1001050a:	2401      	movs	r4, #1
1001050c:	08db      	lsrs	r3, r3, #3
1001050e:	0768      	lsls	r0, r5, #29
10010510:	4318      	orrs	r0, r3
10010512:	026d      	lsls	r5, r5, #9
10010514:	0553      	lsls	r3, r2, #21
10010516:	4680      	mov	r8, r0
10010518:	0b2d      	lsrs	r5, r5, #12
1001051a:	0d5b      	lsrs	r3, r3, #21
1001051c:	400c      	ands	r4, r1
1001051e:	e67d      	b.n	1001021c <__aeabi_dmul+0xcc>
10010520:	2280      	movs	r2, #128	; 0x80
10010522:	4659      	mov	r1, fp
10010524:	0312      	lsls	r2, r2, #12
10010526:	4211      	tst	r1, r2
10010528:	d008      	beq.n	1001053c <__aeabi_dmul+0x3ec>
1001052a:	4215      	tst	r5, r2
1001052c:	d106      	bne.n	1001053c <__aeabi_dmul+0x3ec>
1001052e:	4315      	orrs	r5, r2
10010530:	032d      	lsls	r5, r5, #12
10010532:	4698      	mov	r8, r3
10010534:	0b2d      	lsrs	r5, r5, #12
10010536:	464c      	mov	r4, r9
10010538:	4b41      	ldr	r3, [pc, #260]	; (10010640 <__aeabi_dmul+0x4f0>)
1001053a:	e66f      	b.n	1001021c <__aeabi_dmul+0xcc>
1001053c:	465d      	mov	r5, fp
1001053e:	4315      	orrs	r5, r2
10010540:	032d      	lsls	r5, r5, #12
10010542:	0b2d      	lsrs	r5, r5, #12
10010544:	4b3e      	ldr	r3, [pc, #248]	; (10010640 <__aeabi_dmul+0x4f0>)
10010546:	e669      	b.n	1001021c <__aeabi_dmul+0xcc>
10010548:	0003      	movs	r3, r0
1001054a:	4655      	mov	r5, sl
1001054c:	3b28      	subs	r3, #40	; 0x28
1001054e:	409d      	lsls	r5, r3
10010550:	2300      	movs	r3, #0
10010552:	e6bc      	b.n	100102ce <__aeabi_dmul+0x17e>
10010554:	4650      	mov	r0, sl
10010556:	f000 fc75 	bl	10010e44 <__clzsi2>
1001055a:	3020      	adds	r0, #32
1001055c:	e6a8      	b.n	100102b0 <__aeabi_dmul+0x160>
1001055e:	0003      	movs	r3, r0
10010560:	3b28      	subs	r3, #40	; 0x28
10010562:	409f      	lsls	r7, r3
10010564:	2300      	movs	r3, #0
10010566:	46bb      	mov	fp, r7
10010568:	4698      	mov	r8, r3
1001056a:	e689      	b.n	10010280 <__aeabi_dmul+0x130>
1001056c:	f000 fc6a 	bl	10010e44 <__clzsi2>
10010570:	3020      	adds	r0, #32
10010572:	e673      	b.n	1001025c <__aeabi_dmul+0x10c>
10010574:	2401      	movs	r4, #1
10010576:	1aa6      	subs	r6, r4, r2
10010578:	2e38      	cmp	r6, #56	; 0x38
1001057a:	dd07      	ble.n	1001058c <__aeabi_dmul+0x43c>
1001057c:	2200      	movs	r2, #0
1001057e:	400c      	ands	r4, r1
10010580:	2300      	movs	r3, #0
10010582:	2500      	movs	r5, #0
10010584:	4690      	mov	r8, r2
10010586:	e649      	b.n	1001021c <__aeabi_dmul+0xcc>
10010588:	9e02      	ldr	r6, [sp, #8]
1001058a:	e7a3      	b.n	100104d4 <__aeabi_dmul+0x384>
1001058c:	2e1f      	cmp	r6, #31
1001058e:	dc20      	bgt.n	100105d2 <__aeabi_dmul+0x482>
10010590:	2220      	movs	r2, #32
10010592:	002c      	movs	r4, r5
10010594:	0018      	movs	r0, r3
10010596:	1b92      	subs	r2, r2, r6
10010598:	40f0      	lsrs	r0, r6
1001059a:	4094      	lsls	r4, r2
1001059c:	4093      	lsls	r3, r2
1001059e:	4304      	orrs	r4, r0
100105a0:	1e58      	subs	r0, r3, #1
100105a2:	4183      	sbcs	r3, r0
100105a4:	431c      	orrs	r4, r3
100105a6:	40f5      	lsrs	r5, r6
100105a8:	0763      	lsls	r3, r4, #29
100105aa:	d009      	beq.n	100105c0 <__aeabi_dmul+0x470>
100105ac:	230f      	movs	r3, #15
100105ae:	4023      	ands	r3, r4
100105b0:	2b04      	cmp	r3, #4
100105b2:	d005      	beq.n	100105c0 <__aeabi_dmul+0x470>
100105b4:	0023      	movs	r3, r4
100105b6:	1d1c      	adds	r4, r3, #4
100105b8:	429c      	cmp	r4, r3
100105ba:	4192      	sbcs	r2, r2
100105bc:	4252      	negs	r2, r2
100105be:	18ad      	adds	r5, r5, r2
100105c0:	022b      	lsls	r3, r5, #8
100105c2:	d51f      	bpl.n	10010604 <__aeabi_dmul+0x4b4>
100105c4:	2401      	movs	r4, #1
100105c6:	2200      	movs	r2, #0
100105c8:	400c      	ands	r4, r1
100105ca:	2301      	movs	r3, #1
100105cc:	2500      	movs	r5, #0
100105ce:	4690      	mov	r8, r2
100105d0:	e624      	b.n	1001021c <__aeabi_dmul+0xcc>
100105d2:	201f      	movs	r0, #31
100105d4:	002c      	movs	r4, r5
100105d6:	4240      	negs	r0, r0
100105d8:	1a82      	subs	r2, r0, r2
100105da:	40d4      	lsrs	r4, r2
100105dc:	2e20      	cmp	r6, #32
100105de:	d01c      	beq.n	1001061a <__aeabi_dmul+0x4ca>
100105e0:	2240      	movs	r2, #64	; 0x40
100105e2:	1b96      	subs	r6, r2, r6
100105e4:	40b5      	lsls	r5, r6
100105e6:	432b      	orrs	r3, r5
100105e8:	1e58      	subs	r0, r3, #1
100105ea:	4183      	sbcs	r3, r0
100105ec:	2007      	movs	r0, #7
100105ee:	4323      	orrs	r3, r4
100105f0:	4018      	ands	r0, r3
100105f2:	2500      	movs	r5, #0
100105f4:	2800      	cmp	r0, #0
100105f6:	d009      	beq.n	1001060c <__aeabi_dmul+0x4bc>
100105f8:	220f      	movs	r2, #15
100105fa:	2500      	movs	r5, #0
100105fc:	401a      	ands	r2, r3
100105fe:	001c      	movs	r4, r3
10010600:	2a04      	cmp	r2, #4
10010602:	d1d8      	bne.n	100105b6 <__aeabi_dmul+0x466>
10010604:	0023      	movs	r3, r4
10010606:	0768      	lsls	r0, r5, #29
10010608:	026d      	lsls	r5, r5, #9
1001060a:	0b2d      	lsrs	r5, r5, #12
1001060c:	2401      	movs	r4, #1
1001060e:	08db      	lsrs	r3, r3, #3
10010610:	4303      	orrs	r3, r0
10010612:	4698      	mov	r8, r3
10010614:	400c      	ands	r4, r1
10010616:	2300      	movs	r3, #0
10010618:	e600      	b.n	1001021c <__aeabi_dmul+0xcc>
1001061a:	2500      	movs	r5, #0
1001061c:	e7e3      	b.n	100105e6 <__aeabi_dmul+0x496>
1001061e:	2280      	movs	r2, #128	; 0x80
10010620:	2401      	movs	r4, #1
10010622:	0312      	lsls	r2, r2, #12
10010624:	4315      	orrs	r5, r2
10010626:	032d      	lsls	r5, r5, #12
10010628:	4698      	mov	r8, r3
1001062a:	0b2d      	lsrs	r5, r5, #12
1001062c:	400c      	ands	r4, r1
1001062e:	4b04      	ldr	r3, [pc, #16]	; (10010640 <__aeabi_dmul+0x4f0>)
10010630:	e5f4      	b.n	1001021c <__aeabi_dmul+0xcc>
10010632:	46c0      	nop			; (mov r8, r8)
10010634:	000003ff 	.word	0x000003ff
10010638:	feffffff 	.word	0xfeffffff
1001063c:	000007fe 	.word	0x000007fe
10010640:	000007ff 	.word	0x000007ff

10010644 <__aeabi_dsub>:
10010644:	b5f0      	push	{r4, r5, r6, r7, lr}
10010646:	4657      	mov	r7, sl
10010648:	464e      	mov	r6, r9
1001064a:	4645      	mov	r5, r8
1001064c:	b4e0      	push	{r5, r6, r7}
1001064e:	000e      	movs	r6, r1
10010650:	0011      	movs	r1, r2
10010652:	0ff2      	lsrs	r2, r6, #31
10010654:	4692      	mov	sl, r2
10010656:	00c5      	lsls	r5, r0, #3
10010658:	0f42      	lsrs	r2, r0, #29
1001065a:	0318      	lsls	r0, r3, #12
1001065c:	0337      	lsls	r7, r6, #12
1001065e:	0074      	lsls	r4, r6, #1
10010660:	0a40      	lsrs	r0, r0, #9
10010662:	0f4e      	lsrs	r6, r1, #29
10010664:	0a7f      	lsrs	r7, r7, #9
10010666:	4330      	orrs	r0, r6
10010668:	4ecf      	ldr	r6, [pc, #828]	; (100109a8 <__aeabi_dsub+0x364>)
1001066a:	4317      	orrs	r7, r2
1001066c:	005a      	lsls	r2, r3, #1
1001066e:	0d64      	lsrs	r4, r4, #21
10010670:	0d52      	lsrs	r2, r2, #21
10010672:	0fdb      	lsrs	r3, r3, #31
10010674:	00c9      	lsls	r1, r1, #3
10010676:	42b2      	cmp	r2, r6
10010678:	d100      	bne.n	1001067c <__aeabi_dsub+0x38>
1001067a:	e0e5      	b.n	10010848 <__aeabi_dsub+0x204>
1001067c:	2601      	movs	r6, #1
1001067e:	4073      	eors	r3, r6
10010680:	1aa6      	subs	r6, r4, r2
10010682:	46b4      	mov	ip, r6
10010684:	4553      	cmp	r3, sl
10010686:	d100      	bne.n	1001068a <__aeabi_dsub+0x46>
10010688:	e0af      	b.n	100107ea <__aeabi_dsub+0x1a6>
1001068a:	2e00      	cmp	r6, #0
1001068c:	dc00      	bgt.n	10010690 <__aeabi_dsub+0x4c>
1001068e:	e10d      	b.n	100108ac <__aeabi_dsub+0x268>
10010690:	2a00      	cmp	r2, #0
10010692:	d13a      	bne.n	1001070a <__aeabi_dsub+0xc6>
10010694:	0003      	movs	r3, r0
10010696:	430b      	orrs	r3, r1
10010698:	d000      	beq.n	1001069c <__aeabi_dsub+0x58>
1001069a:	e0e4      	b.n	10010866 <__aeabi_dsub+0x222>
1001069c:	076b      	lsls	r3, r5, #29
1001069e:	d009      	beq.n	100106b4 <__aeabi_dsub+0x70>
100106a0:	230f      	movs	r3, #15
100106a2:	402b      	ands	r3, r5
100106a4:	2b04      	cmp	r3, #4
100106a6:	d005      	beq.n	100106b4 <__aeabi_dsub+0x70>
100106a8:	1d2b      	adds	r3, r5, #4
100106aa:	42ab      	cmp	r3, r5
100106ac:	41ad      	sbcs	r5, r5
100106ae:	426d      	negs	r5, r5
100106b0:	197f      	adds	r7, r7, r5
100106b2:	001d      	movs	r5, r3
100106b4:	023b      	lsls	r3, r7, #8
100106b6:	d400      	bmi.n	100106ba <__aeabi_dsub+0x76>
100106b8:	e088      	b.n	100107cc <__aeabi_dsub+0x188>
100106ba:	4bbb      	ldr	r3, [pc, #748]	; (100109a8 <__aeabi_dsub+0x364>)
100106bc:	3401      	adds	r4, #1
100106be:	429c      	cmp	r4, r3
100106c0:	d100      	bne.n	100106c4 <__aeabi_dsub+0x80>
100106c2:	e110      	b.n	100108e6 <__aeabi_dsub+0x2a2>
100106c4:	003a      	movs	r2, r7
100106c6:	4bb9      	ldr	r3, [pc, #740]	; (100109ac <__aeabi_dsub+0x368>)
100106c8:	4651      	mov	r1, sl
100106ca:	401a      	ands	r2, r3
100106cc:	2301      	movs	r3, #1
100106ce:	0750      	lsls	r0, r2, #29
100106d0:	08ed      	lsrs	r5, r5, #3
100106d2:	0252      	lsls	r2, r2, #9
100106d4:	0564      	lsls	r4, r4, #21
100106d6:	4305      	orrs	r5, r0
100106d8:	0b12      	lsrs	r2, r2, #12
100106da:	0d64      	lsrs	r4, r4, #21
100106dc:	400b      	ands	r3, r1
100106de:	2100      	movs	r1, #0
100106e0:	0028      	movs	r0, r5
100106e2:	0312      	lsls	r2, r2, #12
100106e4:	0d0d      	lsrs	r5, r1, #20
100106e6:	0b12      	lsrs	r2, r2, #12
100106e8:	0564      	lsls	r4, r4, #21
100106ea:	052d      	lsls	r5, r5, #20
100106ec:	4315      	orrs	r5, r2
100106ee:	0862      	lsrs	r2, r4, #1
100106f0:	4caf      	ldr	r4, [pc, #700]	; (100109b0 <__aeabi_dsub+0x36c>)
100106f2:	07db      	lsls	r3, r3, #31
100106f4:	402c      	ands	r4, r5
100106f6:	4314      	orrs	r4, r2
100106f8:	0064      	lsls	r4, r4, #1
100106fa:	0864      	lsrs	r4, r4, #1
100106fc:	431c      	orrs	r4, r3
100106fe:	0021      	movs	r1, r4
10010700:	bc1c      	pop	{r2, r3, r4}
10010702:	4690      	mov	r8, r2
10010704:	4699      	mov	r9, r3
10010706:	46a2      	mov	sl, r4
10010708:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001070a:	4ba7      	ldr	r3, [pc, #668]	; (100109a8 <__aeabi_dsub+0x364>)
1001070c:	429c      	cmp	r4, r3
1001070e:	d0c5      	beq.n	1001069c <__aeabi_dsub+0x58>
10010710:	2380      	movs	r3, #128	; 0x80
10010712:	041b      	lsls	r3, r3, #16
10010714:	4318      	orrs	r0, r3
10010716:	4663      	mov	r3, ip
10010718:	2b38      	cmp	r3, #56	; 0x38
1001071a:	dd00      	ble.n	1001071e <__aeabi_dsub+0xda>
1001071c:	e0fd      	b.n	1001091a <__aeabi_dsub+0x2d6>
1001071e:	2b1f      	cmp	r3, #31
10010720:	dd00      	ble.n	10010724 <__aeabi_dsub+0xe0>
10010722:	e130      	b.n	10010986 <__aeabi_dsub+0x342>
10010724:	4662      	mov	r2, ip
10010726:	2320      	movs	r3, #32
10010728:	1a9b      	subs	r3, r3, r2
1001072a:	0002      	movs	r2, r0
1001072c:	409a      	lsls	r2, r3
1001072e:	4666      	mov	r6, ip
10010730:	4690      	mov	r8, r2
10010732:	000a      	movs	r2, r1
10010734:	4099      	lsls	r1, r3
10010736:	40f2      	lsrs	r2, r6
10010738:	4646      	mov	r6, r8
1001073a:	1e4b      	subs	r3, r1, #1
1001073c:	4199      	sbcs	r1, r3
1001073e:	4332      	orrs	r2, r6
10010740:	4311      	orrs	r1, r2
10010742:	4663      	mov	r3, ip
10010744:	0002      	movs	r2, r0
10010746:	40da      	lsrs	r2, r3
10010748:	1a69      	subs	r1, r5, r1
1001074a:	428d      	cmp	r5, r1
1001074c:	419b      	sbcs	r3, r3
1001074e:	000d      	movs	r5, r1
10010750:	1aba      	subs	r2, r7, r2
10010752:	425b      	negs	r3, r3
10010754:	1ad7      	subs	r7, r2, r3
10010756:	023b      	lsls	r3, r7, #8
10010758:	d535      	bpl.n	100107c6 <__aeabi_dsub+0x182>
1001075a:	027a      	lsls	r2, r7, #9
1001075c:	0a53      	lsrs	r3, r2, #9
1001075e:	4698      	mov	r8, r3
10010760:	4643      	mov	r3, r8
10010762:	2b00      	cmp	r3, #0
10010764:	d100      	bne.n	10010768 <__aeabi_dsub+0x124>
10010766:	e0c4      	b.n	100108f2 <__aeabi_dsub+0x2ae>
10010768:	4640      	mov	r0, r8
1001076a:	f000 fb6b 	bl	10010e44 <__clzsi2>
1001076e:	0003      	movs	r3, r0
10010770:	3b08      	subs	r3, #8
10010772:	2b1f      	cmp	r3, #31
10010774:	dd00      	ble.n	10010778 <__aeabi_dsub+0x134>
10010776:	e0c5      	b.n	10010904 <__aeabi_dsub+0x2c0>
10010778:	2220      	movs	r2, #32
1001077a:	0029      	movs	r1, r5
1001077c:	1ad2      	subs	r2, r2, r3
1001077e:	4647      	mov	r7, r8
10010780:	40d1      	lsrs	r1, r2
10010782:	409f      	lsls	r7, r3
10010784:	000a      	movs	r2, r1
10010786:	409d      	lsls	r5, r3
10010788:	433a      	orrs	r2, r7
1001078a:	429c      	cmp	r4, r3
1001078c:	dd00      	ble.n	10010790 <__aeabi_dsub+0x14c>
1001078e:	e0c0      	b.n	10010912 <__aeabi_dsub+0x2ce>
10010790:	1b1c      	subs	r4, r3, r4
10010792:	1c63      	adds	r3, r4, #1
10010794:	2b1f      	cmp	r3, #31
10010796:	dd00      	ble.n	1001079a <__aeabi_dsub+0x156>
10010798:	e0e4      	b.n	10010964 <__aeabi_dsub+0x320>
1001079a:	2120      	movs	r1, #32
1001079c:	0014      	movs	r4, r2
1001079e:	0028      	movs	r0, r5
100107a0:	1ac9      	subs	r1, r1, r3
100107a2:	40d8      	lsrs	r0, r3
100107a4:	408c      	lsls	r4, r1
100107a6:	408d      	lsls	r5, r1
100107a8:	4304      	orrs	r4, r0
100107aa:	40da      	lsrs	r2, r3
100107ac:	1e68      	subs	r0, r5, #1
100107ae:	4185      	sbcs	r5, r0
100107b0:	0017      	movs	r7, r2
100107b2:	4325      	orrs	r5, r4
100107b4:	2400      	movs	r4, #0
100107b6:	e771      	b.n	1001069c <__aeabi_dsub+0x58>
100107b8:	4642      	mov	r2, r8
100107ba:	4663      	mov	r3, ip
100107bc:	431a      	orrs	r2, r3
100107be:	d100      	bne.n	100107c2 <__aeabi_dsub+0x17e>
100107c0:	e24c      	b.n	10010c5c <__aeabi_dsub+0x618>
100107c2:	4667      	mov	r7, ip
100107c4:	4645      	mov	r5, r8
100107c6:	076b      	lsls	r3, r5, #29
100107c8:	d000      	beq.n	100107cc <__aeabi_dsub+0x188>
100107ca:	e769      	b.n	100106a0 <__aeabi_dsub+0x5c>
100107cc:	2301      	movs	r3, #1
100107ce:	4651      	mov	r1, sl
100107d0:	0778      	lsls	r0, r7, #29
100107d2:	08ed      	lsrs	r5, r5, #3
100107d4:	08fa      	lsrs	r2, r7, #3
100107d6:	400b      	ands	r3, r1
100107d8:	4305      	orrs	r5, r0
100107da:	4973      	ldr	r1, [pc, #460]	; (100109a8 <__aeabi_dsub+0x364>)
100107dc:	428c      	cmp	r4, r1
100107de:	d038      	beq.n	10010852 <__aeabi_dsub+0x20e>
100107e0:	0312      	lsls	r2, r2, #12
100107e2:	0564      	lsls	r4, r4, #21
100107e4:	0b12      	lsrs	r2, r2, #12
100107e6:	0d64      	lsrs	r4, r4, #21
100107e8:	e779      	b.n	100106de <__aeabi_dsub+0x9a>
100107ea:	2e00      	cmp	r6, #0
100107ec:	dc00      	bgt.n	100107f0 <__aeabi_dsub+0x1ac>
100107ee:	e09a      	b.n	10010926 <__aeabi_dsub+0x2e2>
100107f0:	2a00      	cmp	r2, #0
100107f2:	d047      	beq.n	10010884 <__aeabi_dsub+0x240>
100107f4:	4a6c      	ldr	r2, [pc, #432]	; (100109a8 <__aeabi_dsub+0x364>)
100107f6:	4294      	cmp	r4, r2
100107f8:	d100      	bne.n	100107fc <__aeabi_dsub+0x1b8>
100107fa:	e74f      	b.n	1001069c <__aeabi_dsub+0x58>
100107fc:	2280      	movs	r2, #128	; 0x80
100107fe:	0412      	lsls	r2, r2, #16
10010800:	4310      	orrs	r0, r2
10010802:	4662      	mov	r2, ip
10010804:	2a38      	cmp	r2, #56	; 0x38
10010806:	dc00      	bgt.n	1001080a <__aeabi_dsub+0x1c6>
10010808:	e108      	b.n	10010a1c <__aeabi_dsub+0x3d8>
1001080a:	4301      	orrs	r1, r0
1001080c:	1e48      	subs	r0, r1, #1
1001080e:	4181      	sbcs	r1, r0
10010810:	2200      	movs	r2, #0
10010812:	b2c9      	uxtb	r1, r1
10010814:	1949      	adds	r1, r1, r5
10010816:	19d2      	adds	r2, r2, r7
10010818:	42a9      	cmp	r1, r5
1001081a:	41bf      	sbcs	r7, r7
1001081c:	000d      	movs	r5, r1
1001081e:	427f      	negs	r7, r7
10010820:	18bf      	adds	r7, r7, r2
10010822:	023a      	lsls	r2, r7, #8
10010824:	d400      	bmi.n	10010828 <__aeabi_dsub+0x1e4>
10010826:	e142      	b.n	10010aae <__aeabi_dsub+0x46a>
10010828:	4a5f      	ldr	r2, [pc, #380]	; (100109a8 <__aeabi_dsub+0x364>)
1001082a:	3401      	adds	r4, #1
1001082c:	4294      	cmp	r4, r2
1001082e:	d100      	bne.n	10010832 <__aeabi_dsub+0x1ee>
10010830:	e14e      	b.n	10010ad0 <__aeabi_dsub+0x48c>
10010832:	2001      	movs	r0, #1
10010834:	4a5d      	ldr	r2, [pc, #372]	; (100109ac <__aeabi_dsub+0x368>)
10010836:	0869      	lsrs	r1, r5, #1
10010838:	403a      	ands	r2, r7
1001083a:	4028      	ands	r0, r5
1001083c:	4308      	orrs	r0, r1
1001083e:	07d5      	lsls	r5, r2, #31
10010840:	4305      	orrs	r5, r0
10010842:	0857      	lsrs	r7, r2, #1
10010844:	469a      	mov	sl, r3
10010846:	e729      	b.n	1001069c <__aeabi_dsub+0x58>
10010848:	0006      	movs	r6, r0
1001084a:	430e      	orrs	r6, r1
1001084c:	d000      	beq.n	10010850 <__aeabi_dsub+0x20c>
1001084e:	e717      	b.n	10010680 <__aeabi_dsub+0x3c>
10010850:	e714      	b.n	1001067c <__aeabi_dsub+0x38>
10010852:	0029      	movs	r1, r5
10010854:	4311      	orrs	r1, r2
10010856:	d100      	bne.n	1001085a <__aeabi_dsub+0x216>
10010858:	e1f9      	b.n	10010c4e <__aeabi_dsub+0x60a>
1001085a:	2180      	movs	r1, #128	; 0x80
1001085c:	0309      	lsls	r1, r1, #12
1001085e:	430a      	orrs	r2, r1
10010860:	0312      	lsls	r2, r2, #12
10010862:	0b12      	lsrs	r2, r2, #12
10010864:	e73b      	b.n	100106de <__aeabi_dsub+0x9a>
10010866:	2301      	movs	r3, #1
10010868:	425b      	negs	r3, r3
1001086a:	4698      	mov	r8, r3
1001086c:	44c4      	add	ip, r8
1001086e:	4663      	mov	r3, ip
10010870:	2b00      	cmp	r3, #0
10010872:	d172      	bne.n	1001095a <__aeabi_dsub+0x316>
10010874:	1a69      	subs	r1, r5, r1
10010876:	428d      	cmp	r5, r1
10010878:	419b      	sbcs	r3, r3
1001087a:	1a3f      	subs	r7, r7, r0
1001087c:	425b      	negs	r3, r3
1001087e:	1aff      	subs	r7, r7, r3
10010880:	000d      	movs	r5, r1
10010882:	e768      	b.n	10010756 <__aeabi_dsub+0x112>
10010884:	0002      	movs	r2, r0
10010886:	430a      	orrs	r2, r1
10010888:	d100      	bne.n	1001088c <__aeabi_dsub+0x248>
1001088a:	e707      	b.n	1001069c <__aeabi_dsub+0x58>
1001088c:	2201      	movs	r2, #1
1001088e:	4252      	negs	r2, r2
10010890:	4690      	mov	r8, r2
10010892:	44c4      	add	ip, r8
10010894:	4662      	mov	r2, ip
10010896:	2a00      	cmp	r2, #0
10010898:	d000      	beq.n	1001089c <__aeabi_dsub+0x258>
1001089a:	e0e6      	b.n	10010a6a <__aeabi_dsub+0x426>
1001089c:	1869      	adds	r1, r5, r1
1001089e:	42a9      	cmp	r1, r5
100108a0:	41b6      	sbcs	r6, r6
100108a2:	183f      	adds	r7, r7, r0
100108a4:	4276      	negs	r6, r6
100108a6:	19f7      	adds	r7, r6, r7
100108a8:	000d      	movs	r5, r1
100108aa:	e7ba      	b.n	10010822 <__aeabi_dsub+0x1de>
100108ac:	2e00      	cmp	r6, #0
100108ae:	d000      	beq.n	100108b2 <__aeabi_dsub+0x26e>
100108b0:	e080      	b.n	100109b4 <__aeabi_dsub+0x370>
100108b2:	1c62      	adds	r2, r4, #1
100108b4:	0552      	lsls	r2, r2, #21
100108b6:	0d52      	lsrs	r2, r2, #21
100108b8:	2a01      	cmp	r2, #1
100108ba:	dc00      	bgt.n	100108be <__aeabi_dsub+0x27a>
100108bc:	e0f9      	b.n	10010ab2 <__aeabi_dsub+0x46e>
100108be:	1a6a      	subs	r2, r5, r1
100108c0:	4691      	mov	r9, r2
100108c2:	454d      	cmp	r5, r9
100108c4:	41b6      	sbcs	r6, r6
100108c6:	1a3a      	subs	r2, r7, r0
100108c8:	4276      	negs	r6, r6
100108ca:	1b92      	subs	r2, r2, r6
100108cc:	4690      	mov	r8, r2
100108ce:	0212      	lsls	r2, r2, #8
100108d0:	d400      	bmi.n	100108d4 <__aeabi_dsub+0x290>
100108d2:	e099      	b.n	10010a08 <__aeabi_dsub+0x3c4>
100108d4:	1b4d      	subs	r5, r1, r5
100108d6:	42a9      	cmp	r1, r5
100108d8:	4189      	sbcs	r1, r1
100108da:	1bc7      	subs	r7, r0, r7
100108dc:	4249      	negs	r1, r1
100108de:	1a7a      	subs	r2, r7, r1
100108e0:	4690      	mov	r8, r2
100108e2:	469a      	mov	sl, r3
100108e4:	e73c      	b.n	10010760 <__aeabi_dsub+0x11c>
100108e6:	4652      	mov	r2, sl
100108e8:	2301      	movs	r3, #1
100108ea:	2500      	movs	r5, #0
100108ec:	4013      	ands	r3, r2
100108ee:	2200      	movs	r2, #0
100108f0:	e6f5      	b.n	100106de <__aeabi_dsub+0x9a>
100108f2:	0028      	movs	r0, r5
100108f4:	f000 faa6 	bl	10010e44 <__clzsi2>
100108f8:	3020      	adds	r0, #32
100108fa:	0003      	movs	r3, r0
100108fc:	3b08      	subs	r3, #8
100108fe:	2b1f      	cmp	r3, #31
10010900:	dc00      	bgt.n	10010904 <__aeabi_dsub+0x2c0>
10010902:	e739      	b.n	10010778 <__aeabi_dsub+0x134>
10010904:	002a      	movs	r2, r5
10010906:	3828      	subs	r0, #40	; 0x28
10010908:	4082      	lsls	r2, r0
1001090a:	2500      	movs	r5, #0
1001090c:	429c      	cmp	r4, r3
1001090e:	dc00      	bgt.n	10010912 <__aeabi_dsub+0x2ce>
10010910:	e73e      	b.n	10010790 <__aeabi_dsub+0x14c>
10010912:	4f26      	ldr	r7, [pc, #152]	; (100109ac <__aeabi_dsub+0x368>)
10010914:	1ae4      	subs	r4, r4, r3
10010916:	4017      	ands	r7, r2
10010918:	e6c0      	b.n	1001069c <__aeabi_dsub+0x58>
1001091a:	4301      	orrs	r1, r0
1001091c:	1e48      	subs	r0, r1, #1
1001091e:	4181      	sbcs	r1, r0
10010920:	2200      	movs	r2, #0
10010922:	b2c9      	uxtb	r1, r1
10010924:	e710      	b.n	10010748 <__aeabi_dsub+0x104>
10010926:	2e00      	cmp	r6, #0
10010928:	d000      	beq.n	1001092c <__aeabi_dsub+0x2e8>
1001092a:	e0f1      	b.n	10010b10 <__aeabi_dsub+0x4cc>
1001092c:	1c62      	adds	r2, r4, #1
1001092e:	4694      	mov	ip, r2
10010930:	0552      	lsls	r2, r2, #21
10010932:	0d52      	lsrs	r2, r2, #21
10010934:	2a01      	cmp	r2, #1
10010936:	dc00      	bgt.n	1001093a <__aeabi_dsub+0x2f6>
10010938:	e0a0      	b.n	10010a7c <__aeabi_dsub+0x438>
1001093a:	4a1b      	ldr	r2, [pc, #108]	; (100109a8 <__aeabi_dsub+0x364>)
1001093c:	4594      	cmp	ip, r2
1001093e:	d100      	bne.n	10010942 <__aeabi_dsub+0x2fe>
10010940:	e0c5      	b.n	10010ace <__aeabi_dsub+0x48a>
10010942:	1869      	adds	r1, r5, r1
10010944:	42a9      	cmp	r1, r5
10010946:	4192      	sbcs	r2, r2
10010948:	183f      	adds	r7, r7, r0
1001094a:	4252      	negs	r2, r2
1001094c:	19d2      	adds	r2, r2, r7
1001094e:	0849      	lsrs	r1, r1, #1
10010950:	07d5      	lsls	r5, r2, #31
10010952:	430d      	orrs	r5, r1
10010954:	0857      	lsrs	r7, r2, #1
10010956:	4664      	mov	r4, ip
10010958:	e6a0      	b.n	1001069c <__aeabi_dsub+0x58>
1001095a:	4b13      	ldr	r3, [pc, #76]	; (100109a8 <__aeabi_dsub+0x364>)
1001095c:	429c      	cmp	r4, r3
1001095e:	d000      	beq.n	10010962 <__aeabi_dsub+0x31e>
10010960:	e6d9      	b.n	10010716 <__aeabi_dsub+0xd2>
10010962:	e69b      	b.n	1001069c <__aeabi_dsub+0x58>
10010964:	0011      	movs	r1, r2
10010966:	3c1f      	subs	r4, #31
10010968:	40e1      	lsrs	r1, r4
1001096a:	000c      	movs	r4, r1
1001096c:	2b20      	cmp	r3, #32
1001096e:	d100      	bne.n	10010972 <__aeabi_dsub+0x32e>
10010970:	e080      	b.n	10010a74 <__aeabi_dsub+0x430>
10010972:	2140      	movs	r1, #64	; 0x40
10010974:	1acb      	subs	r3, r1, r3
10010976:	409a      	lsls	r2, r3
10010978:	4315      	orrs	r5, r2
1001097a:	1e6a      	subs	r2, r5, #1
1001097c:	4195      	sbcs	r5, r2
1001097e:	2700      	movs	r7, #0
10010980:	4325      	orrs	r5, r4
10010982:	2400      	movs	r4, #0
10010984:	e71f      	b.n	100107c6 <__aeabi_dsub+0x182>
10010986:	4663      	mov	r3, ip
10010988:	0002      	movs	r2, r0
1001098a:	3b20      	subs	r3, #32
1001098c:	40da      	lsrs	r2, r3
1001098e:	4663      	mov	r3, ip
10010990:	2b20      	cmp	r3, #32
10010992:	d071      	beq.n	10010a78 <__aeabi_dsub+0x434>
10010994:	2340      	movs	r3, #64	; 0x40
10010996:	4666      	mov	r6, ip
10010998:	1b9b      	subs	r3, r3, r6
1001099a:	4098      	lsls	r0, r3
1001099c:	4301      	orrs	r1, r0
1001099e:	1e48      	subs	r0, r1, #1
100109a0:	4181      	sbcs	r1, r0
100109a2:	4311      	orrs	r1, r2
100109a4:	2200      	movs	r2, #0
100109a6:	e6cf      	b.n	10010748 <__aeabi_dsub+0x104>
100109a8:	000007ff 	.word	0x000007ff
100109ac:	ff7fffff 	.word	0xff7fffff
100109b0:	800fffff 	.word	0x800fffff
100109b4:	2c00      	cmp	r4, #0
100109b6:	d048      	beq.n	10010a4a <__aeabi_dsub+0x406>
100109b8:	4cca      	ldr	r4, [pc, #808]	; (10010ce4 <__aeabi_dsub+0x6a0>)
100109ba:	42a2      	cmp	r2, r4
100109bc:	d100      	bne.n	100109c0 <__aeabi_dsub+0x37c>
100109be:	e0a2      	b.n	10010b06 <__aeabi_dsub+0x4c2>
100109c0:	4274      	negs	r4, r6
100109c2:	46a1      	mov	r9, r4
100109c4:	2480      	movs	r4, #128	; 0x80
100109c6:	0424      	lsls	r4, r4, #16
100109c8:	4327      	orrs	r7, r4
100109ca:	464c      	mov	r4, r9
100109cc:	2c38      	cmp	r4, #56	; 0x38
100109ce:	dd00      	ble.n	100109d2 <__aeabi_dsub+0x38e>
100109d0:	e0db      	b.n	10010b8a <__aeabi_dsub+0x546>
100109d2:	2c1f      	cmp	r4, #31
100109d4:	dd00      	ble.n	100109d8 <__aeabi_dsub+0x394>
100109d6:	e144      	b.n	10010c62 <__aeabi_dsub+0x61e>
100109d8:	464e      	mov	r6, r9
100109da:	2420      	movs	r4, #32
100109dc:	1ba4      	subs	r4, r4, r6
100109de:	003e      	movs	r6, r7
100109e0:	40a6      	lsls	r6, r4
100109e2:	46a2      	mov	sl, r4
100109e4:	46b0      	mov	r8, r6
100109e6:	464c      	mov	r4, r9
100109e8:	002e      	movs	r6, r5
100109ea:	40e6      	lsrs	r6, r4
100109ec:	46b4      	mov	ip, r6
100109ee:	4646      	mov	r6, r8
100109f0:	4664      	mov	r4, ip
100109f2:	4326      	orrs	r6, r4
100109f4:	4654      	mov	r4, sl
100109f6:	40a5      	lsls	r5, r4
100109f8:	1e6c      	subs	r4, r5, #1
100109fa:	41a5      	sbcs	r5, r4
100109fc:	0034      	movs	r4, r6
100109fe:	432c      	orrs	r4, r5
10010a00:	464d      	mov	r5, r9
10010a02:	40ef      	lsrs	r7, r5
10010a04:	1b0d      	subs	r5, r1, r4
10010a06:	e028      	b.n	10010a5a <__aeabi_dsub+0x416>
10010a08:	464a      	mov	r2, r9
10010a0a:	4643      	mov	r3, r8
10010a0c:	464d      	mov	r5, r9
10010a0e:	431a      	orrs	r2, r3
10010a10:	d000      	beq.n	10010a14 <__aeabi_dsub+0x3d0>
10010a12:	e6a5      	b.n	10010760 <__aeabi_dsub+0x11c>
10010a14:	2300      	movs	r3, #0
10010a16:	2400      	movs	r4, #0
10010a18:	2500      	movs	r5, #0
10010a1a:	e6de      	b.n	100107da <__aeabi_dsub+0x196>
10010a1c:	2a1f      	cmp	r2, #31
10010a1e:	dc5a      	bgt.n	10010ad6 <__aeabi_dsub+0x492>
10010a20:	4666      	mov	r6, ip
10010a22:	2220      	movs	r2, #32
10010a24:	1b92      	subs	r2, r2, r6
10010a26:	0006      	movs	r6, r0
10010a28:	4096      	lsls	r6, r2
10010a2a:	4691      	mov	r9, r2
10010a2c:	46b0      	mov	r8, r6
10010a2e:	4662      	mov	r2, ip
10010a30:	000e      	movs	r6, r1
10010a32:	40d6      	lsrs	r6, r2
10010a34:	4642      	mov	r2, r8
10010a36:	4316      	orrs	r6, r2
10010a38:	464a      	mov	r2, r9
10010a3a:	4091      	lsls	r1, r2
10010a3c:	1e4a      	subs	r2, r1, #1
10010a3e:	4191      	sbcs	r1, r2
10010a40:	0002      	movs	r2, r0
10010a42:	4660      	mov	r0, ip
10010a44:	4331      	orrs	r1, r6
10010a46:	40c2      	lsrs	r2, r0
10010a48:	e6e4      	b.n	10010814 <__aeabi_dsub+0x1d0>
10010a4a:	003c      	movs	r4, r7
10010a4c:	432c      	orrs	r4, r5
10010a4e:	d05a      	beq.n	10010b06 <__aeabi_dsub+0x4c2>
10010a50:	43f4      	mvns	r4, r6
10010a52:	46a1      	mov	r9, r4
10010a54:	2c00      	cmp	r4, #0
10010a56:	d152      	bne.n	10010afe <__aeabi_dsub+0x4ba>
10010a58:	1b4d      	subs	r5, r1, r5
10010a5a:	42a9      	cmp	r1, r5
10010a5c:	4189      	sbcs	r1, r1
10010a5e:	1bc7      	subs	r7, r0, r7
10010a60:	4249      	negs	r1, r1
10010a62:	1a7f      	subs	r7, r7, r1
10010a64:	0014      	movs	r4, r2
10010a66:	469a      	mov	sl, r3
10010a68:	e675      	b.n	10010756 <__aeabi_dsub+0x112>
10010a6a:	4a9e      	ldr	r2, [pc, #632]	; (10010ce4 <__aeabi_dsub+0x6a0>)
10010a6c:	4294      	cmp	r4, r2
10010a6e:	d000      	beq.n	10010a72 <__aeabi_dsub+0x42e>
10010a70:	e6c7      	b.n	10010802 <__aeabi_dsub+0x1be>
10010a72:	e613      	b.n	1001069c <__aeabi_dsub+0x58>
10010a74:	2200      	movs	r2, #0
10010a76:	e77f      	b.n	10010978 <__aeabi_dsub+0x334>
10010a78:	2000      	movs	r0, #0
10010a7a:	e78f      	b.n	1001099c <__aeabi_dsub+0x358>
10010a7c:	2c00      	cmp	r4, #0
10010a7e:	d000      	beq.n	10010a82 <__aeabi_dsub+0x43e>
10010a80:	e0c8      	b.n	10010c14 <__aeabi_dsub+0x5d0>
10010a82:	003b      	movs	r3, r7
10010a84:	432b      	orrs	r3, r5
10010a86:	d100      	bne.n	10010a8a <__aeabi_dsub+0x446>
10010a88:	e10f      	b.n	10010caa <__aeabi_dsub+0x666>
10010a8a:	0003      	movs	r3, r0
10010a8c:	430b      	orrs	r3, r1
10010a8e:	d100      	bne.n	10010a92 <__aeabi_dsub+0x44e>
10010a90:	e604      	b.n	1001069c <__aeabi_dsub+0x58>
10010a92:	1869      	adds	r1, r5, r1
10010a94:	42a9      	cmp	r1, r5
10010a96:	419b      	sbcs	r3, r3
10010a98:	183f      	adds	r7, r7, r0
10010a9a:	425b      	negs	r3, r3
10010a9c:	19df      	adds	r7, r3, r7
10010a9e:	023b      	lsls	r3, r7, #8
10010aa0:	d400      	bmi.n	10010aa4 <__aeabi_dsub+0x460>
10010aa2:	e11a      	b.n	10010cda <__aeabi_dsub+0x696>
10010aa4:	4b90      	ldr	r3, [pc, #576]	; (10010ce8 <__aeabi_dsub+0x6a4>)
10010aa6:	000d      	movs	r5, r1
10010aa8:	401f      	ands	r7, r3
10010aaa:	4664      	mov	r4, ip
10010aac:	e5f6      	b.n	1001069c <__aeabi_dsub+0x58>
10010aae:	469a      	mov	sl, r3
10010ab0:	e689      	b.n	100107c6 <__aeabi_dsub+0x182>
10010ab2:	003a      	movs	r2, r7
10010ab4:	432a      	orrs	r2, r5
10010ab6:	2c00      	cmp	r4, #0
10010ab8:	d15c      	bne.n	10010b74 <__aeabi_dsub+0x530>
10010aba:	2a00      	cmp	r2, #0
10010abc:	d175      	bne.n	10010baa <__aeabi_dsub+0x566>
10010abe:	0002      	movs	r2, r0
10010ac0:	430a      	orrs	r2, r1
10010ac2:	d100      	bne.n	10010ac6 <__aeabi_dsub+0x482>
10010ac4:	e0ca      	b.n	10010c5c <__aeabi_dsub+0x618>
10010ac6:	0007      	movs	r7, r0
10010ac8:	000d      	movs	r5, r1
10010aca:	469a      	mov	sl, r3
10010acc:	e5e6      	b.n	1001069c <__aeabi_dsub+0x58>
10010ace:	4664      	mov	r4, ip
10010ad0:	2200      	movs	r2, #0
10010ad2:	2500      	movs	r5, #0
10010ad4:	e681      	b.n	100107da <__aeabi_dsub+0x196>
10010ad6:	4662      	mov	r2, ip
10010ad8:	0006      	movs	r6, r0
10010ada:	3a20      	subs	r2, #32
10010adc:	40d6      	lsrs	r6, r2
10010ade:	4662      	mov	r2, ip
10010ae0:	46b0      	mov	r8, r6
10010ae2:	2a20      	cmp	r2, #32
10010ae4:	d100      	bne.n	10010ae8 <__aeabi_dsub+0x4a4>
10010ae6:	e0b7      	b.n	10010c58 <__aeabi_dsub+0x614>
10010ae8:	2240      	movs	r2, #64	; 0x40
10010aea:	4666      	mov	r6, ip
10010aec:	1b92      	subs	r2, r2, r6
10010aee:	4090      	lsls	r0, r2
10010af0:	4301      	orrs	r1, r0
10010af2:	4642      	mov	r2, r8
10010af4:	1e48      	subs	r0, r1, #1
10010af6:	4181      	sbcs	r1, r0
10010af8:	4311      	orrs	r1, r2
10010afa:	2200      	movs	r2, #0
10010afc:	e68a      	b.n	10010814 <__aeabi_dsub+0x1d0>
10010afe:	4c79      	ldr	r4, [pc, #484]	; (10010ce4 <__aeabi_dsub+0x6a0>)
10010b00:	42a2      	cmp	r2, r4
10010b02:	d000      	beq.n	10010b06 <__aeabi_dsub+0x4c2>
10010b04:	e761      	b.n	100109ca <__aeabi_dsub+0x386>
10010b06:	0007      	movs	r7, r0
10010b08:	000d      	movs	r5, r1
10010b0a:	0014      	movs	r4, r2
10010b0c:	469a      	mov	sl, r3
10010b0e:	e5c5      	b.n	1001069c <__aeabi_dsub+0x58>
10010b10:	2c00      	cmp	r4, #0
10010b12:	d141      	bne.n	10010b98 <__aeabi_dsub+0x554>
10010b14:	003c      	movs	r4, r7
10010b16:	432c      	orrs	r4, r5
10010b18:	d078      	beq.n	10010c0c <__aeabi_dsub+0x5c8>
10010b1a:	43f4      	mvns	r4, r6
10010b1c:	46a1      	mov	r9, r4
10010b1e:	2c00      	cmp	r4, #0
10010b20:	d020      	beq.n	10010b64 <__aeabi_dsub+0x520>
10010b22:	4c70      	ldr	r4, [pc, #448]	; (10010ce4 <__aeabi_dsub+0x6a0>)
10010b24:	42a2      	cmp	r2, r4
10010b26:	d071      	beq.n	10010c0c <__aeabi_dsub+0x5c8>
10010b28:	464c      	mov	r4, r9
10010b2a:	2c38      	cmp	r4, #56	; 0x38
10010b2c:	dd00      	ble.n	10010b30 <__aeabi_dsub+0x4ec>
10010b2e:	e0b2      	b.n	10010c96 <__aeabi_dsub+0x652>
10010b30:	2c1f      	cmp	r4, #31
10010b32:	dd00      	ble.n	10010b36 <__aeabi_dsub+0x4f2>
10010b34:	e0bc      	b.n	10010cb0 <__aeabi_dsub+0x66c>
10010b36:	2620      	movs	r6, #32
10010b38:	1b34      	subs	r4, r6, r4
10010b3a:	46a2      	mov	sl, r4
10010b3c:	003c      	movs	r4, r7
10010b3e:	4656      	mov	r6, sl
10010b40:	40b4      	lsls	r4, r6
10010b42:	464e      	mov	r6, r9
10010b44:	46a0      	mov	r8, r4
10010b46:	002c      	movs	r4, r5
10010b48:	40f4      	lsrs	r4, r6
10010b4a:	46a4      	mov	ip, r4
10010b4c:	4644      	mov	r4, r8
10010b4e:	4666      	mov	r6, ip
10010b50:	4334      	orrs	r4, r6
10010b52:	46a4      	mov	ip, r4
10010b54:	4654      	mov	r4, sl
10010b56:	40a5      	lsls	r5, r4
10010b58:	4664      	mov	r4, ip
10010b5a:	1e6e      	subs	r6, r5, #1
10010b5c:	41b5      	sbcs	r5, r6
10010b5e:	4325      	orrs	r5, r4
10010b60:	464c      	mov	r4, r9
10010b62:	40e7      	lsrs	r7, r4
10010b64:	186d      	adds	r5, r5, r1
10010b66:	428d      	cmp	r5, r1
10010b68:	4189      	sbcs	r1, r1
10010b6a:	183f      	adds	r7, r7, r0
10010b6c:	4249      	negs	r1, r1
10010b6e:	19cf      	adds	r7, r1, r7
10010b70:	0014      	movs	r4, r2
10010b72:	e656      	b.n	10010822 <__aeabi_dsub+0x1de>
10010b74:	2a00      	cmp	r2, #0
10010b76:	d12f      	bne.n	10010bd8 <__aeabi_dsub+0x594>
10010b78:	0002      	movs	r2, r0
10010b7a:	430a      	orrs	r2, r1
10010b7c:	d100      	bne.n	10010b80 <__aeabi_dsub+0x53c>
10010b7e:	e084      	b.n	10010c8a <__aeabi_dsub+0x646>
10010b80:	0007      	movs	r7, r0
10010b82:	000d      	movs	r5, r1
10010b84:	469a      	mov	sl, r3
10010b86:	4c57      	ldr	r4, [pc, #348]	; (10010ce4 <__aeabi_dsub+0x6a0>)
10010b88:	e588      	b.n	1001069c <__aeabi_dsub+0x58>
10010b8a:	433d      	orrs	r5, r7
10010b8c:	1e6f      	subs	r7, r5, #1
10010b8e:	41bd      	sbcs	r5, r7
10010b90:	b2ec      	uxtb	r4, r5
10010b92:	2700      	movs	r7, #0
10010b94:	1b0d      	subs	r5, r1, r4
10010b96:	e760      	b.n	10010a5a <__aeabi_dsub+0x416>
10010b98:	4c52      	ldr	r4, [pc, #328]	; (10010ce4 <__aeabi_dsub+0x6a0>)
10010b9a:	42a2      	cmp	r2, r4
10010b9c:	d036      	beq.n	10010c0c <__aeabi_dsub+0x5c8>
10010b9e:	4274      	negs	r4, r6
10010ba0:	2680      	movs	r6, #128	; 0x80
10010ba2:	0436      	lsls	r6, r6, #16
10010ba4:	46a1      	mov	r9, r4
10010ba6:	4337      	orrs	r7, r6
10010ba8:	e7be      	b.n	10010b28 <__aeabi_dsub+0x4e4>
10010baa:	0002      	movs	r2, r0
10010bac:	430a      	orrs	r2, r1
10010bae:	d100      	bne.n	10010bb2 <__aeabi_dsub+0x56e>
10010bb0:	e574      	b.n	1001069c <__aeabi_dsub+0x58>
10010bb2:	1a6a      	subs	r2, r5, r1
10010bb4:	4690      	mov	r8, r2
10010bb6:	4545      	cmp	r5, r8
10010bb8:	41b6      	sbcs	r6, r6
10010bba:	1a3a      	subs	r2, r7, r0
10010bbc:	4276      	negs	r6, r6
10010bbe:	1b92      	subs	r2, r2, r6
10010bc0:	4694      	mov	ip, r2
10010bc2:	0212      	lsls	r2, r2, #8
10010bc4:	d400      	bmi.n	10010bc8 <__aeabi_dsub+0x584>
10010bc6:	e5f7      	b.n	100107b8 <__aeabi_dsub+0x174>
10010bc8:	1b4d      	subs	r5, r1, r5
10010bca:	42a9      	cmp	r1, r5
10010bcc:	4189      	sbcs	r1, r1
10010bce:	1bc7      	subs	r7, r0, r7
10010bd0:	4249      	negs	r1, r1
10010bd2:	1a7f      	subs	r7, r7, r1
10010bd4:	469a      	mov	sl, r3
10010bd6:	e561      	b.n	1001069c <__aeabi_dsub+0x58>
10010bd8:	0002      	movs	r2, r0
10010bda:	430a      	orrs	r2, r1
10010bdc:	d03a      	beq.n	10010c54 <__aeabi_dsub+0x610>
10010bde:	08ed      	lsrs	r5, r5, #3
10010be0:	077c      	lsls	r4, r7, #29
10010be2:	432c      	orrs	r4, r5
10010be4:	2580      	movs	r5, #128	; 0x80
10010be6:	08fa      	lsrs	r2, r7, #3
10010be8:	032d      	lsls	r5, r5, #12
10010bea:	422a      	tst	r2, r5
10010bec:	d008      	beq.n	10010c00 <__aeabi_dsub+0x5bc>
10010bee:	08c7      	lsrs	r7, r0, #3
10010bf0:	422f      	tst	r7, r5
10010bf2:	d105      	bne.n	10010c00 <__aeabi_dsub+0x5bc>
10010bf4:	0745      	lsls	r5, r0, #29
10010bf6:	002c      	movs	r4, r5
10010bf8:	003a      	movs	r2, r7
10010bfa:	469a      	mov	sl, r3
10010bfc:	08c9      	lsrs	r1, r1, #3
10010bfe:	430c      	orrs	r4, r1
10010c00:	0f67      	lsrs	r7, r4, #29
10010c02:	00d2      	lsls	r2, r2, #3
10010c04:	00e5      	lsls	r5, r4, #3
10010c06:	4317      	orrs	r7, r2
10010c08:	4c36      	ldr	r4, [pc, #216]	; (10010ce4 <__aeabi_dsub+0x6a0>)
10010c0a:	e547      	b.n	1001069c <__aeabi_dsub+0x58>
10010c0c:	0007      	movs	r7, r0
10010c0e:	000d      	movs	r5, r1
10010c10:	0014      	movs	r4, r2
10010c12:	e543      	b.n	1001069c <__aeabi_dsub+0x58>
10010c14:	003a      	movs	r2, r7
10010c16:	432a      	orrs	r2, r5
10010c18:	d043      	beq.n	10010ca2 <__aeabi_dsub+0x65e>
10010c1a:	0002      	movs	r2, r0
10010c1c:	430a      	orrs	r2, r1
10010c1e:	d019      	beq.n	10010c54 <__aeabi_dsub+0x610>
10010c20:	08ed      	lsrs	r5, r5, #3
10010c22:	077c      	lsls	r4, r7, #29
10010c24:	432c      	orrs	r4, r5
10010c26:	2580      	movs	r5, #128	; 0x80
10010c28:	08fa      	lsrs	r2, r7, #3
10010c2a:	032d      	lsls	r5, r5, #12
10010c2c:	422a      	tst	r2, r5
10010c2e:	d007      	beq.n	10010c40 <__aeabi_dsub+0x5fc>
10010c30:	08c6      	lsrs	r6, r0, #3
10010c32:	422e      	tst	r6, r5
10010c34:	d104      	bne.n	10010c40 <__aeabi_dsub+0x5fc>
10010c36:	0747      	lsls	r7, r0, #29
10010c38:	003c      	movs	r4, r7
10010c3a:	0032      	movs	r2, r6
10010c3c:	08c9      	lsrs	r1, r1, #3
10010c3e:	430c      	orrs	r4, r1
10010c40:	00d7      	lsls	r7, r2, #3
10010c42:	0f62      	lsrs	r2, r4, #29
10010c44:	00e5      	lsls	r5, r4, #3
10010c46:	4317      	orrs	r7, r2
10010c48:	469a      	mov	sl, r3
10010c4a:	4c26      	ldr	r4, [pc, #152]	; (10010ce4 <__aeabi_dsub+0x6a0>)
10010c4c:	e526      	b.n	1001069c <__aeabi_dsub+0x58>
10010c4e:	2200      	movs	r2, #0
10010c50:	2500      	movs	r5, #0
10010c52:	e544      	b.n	100106de <__aeabi_dsub+0x9a>
10010c54:	4c23      	ldr	r4, [pc, #140]	; (10010ce4 <__aeabi_dsub+0x6a0>)
10010c56:	e521      	b.n	1001069c <__aeabi_dsub+0x58>
10010c58:	2000      	movs	r0, #0
10010c5a:	e749      	b.n	10010af0 <__aeabi_dsub+0x4ac>
10010c5c:	2300      	movs	r3, #0
10010c5e:	2500      	movs	r5, #0
10010c60:	e5bb      	b.n	100107da <__aeabi_dsub+0x196>
10010c62:	464c      	mov	r4, r9
10010c64:	003e      	movs	r6, r7
10010c66:	3c20      	subs	r4, #32
10010c68:	40e6      	lsrs	r6, r4
10010c6a:	464c      	mov	r4, r9
10010c6c:	46b4      	mov	ip, r6
10010c6e:	2c20      	cmp	r4, #32
10010c70:	d031      	beq.n	10010cd6 <__aeabi_dsub+0x692>
10010c72:	2440      	movs	r4, #64	; 0x40
10010c74:	464e      	mov	r6, r9
10010c76:	1ba6      	subs	r6, r4, r6
10010c78:	40b7      	lsls	r7, r6
10010c7a:	433d      	orrs	r5, r7
10010c7c:	1e6c      	subs	r4, r5, #1
10010c7e:	41a5      	sbcs	r5, r4
10010c80:	4664      	mov	r4, ip
10010c82:	432c      	orrs	r4, r5
10010c84:	2700      	movs	r7, #0
10010c86:	1b0d      	subs	r5, r1, r4
10010c88:	e6e7      	b.n	10010a5a <__aeabi_dsub+0x416>
10010c8a:	2280      	movs	r2, #128	; 0x80
10010c8c:	2300      	movs	r3, #0
10010c8e:	0312      	lsls	r2, r2, #12
10010c90:	4c14      	ldr	r4, [pc, #80]	; (10010ce4 <__aeabi_dsub+0x6a0>)
10010c92:	2500      	movs	r5, #0
10010c94:	e5a1      	b.n	100107da <__aeabi_dsub+0x196>
10010c96:	433d      	orrs	r5, r7
10010c98:	1e6f      	subs	r7, r5, #1
10010c9a:	41bd      	sbcs	r5, r7
10010c9c:	2700      	movs	r7, #0
10010c9e:	b2ed      	uxtb	r5, r5
10010ca0:	e760      	b.n	10010b64 <__aeabi_dsub+0x520>
10010ca2:	0007      	movs	r7, r0
10010ca4:	000d      	movs	r5, r1
10010ca6:	4c0f      	ldr	r4, [pc, #60]	; (10010ce4 <__aeabi_dsub+0x6a0>)
10010ca8:	e4f8      	b.n	1001069c <__aeabi_dsub+0x58>
10010caa:	0007      	movs	r7, r0
10010cac:	000d      	movs	r5, r1
10010cae:	e4f5      	b.n	1001069c <__aeabi_dsub+0x58>
10010cb0:	464e      	mov	r6, r9
10010cb2:	003c      	movs	r4, r7
10010cb4:	3e20      	subs	r6, #32
10010cb6:	40f4      	lsrs	r4, r6
10010cb8:	46a0      	mov	r8, r4
10010cba:	464c      	mov	r4, r9
10010cbc:	2c20      	cmp	r4, #32
10010cbe:	d00e      	beq.n	10010cde <__aeabi_dsub+0x69a>
10010cc0:	2440      	movs	r4, #64	; 0x40
10010cc2:	464e      	mov	r6, r9
10010cc4:	1ba4      	subs	r4, r4, r6
10010cc6:	40a7      	lsls	r7, r4
10010cc8:	433d      	orrs	r5, r7
10010cca:	1e6f      	subs	r7, r5, #1
10010ccc:	41bd      	sbcs	r5, r7
10010cce:	4644      	mov	r4, r8
10010cd0:	2700      	movs	r7, #0
10010cd2:	4325      	orrs	r5, r4
10010cd4:	e746      	b.n	10010b64 <__aeabi_dsub+0x520>
10010cd6:	2700      	movs	r7, #0
10010cd8:	e7cf      	b.n	10010c7a <__aeabi_dsub+0x636>
10010cda:	000d      	movs	r5, r1
10010cdc:	e573      	b.n	100107c6 <__aeabi_dsub+0x182>
10010cde:	2700      	movs	r7, #0
10010ce0:	e7f2      	b.n	10010cc8 <__aeabi_dsub+0x684>
10010ce2:	46c0      	nop			; (mov r8, r8)
10010ce4:	000007ff 	.word	0x000007ff
10010ce8:	ff7fffff 	.word	0xff7fffff

10010cec <__aeabi_d2iz>:
10010cec:	030b      	lsls	r3, r1, #12
10010cee:	b530      	push	{r4, r5, lr}
10010cf0:	4d13      	ldr	r5, [pc, #76]	; (10010d40 <__aeabi_d2iz+0x54>)
10010cf2:	0b1a      	lsrs	r2, r3, #12
10010cf4:	004b      	lsls	r3, r1, #1
10010cf6:	0d5b      	lsrs	r3, r3, #21
10010cf8:	0fc9      	lsrs	r1, r1, #31
10010cfa:	2400      	movs	r4, #0
10010cfc:	42ab      	cmp	r3, r5
10010cfe:	dd11      	ble.n	10010d24 <__aeabi_d2iz+0x38>
10010d00:	4c10      	ldr	r4, [pc, #64]	; (10010d44 <__aeabi_d2iz+0x58>)
10010d02:	42a3      	cmp	r3, r4
10010d04:	dc10      	bgt.n	10010d28 <__aeabi_d2iz+0x3c>
10010d06:	2480      	movs	r4, #128	; 0x80
10010d08:	0364      	lsls	r4, r4, #13
10010d0a:	4322      	orrs	r2, r4
10010d0c:	4c0e      	ldr	r4, [pc, #56]	; (10010d48 <__aeabi_d2iz+0x5c>)
10010d0e:	1ae4      	subs	r4, r4, r3
10010d10:	2c1f      	cmp	r4, #31
10010d12:	dd0c      	ble.n	10010d2e <__aeabi_d2iz+0x42>
10010d14:	480d      	ldr	r0, [pc, #52]	; (10010d4c <__aeabi_d2iz+0x60>)
10010d16:	1ac3      	subs	r3, r0, r3
10010d18:	40da      	lsrs	r2, r3
10010d1a:	0013      	movs	r3, r2
10010d1c:	425c      	negs	r4, r3
10010d1e:	2900      	cmp	r1, #0
10010d20:	d100      	bne.n	10010d24 <__aeabi_d2iz+0x38>
10010d22:	001c      	movs	r4, r3
10010d24:	0020      	movs	r0, r4
10010d26:	bd30      	pop	{r4, r5, pc}
10010d28:	4b09      	ldr	r3, [pc, #36]	; (10010d50 <__aeabi_d2iz+0x64>)
10010d2a:	18cc      	adds	r4, r1, r3
10010d2c:	e7fa      	b.n	10010d24 <__aeabi_d2iz+0x38>
10010d2e:	40e0      	lsrs	r0, r4
10010d30:	4c08      	ldr	r4, [pc, #32]	; (10010d54 <__aeabi_d2iz+0x68>)
10010d32:	46a4      	mov	ip, r4
10010d34:	4463      	add	r3, ip
10010d36:	409a      	lsls	r2, r3
10010d38:	0013      	movs	r3, r2
10010d3a:	4303      	orrs	r3, r0
10010d3c:	e7ee      	b.n	10010d1c <__aeabi_d2iz+0x30>
10010d3e:	46c0      	nop			; (mov r8, r8)
10010d40:	000003fe 	.word	0x000003fe
10010d44:	0000041d 	.word	0x0000041d
10010d48:	00000433 	.word	0x00000433
10010d4c:	00000413 	.word	0x00000413
10010d50:	7fffffff 	.word	0x7fffffff
10010d54:	fffffbed 	.word	0xfffffbed

10010d58 <__aeabi_ui2d>:
10010d58:	b570      	push	{r4, r5, r6, lr}
10010d5a:	1e05      	subs	r5, r0, #0
10010d5c:	d028      	beq.n	10010db0 <__aeabi_ui2d+0x58>
10010d5e:	f000 f871 	bl	10010e44 <__clzsi2>
10010d62:	4b15      	ldr	r3, [pc, #84]	; (10010db8 <__aeabi_ui2d+0x60>)
10010d64:	4a15      	ldr	r2, [pc, #84]	; (10010dbc <__aeabi_ui2d+0x64>)
10010d66:	1a1b      	subs	r3, r3, r0
10010d68:	1ad2      	subs	r2, r2, r3
10010d6a:	2a1f      	cmp	r2, #31
10010d6c:	dd16      	ble.n	10010d9c <__aeabi_ui2d+0x44>
10010d6e:	002c      	movs	r4, r5
10010d70:	4a13      	ldr	r2, [pc, #76]	; (10010dc0 <__aeabi_ui2d+0x68>)
10010d72:	2500      	movs	r5, #0
10010d74:	1ad2      	subs	r2, r2, r3
10010d76:	4094      	lsls	r4, r2
10010d78:	055a      	lsls	r2, r3, #21
10010d7a:	0324      	lsls	r4, r4, #12
10010d7c:	0b24      	lsrs	r4, r4, #12
10010d7e:	0d52      	lsrs	r2, r2, #21
10010d80:	2100      	movs	r1, #0
10010d82:	0324      	lsls	r4, r4, #12
10010d84:	0d0b      	lsrs	r3, r1, #20
10010d86:	0b24      	lsrs	r4, r4, #12
10010d88:	051b      	lsls	r3, r3, #20
10010d8a:	4323      	orrs	r3, r4
10010d8c:	4c0d      	ldr	r4, [pc, #52]	; (10010dc4 <__aeabi_ui2d+0x6c>)
10010d8e:	0512      	lsls	r2, r2, #20
10010d90:	4023      	ands	r3, r4
10010d92:	4313      	orrs	r3, r2
10010d94:	005b      	lsls	r3, r3, #1
10010d96:	0028      	movs	r0, r5
10010d98:	0859      	lsrs	r1, r3, #1
10010d9a:	bd70      	pop	{r4, r5, r6, pc}
10010d9c:	210b      	movs	r1, #11
10010d9e:	002c      	movs	r4, r5
10010da0:	1a08      	subs	r0, r1, r0
10010da2:	40c4      	lsrs	r4, r0
10010da4:	4095      	lsls	r5, r2
10010da6:	0324      	lsls	r4, r4, #12
10010da8:	055a      	lsls	r2, r3, #21
10010daa:	0b24      	lsrs	r4, r4, #12
10010dac:	0d52      	lsrs	r2, r2, #21
10010dae:	e7e7      	b.n	10010d80 <__aeabi_ui2d+0x28>
10010db0:	2200      	movs	r2, #0
10010db2:	2400      	movs	r4, #0
10010db4:	e7e4      	b.n	10010d80 <__aeabi_ui2d+0x28>
10010db6:	46c0      	nop			; (mov r8, r8)
10010db8:	0000041e 	.word	0x0000041e
10010dbc:	00000433 	.word	0x00000433
10010dc0:	00000413 	.word	0x00000413
10010dc4:	800fffff 	.word	0x800fffff

10010dc8 <__aeabi_cdrcmple>:
10010dc8:	4684      	mov	ip, r0
10010dca:	1c10      	adds	r0, r2, #0
10010dcc:	4662      	mov	r2, ip
10010dce:	468c      	mov	ip, r1
10010dd0:	1c19      	adds	r1, r3, #0
10010dd2:	4663      	mov	r3, ip
10010dd4:	e000      	b.n	10010dd8 <__aeabi_cdcmpeq>
10010dd6:	46c0      	nop			; (mov r8, r8)

10010dd8 <__aeabi_cdcmpeq>:
10010dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10010dda:	f000 f8f5 	bl	10010fc8 <__ledf2>
10010dde:	2800      	cmp	r0, #0
10010de0:	d401      	bmi.n	10010de6 <__aeabi_cdcmpeq+0xe>
10010de2:	2100      	movs	r1, #0
10010de4:	42c8      	cmn	r0, r1
10010de6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10010de8 <__aeabi_dcmpeq>:
10010de8:	b510      	push	{r4, lr}
10010dea:	f000 f849 	bl	10010e80 <__eqdf2>
10010dee:	4240      	negs	r0, r0
10010df0:	3001      	adds	r0, #1
10010df2:	bd10      	pop	{r4, pc}

10010df4 <__aeabi_dcmplt>:
10010df4:	b510      	push	{r4, lr}
10010df6:	f000 f8e7 	bl	10010fc8 <__ledf2>
10010dfa:	2800      	cmp	r0, #0
10010dfc:	db01      	blt.n	10010e02 <__aeabi_dcmplt+0xe>
10010dfe:	2000      	movs	r0, #0
10010e00:	bd10      	pop	{r4, pc}
10010e02:	2001      	movs	r0, #1
10010e04:	bd10      	pop	{r4, pc}
10010e06:	46c0      	nop			; (mov r8, r8)

10010e08 <__aeabi_dcmple>:
10010e08:	b510      	push	{r4, lr}
10010e0a:	f000 f8dd 	bl	10010fc8 <__ledf2>
10010e0e:	2800      	cmp	r0, #0
10010e10:	dd01      	ble.n	10010e16 <__aeabi_dcmple+0xe>
10010e12:	2000      	movs	r0, #0
10010e14:	bd10      	pop	{r4, pc}
10010e16:	2001      	movs	r0, #1
10010e18:	bd10      	pop	{r4, pc}
10010e1a:	46c0      	nop			; (mov r8, r8)

10010e1c <__aeabi_dcmpgt>:
10010e1c:	b510      	push	{r4, lr}
10010e1e:	f000 f86f 	bl	10010f00 <__gedf2>
10010e22:	2800      	cmp	r0, #0
10010e24:	dc01      	bgt.n	10010e2a <__aeabi_dcmpgt+0xe>
10010e26:	2000      	movs	r0, #0
10010e28:	bd10      	pop	{r4, pc}
10010e2a:	2001      	movs	r0, #1
10010e2c:	bd10      	pop	{r4, pc}
10010e2e:	46c0      	nop			; (mov r8, r8)

10010e30 <__aeabi_dcmpge>:
10010e30:	b510      	push	{r4, lr}
10010e32:	f000 f865 	bl	10010f00 <__gedf2>
10010e36:	2800      	cmp	r0, #0
10010e38:	da01      	bge.n	10010e3e <__aeabi_dcmpge+0xe>
10010e3a:	2000      	movs	r0, #0
10010e3c:	bd10      	pop	{r4, pc}
10010e3e:	2001      	movs	r0, #1
10010e40:	bd10      	pop	{r4, pc}
10010e42:	46c0      	nop			; (mov r8, r8)

10010e44 <__clzsi2>:
10010e44:	211c      	movs	r1, #28
10010e46:	2301      	movs	r3, #1
10010e48:	041b      	lsls	r3, r3, #16
10010e4a:	4298      	cmp	r0, r3
10010e4c:	d301      	bcc.n	10010e52 <__clzsi2+0xe>
10010e4e:	0c00      	lsrs	r0, r0, #16
10010e50:	3910      	subs	r1, #16
10010e52:	0a1b      	lsrs	r3, r3, #8
10010e54:	4298      	cmp	r0, r3
10010e56:	d301      	bcc.n	10010e5c <__clzsi2+0x18>
10010e58:	0a00      	lsrs	r0, r0, #8
10010e5a:	3908      	subs	r1, #8
10010e5c:	091b      	lsrs	r3, r3, #4
10010e5e:	4298      	cmp	r0, r3
10010e60:	d301      	bcc.n	10010e66 <__clzsi2+0x22>
10010e62:	0900      	lsrs	r0, r0, #4
10010e64:	3904      	subs	r1, #4
10010e66:	a202      	add	r2, pc, #8	; (adr r2, 10010e70 <__clzsi2+0x2c>)
10010e68:	5c10      	ldrb	r0, [r2, r0]
10010e6a:	1840      	adds	r0, r0, r1
10010e6c:	4770      	bx	lr
10010e6e:	46c0      	nop			; (mov r8, r8)
10010e70:	02020304 	.word	0x02020304
10010e74:	01010101 	.word	0x01010101
	...

10010e80 <__eqdf2>:
10010e80:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e82:	465f      	mov	r7, fp
10010e84:	4656      	mov	r6, sl
10010e86:	464d      	mov	r5, r9
10010e88:	4644      	mov	r4, r8
10010e8a:	b4f0      	push	{r4, r5, r6, r7}
10010e8c:	031f      	lsls	r7, r3, #12
10010e8e:	005c      	lsls	r4, r3, #1
10010e90:	0fdb      	lsrs	r3, r3, #31
10010e92:	469a      	mov	sl, r3
10010e94:	4b19      	ldr	r3, [pc, #100]	; (10010efc <__eqdf2+0x7c>)
10010e96:	030e      	lsls	r6, r1, #12
10010e98:	004d      	lsls	r5, r1, #1
10010e9a:	0fc9      	lsrs	r1, r1, #31
10010e9c:	4680      	mov	r8, r0
10010e9e:	0b36      	lsrs	r6, r6, #12
10010ea0:	0d6d      	lsrs	r5, r5, #21
10010ea2:	468b      	mov	fp, r1
10010ea4:	4691      	mov	r9, r2
10010ea6:	0b3f      	lsrs	r7, r7, #12
10010ea8:	0d64      	lsrs	r4, r4, #21
10010eaa:	429d      	cmp	r5, r3
10010eac:	d019      	beq.n	10010ee2 <__eqdf2+0x62>
10010eae:	4b13      	ldr	r3, [pc, #76]	; (10010efc <__eqdf2+0x7c>)
10010eb0:	429c      	cmp	r4, r3
10010eb2:	d01b      	beq.n	10010eec <__eqdf2+0x6c>
10010eb4:	2301      	movs	r3, #1
10010eb6:	42a5      	cmp	r5, r4
10010eb8:	d006      	beq.n	10010ec8 <__eqdf2+0x48>
10010eba:	0018      	movs	r0, r3
10010ebc:	bc3c      	pop	{r2, r3, r4, r5}
10010ebe:	4690      	mov	r8, r2
10010ec0:	4699      	mov	r9, r3
10010ec2:	46a2      	mov	sl, r4
10010ec4:	46ab      	mov	fp, r5
10010ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010ec8:	42be      	cmp	r6, r7
10010eca:	d1f6      	bne.n	10010eba <__eqdf2+0x3a>
10010ecc:	45c8      	cmp	r8, r9
10010ece:	d1f4      	bne.n	10010eba <__eqdf2+0x3a>
10010ed0:	45d3      	cmp	fp, sl
10010ed2:	d010      	beq.n	10010ef6 <__eqdf2+0x76>
10010ed4:	2d00      	cmp	r5, #0
10010ed6:	d1f0      	bne.n	10010eba <__eqdf2+0x3a>
10010ed8:	4330      	orrs	r0, r6
10010eda:	0003      	movs	r3, r0
10010edc:	1e5a      	subs	r2, r3, #1
10010ede:	4193      	sbcs	r3, r2
10010ee0:	e7eb      	b.n	10010eba <__eqdf2+0x3a>
10010ee2:	0031      	movs	r1, r6
10010ee4:	2301      	movs	r3, #1
10010ee6:	4301      	orrs	r1, r0
10010ee8:	d1e7      	bne.n	10010eba <__eqdf2+0x3a>
10010eea:	e7e0      	b.n	10010eae <__eqdf2+0x2e>
10010eec:	433a      	orrs	r2, r7
10010eee:	2301      	movs	r3, #1
10010ef0:	2a00      	cmp	r2, #0
10010ef2:	d1e2      	bne.n	10010eba <__eqdf2+0x3a>
10010ef4:	e7de      	b.n	10010eb4 <__eqdf2+0x34>
10010ef6:	2300      	movs	r3, #0
10010ef8:	e7df      	b.n	10010eba <__eqdf2+0x3a>
10010efa:	46c0      	nop			; (mov r8, r8)
10010efc:	000007ff 	.word	0x000007ff

10010f00 <__gedf2>:
10010f00:	b5f0      	push	{r4, r5, r6, r7, lr}
10010f02:	465f      	mov	r7, fp
10010f04:	4644      	mov	r4, r8
10010f06:	4656      	mov	r6, sl
10010f08:	464d      	mov	r5, r9
10010f0a:	b4f0      	push	{r4, r5, r6, r7}
10010f0c:	031f      	lsls	r7, r3, #12
10010f0e:	0b3c      	lsrs	r4, r7, #12
10010f10:	4f2c      	ldr	r7, [pc, #176]	; (10010fc4 <__gedf2+0xc4>)
10010f12:	030e      	lsls	r6, r1, #12
10010f14:	004d      	lsls	r5, r1, #1
10010f16:	46a3      	mov	fp, r4
10010f18:	005c      	lsls	r4, r3, #1
10010f1a:	4684      	mov	ip, r0
10010f1c:	0b36      	lsrs	r6, r6, #12
10010f1e:	0d6d      	lsrs	r5, r5, #21
10010f20:	0fc9      	lsrs	r1, r1, #31
10010f22:	4690      	mov	r8, r2
10010f24:	0d64      	lsrs	r4, r4, #21
10010f26:	0fdb      	lsrs	r3, r3, #31
10010f28:	42bd      	cmp	r5, r7
10010f2a:	d02b      	beq.n	10010f84 <__gedf2+0x84>
10010f2c:	4f25      	ldr	r7, [pc, #148]	; (10010fc4 <__gedf2+0xc4>)
10010f2e:	42bc      	cmp	r4, r7
10010f30:	d02e      	beq.n	10010f90 <__gedf2+0x90>
10010f32:	2d00      	cmp	r5, #0
10010f34:	d10e      	bne.n	10010f54 <__gedf2+0x54>
10010f36:	4330      	orrs	r0, r6
10010f38:	0007      	movs	r7, r0
10010f3a:	4681      	mov	r9, r0
10010f3c:	4278      	negs	r0, r7
10010f3e:	4178      	adcs	r0, r7
10010f40:	2c00      	cmp	r4, #0
10010f42:	d117      	bne.n	10010f74 <__gedf2+0x74>
10010f44:	465f      	mov	r7, fp
10010f46:	433a      	orrs	r2, r7
10010f48:	d114      	bne.n	10010f74 <__gedf2+0x74>
10010f4a:	464b      	mov	r3, r9
10010f4c:	2000      	movs	r0, #0
10010f4e:	2b00      	cmp	r3, #0
10010f50:	d00a      	beq.n	10010f68 <__gedf2+0x68>
10010f52:	e006      	b.n	10010f62 <__gedf2+0x62>
10010f54:	2c00      	cmp	r4, #0
10010f56:	d102      	bne.n	10010f5e <__gedf2+0x5e>
10010f58:	4658      	mov	r0, fp
10010f5a:	4302      	orrs	r2, r0
10010f5c:	d001      	beq.n	10010f62 <__gedf2+0x62>
10010f5e:	4299      	cmp	r1, r3
10010f60:	d01a      	beq.n	10010f98 <__gedf2+0x98>
10010f62:	2301      	movs	r3, #1
10010f64:	4248      	negs	r0, r1
10010f66:	4318      	orrs	r0, r3
10010f68:	bc3c      	pop	{r2, r3, r4, r5}
10010f6a:	4690      	mov	r8, r2
10010f6c:	4699      	mov	r9, r3
10010f6e:	46a2      	mov	sl, r4
10010f70:	46ab      	mov	fp, r5
10010f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f74:	2800      	cmp	r0, #0
10010f76:	d0f2      	beq.n	10010f5e <__gedf2+0x5e>
10010f78:	4258      	negs	r0, r3
10010f7a:	4158      	adcs	r0, r3
10010f7c:	2201      	movs	r2, #1
10010f7e:	4240      	negs	r0, r0
10010f80:	4310      	orrs	r0, r2
10010f82:	e7f1      	b.n	10010f68 <__gedf2+0x68>
10010f84:	0037      	movs	r7, r6
10010f86:	4307      	orrs	r7, r0
10010f88:	d0d0      	beq.n	10010f2c <__gedf2+0x2c>
10010f8a:	2002      	movs	r0, #2
10010f8c:	4240      	negs	r0, r0
10010f8e:	e7eb      	b.n	10010f68 <__gedf2+0x68>
10010f90:	465f      	mov	r7, fp
10010f92:	4317      	orrs	r7, r2
10010f94:	d0cd      	beq.n	10010f32 <__gedf2+0x32>
10010f96:	e7f8      	b.n	10010f8a <__gedf2+0x8a>
10010f98:	42a5      	cmp	r5, r4
10010f9a:	dce2      	bgt.n	10010f62 <__gedf2+0x62>
10010f9c:	db05      	blt.n	10010faa <__gedf2+0xaa>
10010f9e:	455e      	cmp	r6, fp
10010fa0:	d8df      	bhi.n	10010f62 <__gedf2+0x62>
10010fa2:	d008      	beq.n	10010fb6 <__gedf2+0xb6>
10010fa4:	2000      	movs	r0, #0
10010fa6:	455e      	cmp	r6, fp
10010fa8:	d2de      	bcs.n	10010f68 <__gedf2+0x68>
10010faa:	4248      	negs	r0, r1
10010fac:	4148      	adcs	r0, r1
10010fae:	2301      	movs	r3, #1
10010fb0:	4240      	negs	r0, r0
10010fb2:	4318      	orrs	r0, r3
10010fb4:	e7d8      	b.n	10010f68 <__gedf2+0x68>
10010fb6:	45c4      	cmp	ip, r8
10010fb8:	d8d3      	bhi.n	10010f62 <__gedf2+0x62>
10010fba:	2000      	movs	r0, #0
10010fbc:	45c4      	cmp	ip, r8
10010fbe:	d3f4      	bcc.n	10010faa <__gedf2+0xaa>
10010fc0:	e7d2      	b.n	10010f68 <__gedf2+0x68>
10010fc2:	46c0      	nop			; (mov r8, r8)
10010fc4:	000007ff 	.word	0x000007ff

10010fc8 <__ledf2>:
10010fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010fca:	465f      	mov	r7, fp
10010fcc:	464d      	mov	r5, r9
10010fce:	4644      	mov	r4, r8
10010fd0:	4656      	mov	r6, sl
10010fd2:	b4f0      	push	{r4, r5, r6, r7}
10010fd4:	031c      	lsls	r4, r3, #12
10010fd6:	0b24      	lsrs	r4, r4, #12
10010fd8:	46a4      	mov	ip, r4
10010fda:	4c2f      	ldr	r4, [pc, #188]	; (10011098 <__ledf2+0xd0>)
10010fdc:	030f      	lsls	r7, r1, #12
10010fde:	004d      	lsls	r5, r1, #1
10010fe0:	005e      	lsls	r6, r3, #1
10010fe2:	0fc9      	lsrs	r1, r1, #31
10010fe4:	4680      	mov	r8, r0
10010fe6:	0b3f      	lsrs	r7, r7, #12
10010fe8:	0d6d      	lsrs	r5, r5, #21
10010fea:	468b      	mov	fp, r1
10010fec:	4691      	mov	r9, r2
10010fee:	0d76      	lsrs	r6, r6, #21
10010ff0:	0fdb      	lsrs	r3, r3, #31
10010ff2:	42a5      	cmp	r5, r4
10010ff4:	d020      	beq.n	10011038 <__ledf2+0x70>
10010ff6:	4c28      	ldr	r4, [pc, #160]	; (10011098 <__ledf2+0xd0>)
10010ff8:	42a6      	cmp	r6, r4
10010ffa:	d022      	beq.n	10011042 <__ledf2+0x7a>
10010ffc:	2d00      	cmp	r5, #0
10010ffe:	d112      	bne.n	10011026 <__ledf2+0x5e>
10011000:	4338      	orrs	r0, r7
10011002:	4244      	negs	r4, r0
10011004:	4144      	adcs	r4, r0
10011006:	2e00      	cmp	r6, #0
10011008:	d020      	beq.n	1001104c <__ledf2+0x84>
1001100a:	2c00      	cmp	r4, #0
1001100c:	d00d      	beq.n	1001102a <__ledf2+0x62>
1001100e:	425c      	negs	r4, r3
10011010:	4163      	adcs	r3, r4
10011012:	2401      	movs	r4, #1
10011014:	425b      	negs	r3, r3
10011016:	431c      	orrs	r4, r3
10011018:	0020      	movs	r0, r4
1001101a:	bc3c      	pop	{r2, r3, r4, r5}
1001101c:	4690      	mov	r8, r2
1001101e:	4699      	mov	r9, r3
10011020:	46a2      	mov	sl, r4
10011022:	46ab      	mov	fp, r5
10011024:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011026:	2e00      	cmp	r6, #0
10011028:	d017      	beq.n	1001105a <__ledf2+0x92>
1001102a:	455b      	cmp	r3, fp
1001102c:	d019      	beq.n	10011062 <__ledf2+0x9a>
1001102e:	465b      	mov	r3, fp
10011030:	425c      	negs	r4, r3
10011032:	2301      	movs	r3, #1
10011034:	431c      	orrs	r4, r3
10011036:	e7ef      	b.n	10011018 <__ledf2+0x50>
10011038:	0039      	movs	r1, r7
1001103a:	2402      	movs	r4, #2
1001103c:	4301      	orrs	r1, r0
1001103e:	d1eb      	bne.n	10011018 <__ledf2+0x50>
10011040:	e7d9      	b.n	10010ff6 <__ledf2+0x2e>
10011042:	4661      	mov	r1, ip
10011044:	2402      	movs	r4, #2
10011046:	4311      	orrs	r1, r2
10011048:	d1e6      	bne.n	10011018 <__ledf2+0x50>
1001104a:	e7d7      	b.n	10010ffc <__ledf2+0x34>
1001104c:	4661      	mov	r1, ip
1001104e:	430a      	orrs	r2, r1
10011050:	d1db      	bne.n	1001100a <__ledf2+0x42>
10011052:	2400      	movs	r4, #0
10011054:	2800      	cmp	r0, #0
10011056:	d0df      	beq.n	10011018 <__ledf2+0x50>
10011058:	e7e9      	b.n	1001102e <__ledf2+0x66>
1001105a:	4661      	mov	r1, ip
1001105c:	430a      	orrs	r2, r1
1001105e:	d1e4      	bne.n	1001102a <__ledf2+0x62>
10011060:	e7e5      	b.n	1001102e <__ledf2+0x66>
10011062:	42b5      	cmp	r5, r6
10011064:	dd03      	ble.n	1001106e <__ledf2+0xa6>
10011066:	2201      	movs	r2, #1
10011068:	425c      	negs	r4, r3
1001106a:	4314      	orrs	r4, r2
1001106c:	e7d4      	b.n	10011018 <__ledf2+0x50>
1001106e:	42b5      	cmp	r5, r6
10011070:	dbcd      	blt.n	1001100e <__ledf2+0x46>
10011072:	4567      	cmp	r7, ip
10011074:	d8db      	bhi.n	1001102e <__ledf2+0x66>
10011076:	d009      	beq.n	1001108c <__ledf2+0xc4>
10011078:	2400      	movs	r4, #0
1001107a:	4567      	cmp	r7, ip
1001107c:	d2cc      	bcs.n	10011018 <__ledf2+0x50>
1001107e:	4659      	mov	r1, fp
10011080:	424c      	negs	r4, r1
10011082:	4161      	adcs	r1, r4
10011084:	2401      	movs	r4, #1
10011086:	4249      	negs	r1, r1
10011088:	430c      	orrs	r4, r1
1001108a:	e7c5      	b.n	10011018 <__ledf2+0x50>
1001108c:	45c8      	cmp	r8, r9
1001108e:	d8ce      	bhi.n	1001102e <__ledf2+0x66>
10011090:	2400      	movs	r4, #0
10011092:	45c8      	cmp	r8, r9
10011094:	d3f3      	bcc.n	1001107e <__ledf2+0xb6>
10011096:	e7bf      	b.n	10011018 <__ledf2+0x50>
10011098:	000007ff 	.word	0x000007ff

1001109c <__libc_init_array>:
1001109c:	4b0e      	ldr	r3, [pc, #56]	; (100110d8 <__libc_init_array+0x3c>)
1001109e:	b570      	push	{r4, r5, r6, lr}
100110a0:	2500      	movs	r5, #0
100110a2:	001e      	movs	r6, r3
100110a4:	4c0d      	ldr	r4, [pc, #52]	; (100110dc <__libc_init_array+0x40>)
100110a6:	1ae4      	subs	r4, r4, r3
100110a8:	10a4      	asrs	r4, r4, #2
100110aa:	42a5      	cmp	r5, r4
100110ac:	d004      	beq.n	100110b8 <__libc_init_array+0x1c>
100110ae:	00ab      	lsls	r3, r5, #2
100110b0:	58f3      	ldr	r3, [r6, r3]
100110b2:	4798      	blx	r3
100110b4:	3501      	adds	r5, #1
100110b6:	e7f8      	b.n	100110aa <__libc_init_array+0xe>
100110b8:	f002 fb90 	bl	100137dc <_init>
100110bc:	4b08      	ldr	r3, [pc, #32]	; (100110e0 <__libc_init_array+0x44>)
100110be:	2500      	movs	r5, #0
100110c0:	001e      	movs	r6, r3
100110c2:	4c08      	ldr	r4, [pc, #32]	; (100110e4 <__libc_init_array+0x48>)
100110c4:	1ae4      	subs	r4, r4, r3
100110c6:	10a4      	asrs	r4, r4, #2
100110c8:	42a5      	cmp	r5, r4
100110ca:	d004      	beq.n	100110d6 <__libc_init_array+0x3a>
100110cc:	00ab      	lsls	r3, r5, #2
100110ce:	58f3      	ldr	r3, [r6, r3]
100110d0:	4798      	blx	r3
100110d2:	3501      	adds	r5, #1
100110d4:	e7f8      	b.n	100110c8 <__libc_init_array+0x2c>
100110d6:	bd70      	pop	{r4, r5, r6, pc}
100110d8:	100137e8 	.word	0x100137e8
100110dc:	100137e8 	.word	0x100137e8
100110e0:	100137e8 	.word	0x100137e8
100110e4:	100137ec 	.word	0x100137ec

100110e8 <memcmp>:
100110e8:	b530      	push	{r4, r5, lr}
100110ea:	2400      	movs	r4, #0
100110ec:	42a2      	cmp	r2, r4
100110ee:	d008      	beq.n	10011102 <memcmp+0x1a>
100110f0:	5d03      	ldrb	r3, [r0, r4]
100110f2:	1c65      	adds	r5, r4, #1
100110f4:	5d0c      	ldrb	r4, [r1, r4]
100110f6:	42a3      	cmp	r3, r4
100110f8:	d001      	beq.n	100110fe <memcmp+0x16>
100110fa:	1b18      	subs	r0, r3, r4
100110fc:	e002      	b.n	10011104 <memcmp+0x1c>
100110fe:	002c      	movs	r4, r5
10011100:	e7f4      	b.n	100110ec <memcmp+0x4>
10011102:	2000      	movs	r0, #0
10011104:	bd30      	pop	{r4, r5, pc}

10011106 <memcpy>:
10011106:	2300      	movs	r3, #0
10011108:	b510      	push	{r4, lr}
1001110a:	429a      	cmp	r2, r3
1001110c:	d003      	beq.n	10011116 <memcpy+0x10>
1001110e:	5ccc      	ldrb	r4, [r1, r3]
10011110:	54c4      	strb	r4, [r0, r3]
10011112:	3301      	adds	r3, #1
10011114:	e7f9      	b.n	1001110a <memcpy+0x4>
10011116:	bd10      	pop	{r4, pc}

10011118 <memset>:
10011118:	0003      	movs	r3, r0
1001111a:	1882      	adds	r2, r0, r2
1001111c:	4293      	cmp	r3, r2
1001111e:	d002      	beq.n	10011126 <memset+0xe>
10011120:	7019      	strb	r1, [r3, #0]
10011122:	3301      	adds	r3, #1
10011124:	e7fa      	b.n	1001111c <memset+0x4>
10011126:	4770      	bx	lr

10011128 <iprintf>:
10011128:	b40f      	push	{r0, r1, r2, r3}
1001112a:	4b0b      	ldr	r3, [pc, #44]	; (10011158 <iprintf+0x30>)
1001112c:	b513      	push	{r0, r1, r4, lr}
1001112e:	681c      	ldr	r4, [r3, #0]
10011130:	2c00      	cmp	r4, #0
10011132:	d005      	beq.n	10011140 <iprintf+0x18>
10011134:	69a3      	ldr	r3, [r4, #24]
10011136:	2b00      	cmp	r3, #0
10011138:	d102      	bne.n	10011140 <iprintf+0x18>
1001113a:	0020      	movs	r0, r4
1001113c:	f000 fb46 	bl	100117cc <__sinit>
10011140:	ab05      	add	r3, sp, #20
10011142:	9a04      	ldr	r2, [sp, #16]
10011144:	68a1      	ldr	r1, [r4, #8]
10011146:	0020      	movs	r0, r4
10011148:	9301      	str	r3, [sp, #4]
1001114a:	f000 fd05 	bl	10011b58 <_vfiprintf_r>
1001114e:	bc16      	pop	{r1, r2, r4}
10011150:	bc08      	pop	{r3}
10011152:	b004      	add	sp, #16
10011154:	4718      	bx	r3
10011156:	46c0      	nop			; (mov r8, r8)
10011158:	10013864 	.word	0x10013864

1001115c <putchar>:
1001115c:	4b08      	ldr	r3, [pc, #32]	; (10011180 <putchar+0x24>)
1001115e:	b570      	push	{r4, r5, r6, lr}
10011160:	681c      	ldr	r4, [r3, #0]
10011162:	0005      	movs	r5, r0
10011164:	2c00      	cmp	r4, #0
10011166:	d005      	beq.n	10011174 <putchar+0x18>
10011168:	69a3      	ldr	r3, [r4, #24]
1001116a:	2b00      	cmp	r3, #0
1001116c:	d102      	bne.n	10011174 <putchar+0x18>
1001116e:	0020      	movs	r0, r4
10011170:	f000 fb2c 	bl	100117cc <__sinit>
10011174:	0029      	movs	r1, r5
10011176:	68a2      	ldr	r2, [r4, #8]
10011178:	0020      	movs	r0, r4
1001117a:	f000 ff99 	bl	100120b0 <_putc_r>
1001117e:	bd70      	pop	{r4, r5, r6, pc}
10011180:	10013864 	.word	0x10013864

10011184 <_puts_r>:
10011184:	b570      	push	{r4, r5, r6, lr}
10011186:	0005      	movs	r5, r0
10011188:	000e      	movs	r6, r1
1001118a:	2800      	cmp	r0, #0
1001118c:	d004      	beq.n	10011198 <_puts_r+0x14>
1001118e:	6983      	ldr	r3, [r0, #24]
10011190:	2b00      	cmp	r3, #0
10011192:	d101      	bne.n	10011198 <_puts_r+0x14>
10011194:	f000 fb1a 	bl	100117cc <__sinit>
10011198:	69ab      	ldr	r3, [r5, #24]
1001119a:	68ac      	ldr	r4, [r5, #8]
1001119c:	2b00      	cmp	r3, #0
1001119e:	d102      	bne.n	100111a6 <_puts_r+0x22>
100111a0:	0028      	movs	r0, r5
100111a2:	f000 fb13 	bl	100117cc <__sinit>
100111a6:	4b25      	ldr	r3, [pc, #148]	; (1001123c <_puts_r+0xb8>)
100111a8:	429c      	cmp	r4, r3
100111aa:	d101      	bne.n	100111b0 <_puts_r+0x2c>
100111ac:	686c      	ldr	r4, [r5, #4]
100111ae:	e008      	b.n	100111c2 <_puts_r+0x3e>
100111b0:	4b23      	ldr	r3, [pc, #140]	; (10011240 <_puts_r+0xbc>)
100111b2:	429c      	cmp	r4, r3
100111b4:	d101      	bne.n	100111ba <_puts_r+0x36>
100111b6:	68ac      	ldr	r4, [r5, #8]
100111b8:	e003      	b.n	100111c2 <_puts_r+0x3e>
100111ba:	4b22      	ldr	r3, [pc, #136]	; (10011244 <_puts_r+0xc0>)
100111bc:	429c      	cmp	r4, r3
100111be:	d100      	bne.n	100111c2 <_puts_r+0x3e>
100111c0:	68ec      	ldr	r4, [r5, #12]
100111c2:	89a3      	ldrh	r3, [r4, #12]
100111c4:	071b      	lsls	r3, r3, #28
100111c6:	d502      	bpl.n	100111ce <_puts_r+0x4a>
100111c8:	6923      	ldr	r3, [r4, #16]
100111ca:	2b00      	cmp	r3, #0
100111cc:	d111      	bne.n	100111f2 <_puts_r+0x6e>
100111ce:	0021      	movs	r1, r4
100111d0:	0028      	movs	r0, r5
100111d2:	f000 f991 	bl	100114f8 <__swsetup_r>
100111d6:	2800      	cmp	r0, #0
100111d8:	d00b      	beq.n	100111f2 <_puts_r+0x6e>
100111da:	2001      	movs	r0, #1
100111dc:	4240      	negs	r0, r0
100111de:	e02b      	b.n	10011238 <_puts_r+0xb4>
100111e0:	3b01      	subs	r3, #1
100111e2:	3601      	adds	r6, #1
100111e4:	60a3      	str	r3, [r4, #8]
100111e6:	2b00      	cmp	r3, #0
100111e8:	db08      	blt.n	100111fc <_puts_r+0x78>
100111ea:	6823      	ldr	r3, [r4, #0]
100111ec:	1c5a      	adds	r2, r3, #1
100111ee:	6022      	str	r2, [r4, #0]
100111f0:	7019      	strb	r1, [r3, #0]
100111f2:	7831      	ldrb	r1, [r6, #0]
100111f4:	68a3      	ldr	r3, [r4, #8]
100111f6:	2900      	cmp	r1, #0
100111f8:	d1f2      	bne.n	100111e0 <_puts_r+0x5c>
100111fa:	e00b      	b.n	10011214 <_puts_r+0x90>
100111fc:	69a2      	ldr	r2, [r4, #24]
100111fe:	4293      	cmp	r3, r2
10011200:	db01      	blt.n	10011206 <_puts_r+0x82>
10011202:	290a      	cmp	r1, #10
10011204:	d1f1      	bne.n	100111ea <_puts_r+0x66>
10011206:	0022      	movs	r2, r4
10011208:	0028      	movs	r0, r5
1001120a:	f000 f91d 	bl	10011448 <__swbuf_r>
1001120e:	1c43      	adds	r3, r0, #1
10011210:	d1ef      	bne.n	100111f2 <_puts_r+0x6e>
10011212:	e7e2      	b.n	100111da <_puts_r+0x56>
10011214:	3b01      	subs	r3, #1
10011216:	60a3      	str	r3, [r4, #8]
10011218:	2b00      	cmp	r3, #0
1001121a:	da08      	bge.n	1001122e <_puts_r+0xaa>
1001121c:	0022      	movs	r2, r4
1001121e:	310a      	adds	r1, #10
10011220:	0028      	movs	r0, r5
10011222:	f000 f911 	bl	10011448 <__swbuf_r>
10011226:	1c43      	adds	r3, r0, #1
10011228:	d0d7      	beq.n	100111da <_puts_r+0x56>
1001122a:	200a      	movs	r0, #10
1001122c:	e004      	b.n	10011238 <_puts_r+0xb4>
1001122e:	200a      	movs	r0, #10
10011230:	6823      	ldr	r3, [r4, #0]
10011232:	1c5a      	adds	r2, r3, #1
10011234:	6022      	str	r2, [r4, #0]
10011236:	7018      	strb	r0, [r3, #0]
10011238:	bd70      	pop	{r4, r5, r6, pc}
1001123a:	46c0      	nop			; (mov r8, r8)
1001123c:	10013748 	.word	0x10013748
10011240:	10013768 	.word	0x10013768
10011244:	10013788 	.word	0x10013788

10011248 <puts>:
10011248:	b510      	push	{r4, lr}
1001124a:	4b03      	ldr	r3, [pc, #12]	; (10011258 <puts+0x10>)
1001124c:	0001      	movs	r1, r0
1001124e:	6818      	ldr	r0, [r3, #0]
10011250:	f7ff ff98 	bl	10011184 <_puts_r>
10011254:	bd10      	pop	{r4, pc}
10011256:	46c0      	nop			; (mov r8, r8)
10011258:	10013864 	.word	0x10013864

1001125c <rand>:
1001125c:	4b15      	ldr	r3, [pc, #84]	; (100112b4 <rand+0x58>)
1001125e:	b510      	push	{r4, lr}
10011260:	681c      	ldr	r4, [r3, #0]
10011262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10011264:	2b00      	cmp	r3, #0
10011266:	d115      	bne.n	10011294 <rand+0x38>
10011268:	2018      	movs	r0, #24
1001126a:	f000 fba7 	bl	100119bc <malloc>
1001126e:	4b12      	ldr	r3, [pc, #72]	; (100112b8 <rand+0x5c>)
10011270:	63a0      	str	r0, [r4, #56]	; 0x38
10011272:	8003      	strh	r3, [r0, #0]
10011274:	4b11      	ldr	r3, [pc, #68]	; (100112bc <rand+0x60>)
10011276:	2201      	movs	r2, #1
10011278:	8043      	strh	r3, [r0, #2]
1001127a:	4b11      	ldr	r3, [pc, #68]	; (100112c0 <rand+0x64>)
1001127c:	8083      	strh	r3, [r0, #4]
1001127e:	4b11      	ldr	r3, [pc, #68]	; (100112c4 <rand+0x68>)
10011280:	80c3      	strh	r3, [r0, #6]
10011282:	4b11      	ldr	r3, [pc, #68]	; (100112c8 <rand+0x6c>)
10011284:	8103      	strh	r3, [r0, #8]
10011286:	2305      	movs	r3, #5
10011288:	8143      	strh	r3, [r0, #10]
1001128a:	3306      	adds	r3, #6
1001128c:	8183      	strh	r3, [r0, #12]
1001128e:	2300      	movs	r3, #0
10011290:	6102      	str	r2, [r0, #16]
10011292:	6143      	str	r3, [r0, #20]
10011294:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10011296:	4a0d      	ldr	r2, [pc, #52]	; (100112cc <rand+0x70>)
10011298:	6920      	ldr	r0, [r4, #16]
1001129a:	6961      	ldr	r1, [r4, #20]
1001129c:	4b0c      	ldr	r3, [pc, #48]	; (100112d0 <rand+0x74>)
1001129e:	f001 f819 	bl	100122d4 <__aeabi_lmul>
100112a2:	2201      	movs	r2, #1
100112a4:	2300      	movs	r3, #0
100112a6:	1880      	adds	r0, r0, r2
100112a8:	4159      	adcs	r1, r3
100112aa:	6120      	str	r0, [r4, #16]
100112ac:	6161      	str	r1, [r4, #20]
100112ae:	0048      	lsls	r0, r1, #1
100112b0:	0840      	lsrs	r0, r0, #1
100112b2:	bd10      	pop	{r4, pc}
100112b4:	10013864 	.word	0x10013864
100112b8:	0000330e 	.word	0x0000330e
100112bc:	ffffabcd 	.word	0xffffabcd
100112c0:	00001234 	.word	0x00001234
100112c4:	ffffe66d 	.word	0xffffe66d
100112c8:	ffffdeec 	.word	0xffffdeec
100112cc:	4c957f2d 	.word	0x4c957f2d
100112d0:	5851f42d 	.word	0x5851f42d

100112d4 <setbuf>:
100112d4:	424a      	negs	r2, r1
100112d6:	414a      	adcs	r2, r1
100112d8:	2380      	movs	r3, #128	; 0x80
100112da:	b510      	push	{r4, lr}
100112dc:	0052      	lsls	r2, r2, #1
100112de:	00db      	lsls	r3, r3, #3
100112e0:	f000 f802 	bl	100112e8 <setvbuf>
100112e4:	bd10      	pop	{r4, pc}
	...

100112e8 <setvbuf>:
100112e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100112ea:	001d      	movs	r5, r3
100112ec:	4b51      	ldr	r3, [pc, #324]	; (10011434 <setvbuf+0x14c>)
100112ee:	b085      	sub	sp, #20
100112f0:	681e      	ldr	r6, [r3, #0]
100112f2:	0004      	movs	r4, r0
100112f4:	000f      	movs	r7, r1
100112f6:	9200      	str	r2, [sp, #0]
100112f8:	2e00      	cmp	r6, #0
100112fa:	d005      	beq.n	10011308 <setvbuf+0x20>
100112fc:	69b3      	ldr	r3, [r6, #24]
100112fe:	2b00      	cmp	r3, #0
10011300:	d102      	bne.n	10011308 <setvbuf+0x20>
10011302:	0030      	movs	r0, r6
10011304:	f000 fa62 	bl	100117cc <__sinit>
10011308:	4b4b      	ldr	r3, [pc, #300]	; (10011438 <setvbuf+0x150>)
1001130a:	429c      	cmp	r4, r3
1001130c:	d101      	bne.n	10011312 <setvbuf+0x2a>
1001130e:	6874      	ldr	r4, [r6, #4]
10011310:	e008      	b.n	10011324 <setvbuf+0x3c>
10011312:	4b4a      	ldr	r3, [pc, #296]	; (1001143c <setvbuf+0x154>)
10011314:	429c      	cmp	r4, r3
10011316:	d101      	bne.n	1001131c <setvbuf+0x34>
10011318:	68b4      	ldr	r4, [r6, #8]
1001131a:	e003      	b.n	10011324 <setvbuf+0x3c>
1001131c:	4b48      	ldr	r3, [pc, #288]	; (10011440 <setvbuf+0x158>)
1001131e:	429c      	cmp	r4, r3
10011320:	d100      	bne.n	10011324 <setvbuf+0x3c>
10011322:	68f4      	ldr	r4, [r6, #12]
10011324:	9b00      	ldr	r3, [sp, #0]
10011326:	2b02      	cmp	r3, #2
10011328:	d005      	beq.n	10011336 <setvbuf+0x4e>
1001132a:	2b01      	cmp	r3, #1
1001132c:	d900      	bls.n	10011330 <setvbuf+0x48>
1001132e:	e07c      	b.n	1001142a <setvbuf+0x142>
10011330:	2d00      	cmp	r5, #0
10011332:	da00      	bge.n	10011336 <setvbuf+0x4e>
10011334:	e079      	b.n	1001142a <setvbuf+0x142>
10011336:	0021      	movs	r1, r4
10011338:	0030      	movs	r0, r6
1001133a:	f000 f9d9 	bl	100116f0 <_fflush_r>
1001133e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011340:	2900      	cmp	r1, #0
10011342:	d008      	beq.n	10011356 <setvbuf+0x6e>
10011344:	0023      	movs	r3, r4
10011346:	3344      	adds	r3, #68	; 0x44
10011348:	4299      	cmp	r1, r3
1001134a:	d002      	beq.n	10011352 <setvbuf+0x6a>
1001134c:	0030      	movs	r0, r6
1001134e:	f000 fb3f 	bl	100119d0 <_free_r>
10011352:	2300      	movs	r3, #0
10011354:	6363      	str	r3, [r4, #52]	; 0x34
10011356:	2300      	movs	r3, #0
10011358:	61a3      	str	r3, [r4, #24]
1001135a:	6063      	str	r3, [r4, #4]
1001135c:	89a3      	ldrh	r3, [r4, #12]
1001135e:	061b      	lsls	r3, r3, #24
10011360:	d503      	bpl.n	1001136a <setvbuf+0x82>
10011362:	6921      	ldr	r1, [r4, #16]
10011364:	0030      	movs	r0, r6
10011366:	f000 fb33 	bl	100119d0 <_free_r>
1001136a:	89a2      	ldrh	r2, [r4, #12]
1001136c:	4b35      	ldr	r3, [pc, #212]	; (10011444 <setvbuf+0x15c>)
1001136e:	4013      	ands	r3, r2
10011370:	81a3      	strh	r3, [r4, #12]
10011372:	9b00      	ldr	r3, [sp, #0]
10011374:	2b02      	cmp	r3, #2
10011376:	d021      	beq.n	100113bc <setvbuf+0xd4>
10011378:	ab03      	add	r3, sp, #12
1001137a:	aa02      	add	r2, sp, #8
1001137c:	0021      	movs	r1, r4
1001137e:	0030      	movs	r0, r6
10011380:	f000 fab8 	bl	100118f4 <__swhatbuf_r>
10011384:	89a3      	ldrh	r3, [r4, #12]
10011386:	4318      	orrs	r0, r3
10011388:	81a0      	strh	r0, [r4, #12]
1001138a:	2d00      	cmp	r5, #0
1001138c:	d101      	bne.n	10011392 <setvbuf+0xaa>
1001138e:	9d02      	ldr	r5, [sp, #8]
10011390:	e001      	b.n	10011396 <setvbuf+0xae>
10011392:	2f00      	cmp	r7, #0
10011394:	d125      	bne.n	100113e2 <setvbuf+0xfa>
10011396:	0028      	movs	r0, r5
10011398:	f000 fb10 	bl	100119bc <malloc>
1001139c:	9501      	str	r5, [sp, #4]
1001139e:	1e07      	subs	r7, r0, #0
100113a0:	d11a      	bne.n	100113d8 <setvbuf+0xf0>
100113a2:	9b02      	ldr	r3, [sp, #8]
100113a4:	9301      	str	r3, [sp, #4]
100113a6:	42ab      	cmp	r3, r5
100113a8:	d102      	bne.n	100113b0 <setvbuf+0xc8>
100113aa:	2001      	movs	r0, #1
100113ac:	4240      	negs	r0, r0
100113ae:	e006      	b.n	100113be <setvbuf+0xd6>
100113b0:	9801      	ldr	r0, [sp, #4]
100113b2:	f000 fb03 	bl	100119bc <malloc>
100113b6:	1e07      	subs	r7, r0, #0
100113b8:	d10e      	bne.n	100113d8 <setvbuf+0xf0>
100113ba:	e7f6      	b.n	100113aa <setvbuf+0xc2>
100113bc:	2000      	movs	r0, #0
100113be:	2202      	movs	r2, #2
100113c0:	89a3      	ldrh	r3, [r4, #12]
100113c2:	4313      	orrs	r3, r2
100113c4:	81a3      	strh	r3, [r4, #12]
100113c6:	2300      	movs	r3, #0
100113c8:	60a3      	str	r3, [r4, #8]
100113ca:	0023      	movs	r3, r4
100113cc:	3347      	adds	r3, #71	; 0x47
100113ce:	6023      	str	r3, [r4, #0]
100113d0:	6123      	str	r3, [r4, #16]
100113d2:	2301      	movs	r3, #1
100113d4:	6163      	str	r3, [r4, #20]
100113d6:	e02a      	b.n	1001142e <setvbuf+0x146>
100113d8:	2280      	movs	r2, #128	; 0x80
100113da:	89a3      	ldrh	r3, [r4, #12]
100113dc:	9d01      	ldr	r5, [sp, #4]
100113de:	4313      	orrs	r3, r2
100113e0:	81a3      	strh	r3, [r4, #12]
100113e2:	69b3      	ldr	r3, [r6, #24]
100113e4:	2b00      	cmp	r3, #0
100113e6:	d102      	bne.n	100113ee <setvbuf+0x106>
100113e8:	0030      	movs	r0, r6
100113ea:	f000 f9ef 	bl	100117cc <__sinit>
100113ee:	9b00      	ldr	r3, [sp, #0]
100113f0:	2b01      	cmp	r3, #1
100113f2:	d103      	bne.n	100113fc <setvbuf+0x114>
100113f4:	89a3      	ldrh	r3, [r4, #12]
100113f6:	9a00      	ldr	r2, [sp, #0]
100113f8:	431a      	orrs	r2, r3
100113fa:	81a2      	strh	r2, [r4, #12]
100113fc:	2308      	movs	r3, #8
100113fe:	89a2      	ldrh	r2, [r4, #12]
10011400:	6027      	str	r7, [r4, #0]
10011402:	4013      	ands	r3, r2
10011404:	6127      	str	r7, [r4, #16]
10011406:	6165      	str	r5, [r4, #20]
10011408:	1e18      	subs	r0, r3, #0
1001140a:	d00c      	beq.n	10011426 <setvbuf+0x13e>
1001140c:	2301      	movs	r3, #1
1001140e:	401a      	ands	r2, r3
10011410:	2300      	movs	r3, #0
10011412:	1e10      	subs	r0, r2, #0
10011414:	4298      	cmp	r0, r3
10011416:	d004      	beq.n	10011422 <setvbuf+0x13a>
10011418:	426d      	negs	r5, r5
1001141a:	60a3      	str	r3, [r4, #8]
1001141c:	61a5      	str	r5, [r4, #24]
1001141e:	0018      	movs	r0, r3
10011420:	e005      	b.n	1001142e <setvbuf+0x146>
10011422:	60a5      	str	r5, [r4, #8]
10011424:	e003      	b.n	1001142e <setvbuf+0x146>
10011426:	60a3      	str	r3, [r4, #8]
10011428:	e001      	b.n	1001142e <setvbuf+0x146>
1001142a:	2001      	movs	r0, #1
1001142c:	4240      	negs	r0, r0
1001142e:	b005      	add	sp, #20
10011430:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011432:	46c0      	nop			; (mov r8, r8)
10011434:	10013864 	.word	0x10013864
10011438:	10013748 	.word	0x10013748
1001143c:	10013768 	.word	0x10013768
10011440:	10013788 	.word	0x10013788
10011444:	fffff35c 	.word	0xfffff35c

10011448 <__swbuf_r>:
10011448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001144a:	0005      	movs	r5, r0
1001144c:	000f      	movs	r7, r1
1001144e:	0014      	movs	r4, r2
10011450:	2800      	cmp	r0, #0
10011452:	d004      	beq.n	1001145e <__swbuf_r+0x16>
10011454:	6983      	ldr	r3, [r0, #24]
10011456:	2b00      	cmp	r3, #0
10011458:	d101      	bne.n	1001145e <__swbuf_r+0x16>
1001145a:	f000 f9b7 	bl	100117cc <__sinit>
1001145e:	4b23      	ldr	r3, [pc, #140]	; (100114ec <__swbuf_r+0xa4>)
10011460:	429c      	cmp	r4, r3
10011462:	d101      	bne.n	10011468 <__swbuf_r+0x20>
10011464:	686c      	ldr	r4, [r5, #4]
10011466:	e008      	b.n	1001147a <__swbuf_r+0x32>
10011468:	4b21      	ldr	r3, [pc, #132]	; (100114f0 <__swbuf_r+0xa8>)
1001146a:	429c      	cmp	r4, r3
1001146c:	d101      	bne.n	10011472 <__swbuf_r+0x2a>
1001146e:	68ac      	ldr	r4, [r5, #8]
10011470:	e003      	b.n	1001147a <__swbuf_r+0x32>
10011472:	4b20      	ldr	r3, [pc, #128]	; (100114f4 <__swbuf_r+0xac>)
10011474:	429c      	cmp	r4, r3
10011476:	d100      	bne.n	1001147a <__swbuf_r+0x32>
10011478:	68ec      	ldr	r4, [r5, #12]
1001147a:	69a3      	ldr	r3, [r4, #24]
1001147c:	60a3      	str	r3, [r4, #8]
1001147e:	89a3      	ldrh	r3, [r4, #12]
10011480:	071b      	lsls	r3, r3, #28
10011482:	d50a      	bpl.n	1001149a <__swbuf_r+0x52>
10011484:	6923      	ldr	r3, [r4, #16]
10011486:	2b00      	cmp	r3, #0
10011488:	d007      	beq.n	1001149a <__swbuf_r+0x52>
1001148a:	6823      	ldr	r3, [r4, #0]
1001148c:	6922      	ldr	r2, [r4, #16]
1001148e:	b2fe      	uxtb	r6, r7
10011490:	1a98      	subs	r0, r3, r2
10011492:	6963      	ldr	r3, [r4, #20]
10011494:	4298      	cmp	r0, r3
10011496:	db0f      	blt.n	100114b8 <__swbuf_r+0x70>
10011498:	e008      	b.n	100114ac <__swbuf_r+0x64>
1001149a:	0021      	movs	r1, r4
1001149c:	0028      	movs	r0, r5
1001149e:	f000 f82b 	bl	100114f8 <__swsetup_r>
100114a2:	2800      	cmp	r0, #0
100114a4:	d0f1      	beq.n	1001148a <__swbuf_r+0x42>
100114a6:	2001      	movs	r0, #1
100114a8:	4240      	negs	r0, r0
100114aa:	e01d      	b.n	100114e8 <__swbuf_r+0xa0>
100114ac:	0021      	movs	r1, r4
100114ae:	0028      	movs	r0, r5
100114b0:	f000 f91e 	bl	100116f0 <_fflush_r>
100114b4:	2800      	cmp	r0, #0
100114b6:	d1f6      	bne.n	100114a6 <__swbuf_r+0x5e>
100114b8:	68a3      	ldr	r3, [r4, #8]
100114ba:	3001      	adds	r0, #1
100114bc:	3b01      	subs	r3, #1
100114be:	60a3      	str	r3, [r4, #8]
100114c0:	6823      	ldr	r3, [r4, #0]
100114c2:	1c5a      	adds	r2, r3, #1
100114c4:	6022      	str	r2, [r4, #0]
100114c6:	701f      	strb	r7, [r3, #0]
100114c8:	6963      	ldr	r3, [r4, #20]
100114ca:	4298      	cmp	r0, r3
100114cc:	d005      	beq.n	100114da <__swbuf_r+0x92>
100114ce:	89a3      	ldrh	r3, [r4, #12]
100114d0:	0030      	movs	r0, r6
100114d2:	07db      	lsls	r3, r3, #31
100114d4:	d508      	bpl.n	100114e8 <__swbuf_r+0xa0>
100114d6:	2e0a      	cmp	r6, #10
100114d8:	d106      	bne.n	100114e8 <__swbuf_r+0xa0>
100114da:	0021      	movs	r1, r4
100114dc:	0028      	movs	r0, r5
100114de:	f000 f907 	bl	100116f0 <_fflush_r>
100114e2:	2800      	cmp	r0, #0
100114e4:	d1df      	bne.n	100114a6 <__swbuf_r+0x5e>
100114e6:	0030      	movs	r0, r6
100114e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100114ea:	46c0      	nop			; (mov r8, r8)
100114ec:	10013748 	.word	0x10013748
100114f0:	10013768 	.word	0x10013768
100114f4:	10013788 	.word	0x10013788

100114f8 <__swsetup_r>:
100114f8:	4b36      	ldr	r3, [pc, #216]	; (100115d4 <__swsetup_r+0xdc>)
100114fa:	b570      	push	{r4, r5, r6, lr}
100114fc:	681d      	ldr	r5, [r3, #0]
100114fe:	0006      	movs	r6, r0
10011500:	000c      	movs	r4, r1
10011502:	2d00      	cmp	r5, #0
10011504:	d005      	beq.n	10011512 <__swsetup_r+0x1a>
10011506:	69ab      	ldr	r3, [r5, #24]
10011508:	2b00      	cmp	r3, #0
1001150a:	d102      	bne.n	10011512 <__swsetup_r+0x1a>
1001150c:	0028      	movs	r0, r5
1001150e:	f000 f95d 	bl	100117cc <__sinit>
10011512:	4b31      	ldr	r3, [pc, #196]	; (100115d8 <__swsetup_r+0xe0>)
10011514:	429c      	cmp	r4, r3
10011516:	d101      	bne.n	1001151c <__swsetup_r+0x24>
10011518:	686c      	ldr	r4, [r5, #4]
1001151a:	e008      	b.n	1001152e <__swsetup_r+0x36>
1001151c:	4b2f      	ldr	r3, [pc, #188]	; (100115dc <__swsetup_r+0xe4>)
1001151e:	429c      	cmp	r4, r3
10011520:	d101      	bne.n	10011526 <__swsetup_r+0x2e>
10011522:	68ac      	ldr	r4, [r5, #8]
10011524:	e003      	b.n	1001152e <__swsetup_r+0x36>
10011526:	4b2e      	ldr	r3, [pc, #184]	; (100115e0 <__swsetup_r+0xe8>)
10011528:	429c      	cmp	r4, r3
1001152a:	d100      	bne.n	1001152e <__swsetup_r+0x36>
1001152c:	68ec      	ldr	r4, [r5, #12]
1001152e:	220c      	movs	r2, #12
10011530:	5ea3      	ldrsh	r3, [r4, r2]
10011532:	b29a      	uxth	r2, r3
10011534:	0711      	lsls	r1, r2, #28
10011536:	d423      	bmi.n	10011580 <__swsetup_r+0x88>
10011538:	06d1      	lsls	r1, r2, #27
1001153a:	d407      	bmi.n	1001154c <__swsetup_r+0x54>
1001153c:	2209      	movs	r2, #9
1001153e:	2001      	movs	r0, #1
10011540:	6032      	str	r2, [r6, #0]
10011542:	3237      	adds	r2, #55	; 0x37
10011544:	4313      	orrs	r3, r2
10011546:	81a3      	strh	r3, [r4, #12]
10011548:	4240      	negs	r0, r0
1001154a:	e042      	b.n	100115d2 <__swsetup_r+0xda>
1001154c:	0753      	lsls	r3, r2, #29
1001154e:	d513      	bpl.n	10011578 <__swsetup_r+0x80>
10011550:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011552:	2900      	cmp	r1, #0
10011554:	d008      	beq.n	10011568 <__swsetup_r+0x70>
10011556:	0023      	movs	r3, r4
10011558:	3344      	adds	r3, #68	; 0x44
1001155a:	4299      	cmp	r1, r3
1001155c:	d002      	beq.n	10011564 <__swsetup_r+0x6c>
1001155e:	0030      	movs	r0, r6
10011560:	f000 fa36 	bl	100119d0 <_free_r>
10011564:	2300      	movs	r3, #0
10011566:	6363      	str	r3, [r4, #52]	; 0x34
10011568:	2224      	movs	r2, #36	; 0x24
1001156a:	89a3      	ldrh	r3, [r4, #12]
1001156c:	4393      	bics	r3, r2
1001156e:	81a3      	strh	r3, [r4, #12]
10011570:	2300      	movs	r3, #0
10011572:	6063      	str	r3, [r4, #4]
10011574:	6923      	ldr	r3, [r4, #16]
10011576:	6023      	str	r3, [r4, #0]
10011578:	2208      	movs	r2, #8
1001157a:	89a3      	ldrh	r3, [r4, #12]
1001157c:	4313      	orrs	r3, r2
1001157e:	81a3      	strh	r3, [r4, #12]
10011580:	6923      	ldr	r3, [r4, #16]
10011582:	2b00      	cmp	r3, #0
10011584:	d10b      	bne.n	1001159e <__swsetup_r+0xa6>
10011586:	23a0      	movs	r3, #160	; 0xa0
10011588:	89a2      	ldrh	r2, [r4, #12]
1001158a:	009b      	lsls	r3, r3, #2
1001158c:	4013      	ands	r3, r2
1001158e:	2280      	movs	r2, #128	; 0x80
10011590:	0092      	lsls	r2, r2, #2
10011592:	4293      	cmp	r3, r2
10011594:	d003      	beq.n	1001159e <__swsetup_r+0xa6>
10011596:	0021      	movs	r1, r4
10011598:	0030      	movs	r0, r6
1001159a:	f000 f9d1 	bl	10011940 <__smakebuf_r>
1001159e:	2301      	movs	r3, #1
100115a0:	89a2      	ldrh	r2, [r4, #12]
100115a2:	4013      	ands	r3, r2
100115a4:	d005      	beq.n	100115b2 <__swsetup_r+0xba>
100115a6:	2300      	movs	r3, #0
100115a8:	60a3      	str	r3, [r4, #8]
100115aa:	6963      	ldr	r3, [r4, #20]
100115ac:	425b      	negs	r3, r3
100115ae:	61a3      	str	r3, [r4, #24]
100115b0:	e003      	b.n	100115ba <__swsetup_r+0xc2>
100115b2:	0792      	lsls	r2, r2, #30
100115b4:	d400      	bmi.n	100115b8 <__swsetup_r+0xc0>
100115b6:	6963      	ldr	r3, [r4, #20]
100115b8:	60a3      	str	r3, [r4, #8]
100115ba:	2000      	movs	r0, #0
100115bc:	6923      	ldr	r3, [r4, #16]
100115be:	4283      	cmp	r3, r0
100115c0:	d107      	bne.n	100115d2 <__swsetup_r+0xda>
100115c2:	220c      	movs	r2, #12
100115c4:	5ea3      	ldrsh	r3, [r4, r2]
100115c6:	061a      	lsls	r2, r3, #24
100115c8:	d503      	bpl.n	100115d2 <__swsetup_r+0xda>
100115ca:	2240      	movs	r2, #64	; 0x40
100115cc:	4313      	orrs	r3, r2
100115ce:	81a3      	strh	r3, [r4, #12]
100115d0:	3801      	subs	r0, #1
100115d2:	bd70      	pop	{r4, r5, r6, pc}
100115d4:	10013864 	.word	0x10013864
100115d8:	10013748 	.word	0x10013748
100115dc:	10013768 	.word	0x10013768
100115e0:	10013788 	.word	0x10013788

100115e4 <__sflush_r>:
100115e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100115e6:	898a      	ldrh	r2, [r1, #12]
100115e8:	0005      	movs	r5, r0
100115ea:	000c      	movs	r4, r1
100115ec:	0713      	lsls	r3, r2, #28
100115ee:	d45a      	bmi.n	100116a6 <__sflush_r+0xc2>
100115f0:	684b      	ldr	r3, [r1, #4]
100115f2:	2b00      	cmp	r3, #0
100115f4:	dc02      	bgt.n	100115fc <__sflush_r+0x18>
100115f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
100115f8:	2b00      	cmp	r3, #0
100115fa:	dd19      	ble.n	10011630 <__sflush_r+0x4c>
100115fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100115fe:	2f00      	cmp	r7, #0
10011600:	d016      	beq.n	10011630 <__sflush_r+0x4c>
10011602:	2300      	movs	r3, #0
10011604:	682e      	ldr	r6, [r5, #0]
10011606:	602b      	str	r3, [r5, #0]
10011608:	2380      	movs	r3, #128	; 0x80
1001160a:	015b      	lsls	r3, r3, #5
1001160c:	401a      	ands	r2, r3
1001160e:	d001      	beq.n	10011614 <__sflush_r+0x30>
10011610:	6d60      	ldr	r0, [r4, #84]	; 0x54
10011612:	e014      	b.n	1001163e <__sflush_r+0x5a>
10011614:	2301      	movs	r3, #1
10011616:	6a21      	ldr	r1, [r4, #32]
10011618:	0028      	movs	r0, r5
1001161a:	47b8      	blx	r7
1001161c:	1c43      	adds	r3, r0, #1
1001161e:	d10e      	bne.n	1001163e <__sflush_r+0x5a>
10011620:	682b      	ldr	r3, [r5, #0]
10011622:	2b00      	cmp	r3, #0
10011624:	d00b      	beq.n	1001163e <__sflush_r+0x5a>
10011626:	2b1d      	cmp	r3, #29
10011628:	d001      	beq.n	1001162e <__sflush_r+0x4a>
1001162a:	2b16      	cmp	r3, #22
1001162c:	d102      	bne.n	10011634 <__sflush_r+0x50>
1001162e:	602e      	str	r6, [r5, #0]
10011630:	2000      	movs	r0, #0
10011632:	e05a      	b.n	100116ea <__sflush_r+0x106>
10011634:	2240      	movs	r2, #64	; 0x40
10011636:	89a3      	ldrh	r3, [r4, #12]
10011638:	4313      	orrs	r3, r2
1001163a:	81a3      	strh	r3, [r4, #12]
1001163c:	e055      	b.n	100116ea <__sflush_r+0x106>
1001163e:	89a3      	ldrh	r3, [r4, #12]
10011640:	075b      	lsls	r3, r3, #29
10011642:	d506      	bpl.n	10011652 <__sflush_r+0x6e>
10011644:	6863      	ldr	r3, [r4, #4]
10011646:	1ac0      	subs	r0, r0, r3
10011648:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001164a:	2b00      	cmp	r3, #0
1001164c:	d001      	beq.n	10011652 <__sflush_r+0x6e>
1001164e:	6c23      	ldr	r3, [r4, #64]	; 0x40
10011650:	1ac0      	subs	r0, r0, r3
10011652:	2300      	movs	r3, #0
10011654:	0002      	movs	r2, r0
10011656:	6a21      	ldr	r1, [r4, #32]
10011658:	0028      	movs	r0, r5
1001165a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001165c:	47b8      	blx	r7
1001165e:	89a3      	ldrh	r3, [r4, #12]
10011660:	1c42      	adds	r2, r0, #1
10011662:	d106      	bne.n	10011672 <__sflush_r+0x8e>
10011664:	6829      	ldr	r1, [r5, #0]
10011666:	291d      	cmp	r1, #29
10011668:	d83a      	bhi.n	100116e0 <__sflush_r+0xfc>
1001166a:	4a20      	ldr	r2, [pc, #128]	; (100116ec <__sflush_r+0x108>)
1001166c:	40ca      	lsrs	r2, r1
1001166e:	07d2      	lsls	r2, r2, #31
10011670:	d536      	bpl.n	100116e0 <__sflush_r+0xfc>
10011672:	2200      	movs	r2, #0
10011674:	6062      	str	r2, [r4, #4]
10011676:	6922      	ldr	r2, [r4, #16]
10011678:	6022      	str	r2, [r4, #0]
1001167a:	04db      	lsls	r3, r3, #19
1001167c:	d505      	bpl.n	1001168a <__sflush_r+0xa6>
1001167e:	1c43      	adds	r3, r0, #1
10011680:	d102      	bne.n	10011688 <__sflush_r+0xa4>
10011682:	682b      	ldr	r3, [r5, #0]
10011684:	2b00      	cmp	r3, #0
10011686:	d100      	bne.n	1001168a <__sflush_r+0xa6>
10011688:	6560      	str	r0, [r4, #84]	; 0x54
1001168a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001168c:	602e      	str	r6, [r5, #0]
1001168e:	2900      	cmp	r1, #0
10011690:	d0ce      	beq.n	10011630 <__sflush_r+0x4c>
10011692:	0023      	movs	r3, r4
10011694:	3344      	adds	r3, #68	; 0x44
10011696:	4299      	cmp	r1, r3
10011698:	d002      	beq.n	100116a0 <__sflush_r+0xbc>
1001169a:	0028      	movs	r0, r5
1001169c:	f000 f998 	bl	100119d0 <_free_r>
100116a0:	2000      	movs	r0, #0
100116a2:	6360      	str	r0, [r4, #52]	; 0x34
100116a4:	e021      	b.n	100116ea <__sflush_r+0x106>
100116a6:	690f      	ldr	r7, [r1, #16]
100116a8:	2f00      	cmp	r7, #0
100116aa:	d0c1      	beq.n	10011630 <__sflush_r+0x4c>
100116ac:	680b      	ldr	r3, [r1, #0]
100116ae:	600f      	str	r7, [r1, #0]
100116b0:	1bdb      	subs	r3, r3, r7
100116b2:	9301      	str	r3, [sp, #4]
100116b4:	2300      	movs	r3, #0
100116b6:	0792      	lsls	r2, r2, #30
100116b8:	d100      	bne.n	100116bc <__sflush_r+0xd8>
100116ba:	694b      	ldr	r3, [r1, #20]
100116bc:	60a3      	str	r3, [r4, #8]
100116be:	e003      	b.n	100116c8 <__sflush_r+0xe4>
100116c0:	9b01      	ldr	r3, [sp, #4]
100116c2:	183f      	adds	r7, r7, r0
100116c4:	1a1b      	subs	r3, r3, r0
100116c6:	9301      	str	r3, [sp, #4]
100116c8:	9b01      	ldr	r3, [sp, #4]
100116ca:	2b00      	cmp	r3, #0
100116cc:	ddb0      	ble.n	10011630 <__sflush_r+0x4c>
100116ce:	9b01      	ldr	r3, [sp, #4]
100116d0:	003a      	movs	r2, r7
100116d2:	6a21      	ldr	r1, [r4, #32]
100116d4:	0028      	movs	r0, r5
100116d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
100116d8:	47b0      	blx	r6
100116da:	2800      	cmp	r0, #0
100116dc:	dcf0      	bgt.n	100116c0 <__sflush_r+0xdc>
100116de:	89a3      	ldrh	r3, [r4, #12]
100116e0:	2240      	movs	r2, #64	; 0x40
100116e2:	2001      	movs	r0, #1
100116e4:	4313      	orrs	r3, r2
100116e6:	81a3      	strh	r3, [r4, #12]
100116e8:	4240      	negs	r0, r0
100116ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100116ec:	20400001 	.word	0x20400001

100116f0 <_fflush_r>:
100116f0:	690b      	ldr	r3, [r1, #16]
100116f2:	b570      	push	{r4, r5, r6, lr}
100116f4:	0005      	movs	r5, r0
100116f6:	000c      	movs	r4, r1
100116f8:	2b00      	cmp	r3, #0
100116fa:	d101      	bne.n	10011700 <_fflush_r+0x10>
100116fc:	2000      	movs	r0, #0
100116fe:	e01c      	b.n	1001173a <_fflush_r+0x4a>
10011700:	2800      	cmp	r0, #0
10011702:	d004      	beq.n	1001170e <_fflush_r+0x1e>
10011704:	6983      	ldr	r3, [r0, #24]
10011706:	2b00      	cmp	r3, #0
10011708:	d101      	bne.n	1001170e <_fflush_r+0x1e>
1001170a:	f000 f85f 	bl	100117cc <__sinit>
1001170e:	4b0b      	ldr	r3, [pc, #44]	; (1001173c <_fflush_r+0x4c>)
10011710:	429c      	cmp	r4, r3
10011712:	d101      	bne.n	10011718 <_fflush_r+0x28>
10011714:	686c      	ldr	r4, [r5, #4]
10011716:	e008      	b.n	1001172a <_fflush_r+0x3a>
10011718:	4b09      	ldr	r3, [pc, #36]	; (10011740 <_fflush_r+0x50>)
1001171a:	429c      	cmp	r4, r3
1001171c:	d101      	bne.n	10011722 <_fflush_r+0x32>
1001171e:	68ac      	ldr	r4, [r5, #8]
10011720:	e003      	b.n	1001172a <_fflush_r+0x3a>
10011722:	4b08      	ldr	r3, [pc, #32]	; (10011744 <_fflush_r+0x54>)
10011724:	429c      	cmp	r4, r3
10011726:	d100      	bne.n	1001172a <_fflush_r+0x3a>
10011728:	68ec      	ldr	r4, [r5, #12]
1001172a:	220c      	movs	r2, #12
1001172c:	5ea3      	ldrsh	r3, [r4, r2]
1001172e:	2b00      	cmp	r3, #0
10011730:	d0e4      	beq.n	100116fc <_fflush_r+0xc>
10011732:	0021      	movs	r1, r4
10011734:	0028      	movs	r0, r5
10011736:	f7ff ff55 	bl	100115e4 <__sflush_r>
1001173a:	bd70      	pop	{r4, r5, r6, pc}
1001173c:	10013748 	.word	0x10013748
10011740:	10013768 	.word	0x10013768
10011744:	10013788 	.word	0x10013788

10011748 <_cleanup_r>:
10011748:	b510      	push	{r4, lr}
1001174a:	4902      	ldr	r1, [pc, #8]	; (10011754 <_cleanup_r+0xc>)
1001174c:	f000 f8b0 	bl	100118b0 <_fwalk_reent>
10011750:	bd10      	pop	{r4, pc}
10011752:	46c0      	nop			; (mov r8, r8)
10011754:	100116f1 	.word	0x100116f1

10011758 <std.isra.0>:
10011758:	2300      	movs	r3, #0
1001175a:	b510      	push	{r4, lr}
1001175c:	0004      	movs	r4, r0
1001175e:	6003      	str	r3, [r0, #0]
10011760:	6043      	str	r3, [r0, #4]
10011762:	6083      	str	r3, [r0, #8]
10011764:	8181      	strh	r1, [r0, #12]
10011766:	6643      	str	r3, [r0, #100]	; 0x64
10011768:	81c2      	strh	r2, [r0, #14]
1001176a:	6103      	str	r3, [r0, #16]
1001176c:	6143      	str	r3, [r0, #20]
1001176e:	6183      	str	r3, [r0, #24]
10011770:	0019      	movs	r1, r3
10011772:	2208      	movs	r2, #8
10011774:	305c      	adds	r0, #92	; 0x5c
10011776:	f7ff fccf 	bl	10011118 <memset>
1001177a:	4b05      	ldr	r3, [pc, #20]	; (10011790 <std.isra.0+0x38>)
1001177c:	6224      	str	r4, [r4, #32]
1001177e:	6263      	str	r3, [r4, #36]	; 0x24
10011780:	4b04      	ldr	r3, [pc, #16]	; (10011794 <std.isra.0+0x3c>)
10011782:	62a3      	str	r3, [r4, #40]	; 0x28
10011784:	4b04      	ldr	r3, [pc, #16]	; (10011798 <std.isra.0+0x40>)
10011786:	62e3      	str	r3, [r4, #44]	; 0x2c
10011788:	4b04      	ldr	r3, [pc, #16]	; (1001179c <std.isra.0+0x44>)
1001178a:	6323      	str	r3, [r4, #48]	; 0x30
1001178c:	bd10      	pop	{r4, pc}
1001178e:	46c0      	nop			; (mov r8, r8)
10011790:	10012141 	.word	0x10012141
10011794:	10012169 	.word	0x10012169
10011798:	100121a1 	.word	0x100121a1
1001179c:	100121cd 	.word	0x100121cd

100117a0 <__sfmoreglue>:
100117a0:	b570      	push	{r4, r5, r6, lr}
100117a2:	2568      	movs	r5, #104	; 0x68
100117a4:	1e4b      	subs	r3, r1, #1
100117a6:	435d      	muls	r5, r3
100117a8:	000e      	movs	r6, r1
100117aa:	0029      	movs	r1, r5
100117ac:	3174      	adds	r1, #116	; 0x74
100117ae:	f000 f955 	bl	10011a5c <_malloc_r>
100117b2:	1e04      	subs	r4, r0, #0
100117b4:	d008      	beq.n	100117c8 <__sfmoreglue+0x28>
100117b6:	2100      	movs	r1, #0
100117b8:	002a      	movs	r2, r5
100117ba:	6001      	str	r1, [r0, #0]
100117bc:	6046      	str	r6, [r0, #4]
100117be:	300c      	adds	r0, #12
100117c0:	60a0      	str	r0, [r4, #8]
100117c2:	3268      	adds	r2, #104	; 0x68
100117c4:	f7ff fca8 	bl	10011118 <memset>
100117c8:	0020      	movs	r0, r4
100117ca:	bd70      	pop	{r4, r5, r6, pc}

100117cc <__sinit>:
100117cc:	6983      	ldr	r3, [r0, #24]
100117ce:	b513      	push	{r0, r1, r4, lr}
100117d0:	0004      	movs	r4, r0
100117d2:	2b00      	cmp	r3, #0
100117d4:	d128      	bne.n	10011828 <__sinit+0x5c>
100117d6:	6483      	str	r3, [r0, #72]	; 0x48
100117d8:	64c3      	str	r3, [r0, #76]	; 0x4c
100117da:	6503      	str	r3, [r0, #80]	; 0x50
100117dc:	4b13      	ldr	r3, [pc, #76]	; (1001182c <__sinit+0x60>)
100117de:	4a14      	ldr	r2, [pc, #80]	; (10011830 <__sinit+0x64>)
100117e0:	681b      	ldr	r3, [r3, #0]
100117e2:	6282      	str	r2, [r0, #40]	; 0x28
100117e4:	9301      	str	r3, [sp, #4]
100117e6:	4298      	cmp	r0, r3
100117e8:	d101      	bne.n	100117ee <__sinit+0x22>
100117ea:	2301      	movs	r3, #1
100117ec:	6183      	str	r3, [r0, #24]
100117ee:	0020      	movs	r0, r4
100117f0:	f000 f820 	bl	10011834 <__sfp>
100117f4:	6060      	str	r0, [r4, #4]
100117f6:	0020      	movs	r0, r4
100117f8:	f000 f81c 	bl	10011834 <__sfp>
100117fc:	60a0      	str	r0, [r4, #8]
100117fe:	0020      	movs	r0, r4
10011800:	f000 f818 	bl	10011834 <__sfp>
10011804:	2200      	movs	r2, #0
10011806:	60e0      	str	r0, [r4, #12]
10011808:	2104      	movs	r1, #4
1001180a:	6860      	ldr	r0, [r4, #4]
1001180c:	f7ff ffa4 	bl	10011758 <std.isra.0>
10011810:	2201      	movs	r2, #1
10011812:	2109      	movs	r1, #9
10011814:	68a0      	ldr	r0, [r4, #8]
10011816:	f7ff ff9f 	bl	10011758 <std.isra.0>
1001181a:	2202      	movs	r2, #2
1001181c:	2112      	movs	r1, #18
1001181e:	68e0      	ldr	r0, [r4, #12]
10011820:	f7ff ff9a 	bl	10011758 <std.isra.0>
10011824:	2301      	movs	r3, #1
10011826:	61a3      	str	r3, [r4, #24]
10011828:	bd13      	pop	{r0, r1, r4, pc}
1001182a:	46c0      	nop			; (mov r8, r8)
1001182c:	10013744 	.word	0x10013744
10011830:	10011749 	.word	0x10011749

10011834 <__sfp>:
10011834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011836:	4b1d      	ldr	r3, [pc, #116]	; (100118ac <__sfp+0x78>)
10011838:	0006      	movs	r6, r0
1001183a:	681d      	ldr	r5, [r3, #0]
1001183c:	69ab      	ldr	r3, [r5, #24]
1001183e:	2b00      	cmp	r3, #0
10011840:	d102      	bne.n	10011848 <__sfp+0x14>
10011842:	0028      	movs	r0, r5
10011844:	f7ff ffc2 	bl	100117cc <__sinit>
10011848:	3548      	adds	r5, #72	; 0x48
1001184a:	68ac      	ldr	r4, [r5, #8]
1001184c:	686b      	ldr	r3, [r5, #4]
1001184e:	3b01      	subs	r3, #1
10011850:	d405      	bmi.n	1001185e <__sfp+0x2a>
10011852:	220c      	movs	r2, #12
10011854:	5ea7      	ldrsh	r7, [r4, r2]
10011856:	2f00      	cmp	r7, #0
10011858:	d010      	beq.n	1001187c <__sfp+0x48>
1001185a:	3468      	adds	r4, #104	; 0x68
1001185c:	e7f7      	b.n	1001184e <__sfp+0x1a>
1001185e:	682b      	ldr	r3, [r5, #0]
10011860:	2b00      	cmp	r3, #0
10011862:	d001      	beq.n	10011868 <__sfp+0x34>
10011864:	682d      	ldr	r5, [r5, #0]
10011866:	e7f0      	b.n	1001184a <__sfp+0x16>
10011868:	2104      	movs	r1, #4
1001186a:	0030      	movs	r0, r6
1001186c:	f7ff ff98 	bl	100117a0 <__sfmoreglue>
10011870:	6028      	str	r0, [r5, #0]
10011872:	2800      	cmp	r0, #0
10011874:	d1f6      	bne.n	10011864 <__sfp+0x30>
10011876:	230c      	movs	r3, #12
10011878:	6033      	str	r3, [r6, #0]
1001187a:	e016      	b.n	100118aa <__sfp+0x76>
1001187c:	2301      	movs	r3, #1
1001187e:	0020      	movs	r0, r4
10011880:	425b      	negs	r3, r3
10011882:	81e3      	strh	r3, [r4, #14]
10011884:	3302      	adds	r3, #2
10011886:	81a3      	strh	r3, [r4, #12]
10011888:	6667      	str	r7, [r4, #100]	; 0x64
1001188a:	6027      	str	r7, [r4, #0]
1001188c:	60a7      	str	r7, [r4, #8]
1001188e:	6067      	str	r7, [r4, #4]
10011890:	6127      	str	r7, [r4, #16]
10011892:	6167      	str	r7, [r4, #20]
10011894:	61a7      	str	r7, [r4, #24]
10011896:	305c      	adds	r0, #92	; 0x5c
10011898:	2208      	movs	r2, #8
1001189a:	0039      	movs	r1, r7
1001189c:	f7ff fc3c 	bl	10011118 <memset>
100118a0:	0020      	movs	r0, r4
100118a2:	6367      	str	r7, [r4, #52]	; 0x34
100118a4:	63a7      	str	r7, [r4, #56]	; 0x38
100118a6:	64a7      	str	r7, [r4, #72]	; 0x48
100118a8:	64e7      	str	r7, [r4, #76]	; 0x4c
100118aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100118ac:	10013744 	.word	0x10013744

100118b0 <_fwalk_reent>:
100118b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100118b2:	0004      	movs	r4, r0
100118b4:	0007      	movs	r7, r0
100118b6:	2600      	movs	r6, #0
100118b8:	9101      	str	r1, [sp, #4]
100118ba:	3448      	adds	r4, #72	; 0x48
100118bc:	2c00      	cmp	r4, #0
100118be:	d016      	beq.n	100118ee <_fwalk_reent+0x3e>
100118c0:	6863      	ldr	r3, [r4, #4]
100118c2:	68a5      	ldr	r5, [r4, #8]
100118c4:	9300      	str	r3, [sp, #0]
100118c6:	9b00      	ldr	r3, [sp, #0]
100118c8:	3b01      	subs	r3, #1
100118ca:	9300      	str	r3, [sp, #0]
100118cc:	d40d      	bmi.n	100118ea <_fwalk_reent+0x3a>
100118ce:	89ab      	ldrh	r3, [r5, #12]
100118d0:	2b01      	cmp	r3, #1
100118d2:	d908      	bls.n	100118e6 <_fwalk_reent+0x36>
100118d4:	220e      	movs	r2, #14
100118d6:	5eab      	ldrsh	r3, [r5, r2]
100118d8:	3301      	adds	r3, #1
100118da:	d004      	beq.n	100118e6 <_fwalk_reent+0x36>
100118dc:	0029      	movs	r1, r5
100118de:	0038      	movs	r0, r7
100118e0:	9b01      	ldr	r3, [sp, #4]
100118e2:	4798      	blx	r3
100118e4:	4306      	orrs	r6, r0
100118e6:	3568      	adds	r5, #104	; 0x68
100118e8:	e7ed      	b.n	100118c6 <_fwalk_reent+0x16>
100118ea:	6824      	ldr	r4, [r4, #0]
100118ec:	e7e6      	b.n	100118bc <_fwalk_reent+0xc>
100118ee:	0030      	movs	r0, r6
100118f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

100118f4 <__swhatbuf_r>:
100118f4:	b570      	push	{r4, r5, r6, lr}
100118f6:	000e      	movs	r6, r1
100118f8:	001d      	movs	r5, r3
100118fa:	230e      	movs	r3, #14
100118fc:	5ec9      	ldrsh	r1, [r1, r3]
100118fe:	b090      	sub	sp, #64	; 0x40
10011900:	0014      	movs	r4, r2
10011902:	2900      	cmp	r1, #0
10011904:	da06      	bge.n	10011914 <__swhatbuf_r+0x20>
10011906:	2300      	movs	r3, #0
10011908:	602b      	str	r3, [r5, #0]
1001190a:	89b3      	ldrh	r3, [r6, #12]
1001190c:	061b      	lsls	r3, r3, #24
1001190e:	d50f      	bpl.n	10011930 <__swhatbuf_r+0x3c>
10011910:	2340      	movs	r3, #64	; 0x40
10011912:	e00f      	b.n	10011934 <__swhatbuf_r+0x40>
10011914:	aa01      	add	r2, sp, #4
10011916:	f000 fc85 	bl	10012224 <_fstat_r>
1001191a:	2800      	cmp	r0, #0
1001191c:	dbf3      	blt.n	10011906 <__swhatbuf_r+0x12>
1001191e:	23f0      	movs	r3, #240	; 0xf0
10011920:	9a02      	ldr	r2, [sp, #8]
10011922:	021b      	lsls	r3, r3, #8
10011924:	4013      	ands	r3, r2
10011926:	4a05      	ldr	r2, [pc, #20]	; (1001193c <__swhatbuf_r+0x48>)
10011928:	189b      	adds	r3, r3, r2
1001192a:	425a      	negs	r2, r3
1001192c:	4153      	adcs	r3, r2
1001192e:	602b      	str	r3, [r5, #0]
10011930:	2380      	movs	r3, #128	; 0x80
10011932:	00db      	lsls	r3, r3, #3
10011934:	2000      	movs	r0, #0
10011936:	6023      	str	r3, [r4, #0]
10011938:	b010      	add	sp, #64	; 0x40
1001193a:	bd70      	pop	{r4, r5, r6, pc}
1001193c:	ffffe000 	.word	0xffffe000

10011940 <__smakebuf_r>:
10011940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011942:	2602      	movs	r6, #2
10011944:	898b      	ldrh	r3, [r1, #12]
10011946:	0005      	movs	r5, r0
10011948:	000c      	movs	r4, r1
1001194a:	4233      	tst	r3, r6
1001194c:	d110      	bne.n	10011970 <__smakebuf_r+0x30>
1001194e:	ab01      	add	r3, sp, #4
10011950:	466a      	mov	r2, sp
10011952:	f7ff ffcf 	bl	100118f4 <__swhatbuf_r>
10011956:	9900      	ldr	r1, [sp, #0]
10011958:	0007      	movs	r7, r0
1001195a:	0028      	movs	r0, r5
1001195c:	f000 f87e 	bl	10011a5c <_malloc_r>
10011960:	2800      	cmp	r0, #0
10011962:	d10c      	bne.n	1001197e <__smakebuf_r+0x3e>
10011964:	220c      	movs	r2, #12
10011966:	5ea3      	ldrsh	r3, [r4, r2]
10011968:	059a      	lsls	r2, r3, #22
1001196a:	d423      	bmi.n	100119b4 <__smakebuf_r+0x74>
1001196c:	4333      	orrs	r3, r6
1001196e:	81a3      	strh	r3, [r4, #12]
10011970:	0023      	movs	r3, r4
10011972:	3347      	adds	r3, #71	; 0x47
10011974:	6023      	str	r3, [r4, #0]
10011976:	6123      	str	r3, [r4, #16]
10011978:	2301      	movs	r3, #1
1001197a:	6163      	str	r3, [r4, #20]
1001197c:	e01a      	b.n	100119b4 <__smakebuf_r+0x74>
1001197e:	2280      	movs	r2, #128	; 0x80
10011980:	4b0d      	ldr	r3, [pc, #52]	; (100119b8 <__smakebuf_r+0x78>)
10011982:	62ab      	str	r3, [r5, #40]	; 0x28
10011984:	89a3      	ldrh	r3, [r4, #12]
10011986:	6020      	str	r0, [r4, #0]
10011988:	4313      	orrs	r3, r2
1001198a:	81a3      	strh	r3, [r4, #12]
1001198c:	9b00      	ldr	r3, [sp, #0]
1001198e:	6120      	str	r0, [r4, #16]
10011990:	6163      	str	r3, [r4, #20]
10011992:	9b01      	ldr	r3, [sp, #4]
10011994:	2b00      	cmp	r3, #0
10011996:	d00a      	beq.n	100119ae <__smakebuf_r+0x6e>
10011998:	230e      	movs	r3, #14
1001199a:	5ee1      	ldrsh	r1, [r4, r3]
1001199c:	0028      	movs	r0, r5
1001199e:	f000 fc53 	bl	10012248 <_isatty_r>
100119a2:	2800      	cmp	r0, #0
100119a4:	d003      	beq.n	100119ae <__smakebuf_r+0x6e>
100119a6:	2201      	movs	r2, #1
100119a8:	89a3      	ldrh	r3, [r4, #12]
100119aa:	4313      	orrs	r3, r2
100119ac:	81a3      	strh	r3, [r4, #12]
100119ae:	89a3      	ldrh	r3, [r4, #12]
100119b0:	431f      	orrs	r7, r3
100119b2:	81a7      	strh	r7, [r4, #12]
100119b4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100119b6:	46c0      	nop			; (mov r8, r8)
100119b8:	10011749 	.word	0x10011749

100119bc <malloc>:
100119bc:	b510      	push	{r4, lr}
100119be:	4b03      	ldr	r3, [pc, #12]	; (100119cc <malloc+0x10>)
100119c0:	0001      	movs	r1, r0
100119c2:	6818      	ldr	r0, [r3, #0]
100119c4:	f000 f84a 	bl	10011a5c <_malloc_r>
100119c8:	bd10      	pop	{r4, pc}
100119ca:	46c0      	nop			; (mov r8, r8)
100119cc:	10013864 	.word	0x10013864

100119d0 <_free_r>:
100119d0:	b530      	push	{r4, r5, lr}
100119d2:	2900      	cmp	r1, #0
100119d4:	d03e      	beq.n	10011a54 <_free_r+0x84>
100119d6:	3904      	subs	r1, #4
100119d8:	680b      	ldr	r3, [r1, #0]
100119da:	2b00      	cmp	r3, #0
100119dc:	da00      	bge.n	100119e0 <_free_r+0x10>
100119de:	18c9      	adds	r1, r1, r3
100119e0:	4a1d      	ldr	r2, [pc, #116]	; (10011a58 <_free_r+0x88>)
100119e2:	6813      	ldr	r3, [r2, #0]
100119e4:	0014      	movs	r4, r2
100119e6:	2b00      	cmp	r3, #0
100119e8:	d102      	bne.n	100119f0 <_free_r+0x20>
100119ea:	604b      	str	r3, [r1, #4]
100119ec:	6011      	str	r1, [r2, #0]
100119ee:	e031      	b.n	10011a54 <_free_r+0x84>
100119f0:	428b      	cmp	r3, r1
100119f2:	d90d      	bls.n	10011a10 <_free_r+0x40>
100119f4:	680a      	ldr	r2, [r1, #0]
100119f6:	1888      	adds	r0, r1, r2
100119f8:	4283      	cmp	r3, r0
100119fa:	d103      	bne.n	10011a04 <_free_r+0x34>
100119fc:	6818      	ldr	r0, [r3, #0]
100119fe:	685b      	ldr	r3, [r3, #4]
10011a00:	1882      	adds	r2, r0, r2
10011a02:	600a      	str	r2, [r1, #0]
10011a04:	604b      	str	r3, [r1, #4]
10011a06:	6021      	str	r1, [r4, #0]
10011a08:	e024      	b.n	10011a54 <_free_r+0x84>
10011a0a:	428a      	cmp	r2, r1
10011a0c:	d803      	bhi.n	10011a16 <_free_r+0x46>
10011a0e:	0013      	movs	r3, r2
10011a10:	685a      	ldr	r2, [r3, #4]
10011a12:	2a00      	cmp	r2, #0
10011a14:	d1f9      	bne.n	10011a0a <_free_r+0x3a>
10011a16:	681d      	ldr	r5, [r3, #0]
10011a18:	195c      	adds	r4, r3, r5
10011a1a:	428c      	cmp	r4, r1
10011a1c:	d10b      	bne.n	10011a36 <_free_r+0x66>
10011a1e:	6809      	ldr	r1, [r1, #0]
10011a20:	1869      	adds	r1, r5, r1
10011a22:	1858      	adds	r0, r3, r1
10011a24:	6019      	str	r1, [r3, #0]
10011a26:	4282      	cmp	r2, r0
10011a28:	d114      	bne.n	10011a54 <_free_r+0x84>
10011a2a:	6810      	ldr	r0, [r2, #0]
10011a2c:	6852      	ldr	r2, [r2, #4]
10011a2e:	1841      	adds	r1, r0, r1
10011a30:	6019      	str	r1, [r3, #0]
10011a32:	605a      	str	r2, [r3, #4]
10011a34:	e00e      	b.n	10011a54 <_free_r+0x84>
10011a36:	428c      	cmp	r4, r1
10011a38:	d902      	bls.n	10011a40 <_free_r+0x70>
10011a3a:	230c      	movs	r3, #12
10011a3c:	6003      	str	r3, [r0, #0]
10011a3e:	e009      	b.n	10011a54 <_free_r+0x84>
10011a40:	6808      	ldr	r0, [r1, #0]
10011a42:	180c      	adds	r4, r1, r0
10011a44:	42a2      	cmp	r2, r4
10011a46:	d103      	bne.n	10011a50 <_free_r+0x80>
10011a48:	6814      	ldr	r4, [r2, #0]
10011a4a:	6852      	ldr	r2, [r2, #4]
10011a4c:	1820      	adds	r0, r4, r0
10011a4e:	6008      	str	r0, [r1, #0]
10011a50:	604a      	str	r2, [r1, #4]
10011a52:	6059      	str	r1, [r3, #4]
10011a54:	bd30      	pop	{r4, r5, pc}
10011a56:	46c0      	nop			; (mov r8, r8)
10011a58:	1001532c 	.word	0x1001532c

10011a5c <_malloc_r>:
10011a5c:	2303      	movs	r3, #3
10011a5e:	b570      	push	{r4, r5, r6, lr}
10011a60:	1ccd      	adds	r5, r1, #3
10011a62:	439d      	bics	r5, r3
10011a64:	3508      	adds	r5, #8
10011a66:	0006      	movs	r6, r0
10011a68:	2d0c      	cmp	r5, #12
10011a6a:	d201      	bcs.n	10011a70 <_malloc_r+0x14>
10011a6c:	250c      	movs	r5, #12
10011a6e:	e005      	b.n	10011a7c <_malloc_r+0x20>
10011a70:	2d00      	cmp	r5, #0
10011a72:	da03      	bge.n	10011a7c <_malloc_r+0x20>
10011a74:	230c      	movs	r3, #12
10011a76:	2000      	movs	r0, #0
10011a78:	6033      	str	r3, [r6, #0]
10011a7a:	e040      	b.n	10011afe <_malloc_r+0xa2>
10011a7c:	42a9      	cmp	r1, r5
10011a7e:	d8f9      	bhi.n	10011a74 <_malloc_r+0x18>
10011a80:	4b1f      	ldr	r3, [pc, #124]	; (10011b00 <_malloc_r+0xa4>)
10011a82:	681c      	ldr	r4, [r3, #0]
10011a84:	001a      	movs	r2, r3
10011a86:	0021      	movs	r1, r4
10011a88:	2900      	cmp	r1, #0
10011a8a:	d013      	beq.n	10011ab4 <_malloc_r+0x58>
10011a8c:	680b      	ldr	r3, [r1, #0]
10011a8e:	1b5b      	subs	r3, r3, r5
10011a90:	d40d      	bmi.n	10011aae <_malloc_r+0x52>
10011a92:	2b0b      	cmp	r3, #11
10011a94:	d902      	bls.n	10011a9c <_malloc_r+0x40>
10011a96:	600b      	str	r3, [r1, #0]
10011a98:	18cc      	adds	r4, r1, r3
10011a9a:	e01e      	b.n	10011ada <_malloc_r+0x7e>
10011a9c:	428c      	cmp	r4, r1
10011a9e:	d102      	bne.n	10011aa6 <_malloc_r+0x4a>
10011aa0:	6863      	ldr	r3, [r4, #4]
10011aa2:	6013      	str	r3, [r2, #0]
10011aa4:	e01a      	b.n	10011adc <_malloc_r+0x80>
10011aa6:	684b      	ldr	r3, [r1, #4]
10011aa8:	6063      	str	r3, [r4, #4]
10011aaa:	000c      	movs	r4, r1
10011aac:	e016      	b.n	10011adc <_malloc_r+0x80>
10011aae:	000c      	movs	r4, r1
10011ab0:	6849      	ldr	r1, [r1, #4]
10011ab2:	e7e9      	b.n	10011a88 <_malloc_r+0x2c>
10011ab4:	4c13      	ldr	r4, [pc, #76]	; (10011b04 <_malloc_r+0xa8>)
10011ab6:	6823      	ldr	r3, [r4, #0]
10011ab8:	2b00      	cmp	r3, #0
10011aba:	d103      	bne.n	10011ac4 <_malloc_r+0x68>
10011abc:	0030      	movs	r0, r6
10011abe:	f000 fb2d 	bl	1001211c <_sbrk_r>
10011ac2:	6020      	str	r0, [r4, #0]
10011ac4:	0029      	movs	r1, r5
10011ac6:	0030      	movs	r0, r6
10011ac8:	f000 fb28 	bl	1001211c <_sbrk_r>
10011acc:	1c43      	adds	r3, r0, #1
10011ace:	d0d1      	beq.n	10011a74 <_malloc_r+0x18>
10011ad0:	2303      	movs	r3, #3
10011ad2:	1cc4      	adds	r4, r0, #3
10011ad4:	439c      	bics	r4, r3
10011ad6:	42a0      	cmp	r0, r4
10011ad8:	d10a      	bne.n	10011af0 <_malloc_r+0x94>
10011ada:	6025      	str	r5, [r4, #0]
10011adc:	0020      	movs	r0, r4
10011ade:	2207      	movs	r2, #7
10011ae0:	300b      	adds	r0, #11
10011ae2:	1d23      	adds	r3, r4, #4
10011ae4:	4390      	bics	r0, r2
10011ae6:	1ac3      	subs	r3, r0, r3
10011ae8:	d009      	beq.n	10011afe <_malloc_r+0xa2>
10011aea:	425a      	negs	r2, r3
10011aec:	50e2      	str	r2, [r4, r3]
10011aee:	e006      	b.n	10011afe <_malloc_r+0xa2>
10011af0:	1a21      	subs	r1, r4, r0
10011af2:	0030      	movs	r0, r6
10011af4:	f000 fb12 	bl	1001211c <_sbrk_r>
10011af8:	1c43      	adds	r3, r0, #1
10011afa:	d1ee      	bne.n	10011ada <_malloc_r+0x7e>
10011afc:	e7ba      	b.n	10011a74 <_malloc_r+0x18>
10011afe:	bd70      	pop	{r4, r5, r6, pc}
10011b00:	1001532c 	.word	0x1001532c
10011b04:	10015328 	.word	0x10015328

10011b08 <__sfputc_r>:
10011b08:	6893      	ldr	r3, [r2, #8]
10011b0a:	b510      	push	{r4, lr}
10011b0c:	3b01      	subs	r3, #1
10011b0e:	6093      	str	r3, [r2, #8]
10011b10:	2b00      	cmp	r3, #0
10011b12:	da05      	bge.n	10011b20 <__sfputc_r+0x18>
10011b14:	6994      	ldr	r4, [r2, #24]
10011b16:	42a3      	cmp	r3, r4
10011b18:	db08      	blt.n	10011b2c <__sfputc_r+0x24>
10011b1a:	b2cb      	uxtb	r3, r1
10011b1c:	2b0a      	cmp	r3, #10
10011b1e:	d005      	beq.n	10011b2c <__sfputc_r+0x24>
10011b20:	6813      	ldr	r3, [r2, #0]
10011b22:	1c58      	adds	r0, r3, #1
10011b24:	6010      	str	r0, [r2, #0]
10011b26:	7019      	strb	r1, [r3, #0]
10011b28:	b2c8      	uxtb	r0, r1
10011b2a:	e001      	b.n	10011b30 <__sfputc_r+0x28>
10011b2c:	f7ff fc8c 	bl	10011448 <__swbuf_r>
10011b30:	bd10      	pop	{r4, pc}

10011b32 <__sfputs_r>:
10011b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011b34:	0006      	movs	r6, r0
10011b36:	000f      	movs	r7, r1
10011b38:	0014      	movs	r4, r2
10011b3a:	18d5      	adds	r5, r2, r3
10011b3c:	42ac      	cmp	r4, r5
10011b3e:	d008      	beq.n	10011b52 <__sfputs_r+0x20>
10011b40:	7821      	ldrb	r1, [r4, #0]
10011b42:	003a      	movs	r2, r7
10011b44:	0030      	movs	r0, r6
10011b46:	f7ff ffdf 	bl	10011b08 <__sfputc_r>
10011b4a:	3401      	adds	r4, #1
10011b4c:	1c43      	adds	r3, r0, #1
10011b4e:	d1f5      	bne.n	10011b3c <__sfputs_r+0xa>
10011b50:	e000      	b.n	10011b54 <__sfputs_r+0x22>
10011b52:	2000      	movs	r0, #0
10011b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10011b58 <_vfiprintf_r>:
10011b58:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b5a:	b09f      	sub	sp, #124	; 0x7c
10011b5c:	0006      	movs	r6, r0
10011b5e:	000f      	movs	r7, r1
10011b60:	9202      	str	r2, [sp, #8]
10011b62:	9305      	str	r3, [sp, #20]
10011b64:	2800      	cmp	r0, #0
10011b66:	d004      	beq.n	10011b72 <_vfiprintf_r+0x1a>
10011b68:	6983      	ldr	r3, [r0, #24]
10011b6a:	2b00      	cmp	r3, #0
10011b6c:	d101      	bne.n	10011b72 <_vfiprintf_r+0x1a>
10011b6e:	f7ff fe2d 	bl	100117cc <__sinit>
10011b72:	4b7f      	ldr	r3, [pc, #508]	; (10011d70 <_vfiprintf_r+0x218>)
10011b74:	429f      	cmp	r7, r3
10011b76:	d101      	bne.n	10011b7c <_vfiprintf_r+0x24>
10011b78:	6877      	ldr	r7, [r6, #4]
10011b7a:	e008      	b.n	10011b8e <_vfiprintf_r+0x36>
10011b7c:	4b7d      	ldr	r3, [pc, #500]	; (10011d74 <_vfiprintf_r+0x21c>)
10011b7e:	429f      	cmp	r7, r3
10011b80:	d101      	bne.n	10011b86 <_vfiprintf_r+0x2e>
10011b82:	68b7      	ldr	r7, [r6, #8]
10011b84:	e003      	b.n	10011b8e <_vfiprintf_r+0x36>
10011b86:	4b7c      	ldr	r3, [pc, #496]	; (10011d78 <_vfiprintf_r+0x220>)
10011b88:	429f      	cmp	r7, r3
10011b8a:	d100      	bne.n	10011b8e <_vfiprintf_r+0x36>
10011b8c:	68f7      	ldr	r7, [r6, #12]
10011b8e:	89bb      	ldrh	r3, [r7, #12]
10011b90:	071b      	lsls	r3, r3, #28
10011b92:	d50a      	bpl.n	10011baa <_vfiprintf_r+0x52>
10011b94:	693b      	ldr	r3, [r7, #16]
10011b96:	2b00      	cmp	r3, #0
10011b98:	d007      	beq.n	10011baa <_vfiprintf_r+0x52>
10011b9a:	2300      	movs	r3, #0
10011b9c:	ad06      	add	r5, sp, #24
10011b9e:	616b      	str	r3, [r5, #20]
10011ba0:	3320      	adds	r3, #32
10011ba2:	766b      	strb	r3, [r5, #25]
10011ba4:	3310      	adds	r3, #16
10011ba6:	76ab      	strb	r3, [r5, #26]
10011ba8:	e03d      	b.n	10011c26 <_vfiprintf_r+0xce>
10011baa:	0039      	movs	r1, r7
10011bac:	0030      	movs	r0, r6
10011bae:	f7ff fca3 	bl	100114f8 <__swsetup_r>
10011bb2:	2800      	cmp	r0, #0
10011bb4:	d0f1      	beq.n	10011b9a <_vfiprintf_r+0x42>
10011bb6:	2001      	movs	r0, #1
10011bb8:	4240      	negs	r0, r0
10011bba:	e0d6      	b.n	10011d6a <_vfiprintf_r+0x212>
10011bbc:	9a05      	ldr	r2, [sp, #20]
10011bbe:	1d11      	adds	r1, r2, #4
10011bc0:	6812      	ldr	r2, [r2, #0]
10011bc2:	9105      	str	r1, [sp, #20]
10011bc4:	2a00      	cmp	r2, #0
10011bc6:	da00      	bge.n	10011bca <_vfiprintf_r+0x72>
10011bc8:	e07f      	b.n	10011cca <_vfiprintf_r+0x172>
10011bca:	9209      	str	r2, [sp, #36]	; 0x24
10011bcc:	3401      	adds	r4, #1
10011bce:	7823      	ldrb	r3, [r4, #0]
10011bd0:	2b2e      	cmp	r3, #46	; 0x2e
10011bd2:	d100      	bne.n	10011bd6 <_vfiprintf_r+0x7e>
10011bd4:	e08d      	b.n	10011cf2 <_vfiprintf_r+0x19a>
10011bd6:	7821      	ldrb	r1, [r4, #0]
10011bd8:	2203      	movs	r2, #3
10011bda:	4868      	ldr	r0, [pc, #416]	; (10011d7c <_vfiprintf_r+0x224>)
10011bdc:	f000 fb5a 	bl	10012294 <memchr>
10011be0:	2800      	cmp	r0, #0
10011be2:	d007      	beq.n	10011bf4 <_vfiprintf_r+0x9c>
10011be4:	4b65      	ldr	r3, [pc, #404]	; (10011d7c <_vfiprintf_r+0x224>)
10011be6:	682a      	ldr	r2, [r5, #0]
10011be8:	1ac0      	subs	r0, r0, r3
10011bea:	2340      	movs	r3, #64	; 0x40
10011bec:	4083      	lsls	r3, r0
10011bee:	4313      	orrs	r3, r2
10011bf0:	602b      	str	r3, [r5, #0]
10011bf2:	3401      	adds	r4, #1
10011bf4:	7821      	ldrb	r1, [r4, #0]
10011bf6:	1c63      	adds	r3, r4, #1
10011bf8:	2206      	movs	r2, #6
10011bfa:	4861      	ldr	r0, [pc, #388]	; (10011d80 <_vfiprintf_r+0x228>)
10011bfc:	9302      	str	r3, [sp, #8]
10011bfe:	7629      	strb	r1, [r5, #24]
10011c00:	f000 fb48 	bl	10012294 <memchr>
10011c04:	2800      	cmp	r0, #0
10011c06:	d100      	bne.n	10011c0a <_vfiprintf_r+0xb2>
10011c08:	e09d      	b.n	10011d46 <_vfiprintf_r+0x1ee>
10011c0a:	4b5e      	ldr	r3, [pc, #376]	; (10011d84 <_vfiprintf_r+0x22c>)
10011c0c:	2b00      	cmp	r3, #0
10011c0e:	d000      	beq.n	10011c12 <_vfiprintf_r+0xba>
10011c10:	e090      	b.n	10011d34 <_vfiprintf_r+0x1dc>
10011c12:	2207      	movs	r2, #7
10011c14:	9b05      	ldr	r3, [sp, #20]
10011c16:	3307      	adds	r3, #7
10011c18:	4393      	bics	r3, r2
10011c1a:	3308      	adds	r3, #8
10011c1c:	9305      	str	r3, [sp, #20]
10011c1e:	696b      	ldr	r3, [r5, #20]
10011c20:	9a03      	ldr	r2, [sp, #12]
10011c22:	189b      	adds	r3, r3, r2
10011c24:	616b      	str	r3, [r5, #20]
10011c26:	9c02      	ldr	r4, [sp, #8]
10011c28:	7823      	ldrb	r3, [r4, #0]
10011c2a:	2b00      	cmp	r3, #0
10011c2c:	d104      	bne.n	10011c38 <_vfiprintf_r+0xe0>
10011c2e:	9b02      	ldr	r3, [sp, #8]
10011c30:	1ae3      	subs	r3, r4, r3
10011c32:	9304      	str	r3, [sp, #16]
10011c34:	d012      	beq.n	10011c5c <_vfiprintf_r+0x104>
10011c36:	e003      	b.n	10011c40 <_vfiprintf_r+0xe8>
10011c38:	2b25      	cmp	r3, #37	; 0x25
10011c3a:	d0f8      	beq.n	10011c2e <_vfiprintf_r+0xd6>
10011c3c:	3401      	adds	r4, #1
10011c3e:	e7f3      	b.n	10011c28 <_vfiprintf_r+0xd0>
10011c40:	9b04      	ldr	r3, [sp, #16]
10011c42:	9a02      	ldr	r2, [sp, #8]
10011c44:	0039      	movs	r1, r7
10011c46:	0030      	movs	r0, r6
10011c48:	f7ff ff73 	bl	10011b32 <__sfputs_r>
10011c4c:	1c43      	adds	r3, r0, #1
10011c4e:	d100      	bne.n	10011c52 <_vfiprintf_r+0xfa>
10011c50:	e086      	b.n	10011d60 <_vfiprintf_r+0x208>
10011c52:	696a      	ldr	r2, [r5, #20]
10011c54:	9b04      	ldr	r3, [sp, #16]
10011c56:	4694      	mov	ip, r2
10011c58:	4463      	add	r3, ip
10011c5a:	616b      	str	r3, [r5, #20]
10011c5c:	7823      	ldrb	r3, [r4, #0]
10011c5e:	2b00      	cmp	r3, #0
10011c60:	d07e      	beq.n	10011d60 <_vfiprintf_r+0x208>
10011c62:	2201      	movs	r2, #1
10011c64:	2300      	movs	r3, #0
10011c66:	4252      	negs	r2, r2
10011c68:	606a      	str	r2, [r5, #4]
10011c6a:	a902      	add	r1, sp, #8
10011c6c:	3254      	adds	r2, #84	; 0x54
10011c6e:	1852      	adds	r2, r2, r1
10011c70:	3401      	adds	r4, #1
10011c72:	602b      	str	r3, [r5, #0]
10011c74:	60eb      	str	r3, [r5, #12]
10011c76:	60ab      	str	r3, [r5, #8]
10011c78:	7013      	strb	r3, [r2, #0]
10011c7a:	65ab      	str	r3, [r5, #88]	; 0x58
10011c7c:	7821      	ldrb	r1, [r4, #0]
10011c7e:	2205      	movs	r2, #5
10011c80:	4841      	ldr	r0, [pc, #260]	; (10011d88 <_vfiprintf_r+0x230>)
10011c82:	f000 fb07 	bl	10012294 <memchr>
10011c86:	2800      	cmp	r0, #0
10011c88:	d008      	beq.n	10011c9c <_vfiprintf_r+0x144>
10011c8a:	4b3f      	ldr	r3, [pc, #252]	; (10011d88 <_vfiprintf_r+0x230>)
10011c8c:	682a      	ldr	r2, [r5, #0]
10011c8e:	1ac0      	subs	r0, r0, r3
10011c90:	2301      	movs	r3, #1
10011c92:	4083      	lsls	r3, r0
10011c94:	4313      	orrs	r3, r2
10011c96:	602b      	str	r3, [r5, #0]
10011c98:	3401      	adds	r4, #1
10011c9a:	e7ef      	b.n	10011c7c <_vfiprintf_r+0x124>
10011c9c:	682b      	ldr	r3, [r5, #0]
10011c9e:	06da      	lsls	r2, r3, #27
10011ca0:	d504      	bpl.n	10011cac <_vfiprintf_r+0x154>
10011ca2:	2253      	movs	r2, #83	; 0x53
10011ca4:	2120      	movs	r1, #32
10011ca6:	a802      	add	r0, sp, #8
10011ca8:	1812      	adds	r2, r2, r0
10011caa:	7011      	strb	r1, [r2, #0]
10011cac:	071a      	lsls	r2, r3, #28
10011cae:	d504      	bpl.n	10011cba <_vfiprintf_r+0x162>
10011cb0:	2253      	movs	r2, #83	; 0x53
10011cb2:	212b      	movs	r1, #43	; 0x2b
10011cb4:	a802      	add	r0, sp, #8
10011cb6:	1812      	adds	r2, r2, r0
10011cb8:	7011      	strb	r1, [r2, #0]
10011cba:	7822      	ldrb	r2, [r4, #0]
10011cbc:	2a2a      	cmp	r2, #42	; 0x2a
10011cbe:	d100      	bne.n	10011cc2 <_vfiprintf_r+0x16a>
10011cc0:	e77c      	b.n	10011bbc <_vfiprintf_r+0x64>
10011cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011cc4:	2000      	movs	r0, #0
10011cc6:	210a      	movs	r1, #10
10011cc8:	e005      	b.n	10011cd6 <_vfiprintf_r+0x17e>
10011cca:	4252      	negs	r2, r2
10011ccc:	60ea      	str	r2, [r5, #12]
10011cce:	2202      	movs	r2, #2
10011cd0:	4313      	orrs	r3, r2
10011cd2:	602b      	str	r3, [r5, #0]
10011cd4:	e77a      	b.n	10011bcc <_vfiprintf_r+0x74>
10011cd6:	7822      	ldrb	r2, [r4, #0]
10011cd8:	3a30      	subs	r2, #48	; 0x30
10011cda:	2a09      	cmp	r2, #9
10011cdc:	d804      	bhi.n	10011ce8 <_vfiprintf_r+0x190>
10011cde:	434b      	muls	r3, r1
10011ce0:	3401      	adds	r4, #1
10011ce2:	189b      	adds	r3, r3, r2
10011ce4:	2001      	movs	r0, #1
10011ce6:	e7f6      	b.n	10011cd6 <_vfiprintf_r+0x17e>
10011ce8:	2800      	cmp	r0, #0
10011cea:	d100      	bne.n	10011cee <_vfiprintf_r+0x196>
10011cec:	e76f      	b.n	10011bce <_vfiprintf_r+0x76>
10011cee:	9309      	str	r3, [sp, #36]	; 0x24
10011cf0:	e76d      	b.n	10011bce <_vfiprintf_r+0x76>
10011cf2:	7863      	ldrb	r3, [r4, #1]
10011cf4:	2b2a      	cmp	r3, #42	; 0x2a
10011cf6:	d10a      	bne.n	10011d0e <_vfiprintf_r+0x1b6>
10011cf8:	9b05      	ldr	r3, [sp, #20]
10011cfa:	3402      	adds	r4, #2
10011cfc:	1d1a      	adds	r2, r3, #4
10011cfe:	681b      	ldr	r3, [r3, #0]
10011d00:	9205      	str	r2, [sp, #20]
10011d02:	2b00      	cmp	r3, #0
10011d04:	da01      	bge.n	10011d0a <_vfiprintf_r+0x1b2>
10011d06:	2301      	movs	r3, #1
10011d08:	425b      	negs	r3, r3
10011d0a:	9307      	str	r3, [sp, #28]
10011d0c:	e763      	b.n	10011bd6 <_vfiprintf_r+0x7e>
10011d0e:	2300      	movs	r3, #0
10011d10:	200a      	movs	r0, #10
10011d12:	001a      	movs	r2, r3
10011d14:	3401      	adds	r4, #1
10011d16:	606b      	str	r3, [r5, #4]
10011d18:	7821      	ldrb	r1, [r4, #0]
10011d1a:	3930      	subs	r1, #48	; 0x30
10011d1c:	2909      	cmp	r1, #9
10011d1e:	d804      	bhi.n	10011d2a <_vfiprintf_r+0x1d2>
10011d20:	4342      	muls	r2, r0
10011d22:	3401      	adds	r4, #1
10011d24:	1852      	adds	r2, r2, r1
10011d26:	2301      	movs	r3, #1
10011d28:	e7f6      	b.n	10011d18 <_vfiprintf_r+0x1c0>
10011d2a:	2b00      	cmp	r3, #0
10011d2c:	d100      	bne.n	10011d30 <_vfiprintf_r+0x1d8>
10011d2e:	e752      	b.n	10011bd6 <_vfiprintf_r+0x7e>
10011d30:	9207      	str	r2, [sp, #28]
10011d32:	e750      	b.n	10011bd6 <_vfiprintf_r+0x7e>
10011d34:	ab05      	add	r3, sp, #20
10011d36:	9300      	str	r3, [sp, #0]
10011d38:	003a      	movs	r2, r7
10011d3a:	4b14      	ldr	r3, [pc, #80]	; (10011d8c <_vfiprintf_r+0x234>)
10011d3c:	0029      	movs	r1, r5
10011d3e:	0030      	movs	r0, r6
10011d40:	e000      	b.n	10011d44 <_vfiprintf_r+0x1ec>
10011d42:	bf00      	nop
10011d44:	e007      	b.n	10011d56 <_vfiprintf_r+0x1fe>
10011d46:	ab05      	add	r3, sp, #20
10011d48:	9300      	str	r3, [sp, #0]
10011d4a:	003a      	movs	r2, r7
10011d4c:	4b0f      	ldr	r3, [pc, #60]	; (10011d8c <_vfiprintf_r+0x234>)
10011d4e:	0029      	movs	r1, r5
10011d50:	0030      	movs	r0, r6
10011d52:	f000 f88b 	bl	10011e6c <_printf_i>
10011d56:	9003      	str	r0, [sp, #12]
10011d58:	9b03      	ldr	r3, [sp, #12]
10011d5a:	3301      	adds	r3, #1
10011d5c:	d000      	beq.n	10011d60 <_vfiprintf_r+0x208>
10011d5e:	e75e      	b.n	10011c1e <_vfiprintf_r+0xc6>
10011d60:	89bb      	ldrh	r3, [r7, #12]
10011d62:	065b      	lsls	r3, r3, #25
10011d64:	d500      	bpl.n	10011d68 <_vfiprintf_r+0x210>
10011d66:	e726      	b.n	10011bb6 <_vfiprintf_r+0x5e>
10011d68:	980b      	ldr	r0, [sp, #44]	; 0x2c
10011d6a:	b01f      	add	sp, #124	; 0x7c
10011d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011d6e:	46c0      	nop			; (mov r8, r8)
10011d70:	10013748 	.word	0x10013748
10011d74:	10013768 	.word	0x10013768
10011d78:	10013788 	.word	0x10013788
10011d7c:	100137ae 	.word	0x100137ae
10011d80:	100137b2 	.word	0x100137b2
10011d84:	00000000 	.word	0x00000000
10011d88:	100137a8 	.word	0x100137a8
10011d8c:	10011b33 	.word	0x10011b33

10011d90 <_printf_common>:
10011d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011d92:	0017      	movs	r7, r2
10011d94:	9301      	str	r3, [sp, #4]
10011d96:	688a      	ldr	r2, [r1, #8]
10011d98:	690b      	ldr	r3, [r1, #16]
10011d9a:	9000      	str	r0, [sp, #0]
10011d9c:	000c      	movs	r4, r1
10011d9e:	4293      	cmp	r3, r2
10011da0:	da00      	bge.n	10011da4 <_printf_common+0x14>
10011da2:	0013      	movs	r3, r2
10011da4:	0022      	movs	r2, r4
10011da6:	603b      	str	r3, [r7, #0]
10011da8:	3243      	adds	r2, #67	; 0x43
10011daa:	7812      	ldrb	r2, [r2, #0]
10011dac:	2a00      	cmp	r2, #0
10011dae:	d001      	beq.n	10011db4 <_printf_common+0x24>
10011db0:	3301      	adds	r3, #1
10011db2:	603b      	str	r3, [r7, #0]
10011db4:	6823      	ldr	r3, [r4, #0]
10011db6:	069b      	lsls	r3, r3, #26
10011db8:	d502      	bpl.n	10011dc0 <_printf_common+0x30>
10011dba:	683b      	ldr	r3, [r7, #0]
10011dbc:	3302      	adds	r3, #2
10011dbe:	603b      	str	r3, [r7, #0]
10011dc0:	2506      	movs	r5, #6
10011dc2:	6823      	ldr	r3, [r4, #0]
10011dc4:	401d      	ands	r5, r3
10011dc6:	d01e      	beq.n	10011e06 <_printf_common+0x76>
10011dc8:	0023      	movs	r3, r4
10011dca:	3343      	adds	r3, #67	; 0x43
10011dcc:	781b      	ldrb	r3, [r3, #0]
10011dce:	1e5a      	subs	r2, r3, #1
10011dd0:	4193      	sbcs	r3, r2
10011dd2:	6822      	ldr	r2, [r4, #0]
10011dd4:	0692      	lsls	r2, r2, #26
10011dd6:	d51c      	bpl.n	10011e12 <_printf_common+0x82>
10011dd8:	2030      	movs	r0, #48	; 0x30
10011dda:	18e1      	adds	r1, r4, r3
10011ddc:	3143      	adds	r1, #67	; 0x43
10011dde:	7008      	strb	r0, [r1, #0]
10011de0:	0021      	movs	r1, r4
10011de2:	1c5a      	adds	r2, r3, #1
10011de4:	3145      	adds	r1, #69	; 0x45
10011de6:	7809      	ldrb	r1, [r1, #0]
10011de8:	18a2      	adds	r2, r4, r2
10011dea:	3243      	adds	r2, #67	; 0x43
10011dec:	3302      	adds	r3, #2
10011dee:	7011      	strb	r1, [r2, #0]
10011df0:	e00f      	b.n	10011e12 <_printf_common+0x82>
10011df2:	0022      	movs	r2, r4
10011df4:	2301      	movs	r3, #1
10011df6:	3219      	adds	r2, #25
10011df8:	9901      	ldr	r1, [sp, #4]
10011dfa:	9800      	ldr	r0, [sp, #0]
10011dfc:	9e08      	ldr	r6, [sp, #32]
10011dfe:	47b0      	blx	r6
10011e00:	1c43      	adds	r3, r0, #1
10011e02:	d00e      	beq.n	10011e22 <_printf_common+0x92>
10011e04:	3501      	adds	r5, #1
10011e06:	68e3      	ldr	r3, [r4, #12]
10011e08:	683a      	ldr	r2, [r7, #0]
10011e0a:	1a9b      	subs	r3, r3, r2
10011e0c:	429d      	cmp	r5, r3
10011e0e:	dbf0      	blt.n	10011df2 <_printf_common+0x62>
10011e10:	e7da      	b.n	10011dc8 <_printf_common+0x38>
10011e12:	0022      	movs	r2, r4
10011e14:	9901      	ldr	r1, [sp, #4]
10011e16:	3243      	adds	r2, #67	; 0x43
10011e18:	9800      	ldr	r0, [sp, #0]
10011e1a:	9d08      	ldr	r5, [sp, #32]
10011e1c:	47a8      	blx	r5
10011e1e:	1c43      	adds	r3, r0, #1
10011e20:	d102      	bne.n	10011e28 <_printf_common+0x98>
10011e22:	2001      	movs	r0, #1
10011e24:	4240      	negs	r0, r0
10011e26:	e020      	b.n	10011e6a <_printf_common+0xda>
10011e28:	2306      	movs	r3, #6
10011e2a:	6820      	ldr	r0, [r4, #0]
10011e2c:	68e1      	ldr	r1, [r4, #12]
10011e2e:	683a      	ldr	r2, [r7, #0]
10011e30:	4003      	ands	r3, r0
10011e32:	2500      	movs	r5, #0
10011e34:	2b04      	cmp	r3, #4
10011e36:	d103      	bne.n	10011e40 <_printf_common+0xb0>
10011e38:	1a8d      	subs	r5, r1, r2
10011e3a:	43eb      	mvns	r3, r5
10011e3c:	17db      	asrs	r3, r3, #31
10011e3e:	401d      	ands	r5, r3
10011e40:	68a3      	ldr	r3, [r4, #8]
10011e42:	6922      	ldr	r2, [r4, #16]
10011e44:	4293      	cmp	r3, r2
10011e46:	dd01      	ble.n	10011e4c <_printf_common+0xbc>
10011e48:	1a9b      	subs	r3, r3, r2
10011e4a:	18ed      	adds	r5, r5, r3
10011e4c:	2700      	movs	r7, #0
10011e4e:	42bd      	cmp	r5, r7
10011e50:	d00a      	beq.n	10011e68 <_printf_common+0xd8>
10011e52:	0022      	movs	r2, r4
10011e54:	2301      	movs	r3, #1
10011e56:	321a      	adds	r2, #26
10011e58:	9901      	ldr	r1, [sp, #4]
10011e5a:	9800      	ldr	r0, [sp, #0]
10011e5c:	9e08      	ldr	r6, [sp, #32]
10011e5e:	47b0      	blx	r6
10011e60:	1c43      	adds	r3, r0, #1
10011e62:	d0de      	beq.n	10011e22 <_printf_common+0x92>
10011e64:	3701      	adds	r7, #1
10011e66:	e7f2      	b.n	10011e4e <_printf_common+0xbe>
10011e68:	2000      	movs	r0, #0
10011e6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10011e6c <_printf_i>:
10011e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10011e6e:	b08b      	sub	sp, #44	; 0x2c
10011e70:	9206      	str	r2, [sp, #24]
10011e72:	000a      	movs	r2, r1
10011e74:	3243      	adds	r2, #67	; 0x43
10011e76:	9307      	str	r3, [sp, #28]
10011e78:	9005      	str	r0, [sp, #20]
10011e7a:	9204      	str	r2, [sp, #16]
10011e7c:	7e0a      	ldrb	r2, [r1, #24]
10011e7e:	000c      	movs	r4, r1
10011e80:	9b10      	ldr	r3, [sp, #64]	; 0x40
10011e82:	2a6e      	cmp	r2, #110	; 0x6e
10011e84:	d100      	bne.n	10011e88 <_printf_i+0x1c>
10011e86:	e0ab      	b.n	10011fe0 <_printf_i+0x174>
10011e88:	d811      	bhi.n	10011eae <_printf_i+0x42>
10011e8a:	2a63      	cmp	r2, #99	; 0x63
10011e8c:	d022      	beq.n	10011ed4 <_printf_i+0x68>
10011e8e:	d809      	bhi.n	10011ea4 <_printf_i+0x38>
10011e90:	2a00      	cmp	r2, #0
10011e92:	d100      	bne.n	10011e96 <_printf_i+0x2a>
10011e94:	e0b5      	b.n	10012002 <_printf_i+0x196>
10011e96:	2a58      	cmp	r2, #88	; 0x58
10011e98:	d000      	beq.n	10011e9c <_printf_i+0x30>
10011e9a:	e0c5      	b.n	10012028 <_printf_i+0x1bc>
10011e9c:	3145      	adds	r1, #69	; 0x45
10011e9e:	700a      	strb	r2, [r1, #0]
10011ea0:	4a81      	ldr	r2, [pc, #516]	; (100120a8 <_printf_i+0x23c>)
10011ea2:	e04f      	b.n	10011f44 <_printf_i+0xd8>
10011ea4:	2a64      	cmp	r2, #100	; 0x64
10011ea6:	d01d      	beq.n	10011ee4 <_printf_i+0x78>
10011ea8:	2a69      	cmp	r2, #105	; 0x69
10011eaa:	d01b      	beq.n	10011ee4 <_printf_i+0x78>
10011eac:	e0bc      	b.n	10012028 <_printf_i+0x1bc>
10011eae:	2a73      	cmp	r2, #115	; 0x73
10011eb0:	d100      	bne.n	10011eb4 <_printf_i+0x48>
10011eb2:	e0aa      	b.n	1001200a <_printf_i+0x19e>
10011eb4:	d809      	bhi.n	10011eca <_printf_i+0x5e>
10011eb6:	2a6f      	cmp	r2, #111	; 0x6f
10011eb8:	d029      	beq.n	10011f0e <_printf_i+0xa2>
10011eba:	2a70      	cmp	r2, #112	; 0x70
10011ebc:	d000      	beq.n	10011ec0 <_printf_i+0x54>
10011ebe:	e0b3      	b.n	10012028 <_printf_i+0x1bc>
10011ec0:	2220      	movs	r2, #32
10011ec2:	6809      	ldr	r1, [r1, #0]
10011ec4:	430a      	orrs	r2, r1
10011ec6:	6022      	str	r2, [r4, #0]
10011ec8:	e037      	b.n	10011f3a <_printf_i+0xce>
10011eca:	2a75      	cmp	r2, #117	; 0x75
10011ecc:	d01f      	beq.n	10011f0e <_printf_i+0xa2>
10011ece:	2a78      	cmp	r2, #120	; 0x78
10011ed0:	d033      	beq.n	10011f3a <_printf_i+0xce>
10011ed2:	e0a9      	b.n	10012028 <_printf_i+0x1bc>
10011ed4:	000e      	movs	r6, r1
10011ed6:	681a      	ldr	r2, [r3, #0]
10011ed8:	3642      	adds	r6, #66	; 0x42
10011eda:	1d11      	adds	r1, r2, #4
10011edc:	6019      	str	r1, [r3, #0]
10011ede:	6813      	ldr	r3, [r2, #0]
10011ee0:	7033      	strb	r3, [r6, #0]
10011ee2:	e0a4      	b.n	1001202e <_printf_i+0x1c2>
10011ee4:	6821      	ldr	r1, [r4, #0]
10011ee6:	681a      	ldr	r2, [r3, #0]
10011ee8:	0608      	lsls	r0, r1, #24
10011eea:	d406      	bmi.n	10011efa <_printf_i+0x8e>
10011eec:	0649      	lsls	r1, r1, #25
10011eee:	d504      	bpl.n	10011efa <_printf_i+0x8e>
10011ef0:	1d11      	adds	r1, r2, #4
10011ef2:	6019      	str	r1, [r3, #0]
10011ef4:	2300      	movs	r3, #0
10011ef6:	5ed5      	ldrsh	r5, [r2, r3]
10011ef8:	e002      	b.n	10011f00 <_printf_i+0x94>
10011efa:	1d11      	adds	r1, r2, #4
10011efc:	6019      	str	r1, [r3, #0]
10011efe:	6815      	ldr	r5, [r2, #0]
10011f00:	2d00      	cmp	r5, #0
10011f02:	da3b      	bge.n	10011f7c <_printf_i+0x110>
10011f04:	232d      	movs	r3, #45	; 0x2d
10011f06:	9a04      	ldr	r2, [sp, #16]
10011f08:	426d      	negs	r5, r5
10011f0a:	7013      	strb	r3, [r2, #0]
10011f0c:	e036      	b.n	10011f7c <_printf_i+0x110>
10011f0e:	6821      	ldr	r1, [r4, #0]
10011f10:	681a      	ldr	r2, [r3, #0]
10011f12:	0608      	lsls	r0, r1, #24
10011f14:	d406      	bmi.n	10011f24 <_printf_i+0xb8>
10011f16:	0649      	lsls	r1, r1, #25
10011f18:	d504      	bpl.n	10011f24 <_printf_i+0xb8>
10011f1a:	6815      	ldr	r5, [r2, #0]
10011f1c:	1d11      	adds	r1, r2, #4
10011f1e:	6019      	str	r1, [r3, #0]
10011f20:	b2ad      	uxth	r5, r5
10011f22:	e002      	b.n	10011f2a <_printf_i+0xbe>
10011f24:	1d11      	adds	r1, r2, #4
10011f26:	6019      	str	r1, [r3, #0]
10011f28:	6815      	ldr	r5, [r2, #0]
10011f2a:	4b5f      	ldr	r3, [pc, #380]	; (100120a8 <_printf_i+0x23c>)
10011f2c:	7e22      	ldrb	r2, [r4, #24]
10011f2e:	9303      	str	r3, [sp, #12]
10011f30:	2708      	movs	r7, #8
10011f32:	2a6f      	cmp	r2, #111	; 0x6f
10011f34:	d01d      	beq.n	10011f72 <_printf_i+0x106>
10011f36:	270a      	movs	r7, #10
10011f38:	e01b      	b.n	10011f72 <_printf_i+0x106>
10011f3a:	0022      	movs	r2, r4
10011f3c:	2178      	movs	r1, #120	; 0x78
10011f3e:	3245      	adds	r2, #69	; 0x45
10011f40:	7011      	strb	r1, [r2, #0]
10011f42:	4a5a      	ldr	r2, [pc, #360]	; (100120ac <_printf_i+0x240>)
10011f44:	6819      	ldr	r1, [r3, #0]
10011f46:	9203      	str	r2, [sp, #12]
10011f48:	1d08      	adds	r0, r1, #4
10011f4a:	6822      	ldr	r2, [r4, #0]
10011f4c:	6018      	str	r0, [r3, #0]
10011f4e:	680d      	ldr	r5, [r1, #0]
10011f50:	0610      	lsls	r0, r2, #24
10011f52:	d402      	bmi.n	10011f5a <_printf_i+0xee>
10011f54:	0650      	lsls	r0, r2, #25
10011f56:	d500      	bpl.n	10011f5a <_printf_i+0xee>
10011f58:	b2ad      	uxth	r5, r5
10011f5a:	07d3      	lsls	r3, r2, #31
10011f5c:	d502      	bpl.n	10011f64 <_printf_i+0xf8>
10011f5e:	2320      	movs	r3, #32
10011f60:	431a      	orrs	r2, r3
10011f62:	6022      	str	r2, [r4, #0]
10011f64:	2710      	movs	r7, #16
10011f66:	2d00      	cmp	r5, #0
10011f68:	d103      	bne.n	10011f72 <_printf_i+0x106>
10011f6a:	2320      	movs	r3, #32
10011f6c:	6822      	ldr	r2, [r4, #0]
10011f6e:	439a      	bics	r2, r3
10011f70:	6022      	str	r2, [r4, #0]
10011f72:	0023      	movs	r3, r4
10011f74:	2200      	movs	r2, #0
10011f76:	3343      	adds	r3, #67	; 0x43
10011f78:	701a      	strb	r2, [r3, #0]
10011f7a:	e002      	b.n	10011f82 <_printf_i+0x116>
10011f7c:	270a      	movs	r7, #10
10011f7e:	4b4a      	ldr	r3, [pc, #296]	; (100120a8 <_printf_i+0x23c>)
10011f80:	9303      	str	r3, [sp, #12]
10011f82:	6863      	ldr	r3, [r4, #4]
10011f84:	60a3      	str	r3, [r4, #8]
10011f86:	2b00      	cmp	r3, #0
10011f88:	db09      	blt.n	10011f9e <_printf_i+0x132>
10011f8a:	2204      	movs	r2, #4
10011f8c:	6821      	ldr	r1, [r4, #0]
10011f8e:	4391      	bics	r1, r2
10011f90:	6021      	str	r1, [r4, #0]
10011f92:	2d00      	cmp	r5, #0
10011f94:	d105      	bne.n	10011fa2 <_printf_i+0x136>
10011f96:	9e04      	ldr	r6, [sp, #16]
10011f98:	2b00      	cmp	r3, #0
10011f9a:	d011      	beq.n	10011fc0 <_printf_i+0x154>
10011f9c:	e07b      	b.n	10012096 <_printf_i+0x22a>
10011f9e:	2d00      	cmp	r5, #0
10011fa0:	d079      	beq.n	10012096 <_printf_i+0x22a>
10011fa2:	9e04      	ldr	r6, [sp, #16]
10011fa4:	0028      	movs	r0, r5
10011fa6:	0039      	movs	r1, r7
10011fa8:	f7fe f8ae 	bl	10010108 <__aeabi_uidivmod>
10011fac:	9b03      	ldr	r3, [sp, #12]
10011fae:	3e01      	subs	r6, #1
10011fb0:	5c5b      	ldrb	r3, [r3, r1]
10011fb2:	0028      	movs	r0, r5
10011fb4:	7033      	strb	r3, [r6, #0]
10011fb6:	0039      	movs	r1, r7
10011fb8:	f7fe f820 	bl	1000fffc <__aeabi_uidiv>
10011fbc:	1e05      	subs	r5, r0, #0
10011fbe:	d1f1      	bne.n	10011fa4 <_printf_i+0x138>
10011fc0:	2f08      	cmp	r7, #8
10011fc2:	d109      	bne.n	10011fd8 <_printf_i+0x16c>
10011fc4:	6823      	ldr	r3, [r4, #0]
10011fc6:	07db      	lsls	r3, r3, #31
10011fc8:	d506      	bpl.n	10011fd8 <_printf_i+0x16c>
10011fca:	6863      	ldr	r3, [r4, #4]
10011fcc:	6922      	ldr	r2, [r4, #16]
10011fce:	4293      	cmp	r3, r2
10011fd0:	dc02      	bgt.n	10011fd8 <_printf_i+0x16c>
10011fd2:	2330      	movs	r3, #48	; 0x30
10011fd4:	3e01      	subs	r6, #1
10011fd6:	7033      	strb	r3, [r6, #0]
10011fd8:	9b04      	ldr	r3, [sp, #16]
10011fda:	1b9b      	subs	r3, r3, r6
10011fdc:	6123      	str	r3, [r4, #16]
10011fde:	e02b      	b.n	10012038 <_printf_i+0x1cc>
10011fe0:	6809      	ldr	r1, [r1, #0]
10011fe2:	681a      	ldr	r2, [r3, #0]
10011fe4:	0608      	lsls	r0, r1, #24
10011fe6:	d407      	bmi.n	10011ff8 <_printf_i+0x18c>
10011fe8:	0649      	lsls	r1, r1, #25
10011fea:	d505      	bpl.n	10011ff8 <_printf_i+0x18c>
10011fec:	1d11      	adds	r1, r2, #4
10011fee:	6019      	str	r1, [r3, #0]
10011ff0:	6813      	ldr	r3, [r2, #0]
10011ff2:	8aa2      	ldrh	r2, [r4, #20]
10011ff4:	801a      	strh	r2, [r3, #0]
10011ff6:	e004      	b.n	10012002 <_printf_i+0x196>
10011ff8:	1d11      	adds	r1, r2, #4
10011ffa:	6019      	str	r1, [r3, #0]
10011ffc:	6813      	ldr	r3, [r2, #0]
10011ffe:	6962      	ldr	r2, [r4, #20]
10012000:	601a      	str	r2, [r3, #0]
10012002:	2300      	movs	r3, #0
10012004:	9e04      	ldr	r6, [sp, #16]
10012006:	6123      	str	r3, [r4, #16]
10012008:	e016      	b.n	10012038 <_printf_i+0x1cc>
1001200a:	681a      	ldr	r2, [r3, #0]
1001200c:	1d11      	adds	r1, r2, #4
1001200e:	6019      	str	r1, [r3, #0]
10012010:	6816      	ldr	r6, [r2, #0]
10012012:	2100      	movs	r1, #0
10012014:	6862      	ldr	r2, [r4, #4]
10012016:	0030      	movs	r0, r6
10012018:	f000 f93c 	bl	10012294 <memchr>
1001201c:	2800      	cmp	r0, #0
1001201e:	d001      	beq.n	10012024 <_printf_i+0x1b8>
10012020:	1b80      	subs	r0, r0, r6
10012022:	6060      	str	r0, [r4, #4]
10012024:	6863      	ldr	r3, [r4, #4]
10012026:	e003      	b.n	10012030 <_printf_i+0x1c4>
10012028:	0026      	movs	r6, r4
1001202a:	3642      	adds	r6, #66	; 0x42
1001202c:	7032      	strb	r2, [r6, #0]
1001202e:	2301      	movs	r3, #1
10012030:	6123      	str	r3, [r4, #16]
10012032:	2300      	movs	r3, #0
10012034:	9a04      	ldr	r2, [sp, #16]
10012036:	7013      	strb	r3, [r2, #0]
10012038:	9b07      	ldr	r3, [sp, #28]
1001203a:	aa09      	add	r2, sp, #36	; 0x24
1001203c:	9300      	str	r3, [sp, #0]
1001203e:	0021      	movs	r1, r4
10012040:	9b06      	ldr	r3, [sp, #24]
10012042:	9805      	ldr	r0, [sp, #20]
10012044:	f7ff fea4 	bl	10011d90 <_printf_common>
10012048:	1c43      	adds	r3, r0, #1
1001204a:	d102      	bne.n	10012052 <_printf_i+0x1e6>
1001204c:	2001      	movs	r0, #1
1001204e:	4240      	negs	r0, r0
10012050:	e027      	b.n	100120a2 <_printf_i+0x236>
10012052:	6923      	ldr	r3, [r4, #16]
10012054:	0032      	movs	r2, r6
10012056:	9906      	ldr	r1, [sp, #24]
10012058:	9805      	ldr	r0, [sp, #20]
1001205a:	9d07      	ldr	r5, [sp, #28]
1001205c:	47a8      	blx	r5
1001205e:	1c43      	adds	r3, r0, #1
10012060:	d0f4      	beq.n	1001204c <_printf_i+0x1e0>
10012062:	6823      	ldr	r3, [r4, #0]
10012064:	2500      	movs	r5, #0
10012066:	079b      	lsls	r3, r3, #30
10012068:	d40f      	bmi.n	1001208a <_printf_i+0x21e>
1001206a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001206c:	68e0      	ldr	r0, [r4, #12]
1001206e:	4298      	cmp	r0, r3
10012070:	da17      	bge.n	100120a2 <_printf_i+0x236>
10012072:	0018      	movs	r0, r3
10012074:	e015      	b.n	100120a2 <_printf_i+0x236>
10012076:	0022      	movs	r2, r4
10012078:	2301      	movs	r3, #1
1001207a:	3219      	adds	r2, #25
1001207c:	9906      	ldr	r1, [sp, #24]
1001207e:	9805      	ldr	r0, [sp, #20]
10012080:	9e07      	ldr	r6, [sp, #28]
10012082:	47b0      	blx	r6
10012084:	1c43      	adds	r3, r0, #1
10012086:	d0e1      	beq.n	1001204c <_printf_i+0x1e0>
10012088:	3501      	adds	r5, #1
1001208a:	68e3      	ldr	r3, [r4, #12]
1001208c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001208e:	1a9b      	subs	r3, r3, r2
10012090:	429d      	cmp	r5, r3
10012092:	dbf0      	blt.n	10012076 <_printf_i+0x20a>
10012094:	e7e9      	b.n	1001206a <_printf_i+0x1fe>
10012096:	0026      	movs	r6, r4
10012098:	9b03      	ldr	r3, [sp, #12]
1001209a:	3642      	adds	r6, #66	; 0x42
1001209c:	781b      	ldrb	r3, [r3, #0]
1001209e:	7033      	strb	r3, [r6, #0]
100120a0:	e78e      	b.n	10011fc0 <_printf_i+0x154>
100120a2:	b00b      	add	sp, #44	; 0x2c
100120a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100120a6:	46c0      	nop			; (mov r8, r8)
100120a8:	100137b9 	.word	0x100137b9
100120ac:	100137ca 	.word	0x100137ca

100120b0 <_putc_r>:
100120b0:	b570      	push	{r4, r5, r6, lr}
100120b2:	0006      	movs	r6, r0
100120b4:	000d      	movs	r5, r1
100120b6:	0014      	movs	r4, r2
100120b8:	2800      	cmp	r0, #0
100120ba:	d004      	beq.n	100120c6 <_putc_r+0x16>
100120bc:	6983      	ldr	r3, [r0, #24]
100120be:	2b00      	cmp	r3, #0
100120c0:	d101      	bne.n	100120c6 <_putc_r+0x16>
100120c2:	f7ff fb83 	bl	100117cc <__sinit>
100120c6:	4b12      	ldr	r3, [pc, #72]	; (10012110 <_putc_r+0x60>)
100120c8:	429c      	cmp	r4, r3
100120ca:	d101      	bne.n	100120d0 <_putc_r+0x20>
100120cc:	6874      	ldr	r4, [r6, #4]
100120ce:	e008      	b.n	100120e2 <_putc_r+0x32>
100120d0:	4b10      	ldr	r3, [pc, #64]	; (10012114 <_putc_r+0x64>)
100120d2:	429c      	cmp	r4, r3
100120d4:	d101      	bne.n	100120da <_putc_r+0x2a>
100120d6:	68b4      	ldr	r4, [r6, #8]
100120d8:	e003      	b.n	100120e2 <_putc_r+0x32>
100120da:	4b0f      	ldr	r3, [pc, #60]	; (10012118 <_putc_r+0x68>)
100120dc:	429c      	cmp	r4, r3
100120de:	d100      	bne.n	100120e2 <_putc_r+0x32>
100120e0:	68f4      	ldr	r4, [r6, #12]
100120e2:	68a3      	ldr	r3, [r4, #8]
100120e4:	3b01      	subs	r3, #1
100120e6:	60a3      	str	r3, [r4, #8]
100120e8:	2b00      	cmp	r3, #0
100120ea:	da05      	bge.n	100120f8 <_putc_r+0x48>
100120ec:	69a2      	ldr	r2, [r4, #24]
100120ee:	4293      	cmp	r3, r2
100120f0:	db08      	blt.n	10012104 <_putc_r+0x54>
100120f2:	b2eb      	uxtb	r3, r5
100120f4:	2b0a      	cmp	r3, #10
100120f6:	d005      	beq.n	10012104 <_putc_r+0x54>
100120f8:	6823      	ldr	r3, [r4, #0]
100120fa:	b2e8      	uxtb	r0, r5
100120fc:	1c5a      	adds	r2, r3, #1
100120fe:	6022      	str	r2, [r4, #0]
10012100:	701d      	strb	r5, [r3, #0]
10012102:	e004      	b.n	1001210e <_putc_r+0x5e>
10012104:	0022      	movs	r2, r4
10012106:	0029      	movs	r1, r5
10012108:	0030      	movs	r0, r6
1001210a:	f7ff f99d 	bl	10011448 <__swbuf_r>
1001210e:	bd70      	pop	{r4, r5, r6, pc}
10012110:	10013748 	.word	0x10013748
10012114:	10013768 	.word	0x10013768
10012118:	10013788 	.word	0x10013788

1001211c <_sbrk_r>:
1001211c:	2300      	movs	r3, #0
1001211e:	b570      	push	{r4, r5, r6, lr}
10012120:	4c06      	ldr	r4, [pc, #24]	; (1001213c <_sbrk_r+0x20>)
10012122:	0005      	movs	r5, r0
10012124:	0008      	movs	r0, r1
10012126:	6023      	str	r3, [r4, #0]
10012128:	f7f8 f9dc 	bl	1000a4e4 <_sbrk>
1001212c:	1c43      	adds	r3, r0, #1
1001212e:	d103      	bne.n	10012138 <_sbrk_r+0x1c>
10012130:	6823      	ldr	r3, [r4, #0]
10012132:	2b00      	cmp	r3, #0
10012134:	d000      	beq.n	10012138 <_sbrk_r+0x1c>
10012136:	602b      	str	r3, [r5, #0]
10012138:	bd70      	pop	{r4, r5, r6, pc}
1001213a:	46c0      	nop			; (mov r8, r8)
1001213c:	100181d4 	.word	0x100181d4

10012140 <__sread>:
10012140:	b570      	push	{r4, r5, r6, lr}
10012142:	000c      	movs	r4, r1
10012144:	250e      	movs	r5, #14
10012146:	5f49      	ldrsh	r1, [r1, r5]
10012148:	f000 f8b0 	bl	100122ac <_read_r>
1001214c:	2800      	cmp	r0, #0
1001214e:	db03      	blt.n	10012158 <__sread+0x18>
10012150:	6d63      	ldr	r3, [r4, #84]	; 0x54
10012152:	181b      	adds	r3, r3, r0
10012154:	6563      	str	r3, [r4, #84]	; 0x54
10012156:	e003      	b.n	10012160 <__sread+0x20>
10012158:	89a2      	ldrh	r2, [r4, #12]
1001215a:	4b02      	ldr	r3, [pc, #8]	; (10012164 <__sread+0x24>)
1001215c:	4013      	ands	r3, r2
1001215e:	81a3      	strh	r3, [r4, #12]
10012160:	bd70      	pop	{r4, r5, r6, pc}
10012162:	46c0      	nop			; (mov r8, r8)
10012164:	ffffefff 	.word	0xffffefff

10012168 <__swrite>:
10012168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001216a:	001f      	movs	r7, r3
1001216c:	898b      	ldrh	r3, [r1, #12]
1001216e:	0005      	movs	r5, r0
10012170:	000c      	movs	r4, r1
10012172:	0016      	movs	r6, r2
10012174:	05db      	lsls	r3, r3, #23
10012176:	d505      	bpl.n	10012184 <__swrite+0x1c>
10012178:	230e      	movs	r3, #14
1001217a:	5ec9      	ldrsh	r1, [r1, r3]
1001217c:	2200      	movs	r2, #0
1001217e:	2302      	movs	r3, #2
10012180:	f000 f874 	bl	1001226c <_lseek_r>
10012184:	89a2      	ldrh	r2, [r4, #12]
10012186:	4b05      	ldr	r3, [pc, #20]	; (1001219c <__swrite+0x34>)
10012188:	0028      	movs	r0, r5
1001218a:	4013      	ands	r3, r2
1001218c:	81a3      	strh	r3, [r4, #12]
1001218e:	0032      	movs	r2, r6
10012190:	230e      	movs	r3, #14
10012192:	5ee1      	ldrsh	r1, [r4, r3]
10012194:	003b      	movs	r3, r7
10012196:	f000 f81f 	bl	100121d8 <_write_r>
1001219a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001219c:	ffffefff 	.word	0xffffefff

100121a0 <__sseek>:
100121a0:	b570      	push	{r4, r5, r6, lr}
100121a2:	000c      	movs	r4, r1
100121a4:	250e      	movs	r5, #14
100121a6:	5f49      	ldrsh	r1, [r1, r5]
100121a8:	f000 f860 	bl	1001226c <_lseek_r>
100121ac:	89a3      	ldrh	r3, [r4, #12]
100121ae:	1c42      	adds	r2, r0, #1
100121b0:	d103      	bne.n	100121ba <__sseek+0x1a>
100121b2:	4a05      	ldr	r2, [pc, #20]	; (100121c8 <__sseek+0x28>)
100121b4:	4013      	ands	r3, r2
100121b6:	81a3      	strh	r3, [r4, #12]
100121b8:	e004      	b.n	100121c4 <__sseek+0x24>
100121ba:	2280      	movs	r2, #128	; 0x80
100121bc:	0152      	lsls	r2, r2, #5
100121be:	4313      	orrs	r3, r2
100121c0:	81a3      	strh	r3, [r4, #12]
100121c2:	6560      	str	r0, [r4, #84]	; 0x54
100121c4:	bd70      	pop	{r4, r5, r6, pc}
100121c6:	46c0      	nop			; (mov r8, r8)
100121c8:	ffffefff 	.word	0xffffefff

100121cc <__sclose>:
100121cc:	b510      	push	{r4, lr}
100121ce:	230e      	movs	r3, #14
100121d0:	5ec9      	ldrsh	r1, [r1, r3]
100121d2:	f000 f815 	bl	10012200 <_close_r>
100121d6:	bd10      	pop	{r4, pc}

100121d8 <_write_r>:
100121d8:	b570      	push	{r4, r5, r6, lr}
100121da:	0005      	movs	r5, r0
100121dc:	0008      	movs	r0, r1
100121de:	0011      	movs	r1, r2
100121e0:	2200      	movs	r2, #0
100121e2:	4c06      	ldr	r4, [pc, #24]	; (100121fc <_write_r+0x24>)
100121e4:	6022      	str	r2, [r4, #0]
100121e6:	001a      	movs	r2, r3
100121e8:	f7f8 f954 	bl	1000a494 <_write>
100121ec:	1c43      	adds	r3, r0, #1
100121ee:	d103      	bne.n	100121f8 <_write_r+0x20>
100121f0:	6823      	ldr	r3, [r4, #0]
100121f2:	2b00      	cmp	r3, #0
100121f4:	d000      	beq.n	100121f8 <_write_r+0x20>
100121f6:	602b      	str	r3, [r5, #0]
100121f8:	bd70      	pop	{r4, r5, r6, pc}
100121fa:	46c0      	nop			; (mov r8, r8)
100121fc:	100181d4 	.word	0x100181d4

10012200 <_close_r>:
10012200:	2300      	movs	r3, #0
10012202:	b570      	push	{r4, r5, r6, lr}
10012204:	4c06      	ldr	r4, [pc, #24]	; (10012220 <_close_r+0x20>)
10012206:	0005      	movs	r5, r0
10012208:	0008      	movs	r0, r1
1001220a:	6023      	str	r3, [r4, #0]
1001220c:	f7f8 f97c 	bl	1000a508 <_close>
10012210:	1c43      	adds	r3, r0, #1
10012212:	d103      	bne.n	1001221c <_close_r+0x1c>
10012214:	6823      	ldr	r3, [r4, #0]
10012216:	2b00      	cmp	r3, #0
10012218:	d000      	beq.n	1001221c <_close_r+0x1c>
1001221a:	602b      	str	r3, [r5, #0]
1001221c:	bd70      	pop	{r4, r5, r6, pc}
1001221e:	46c0      	nop			; (mov r8, r8)
10012220:	100181d4 	.word	0x100181d4

10012224 <_fstat_r>:
10012224:	2300      	movs	r3, #0
10012226:	b570      	push	{r4, r5, r6, lr}
10012228:	4c06      	ldr	r4, [pc, #24]	; (10012244 <_fstat_r+0x20>)
1001222a:	0005      	movs	r5, r0
1001222c:	0008      	movs	r0, r1
1001222e:	0011      	movs	r1, r2
10012230:	6023      	str	r3, [r4, #0]
10012232:	f7f8 f96d 	bl	1000a510 <_fstat>
10012236:	1c43      	adds	r3, r0, #1
10012238:	d103      	bne.n	10012242 <_fstat_r+0x1e>
1001223a:	6823      	ldr	r3, [r4, #0]
1001223c:	2b00      	cmp	r3, #0
1001223e:	d000      	beq.n	10012242 <_fstat_r+0x1e>
10012240:	602b      	str	r3, [r5, #0]
10012242:	bd70      	pop	{r4, r5, r6, pc}
10012244:	100181d4 	.word	0x100181d4

10012248 <_isatty_r>:
10012248:	2300      	movs	r3, #0
1001224a:	b570      	push	{r4, r5, r6, lr}
1001224c:	4c06      	ldr	r4, [pc, #24]	; (10012268 <_isatty_r+0x20>)
1001224e:	0005      	movs	r5, r0
10012250:	0008      	movs	r0, r1
10012252:	6023      	str	r3, [r4, #0]
10012254:	f7f8 f962 	bl	1000a51c <_isatty>
10012258:	1c43      	adds	r3, r0, #1
1001225a:	d103      	bne.n	10012264 <_isatty_r+0x1c>
1001225c:	6823      	ldr	r3, [r4, #0]
1001225e:	2b00      	cmp	r3, #0
10012260:	d000      	beq.n	10012264 <_isatty_r+0x1c>
10012262:	602b      	str	r3, [r5, #0]
10012264:	bd70      	pop	{r4, r5, r6, pc}
10012266:	46c0      	nop			; (mov r8, r8)
10012268:	100181d4 	.word	0x100181d4

1001226c <_lseek_r>:
1001226c:	b570      	push	{r4, r5, r6, lr}
1001226e:	0005      	movs	r5, r0
10012270:	0008      	movs	r0, r1
10012272:	0011      	movs	r1, r2
10012274:	2200      	movs	r2, #0
10012276:	4c06      	ldr	r4, [pc, #24]	; (10012290 <_lseek_r+0x24>)
10012278:	6022      	str	r2, [r4, #0]
1001227a:	001a      	movs	r2, r3
1001227c:	f7f8 f950 	bl	1000a520 <_lseek>
10012280:	1c43      	adds	r3, r0, #1
10012282:	d103      	bne.n	1001228c <_lseek_r+0x20>
10012284:	6823      	ldr	r3, [r4, #0]
10012286:	2b00      	cmp	r3, #0
10012288:	d000      	beq.n	1001228c <_lseek_r+0x20>
1001228a:	602b      	str	r3, [r5, #0]
1001228c:	bd70      	pop	{r4, r5, r6, pc}
1001228e:	46c0      	nop			; (mov r8, r8)
10012290:	100181d4 	.word	0x100181d4

10012294 <memchr>:
10012294:	b2c9      	uxtb	r1, r1
10012296:	1882      	adds	r2, r0, r2
10012298:	4290      	cmp	r0, r2
1001229a:	d004      	beq.n	100122a6 <memchr+0x12>
1001229c:	7803      	ldrb	r3, [r0, #0]
1001229e:	428b      	cmp	r3, r1
100122a0:	d002      	beq.n	100122a8 <memchr+0x14>
100122a2:	3001      	adds	r0, #1
100122a4:	e7f8      	b.n	10012298 <memchr+0x4>
100122a6:	2000      	movs	r0, #0
100122a8:	4770      	bx	lr
	...

100122ac <_read_r>:
100122ac:	b570      	push	{r4, r5, r6, lr}
100122ae:	0005      	movs	r5, r0
100122b0:	0008      	movs	r0, r1
100122b2:	0011      	movs	r1, r2
100122b4:	2200      	movs	r2, #0
100122b6:	4c06      	ldr	r4, [pc, #24]	; (100122d0 <_read_r+0x24>)
100122b8:	6022      	str	r2, [r4, #0]
100122ba:	001a      	movs	r2, r3
100122bc:	f7f8 f8ca 	bl	1000a454 <_read>
100122c0:	1c43      	adds	r3, r0, #1
100122c2:	d103      	bne.n	100122cc <_read_r+0x20>
100122c4:	6823      	ldr	r3, [r4, #0]
100122c6:	2b00      	cmp	r3, #0
100122c8:	d000      	beq.n	100122cc <_read_r+0x20>
100122ca:	602b      	str	r3, [r5, #0]
100122cc:	bd70      	pop	{r4, r5, r6, pc}
100122ce:	46c0      	nop			; (mov r8, r8)
100122d0:	100181d4 	.word	0x100181d4

100122d4 <__aeabi_lmul>:
100122d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100122d6:	464f      	mov	r7, r9
100122d8:	4646      	mov	r6, r8
100122da:	b4c0      	push	{r6, r7}
100122dc:	0416      	lsls	r6, r2, #16
100122de:	0c36      	lsrs	r6, r6, #16
100122e0:	4699      	mov	r9, r3
100122e2:	0033      	movs	r3, r6
100122e4:	0405      	lsls	r5, r0, #16
100122e6:	0c2c      	lsrs	r4, r5, #16
100122e8:	0c07      	lsrs	r7, r0, #16
100122ea:	0c15      	lsrs	r5, r2, #16
100122ec:	4363      	muls	r3, r4
100122ee:	437e      	muls	r6, r7
100122f0:	436f      	muls	r7, r5
100122f2:	4365      	muls	r5, r4
100122f4:	0c1c      	lsrs	r4, r3, #16
100122f6:	19ad      	adds	r5, r5, r6
100122f8:	1964      	adds	r4, r4, r5
100122fa:	469c      	mov	ip, r3
100122fc:	42a6      	cmp	r6, r4
100122fe:	d903      	bls.n	10012308 <__aeabi_lmul+0x34>
10012300:	2380      	movs	r3, #128	; 0x80
10012302:	025b      	lsls	r3, r3, #9
10012304:	4698      	mov	r8, r3
10012306:	4447      	add	r7, r8
10012308:	4663      	mov	r3, ip
1001230a:	0c25      	lsrs	r5, r4, #16
1001230c:	19ef      	adds	r7, r5, r7
1001230e:	041d      	lsls	r5, r3, #16
10012310:	464b      	mov	r3, r9
10012312:	434a      	muls	r2, r1
10012314:	4343      	muls	r3, r0
10012316:	0c2d      	lsrs	r5, r5, #16
10012318:	0424      	lsls	r4, r4, #16
1001231a:	1964      	adds	r4, r4, r5
1001231c:	1899      	adds	r1, r3, r2
1001231e:	19c9      	adds	r1, r1, r7
10012320:	0020      	movs	r0, r4
10012322:	bc0c      	pop	{r2, r3}
10012324:	4690      	mov	r8, r2
10012326:	4699      	mov	r9, r3
10012328:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001232a:	46c0      	nop			; (mov r8, r8)

1001232c <BLACK>:
	...

1001232d <WHITE>:
1001232d:	00e0 0c00                                        ...

10012330 <microsoftSansSerif_8ptFontInfo>:
10012330:	200c 007e 27cc 1001 233c 1001               . ~..'..<#..

1001233c <microsoftSansSerif_8ptBitmaps>:
	...
10012348:	8000 8080 8080 8080 8000 0000 9000 9090     ................
	...
10012360:	4800 fc48 4848 fc48 4848 0000 2000 a870     .HH.HHH.HH... p.
10012370:	60a0 2830 70a8 0020 6000 6492 1008 4c20     .`0(.p ..`.d.. L
10012380:	0c92 0000 4000 a0a0 4040 90a8 6890 0000     .....@..@@...h..
10012390:	8000 8080 0000 0000 0000 0000 4000 8080     .............@..
100123a0:	8080 8080 8080 4080 8000 4040 4040 4040     .......@..@@@@@@
100123b0:	4040 8040 a000 a040 0000 0000 0000 0000     @@@...@.........
100123c0:	0000 0000 2020 20f8 0020 0000 0000 0000     ....  .  .......
100123d0:	0000 0000 4000 0080 0000 0000 0000 00c0     .....@..........
	...
100123ec:	8000 0000 1000 1010 2020 4040 8080 0000     ........  @@....
100123fc:	7000 8888 8888 8888 7088 0000 2000 20e0     .p.......p... . 
1001240c:	2020 2020 2020 0000 7000 0888 1008 4020           ...p.... @
1001241c:	f880 0000 7000 0888 3008 0808 7088 0000     .....p...0...p..
1001242c:	1000 3030 5050 f890 1010 0000 f800 8080     ..00PP..........
1001243c:	88f0 0808 7088 0000 7000 8088 f080 8888     .....p...p......
1001244c:	7088 0000 f800 1008 2010 4020 4040 0000     .p.......  @@@..
1001245c:	7000 8888 7088 8888 7088 0000 7000 8888     .p...p...p...p..
1001246c:	7888 0808 7088 0000 0000 0000 0080 0000     .x...p..........
1001247c:	8000 0000 0000 0000 0040 0000 4000 0080     ........@....@..
1001248c:	0000 1000 4020 4080 1020 0000 0000 0000     .... @.@ .......
1001249c:	f800 f800 0000 0000 0000 8000 2040 2010     ............@ . 
100124ac:	8040 0000 7000 0888 1008 2020 2000 0000     @....p....  . ..
100124bc:	0000 001e 8061 8040 408e 4092 4092 c08d     ....a.@..@.@.@..
100124cc:	0040 0060 001f 0000 1000 2810 4428 7c44     @.`........((DD|
100124dc:	8282 0000 f000 8888 f088 8888 f088 0000     ................
100124ec:	7800 8084 8080 8080 7884 0000 f000 8488     .x.......x......
100124fc:	8484 8484 f088 0000 f800 8080 f080 8080     ................
1001250c:	f880 0000 f800 8080 f080 8080 8080 0000     ................
1001251c:	7800 8084 9c80 8484 748c 0000 8400 8484     .x.......t......
1001252c:	fc84 8484 8484 0000 8000 8080 8080 8080     ................
1001253c:	8080 0000 1000 1010 1010 9010 6090 0000     .............`..
1001254c:	8800 a090 c0c0 90a0 8488 0000 8000 8080     ................
1001255c:	8080 8080 f880 0000 8200 c682 aac6 92aa     ................
1001256c:	8292 0000 8400 c4c4 a4a4 8c94 848c 0000     ................
1001257c:	7800 8484 8484 8484 7884 0000 f800 8484     .x.......x......
1001258c:	f884 8080 8080 0000 7800 8484 8484 9484     .........x......
1001259c:	788c 0004 f800 8484 f884 8484 8484 0000     .x..............
100125ac:	7000 8088 7080 0808 7088 0000 f800 2020     .p...p...p....  
100125bc:	2020 2020 2020 0000 8400 8484 8484 8484           ..........
100125cc:	7884 0000 8200 4482 4444 2828 1010 0000     .x.....DDD((....
100125dc:	0000 2080 2080 4044 4044 4044 802a 802a     ... . D@D@D@*.*.
100125ec:	0011 0011 0000 0000 8200 4482 1028 4428     ...........D(.(D
100125fc:	8282 0000 8200 4482 1028 1010 1010 0000     .......D(.......
1001260c:	fe00 0402 1008 4020 fe80 0000 c000 8080     ...... @........
1001261c:	8080 8080 8080 c080 8000 8080 4040 2020     ............@@  
1001262c:	1010 0000 c000 4040 4040 4040 4040 c040     ......@@@@@@@@@.
1001263c:	5020 0088 0000 0000 0000 0000 0000 0000      P..............
1001264c:	0000 0000 0000 fc00 8000 0040 0000 0000     ..........@.....
	...
10012664:	0870 8878 7888 0000 8000 8080 88f0 8888     p.x..x..........
10012674:	f088 0000 0000 0000 8870 8080 7088 0000     ........p....p..
10012684:	0800 0808 8878 8888 7888 0000 0000 0000     ....x....x......
10012694:	8870 80f8 7088 0000 4000 8080 80c0 8080     p....p...@......
100126a4:	8080 0000 0000 0000 8878 8888 7888 f008     ........x....x..
100126b4:	8000 8080 c8b0 8888 8888 0000 8000 0000     ................
100126c4:	8080 8080 8080 0000 8000 0000 8080 8080     ................
100126d4:	8080 8080 8000 8080 a090 a0c0 8890 0000     ................
100126e4:	8000 8080 8080 8080 8080 0000 0000 0000     ................
100126f4:	92ec 9292 9292 0000 0000 0000 c8b0 8888     ................
10012704:	8888 0000 0000 0000 8870 8888 7088 0000     ........p....p..
10012714:	0000 0000 88f0 8888 f088 8080 0000 0000     ................
10012724:	8878 8888 7888 0808 0000 0000 80c0 8080     x....x..........
10012734:	8080 0000 0000 0000 9060 2040 6090 0000     ........`.@ .`..
10012744:	0000 8080 80c0 8080 4080 0000 0000 0000     .........@......
10012754:	8888 8888 6898 0000 0000 0000 8888 5050     .....h........PP
10012764:	2020 0000 0000 0000 9292 aaaa 4444 0000       ..........DD..
10012774:	0000 0000 9090 6060 9090 0000 0000 0000     ......``........
10012784:	4848 4848 2030 c020 0000 0000 10f0 4020     HHHH0  ....... @
10012794:	f080 0000 4020 4040 8040 4040 4040 0020     .... @@@@.@@@@ .
100127a4:	8000 8080 8080 8080 8080 0080 4080 4040     .............@@@
100127b4:	2040 4040 4040 0080 0000 9864 0000 0000     @ @@@@....d.....
	...

100127cc <microsoftSansSerif_8ptDescriptors>:
100127cc:	0002 0000 0001 000c 0004 0018 0006 0024     ..............$.
100127dc:	0005 0030 0007 003c 0005 0048 0001 0054     ..0...<...H...T.
100127ec:	0002 0060 0002 006c 0003 0078 0005 0084     ..`...l...x.....
100127fc:	0002 0090 0002 009c 0001 00a8 0004 00b4     ................
1001280c:	0005 00c0 0003 00cc 0005 00d8 0005 00e4     ................
1001281c:	0005 00f0 0005 00fc 0005 0108 0005 0114     ................
1001282c:	0005 0120 0005 012c 0001 0138 0002 0144     .. ...,...8...D.
1001283c:	0004 0150 0005 015c 0004 0168 0005 0174     ..P...\...h...t.
1001284c:	000a 0180 0007 0198 0005 01a4 0006 01b0     ................
1001285c:	0006 01bc 0005 01c8 0005 01d4 0006 01e0     ................
1001286c:	0006 01ec 0001 01f8 0004 0204 0006 0210     ................
1001287c:	0005 021c 0007 0228 0006 0234 0006 0240     ......(...4...@.
1001288c:	0006 024c 0006 0258 0006 0264 0005 0270     ..L...X...d...p.
1001289c:	0005 027c 0006 0288 0007 0294 000b 02a0     ..|.............
100128ac:	0007 02b8 0007 02c4 0007 02d0 0002 02dc     ................
100128bc:	0004 02e8 0002 02f4 0005 0300 0006 030c     ................
100128cc:	0002 0318 0005 0324 0005 0330 0005 033c     ......$...0...<.
100128dc:	0005 0348 0005 0354 0002 0360 0005 036c     ..H...T...`...l.
100128ec:	0005 0378 0001 0384 0001 0390 0005 039c     ..x.............
100128fc:	0001 03a8 0007 03b4 0005 03c0 0005 03cc     ................
1001290c:	0005 03d8 0005 03e4 0002 03f0 0004 03fc     ................
1001291c:	0002 0408 0005 0414 0005 0420 0007 042c     .......... ...,.
1001292c:	0004 0438 0005 0444 0004 0450 0003 045c     ..8...D...P...\.
1001293c:	0001 0468 0003 0474 0006 0480 9474 1000     ..h...t.....t...
1001294c:	9482 1000 9490 1000 949e 1000 94ac 1000     ................
1001295c:	94ba 1000 94c8 1000 94d8 1000 94e8 1000     ................
1001296c:	94f8 1000 9508 1000 9518 1000 9528 1000     ............(...
1001297c:	9538 1000 9548 1000 9558 1000 9568 1000     8...H...X...h...
1001298c:	9578 1000 9588 1000 9598 1000 95a8 1000     x...............
1001299c:	95b8 1000 95c8 1000 95d8 1000 95e8 1000     ................
100129ac:	95f8 1000 9608 1000 9618 1000 9626 1000     ............&...
100129bc:	9634 1000 9642 1000 9650 1000 965e 1000     4...B...P...^...
100129cc:	966c 1000 967a 1000 9688 1000 9698 1000     l...z...........
100129dc:	96a8 1000 96b8 1000 96c8 1000 96d8 1000     ................
100129ec:	96e8 1000 96f8 1000 9708 1000 9718 1000     ................
100129fc:	9728 1000 9738 1000 9748 1000 9758 1000     (...8...H...X...
10012a0c:	9768 1000 9778 1000 9788 1000 9796 1000     h...x...........
10012a1c:	97a4 1000 97d0 1000 97de 1000 97ec 1000     ................
10012a2c:	97fa 1000 9808 1000 9816 1000 9824 1000     ............$...
10012a3c:	9832 1000 9840 1000 984e 1000 985c 1000     2...@...N...\...
10012a4c:	986a 1000 9878 1000 9886 1000 9894 1000     j...x...........
10012a5c:	98a2 1000 98b0 1000 98be 1000 98cc 1000     ................
10012a6c:	98da 1000 98e8 1000 98f6 1000 9904 1000     ................
10012a7c:	9912 1000 9920 1000 992e 1000 993c 1000     .... .......<...
10012a8c:	994a 1000 9958 1000 9966 1000 9974 1000     J...X...f...t...
10012a9c:	9982 1000 9990 1000 999e 1000 99ac 1000     ................
10012aac:	99ba 1000 99c8 1000 99d6 1000 99e4 1000     ................
10012abc:	99f2 1000 9a00 1000 9a0e 1000 9a1c 1000     ................
10012acc:	9a2a 1000 9a38 1000 9a46 1000 9a54 1000     *...8...F...T...
10012adc:	9a62 1000 9a70 1000 9a7e 1000 9a8c 1000     b...p...~.......
10012aec:	9a9a 1000 9aa8 1000 9ab6 1000 9b50 1000     ............P...
10012afc:	9b78 1000 9ba0 1000 9bc8 1000 9e08 1000     x...............
10012b0c:	9bf8 1000 9c10 1000 9c88 1000 9ca0 1000     ................
10012b1c:	9c28 1000 9c40 1000 9c58 1000 9c70 1000     (...@...X...p...
10012b2c:	9cb8 1000 9f7c 1000 9f7c 1000 9f7c 1000     ....|...|...|...
10012b3c:	9f7c 1000 9f7c 1000 9f7c 1000 9f7c 1000     |...|...|...|...
10012b4c:	9f7c 1000 9d60 1000 9d78 1000 9d90 1000     |...`...x.......
10012b5c:	9e1e 1000 9ce8 1000 9f7c 1000 9f7c 1000     ........|...|...
10012b6c:	9f7c 1000 9f7c 1000 9f7c 1000 9f7c 1000     |...|...|...|...
10012b7c:	9da8 1000 9dc0 1000 9dd8 1000 9df0 1000     ................
10012b8c:	9f7c 1000 9f34 1000 9f4c 1000 9f7c 1000     |...4...L...|...
10012b9c:	9f7c 1000 9e4a 1000 9e60 1000 9e76 1000     |...J...`...v...
10012bac:	9e8c 1000 9f7c 1000 9f7c 1000 9f7c 1000     ....|...|...|...
10012bbc:	9f7c 1000 9f7c 1000 9f7c 1000 9f7c 1000     |...|...|...|...
10012bcc:	9f7c 1000 9b3c 1000 9b64 1000 9b8c 1000     |...<...d.......
10012bdc:	9bb4 1000 9be0 1000 9cd0 1000 9d00 1000     ................
10012bec:	9d18 1000 9d30 1000 9d48 1000 9e34 1000     ....0...H...4...
10012bfc:	9ea2 1000 9f1c 1000 9f64 1000 c51b a5d5     ........d.......
10012c0c:	0002 85a6 11e5 3935 bba0 fd5a 0000 0000     ......59..Z.....

10012c1c <csc_gatt_client_handle>:
10012c1c:	a539 1000 0000 0000 a551 1000 a569 1000     9.......Q...i...
10012c2c:	a645 1000 0000 0000 0000 0000 0000 0000     E...............
10012c3c:	a581 1000 0000 0000                         ........

10012c44 <csc_gap_handle>:
	...
10012c58:	a5c9 1000 a525 1000 0000 0000 0000 0000     ....%...........
10012c68:	a6dd 1000 0000 0000 0000 0000 0000 0000     ................
10012c78:	0000 0000 a6dd 1000 0000 0000 0000 0000     ................
	...
10012c90:	000d 0000 6146 6c69 6465 7420 206f 7473     ....Failed to st
10012ca0:	7261 2074 6573 7672 6369 2065 6964 6373     art service disc
10012cb0:	766f 7265 2e79 7320 6174 7574 2073 203d     overy. status = 
10012cc0:	6425 0000 6146 6c69 7420 206f 7473 7261     %d..Fail to star
10012cd0:	2074 6964 6373 766f 7265 6320 6168 6172     t discover chara
10012ce0:	7463 7265 7369 6974 0063 0000 6544 6373     cteristic...Desc
10012cf0:	6972 7470 726f 4420 7369 6f63 6576 7972     riptor Discovery
10012d00:	4620 6961 656c 0064 0a0d 6146 6c69 6465      Failed...Failed
10012d10:	7420 206f 6573 646e 6320 6168 6172 7463      to send charact
10012d20:	7265 7369 6974 2063 7257 7469 2065 6552     eristic Write Re
10012d30:	7571 7365 0074 0000 6441 6576 7472 7369     quest...Advertis
10012d40:	6d65 6e65 2074 6164 6174 7320 7465 6620     ement data set f
10012d50:	6961 656c 2064 6572 7361 6e6f 2520 0064     ailed reason %d.
10012d60:	6544 6976 6563 5320 6174 7472 6465 4120     Device Started A
10012d70:	7664 7265 6974 6573 656d 746e 0000 0000     dvertisement....
10012d80:	6544 6976 6563 4120 7664 7265 6974 6573     Device Advertise
10012d90:	656d 746e 4620 6961 656c 0064               ment Failed.

10012d9c <csc_gatt_server_handle>:
10012d9c:	a535 1000 0000 0000 a5c5 1000 0000 0000     5...............
	...
10012dc4:	a90c 1000 a90e 1000 a8f4 1000 a8f4 1000     ................
10012dd4:	a8f4 1000 a90c 1000 a8f4 1000 a8f4 1000     ................
10012de4:	b15a 1000 b1ce 1000 b142 1000 b1d4 1000     Z.......B.......
10012df4:	b148 1000 b14e 1000 b154 1000 b82c 1000     H...N...T...,...
10012e04:	b82c 1000 b82c 1000 b82c 1000 b82c 1000     ,...,...,...,...
10012e14:	b82c 1000 b82c 1000 b82c 1000 b82c 1000     ,...,...,...,...
10012e24:	b82c 1000 b82c 1000 b82c 1000 b82c 1000     ,...,...,...,...
10012e34:	b82c 1000 b82c 1000 b82c 1000 b82c 1000     ,...,...,...,...
10012e44:	b82c 1000 b82c 1000 b84a 1000 b84a 1000     ,...,...J...J...
10012e54:	b84a 1000 b84a 1000 b84a 1000 b84a 1000     J...J...J...J...
10012e64:	b84a 1000 b84a 1000 b84a 1000 b84a 1000     J...J...J...J...
10012e74:	b86c 1000 b86c 1000 b86c 1000 b86c 1000     l...l...l...l...
10012e84:	b86c 1000 b86c 1000 b86c 1000 b86c 1000     l...l...l...l...
10012e94:	b86c 1000 b86c 1000 b88e 1000 b88e 1000     l...l...........
10012ea4:	b88e 1000 b88e 1000 b88e 1000 b88e 1000     ................
10012eb4:	b8a8 1000 b8a8 1000 b8a8 1000 b8a8 1000     ................
10012ec4:	b8a8 1000 b8a8 1000 b8a8 1000 b8a8 1000     ................
10012ed4:	b8a8 1000 b8c2 1000 b8c2 1000 b8e4 1000     ................
10012ee4:	b8e4 1000 b8fe 1000 b8e4 1000 3231 3433     ............1234
10012ef4:	3635 0000 ab00 efcd cdab 00ef c51b a5d5     56..............
10012f04:	0002 85a6 11e5 3935 bba0 fd5a 0000 0000     ......59..Z.....
10012f14:	0600 b2d6 05f0 f8f0 0000 0000               ............

10012f20 <ble_mgr_gatt_server_handle>:
	...
10012f38:	a851 1000 a88d 1000 a855 1000 0000 0000     Q.......U.......
10012f48:	6353 6e61 696e 676e 2020 6166 6c69 6465     Scanning  failed
10012f58:	0000 0000 544d 2055 6843 6e61 6567 4620     ....MTU Change F
10012f68:	6961 656c 2c64 4320 6e6f 656e 7463 6f69     ailed, Connectio
10012f78:	206e 6148 646e 656c 253a 2c64 4f20 6570     n Handle:%d, Ope
10012f88:	6172 6974 6e6f 253a 0064 0000 6544 6976     ration:%d...Devi
10012f98:	6563 6420 7369 6f63 6e6e 6365 6574 2064     ce disconnected 
10012fa8:	6552 7361 6e6f 303a 2578 3230 2078 6148     Reason:0x%02x Ha
10012fb8:	646e 656c 303d 2578 0078 0000 6e45 7263     ndle=0x%x...Encr
10012fc8:	7079 6974 6e6f 6620 6961 656c 0064 0000     yption failed...
10012fd8:	6e45 7263 7079 6974 6e6f 6320 6d6f 6c70     Encryption compl
10012fe8:	7465 6465 7320 6375 6563 7373 7566 6c6c     eted successfull
10012ff8:	0079 0000 4c42 2045 6544 6976 6563 6e20     y...BLE Device n
10013008:	746f 6620 756f 646e 6520 636e 7972 7470     ot found encrypt
10013018:	6f69 206e 6e69 6f66 0000 0000 6e49 6f66     ion info....Info
10013028:	6d3a 7861 6d69 6d75 6e20 2e6f 666f 7320     :maximum no.of s
10013038:	6163 206e 6564 6976 6563 7220 6165 6863     can device reach
10013048:	6465 2e2e 532e 6f74 7070 6e69 2067 6353     ed...Stopping Sc
10013058:	6e61 0000 6146 6c69 6465 7420 206f 7473     an..Failed to st
10013068:	706f 7320 6163 6e6e 6e69 0067 6150 7269     op scanning.Pair
10013078:	6e69 2067 6166 6c69 6465 2e2e 442e 7369     ing failed...Dis
10013088:	6f63 6e6e 6365 6974 676e 0000 6944 6373     connecting..Disc
10013098:	6e6f 656e 7463 5220 7165 6575 7473 4620     onnect Request F
100130a8:	6961 656c 0064 0000 6150 7269 6e69 2067     ailed...Pairing 
100130b8:	7270 636f 6465 7275 2065 6f63 706d 656c     procedure comple
100130c8:	6574 2064 7573 6363 7365 6673 6c75 796c     ted successfully
100130d8:	0000 0000 4c42 2045 6544 6976 6563 6e20     ....BLE Device n
100130e8:	746f 6620 756f 646e 7420 206f 7473 726f     ot found to stor
100130f8:	2065 6874 2065 6170 7269 6e69 2067 6e69     e the pairing in
10013108:	6f66 0000 6e45 7263 7079 6974 6e6f 4e20     fo..Encryption N
10013118:	746f 7320 6174 7472 6465 0000 6c53 7661     ot started..Slav
10013128:	2065 6553 7563 6972 7974 5220 7165 2d20     e Security Req -
10013138:	4120 7475 6568 746e 6369 7461 6f69 206e      Authentication 
10013148:	6146 6c69 6465 0000 6150 7269 5220 7165     Failed..Pair Req
10013158:	6575 7473 2d20 4120 7475 6568 746e 6369     uest - Authentic
10013168:	7461 6f69 206e 6146 6c69 6465 0000 0000     ation Failed....
10013178:	6e45 6574 2072 6874 2065 6150 7373 656b     Enter the Passke
10013188:	2879 2d36 6944 6967 2974 6920 206e 6554     y(6-Digit) in Te
10013198:	6d72 6e69 6c61 003a 6950 206e 6954 656d     rminal:.Pin Time
100131a8:	756f 0074 6944 6373 6e6f 656e 7463 6e69     out.Disconnectin
100131b8:	2067 2e2e 002e 0000 6c50 6165 6573 4520     g ......Please E
100131c8:	746e 7265 7420 6568 6620 6c6f 6f6c 6977     nter the followi
100131d8:	676e 5020 7361 2d73 6f63 6564 6f28 206e     ng Pass-code(on 
100131e8:	746f 6568 2072 6544 6976 6563 3a29 0000     other Device):..
100131f8:	6150 7269 6b2d 7965 7220 7065 796c 6620     Pair-key reply f
10013208:	6961 656c 0064 0000 4f4f 2042 6546 7461     ailed...OOB Feat
10013218:	7275 2065 6f4e 2074 7573 7070 726f 6574     ure Not supporte
10013228:	0064 0000 6e45 6574 6572 2064 6150 7373     d...Entered Pass
10013238:	632d 646f 3a65 0000 6150 7269 6e69 2067     -code:..Pairing 
10013248:	6e69 6f66 6d72 7461 6f69 206e 666f 7020     information of p
10013258:	6565 2072 6564 6976 6563 6920 2073 6f6e     eer device is no
10013268:	2074 7661 6961 616c 6c62 2e65 0000 0000     t available.....
10013278:	6c50 6165 6573 7520 706e 6961 2072 6874     Please unpair th
10013288:	2065 6564 6976 6563 6620 6f72 206d 6570     e device from pe
10013298:	7265 6420 7665 6369 2865 6f6d 6962 656c     er device(mobile
100132a8:	2029 6573 7474 6e69 7367 6d20 6e65 2075     ) settings menu 
100132b8:	6e61 2064 7473 7261 2074 6170 7269 6e69     and start pairin
100132c8:	2067 6761 6961 006e 6e45 7263 7079 6974     g again.Encrypti
100132d8:	6e6f 5220 7165 6575 7473 5220 7065 796c     on Request Reply
100132e8:	4620 6961 656c 0064 6e49 7469 6169 696c      Failed.Initiali
100132f8:	697a 676e 5320 4d41 3142 0031 4153 424d     zing SAMB11.SAMB
10013308:	3131 4920 696e 6974 6c61 7a69 7461 6f69     11 Initializatio
10013318:	206e 6166 6c69 6465 0000 0000 6c50 6165     n failed....Plea
10013328:	6573 6320 6568 6b63 7420 6568 7020 776f     se check the pow
10013338:	7265 6120 646e 6320 6e6f 656e 7463 6f69     er and connectio
10013348:	206e 202f 6168 6472 6177 6572 6320 6e6f     n / hardware con
10013358:	656e 7463 726f 0000 484b 554c 2d47 5753     nector..KHLUG-SW
10013368:	0000 0000 6544 6976 6563 6e20 6d61 2065     ....Device name 
10013378:	6573 2074 6166 6c69 6465 0000 4442 6120     set failed..BD a
10013388:	6464 6572 7373 6720 7465 6620 6961 656c     ddress get faile
10013398:	0064 0000 4442 4120 6464 6572 7373 303a     d...BD Address:0
100133a8:	2578 3230 2558 3230 2558 3230 2558 3230     x%02X%02X%02X%02
100133b8:	2558 3230 2558 3230 2c58 4120 6464 6572     X%02X%02X, Addre
100133c8:	7373 5420 7079 3a65 6425 0000 6553 2074     ss Type:%d..Set 
100133d8:	4c42 2045 6544 6976 6563 6320 6e6f 6966     BLE Device confi
100133e8:	7567 6172 6974 6e6f 6620 6961 656c 0064     guration failed.
100133f8:	6553 2074 4c42 2045 6544 6976 6563 4120     Set BLE Device A
10013408:	6464 6572 7373 6620 6961 656c 0064 0000     ddress failed...
10013418:	6353 6e61 696e 676e 2e2e 502e 656c 7361     Scanning...Pleas
10013428:	2065 6177 7469 2e2e 002e 0000 6c53 7661     e wait......Slav
10013438:	2065 6573 7563 6972 7974 7220 7165 6575     e security reque
10013448:	7473 6620 6961 656c 0064 0000 6f43 6e6e     st failed...Conn
10013458:	6365 6574 2064 6f74 7020 6565 2072 6564     ected to peer de
10013468:	6976 6563 7720 7469 2068 6461 7264 7365     vice with addres
10013478:	2073 7830 3025 7832 3025 7832 3025 7832     s 0x%02x%02x%02x
10013488:	3025 7832 3025 7832 3025 7832 0000 0000     %02x%02x%02x....
10013498:	6f43 6e6e 6365 6974 6e6f 4820 6e61 6c64     Connection Handl
100134a8:	2065 6425 0000 0000 6552 6f73 766c 6e69     e %d....Resolvin
100134b8:	2067 6152 646e 6d6f 6120 6464 6572 7373     g Random address
100134c8:	6620 6961 656c 2a64 002a 0000 614d 2078      failed**...Max 
100134d8:	756e 626d 7265 6f20 2066 6f63 6e6e 6365     number of connec
100134e8:	6974 6e6f 7220 6165 6863 6465 203a 6425     tion reached: %d
100134f8:	3d20 3d3d 443e 7369 6f63 6e6e 6365 6974      ===>Disconnecti
10013508:	676e 2e2e 002e 0000 6544 6976 6563 4320     ng......Device C
10013518:	6e6f 656e 7463 6f69 206e 6146 6c69 6465     onnection Failed
10013528:	2d20 5320 6174 7574 3a73 2520 0064 0000      - Status: %d...
10013538:	4c42 2045 6441 6576 7472 7369 6d65 6e65     BLE Advertisemen
10013548:	2074 6164 6174 7320 7465 6620 6961 656c     t data set faile
10013558:	0064 0000                                   d...

1001355c <ble_mgr_gap_handle>:
1001355c:	a84d 1000 aa09 1000 a865 1000 0000 0000     M.......e.......
1001356c:	0000 0000 b4f5 1000 a8bd 1000 a861 1000     ............a...
1001357c:	aba9 1000 aa89 1000 adad 1000 abc1 1000     ................
1001358c:	af01 1000 b045 1000 a945 1000 b731 1000     ....E...E...1...
	...
100135a8:	c51b a5d5 0002 85a6 11e5 3935 bba0 fd5a     ..........59..Z.
100135b8:	0000 0000 c51b a5d5 0002 85a6 11e5 3935     ..............59
100135c8:	bba1 fd5a 0000 0000 7461 625f 656c 635f     ..Z.....at_ble_c
100135d8:	6168 6172 7463 7265 7369 6974 5f63 6176     haracteristic_va
100135e8:	756c 5f65 6567 2074 6176 756c 2065 6567     lue_get value ge
100135f8:	2074 6166 6c69 6465 0000 0000 7461 625f     t failed....at_b
10013608:	656c 635f 6168 6172 7463 7265 7369 6974     le_characteristi
10013618:	5f63 6176 756c 5f65 6573 2074 6176 756c     c_value_set valu
10013628:	2065 6573 2074 6166 6c69 6465 0000 0000     e set failed....
10013638:	7461 625f 656c 6e5f 746f 6669 6369 7461     at_ble_notificat
10013648:	6f69 5f6e 6573 646e 2020 6166 6c69 6465     ion_send  failed
10013658:	0000 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
10013668:	4320 7375 6f74 206d 6553 6972 6c61 4320      Custom Serial C
10013678:	6168 2074 7041 6c70 6369 7461 6f69 006e     hat Application.

10013688 <app_gap_handle>:
	...
1001369c:	c6d1 1000 c6d5 1000 0000 0000 0000 0000     ................
	...
100136d4:	7441 656d 206c 6f43 7072 022e                    Atmel Corp.

100136df <CSWTCH.45>:
100136df:	0402 0010                                        ...

100136e2 <CSWTCH.47>:
100136e2:	0300 0301 0303 0303 0303 0303 0303 0202          ...............

100136f1 <client_conf_uuid>:
100136f1:	2902                                        .)

100136f3 <presentation_format_uuid>:
100136f3:	2904                                        .)

100136f5 <user_desc_uuid>:
100136f5:	2901                                        .)

100136f7 <server_conf_uuid>:
100136f7:	2903                                        .)

100136f9 <extended_props_uuid>:
100136f9:	2900                                        .)

100136fb <include_uuid>:
100136fb:	2802                                        .(

100136fd <char_uuid>:
100136fd:	2803 4000 0103 0010 0102 0010 0102 fe10     .(.@............
1001370d:	0101 1810 0103 1810 0103 0a10 0103 fe10     ................
1001371d:	0101 1810 0103 0a10 0103 1810 0103 fe10     ................
1001372d:	0101 2010 0103 2010 0103 2010 0103 2010     ... ... ... ... 
1001373d:	0105 4310 0000 0400                              ...C...

10013744 <_global_impure_ptr>:
10013744:	3804 1001                                   .8..

10013748 <__sf_fake_stdin>:
	...

10013768 <__sf_fake_stdout>:
	...

10013788 <__sf_fake_stderr>:
	...
100137a8:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
100137b8:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
100137c8:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
100137d8:	6665 0000                                   ef..

100137dc <_init>:
100137dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100137de:	46c0      	nop			; (mov r8, r8)
100137e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100137e2:	bc08      	pop	{r3}
100137e4:	469e      	mov	lr, r3
100137e6:	4770      	bx	lr

100137e8 <__init_array_start>:
100137e8:	100080b1 	.word	0x100080b1

100137ec <_fini>:
100137ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100137ee:	46c0      	nop			; (mov r8, r8)
100137f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100137f2:	bc08      	pop	{r3}
100137f4:	469e      	mov	lr, r3
100137f6:	4770      	bx	lr

100137f8 <__fini_array_start>:
100137f8:	10008089 	.word	0x10008089
