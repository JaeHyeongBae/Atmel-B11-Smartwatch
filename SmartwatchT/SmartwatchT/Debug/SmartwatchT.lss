
SmartwatchT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021a4  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  1000a1a4  1000a1a4  0000a1a4  2**0
                  CONTENTS
  2 .bss          00001868  1000a1a4  1000a1a4  0000a1a4  2**2
                  ALLOC
  3 .stack        00000804  1000ba0c  1000ba0c  0000a1a4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0000a1a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001a261  00000000  00000000  0000a225  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001899  00000000  00000000  00024486  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002aea  00000000  00000000  00025d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000408  00000000  00000000  00028809  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000438  00000000  00000000  00028c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d0fb  00000000  00000000  00029049  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000641c  00000000  00000000  00046144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00122f83  00000000  00000000  0004c560  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000904  00000000  00000000  0016f4e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1000a1a4 	.word	0x1000a1a4
10008068:	1000a1a4 	.word	0x1000a1a4
1000806c:	1000a1a4 	.word	0x1000a1a4
10008070:	1000ba0c 	.word	0x1000ba0c
10008074:	1000a1a4 	.word	0x1000a1a4
10008078:	1000a1a8 	.word	0x1000a1a8
1000807c:	1000a1a8 	.word	0x1000a1a8
10008080:	10009e79 	.word	0x10009e79
10008084:	10009cdd 	.word	0x10009cdd

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	1000a1a4 	.word	0x1000a1a4
100080a8:	00000000 	.word	0x00000000
100080ac:	1000a1a4 	.word	0x1000a1a4

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	1000a1a8 	.word	0x1000a1a8
100080dc:	1000a1a4 	.word	0x1000a1a4
100080e0:	1000a1a4 	.word	0x1000a1a4
100080e4:	00000000 	.word	0x00000000

100080e8 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
100080e8:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
100080ea:	4b0d      	ldr	r3, [pc, #52]	; (10008120 <dualtimer_isr_handler+0x38>)
100080ec:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
100080ee:	2b00      	cmp	r3, #0
100080f0:	d007      	beq.n	10008102 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
100080f2:	2201      	movs	r2, #1
100080f4:	4b0a      	ldr	r3, [pc, #40]	; (10008120 <dualtimer_isr_handler+0x38>)
100080f6:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
100080f8:	4b0a      	ldr	r3, [pc, #40]	; (10008124 <dualtimer_isr_handler+0x3c>)
100080fa:	681b      	ldr	r3, [r3, #0]
100080fc:	2b00      	cmp	r3, #0
100080fe:	d000      	beq.n	10008102 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008100:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008102:	2334      	movs	r3, #52	; 0x34
10008104:	4a06      	ldr	r2, [pc, #24]	; (10008120 <dualtimer_isr_handler+0x38>)
10008106:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008108:	2b00      	cmp	r3, #0
1000810a:	d007      	beq.n	1000811c <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000810c:	2101      	movs	r1, #1
1000810e:	232c      	movs	r3, #44	; 0x2c
10008110:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008112:	4b05      	ldr	r3, [pc, #20]	; (10008128 <dualtimer_isr_handler+0x40>)
10008114:	681b      	ldr	r3, [r3, #0]
10008116:	2b00      	cmp	r3, #0
10008118:	d000      	beq.n	1000811c <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000811a:	4798      	blx	r3
	}
}
1000811c:	bd10      	pop	{r4, pc}
1000811e:	46c0      	nop			; (mov r8, r8)
10008120:	40001000 	.word	0x40001000
10008124:	1000a1c0 	.word	0x1000a1c0
10008128:	1000a1c4 	.word	0x1000a1c4

1000812c <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000812c:	2301      	movs	r3, #1
1000812e:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008130:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008132:	2202      	movs	r2, #2
10008134:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008136:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008138:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000813a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000813c:	2200      	movs	r2, #0
1000813e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008140:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008142:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008144:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008146:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008148:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000814a:	7602      	strb	r2, [r0, #24]
}
1000814c:	4770      	bx	lr
1000814e:	46c0      	nop			; (mov r8, r8)

10008150 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008150:	2800      	cmp	r0, #0
10008152:	d102      	bne.n	1000815a <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
10008154:	4b02      	ldr	r3, [pc, #8]	; (10008160 <dualtimer_get_value+0x10>)
10008156:	6858      	ldr	r0, [r3, #4]
10008158:	e001      	b.n	1000815e <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000815a:	4b01      	ldr	r3, [pc, #4]	; (10008160 <dualtimer_get_value+0x10>)
1000815c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000815e:	4770      	bx	lr
10008160:	40001000 	.word	0x40001000

10008164 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10008164:	2800      	cmp	r0, #0
10008166:	d107      	bne.n	10008178 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008168:	2900      	cmp	r1, #0
1000816a:	d102      	bne.n	10008172 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000816c:	4b06      	ldr	r3, [pc, #24]	; (10008188 <dualtimer_set_counter+0x24>)
1000816e:	601a      	str	r2, [r3, #0]
10008170:	e009      	b.n	10008186 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
10008172:	4b05      	ldr	r3, [pc, #20]	; (10008188 <dualtimer_set_counter+0x24>)
10008174:	619a      	str	r2, [r3, #24]
10008176:	e006      	b.n	10008186 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008178:	2900      	cmp	r1, #0
1000817a:	d102      	bne.n	10008182 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000817c:	4b02      	ldr	r3, [pc, #8]	; (10008188 <dualtimer_set_counter+0x24>)
1000817e:	621a      	str	r2, [r3, #32]
10008180:	e001      	b.n	10008186 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008182:	4b01      	ldr	r3, [pc, #4]	; (10008188 <dualtimer_set_counter+0x24>)
10008184:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10008186:	4770      	bx	lr
10008188:	40001000 	.word	0x40001000

1000818c <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000818c:	2800      	cmp	r0, #0
1000818e:	d105      	bne.n	1000819c <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008190:	4a06      	ldr	r2, [pc, #24]	; (100081ac <dualtimer_enable+0x20>)
10008192:	7a11      	ldrb	r1, [r2, #8]
10008194:	2380      	movs	r3, #128	; 0x80
10008196:	430b      	orrs	r3, r1
10008198:	7213      	strb	r3, [r2, #8]
1000819a:	e005      	b.n	100081a8 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000819c:	4903      	ldr	r1, [pc, #12]	; (100081ac <dualtimer_enable+0x20>)
1000819e:	2228      	movs	r2, #40	; 0x28
100081a0:	5c88      	ldrb	r0, [r1, r2]
100081a2:	2380      	movs	r3, #128	; 0x80
100081a4:	4303      	orrs	r3, r0
100081a6:	548b      	strb	r3, [r1, r2]
	}
}
100081a8:	4770      	bx	lr
100081aa:	46c0      	nop			; (mov r8, r8)
100081ac:	40001000 	.word	0x40001000

100081b0 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081b0:	b570      	push	{r4, r5, r6, lr}
100081b2:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
100081b4:	2004      	movs	r0, #4
100081b6:	4b39      	ldr	r3, [pc, #228]	; (1000829c <dualtimer_init+0xec>)
100081b8:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100081ba:	7823      	ldrb	r3, [r4, #0]
100081bc:	2b00      	cmp	r3, #0
100081be:	d102      	bne.n	100081c6 <dualtimer_init+0x16>
100081c0:	7b23      	ldrb	r3, [r4, #12]
100081c2:	2b00      	cmp	r3, #0
100081c4:	d065      	beq.n	10008292 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081c6:	4936      	ldr	r1, [pc, #216]	; (100082a0 <dualtimer_init+0xf0>)
100081c8:	68ca      	ldr	r2, [r1, #12]
100081ca:	2320      	movs	r3, #32
100081cc:	4313      	orrs	r3, r2
100081ce:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
100081d0:	7e22      	ldrb	r2, [r4, #24]
100081d2:	698b      	ldr	r3, [r1, #24]
100081d4:	2003      	movs	r0, #3
100081d6:	4002      	ands	r2, r0
100081d8:	0112      	lsls	r2, r2, #4
100081da:	302d      	adds	r0, #45	; 0x2d
100081dc:	4383      	bics	r3, r0
100081de:	4313      	orrs	r3, r2
100081e0:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
100081e2:	7823      	ldrb	r3, [r4, #0]
100081e4:	2b00      	cmp	r3, #0
100081e6:	d026      	beq.n	10008236 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081e8:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
100081ea:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081ec:	2b00      	cmp	r3, #0
100081ee:	d003      	beq.n	100081f8 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
100081f0:	3b02      	subs	r3, #2
100081f2:	425d      	negs	r5, r3
100081f4:	415d      	adcs	r5, r3
100081f6:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
100081f8:	78a2      	ldrb	r2, [r4, #2]
100081fa:	0052      	lsls	r2, r2, #1
100081fc:	2502      	movs	r5, #2
100081fe:	402a      	ands	r2, r5
10008200:	78e3      	ldrb	r3, [r4, #3]
10008202:	009b      	lsls	r3, r3, #2
10008204:	350a      	adds	r5, #10
10008206:	402b      	ands	r3, r5
10008208:	431a      	orrs	r2, r3
1000820a:	0015      	movs	r5, r2
1000820c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000820e:	7923      	ldrb	r3, [r4, #4]
10008210:	2b00      	cmp	r3, #0
10008212:	d001      	beq.n	10008218 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008214:	2320      	movs	r3, #32
10008216:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008218:	4b22      	ldr	r3, [pc, #136]	; (100082a4 <dualtimer_init+0xf4>)
1000821a:	68a2      	ldr	r2, [r4, #8]
1000821c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000821e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008220:	491f      	ldr	r1, [pc, #124]	; (100082a0 <dualtimer_init+0xf0>)
10008222:	22c4      	movs	r2, #196	; 0xc4
10008224:	0052      	lsls	r2, r2, #1
10008226:	5c88      	ldrb	r0, [r1, r2]
10008228:	2301      	movs	r3, #1
1000822a:	4303      	orrs	r3, r0
1000822c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000822e:	2000      	movs	r0, #0
10008230:	4b1d      	ldr	r3, [pc, #116]	; (100082a8 <dualtimer_init+0xf8>)
10008232:	4798      	blx	r3
10008234:	e000      	b.n	10008238 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008236:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008238:	7b23      	ldrb	r3, [r4, #12]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d029      	beq.n	10008292 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000823e:	7b63      	ldrb	r3, [r4, #13]
10008240:	2b00      	cmp	r3, #0
10008242:	d005      	beq.n	10008250 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008244:	2b01      	cmp	r3, #1
10008246:	d005      	beq.n	10008254 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008248:	2b02      	cmp	r3, #2
1000824a:	d104      	bne.n	10008256 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000824c:	2540      	movs	r5, #64	; 0x40
1000824e:	e002      	b.n	10008256 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008250:	2501      	movs	r5, #1
10008252:	e000      	b.n	10008256 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008254:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008256:	7ba3      	ldrb	r3, [r4, #14]
10008258:	005b      	lsls	r3, r3, #1
1000825a:	2102      	movs	r1, #2
1000825c:	4019      	ands	r1, r3
1000825e:	7be2      	ldrb	r2, [r4, #15]
10008260:	0092      	lsls	r2, r2, #2
10008262:	230c      	movs	r3, #12
10008264:	4013      	ands	r3, r2
10008266:	430b      	orrs	r3, r1
10008268:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000826a:	7c23      	ldrb	r3, [r4, #16]
1000826c:	2b00      	cmp	r3, #0
1000826e:	d001      	beq.n	10008274 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008270:	2320      	movs	r3, #32
10008272:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008274:	6962      	ldr	r2, [r4, #20]
10008276:	4b0b      	ldr	r3, [pc, #44]	; (100082a4 <dualtimer_init+0xf4>)
10008278:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000827a:	2228      	movs	r2, #40	; 0x28
1000827c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000827e:	4908      	ldr	r1, [pc, #32]	; (100082a0 <dualtimer_init+0xf0>)
10008280:	3261      	adds	r2, #97	; 0x61
10008282:	32ff      	adds	r2, #255	; 0xff
10008284:	5c88      	ldrb	r0, [r1, r2]
10008286:	2302      	movs	r3, #2
10008288:	4303      	orrs	r3, r0
1000828a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000828c:	2001      	movs	r0, #1
1000828e:	4b06      	ldr	r3, [pc, #24]	; (100082a8 <dualtimer_init+0xf8>)
10008290:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10008292:	4906      	ldr	r1, [pc, #24]	; (100082ac <dualtimer_init+0xfc>)
10008294:	201e      	movs	r0, #30
10008296:	4b06      	ldr	r3, [pc, #24]	; (100082b0 <dualtimer_init+0x100>)
10008298:	4798      	blx	r3
}
1000829a:	bd70      	pop	{r4, r5, r6, pc}
1000829c:	10009795 	.word	0x10009795
100082a0:	4000b000 	.word	0x4000b000
100082a4:	40001000 	.word	0x40001000
100082a8:	1000818d 	.word	0x1000818d
100082ac:	100080e9 	.word	0x100080e9
100082b0:	10009bfd 	.word	0x10009bfd

100082b4 <delay_us>:
	 config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
	 dualtimer_init(&config_dualtimer);
 }

 static void delay_us(uint32_t time)
 {
100082b4:	b510      	push	{r4, lr}
	 dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG, time*26);
100082b6:	231a      	movs	r3, #26
100082b8:	4343      	muls	r3, r0
100082ba:	001a      	movs	r2, r3
100082bc:	2100      	movs	r1, #0
100082be:	2000      	movs	r0, #0
100082c0:	4b03      	ldr	r3, [pc, #12]	; (100082d0 <delay_us+0x1c>)
100082c2:	4798      	blx	r3
	 while(dualtimer_get_value(DUALTIMER_TIMER1)){}
100082c4:	4c03      	ldr	r4, [pc, #12]	; (100082d4 <delay_us+0x20>)
100082c6:	2000      	movs	r0, #0
100082c8:	47a0      	blx	r4
100082ca:	2800      	cmp	r0, #0
100082cc:	d1fb      	bne.n	100082c6 <delay_us+0x12>
 }
100082ce:	bd10      	pop	{r4, pc}
100082d0:	10008165 	.word	0x10008165
100082d4:	10008151 	.word	0x10008151

100082d8 <Setup>:
	 spi_enable(&(module->LCD_spi_master_instance));
	 //! [enable]
 }

 void Setup(LCDSPIModule* module)
 {
100082d8:	b530      	push	{r4, r5, lr}
100082da:	b08d      	sub	sp, #52	; 0x34
100082dc:	0005      	movs	r5, r0
	 //! [slave_config]
	 struct spi_slave_inst_config slave_dev_config;
	 //! [slave_config]
	 /* Configure and initialize software device instance of peripheral slave */
	 //! [slave_conf_defaults]
	 spi_slave_inst_get_config_defaults(&slave_dev_config);
100082de:	ac01      	add	r4, sp, #4
100082e0:	0020      	movs	r0, r4
100082e2:	4b14      	ldr	r3, [pc, #80]	; (10008334 <Setup+0x5c>)
100082e4:	4798      	blx	r3
	 //! [slave_conf_defaults]
	 //! [ss_pin]
	 slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
100082e6:	2310      	movs	r3, #16
100082e8:	7023      	strb	r3, [r4, #0]
	 //! [ss_pin]
	 //! [slave_init]
	 spi_attach_slave(&(module->LCD_slave), &slave_dev_config);
100082ea:	0028      	movs	r0, r5
100082ec:	302c      	adds	r0, #44	; 0x2c
100082ee:	0021      	movs	r1, r4
100082f0:	4b11      	ldr	r3, [pc, #68]	; (10008338 <Setup+0x60>)
100082f2:	4798      	blx	r3
	 //! [slave_init]
	 /* Configure, initialize and enable SPI module */
	 //! [conf_defaults]
	 spi_get_config_defaults(&config_spi_master);
100082f4:	ac02      	add	r4, sp, #8
100082f6:	0020      	movs	r0, r4
100082f8:	4b10      	ldr	r3, [pc, #64]	; (1000833c <Setup+0x64>)
100082fa:	4798      	blx	r3
	 //! [conf_defaults]
	 //! [transfer_mode]
	 config_spi_master.transfer_mode = CONF_SPI_TRANSFER_MODE;
100082fc:	2300      	movs	r3, #0
100082fe:	70a3      	strb	r3, [r4, #2]
	 //! [transfer_mode]
	 //! [clock_divider]
	 config_spi_master.clock_divider = 154;
10008300:	339a      	adds	r3, #154	; 0x9a
10008302:	7123      	strb	r3, [r4, #4]
	 //! [clock_divider]
	 /* Configure pad 0 */
	 //! [sck]
	 config_spi_master.pin_number_pad[0] = CONF_SPI_PIN_SCK;
10008304:	3b89      	subs	r3, #137	; 0x89
10008306:	60a3      	str	r3, [r4, #8]
	 config_spi_master.pinmux_sel_pad[0] = CONF_SPI_MUX_SCK;
10008308:	3b0d      	subs	r3, #13
1000830a:	61a3      	str	r3, [r4, #24]
	 //! [sck]
	 /* Configure pad 1 */
	 //! [mosi]
	 config_spi_master.pin_number_pad[1] = CONF_SPI_PIN_MOSI;
1000830c:	2213      	movs	r2, #19
1000830e:	60e2      	str	r2, [r4, #12]
	 config_spi_master.pinmux_sel_pad[1] = CONF_SPI_MUX_MOSI;
10008310:	61e3      	str	r3, [r4, #28]
	 //! [mosi]
	 /* Configure pad 2 */
	 //! [ssn]
	 config_spi_master.pin_number_pad[2] = PINMUX_UNUSED;
10008312:	3a14      	subs	r2, #20
10008314:	6122      	str	r2, [r4, #16]
	 config_spi_master.pinmux_sel_pad[2] = PINMUX_UNUSED;
10008316:	6222      	str	r2, [r4, #32]
	 //! [ssn]
	 /* Configure pad 3 */
	 //! [miso]
	 config_spi_master.pin_number_pad[3] = CONF_SPI_PIN_MISO;
10008318:	3213      	adds	r2, #19
1000831a:	6162      	str	r2, [r4, #20]
	 config_spi_master.pinmux_sel_pad[3] = CONF_SPI_MUX_MISO;
1000831c:	6263      	str	r3, [r4, #36]	; 0x24
	 //! [miso]
	 //! [init]
	 spi_init(&(module->LCD_spi_master_instance), CONF_SPI, &config_spi_master);
1000831e:	0022      	movs	r2, r4
10008320:	4907      	ldr	r1, [pc, #28]	; (10008340 <Setup+0x68>)
10008322:	0028      	movs	r0, r5
10008324:	4b07      	ldr	r3, [pc, #28]	; (10008344 <Setup+0x6c>)
10008326:	4798      	blx	r3
	 //! [init]

	 //! [enable]
	 spi_enable(&(module->LCD_spi_master_instance));
10008328:	0028      	movs	r0, r5
1000832a:	4b07      	ldr	r3, [pc, #28]	; (10008348 <Setup+0x70>)
1000832c:	4798      	blx	r3

 void Setup(LCDSPIModule* module)
 {
	configure_spi_master(module);

 }
1000832e:	b00d      	add	sp, #52	; 0x34
10008330:	bd30      	pop	{r4, r5, pc}
10008332:	46c0      	nop			; (mov r8, r8)
10008334:	10008819 	.word	0x10008819
10008338:	10008851 	.word	0x10008851
1000833c:	10008825 	.word	0x10008825
10008340:	40007000 	.word	0x40007000
10008344:	10008979 	.word	0x10008979
10008348:	10008891 	.word	0x10008891

1000834c <swap>:
		res = res | ((foo & 0x02) << 5);
		res = res | ((foo & 0x04) << 3);
		res = res | ((foo & 0x08) << 1);
		res = res | ((foo & 0x10) >> 1);
		res = res | ((foo & 0x20) >> 3);
		res = res | ((foo & 0x40) >> 5);
1000834c:	0143      	lsls	r3, r0, #5
1000834e:	2140      	movs	r1, #64	; 0x40
10008350:	4019      	ands	r1, r3
10008352:	00c2      	lsls	r2, r0, #3
10008354:	2320      	movs	r3, #32
10008356:	4013      	ands	r3, r2
10008358:	430b      	orrs	r3, r1
1000835a:	01c2      	lsls	r2, r0, #7
1000835c:	4313      	orrs	r3, r2
1000835e:	0042      	lsls	r2, r0, #1
10008360:	2110      	movs	r1, #16
10008362:	400a      	ands	r2, r1
10008364:	4313      	orrs	r3, r2
10008366:	1042      	asrs	r2, r0, #1
10008368:	3908      	subs	r1, #8
1000836a:	400a      	ands	r2, r1
1000836c:	4313      	orrs	r3, r2
1000836e:	10c2      	asrs	r2, r0, #3
10008370:	3904      	subs	r1, #4
10008372:	400a      	ands	r2, r1
10008374:	4313      	orrs	r3, r2
10008376:	1142      	asrs	r2, r0, #5
10008378:	3902      	subs	r1, #2
1000837a:	400a      	ands	r2, r1
1000837c:	4313      	orrs	r3, r2
1000837e:	b2db      	uxtb	r3, r3
		res = res | ((foo & 0x80) >> 7);
		return res;
10008380:	09c0      	lsrs	r0, r0, #7
10008382:	4318      	orrs	r0, r3
 }
10008384:	4770      	bx	lr
10008386:	46c0      	nop			; (mov r8, r8)

10008388 <Transfer>:

 void Transfer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t startLine, uint8_t endLine, LCDSPIModule* module)
 {
10008388:	b5f0      	push	{r4, r5, r6, r7, lr}
1000838a:	465f      	mov	r7, fp
1000838c:	464e      	mov	r6, r9
1000838e:	4645      	mov	r5, r8
10008390:	b4e0      	push	{r5, r6, r7}
10008392:	b082      	sub	sp, #8
10008394:	4681      	mov	r9, r0
10008396:	000c      	movs	r4, r1
10008398:	4690      	mov	r8, r2
1000839a:	001d      	movs	r5, r3
1000839c:	9301      	str	r3, [sp, #4]
		//! [select_slave]
		gpio_pin_set_output_level(PIN_LP_GPIO_16, true);
1000839e:	2101      	movs	r1, #1
100083a0:	2010      	movs	r0, #16
100083a2:	4b1d      	ldr	r3, [pc, #116]	; (10008418 <Transfer+0x90>)
100083a4:	4798      	blx	r3
		//! [select_slave]

		//! [delay]
		delay_us(5); //tsSCS
100083a6:	2005      	movs	r0, #5
100083a8:	4b1c      	ldr	r3, [pc, #112]	; (1000841c <Transfer+0x94>)
100083aa:	4798      	blx	r3
		//! [delay]

		//! [write]
		spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0
100083ac:	9500      	str	r5, [sp, #0]
100083ae:	2180      	movs	r1, #128	; 0x80
100083b0:	0028      	movs	r0, r5
100083b2:	4b1b      	ldr	r3, [pc, #108]	; (10008420 <Transfer+0x98>)
100083b4:	4798      	blx	r3
		//for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
		//{
			//spi_write(&(module->LCD_spi_master_instance), line_count); //Gate line address transfer
			//spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
		//}
		for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
100083b6:	3c01      	subs	r4, #1
100083b8:	b2e4      	uxtb	r4, r4
100083ba:	4544      	cmp	r4, r8
100083bc:	d218      	bcs.n	100083f0 <Transfer+0x68>
		{
			spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
100083be:	4b19      	ldr	r3, [pc, #100]	; (10008424 <Transfer+0x9c>)
100083c0:	469b      	mov	fp, r3
100083c2:	4f17      	ldr	r7, [pc, #92]	; (10008420 <Transfer+0x98>)
			spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
100083c4:	4e18      	ldr	r6, [pc, #96]	; (10008428 <Transfer+0xa0>)
			//spi_write(&(module->LCD_spi_master_instance), line_count); //Gate line address transfer
			//spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
		//}
		for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
		{
			spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
100083c6:	1c65      	adds	r5, r4, #1
100083c8:	b2ed      	uxtb	r5, r5
100083ca:	0028      	movs	r0, r5
100083cc:	47d8      	blx	fp
100083ce:	0001      	movs	r1, r0
100083d0:	9800      	ldr	r0, [sp, #0]
100083d2:	47b8      	blx	r7
			spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
100083d4:	0061      	lsls	r1, r4, #1
100083d6:	1909      	adds	r1, r1, r4
100083d8:	0109      	lsls	r1, r1, #4
100083da:	4449      	add	r1, r9
100083dc:	2230      	movs	r2, #48	; 0x30
100083de:	9c00      	ldr	r4, [sp, #0]
100083e0:	0020      	movs	r0, r4
100083e2:	47b0      	blx	r6
			spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
100083e4:	2100      	movs	r1, #0
100083e6:	0020      	movs	r0, r4
100083e8:	47b8      	blx	r7
		//for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
		//{
			//spi_write(&(module->LCD_spi_master_instance), line_count); //Gate line address transfer
			//spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
		//}
		for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
100083ea:	002c      	movs	r4, r5
100083ec:	45a8      	cmp	r8, r5
100083ee:	d8ea      	bhi.n	100083c6 <Transfer+0x3e>
			spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
			spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
		}

		//spi_write(&(module->LCD_spi_master_instance), 0);
		spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
100083f0:	2100      	movs	r1, #0
100083f2:	9801      	ldr	r0, [sp, #4]
100083f4:	4b0a      	ldr	r3, [pc, #40]	; (10008420 <Transfer+0x98>)
100083f6:	4798      	blx	r3
		//! [write]
		//! [delay]
		delay_us(220);
100083f8:	20dc      	movs	r0, #220	; 0xdc
100083fa:	4c08      	ldr	r4, [pc, #32]	; (1000841c <Transfer+0x94>)
100083fc:	47a0      	blx	r4
		//! [delay]
		//! [deselect_slave]
		gpio_pin_set_output_level(PIN_LP_GPIO_16, false);
100083fe:	2100      	movs	r1, #0
10008400:	2010      	movs	r0, #16
10008402:	4b05      	ldr	r3, [pc, #20]	; (10008418 <Transfer+0x90>)
10008404:	4798      	blx	r3
		//! [deselect_slave]
		delay_us(1000);
10008406:	20fa      	movs	r0, #250	; 0xfa
10008408:	0080      	lsls	r0, r0, #2
1000840a:	47a0      	blx	r4
 }
1000840c:	b002      	add	sp, #8
1000840e:	bc1c      	pop	{r2, r3, r4}
10008410:	4690      	mov	r8, r2
10008412:	4699      	mov	r9, r3
10008414:	46a3      	mov	fp, r4
10008416:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008418:	100085f5 	.word	0x100085f5
1000841c:	100082b5 	.word	0x100082b5
10008420:	10008b45 	.word	0x10008b45
10008424:	1000834d 	.word	0x1000834d
10008428:	10008bd9 	.word	0x10008bd9

1000842c <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000842c:	2300      	movs	r3, #0
1000842e:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008430:	2201      	movs	r2, #1
10008432:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008434:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008436:	70c3      	strb	r3, [r0, #3]
}
10008438:	4770      	bx	lr
1000843a:	46c0      	nop			; (mov r8, r8)

1000843c <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000843c:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000843e:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008440:	2801      	cmp	r0, #1
10008442:	d800      	bhi.n	10008446 <gpio_pin_set_config+0xa>
10008444:	e0c8      	b.n	100085d8 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10008446:	2807      	cmp	r0, #7
10008448:	d809      	bhi.n	1000845e <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000844a:	4d64      	ldr	r5, [pc, #400]	; (100085dc <gpio_pin_set_config+0x1a0>)
1000844c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000844e:	3b10      	subs	r3, #16
10008450:	4003      	ands	r3, r0
10008452:	009b      	lsls	r3, r3, #2
10008454:	2407      	movs	r4, #7
10008456:	409c      	lsls	r4, r3
10008458:	43a2      	bics	r2, r4
1000845a:	646a      	str	r2, [r5, #68]	; 0x44
1000845c:	e029      	b.n	100084b2 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000845e:	280f      	cmp	r0, #15
10008460:	d809      	bhi.n	10008476 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008462:	4d5e      	ldr	r5, [pc, #376]	; (100085dc <gpio_pin_set_config+0x1a0>)
10008464:	6caa      	ldr	r2, [r5, #72]	; 0x48
10008466:	2307      	movs	r3, #7
10008468:	4003      	ands	r3, r0
1000846a:	009b      	lsls	r3, r3, #2
1000846c:	2407      	movs	r4, #7
1000846e:	409c      	lsls	r4, r3
10008470:	43a2      	bics	r2, r4
10008472:	64aa      	str	r2, [r5, #72]	; 0x48
10008474:	e01d      	b.n	100084b2 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
10008476:	2817      	cmp	r0, #23
10008478:	d809      	bhi.n	1000848e <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000847a:	4d58      	ldr	r5, [pc, #352]	; (100085dc <gpio_pin_set_config+0x1a0>)
1000847c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000847e:	2307      	movs	r3, #7
10008480:	4003      	ands	r3, r0
10008482:	009b      	lsls	r3, r3, #2
10008484:	2407      	movs	r4, #7
10008486:	409c      	lsls	r4, r3
10008488:	43a2      	bics	r2, r4
1000848a:	64ea      	str	r2, [r5, #76]	; 0x4c
1000848c:	e011      	b.n	100084b2 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000848e:	0003      	movs	r3, r0
10008490:	3b2c      	subs	r3, #44	; 0x2c
10008492:	2b03      	cmp	r3, #3
10008494:	d80d      	bhi.n	100084b2 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
10008496:	4d52      	ldr	r5, [pc, #328]	; (100085e0 <gpio_pin_set_config+0x1a4>)
10008498:	2482      	movs	r4, #130	; 0x82
1000849a:	00e4      	lsls	r4, r4, #3
1000849c:	5d2a      	ldrb	r2, [r5, r4]
1000849e:	0712      	lsls	r2, r2, #28
100084a0:	2601      	movs	r6, #1
100084a2:	409e      	lsls	r6, r3
100084a4:	0f12      	lsrs	r2, r2, #28
100084a6:	5d2b      	ldrb	r3, [r5, r4]
100084a8:	43b2      	bics	r2, r6
100084aa:	260f      	movs	r6, #15
100084ac:	43b3      	bics	r3, r6
100084ae:	4313      	orrs	r3, r2
100084b0:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
100084b2:	0003      	movs	r3, r0
100084b4:	3b1d      	subs	r3, #29
100084b6:	2b02      	cmp	r3, #2
100084b8:	d829      	bhi.n	1000850e <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
100084ba:	784b      	ldrb	r3, [r1, #1]
100084bc:	2b01      	cmp	r3, #1
100084be:	d108      	bne.n	100084d2 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
100084c0:	4d47      	ldr	r5, [pc, #284]	; (100085e0 <gpio_pin_set_config+0x1a4>)
100084c2:	7d2b      	ldrb	r3, [r5, #20]
100084c4:	241f      	movs	r4, #31
100084c6:	1a24      	subs	r4, r4, r0
100084c8:	2201      	movs	r2, #1
100084ca:	40a2      	lsls	r2, r4
100084cc:	4393      	bics	r3, r2
100084ce:	752b      	strb	r3, [r5, #20]
100084d0:	e008      	b.n	100084e4 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
100084d2:	4c43      	ldr	r4, [pc, #268]	; (100085e0 <gpio_pin_set_config+0x1a4>)
100084d4:	7d25      	ldrb	r5, [r4, #20]
100084d6:	221f      	movs	r2, #31
100084d8:	1a12      	subs	r2, r2, r0
100084da:	2301      	movs	r3, #1
100084dc:	4093      	lsls	r3, r2
100084de:	432b      	orrs	r3, r5
100084e0:	b2db      	uxtb	r3, r3
100084e2:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
100084e4:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100084e6:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
100084e8:	2a00      	cmp	r2, #0
100084ea:	d075      	beq.n	100085d8 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
100084ec:	493c      	ldr	r1, [pc, #240]	; (100085e0 <gpio_pin_set_config+0x1a4>)
100084ee:	880c      	ldrh	r4, [r1, #0]
100084f0:	221f      	movs	r2, #31
100084f2:	1a10      	subs	r0, r2, r0
100084f4:	0080      	lsls	r0, r0, #2
100084f6:	3301      	adds	r3, #1
100084f8:	4083      	lsls	r3, r0
100084fa:	4323      	orrs	r3, r4
100084fc:	b29b      	uxth	r3, r3
100084fe:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008500:	4a38      	ldr	r2, [pc, #224]	; (100085e4 <gpio_pin_set_config+0x1a8>)
10008502:	7811      	ldrb	r1, [r2, #0]
10008504:	2302      	movs	r3, #2
10008506:	430b      	orrs	r3, r1
10008508:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000850a:	2300      	movs	r3, #0
1000850c:	e064      	b.n	100085d8 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000850e:	780a      	ldrb	r2, [r1, #0]
10008510:	2a00      	cmp	r2, #0
10008512:	d140      	bne.n	10008596 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10008514:	280f      	cmp	r0, #15
10008516:	d808      	bhi.n	1000852a <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008518:	2301      	movs	r3, #1
1000851a:	4083      	lsls	r3, r0
1000851c:	b29b      	uxth	r3, r3
1000851e:	4a32      	ldr	r2, [pc, #200]	; (100085e8 <gpio_pin_set_config+0x1ac>)
10008520:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008522:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008524:	281f      	cmp	r0, #31
10008526:	d857      	bhi.n	100085d8 <gpio_pin_set_config+0x19c>
10008528:	e012      	b.n	10008550 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000852a:	281f      	cmp	r0, #31
1000852c:	d807      	bhi.n	1000853e <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000852e:	220f      	movs	r2, #15
10008530:	4002      	ands	r2, r0
10008532:	2301      	movs	r3, #1
10008534:	4093      	lsls	r3, r2
10008536:	b29b      	uxth	r3, r3
10008538:	4a2c      	ldr	r2, [pc, #176]	; (100085ec <gpio_pin_set_config+0x1b0>)
1000853a:	8293      	strh	r3, [r2, #20]
1000853c:	e008      	b.n	10008550 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000853e:	230f      	movs	r3, #15
10008540:	4018      	ands	r0, r3
10008542:	3b0e      	subs	r3, #14
10008544:	4083      	lsls	r3, r0
10008546:	b29b      	uxth	r3, r3
10008548:	4a29      	ldr	r2, [pc, #164]	; (100085f0 <gpio_pin_set_config+0x1b4>)
1000854a:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000854c:	2300      	movs	r3, #0
1000854e:	e043      	b.n	100085d8 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10008550:	784b      	ldrb	r3, [r1, #1]
10008552:	2b01      	cmp	r3, #1
10008554:	d00c      	beq.n	10008570 <gpio_pin_set_config+0x134>
10008556:	2b00      	cmp	r3, #0
10008558:	d002      	beq.n	10008560 <gpio_pin_set_config+0x124>
1000855a:	2b02      	cmp	r3, #2
1000855c:	d010      	beq.n	10008580 <gpio_pin_set_config+0x144>
1000855e:	e03a      	b.n	100085d6 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008560:	491e      	ldr	r1, [pc, #120]	; (100085dc <gpio_pin_set_config+0x1a0>)
10008562:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008564:	2301      	movs	r3, #1
10008566:	4083      	lsls	r3, r0
10008568:	4313      	orrs	r3, r2
1000856a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000856c:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000856e:	e033      	b.n	100085d8 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008570:	491a      	ldr	r1, [pc, #104]	; (100085dc <gpio_pin_set_config+0x1a0>)
10008572:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008574:	2201      	movs	r2, #1
10008576:	4082      	lsls	r2, r0
10008578:	4393      	bics	r3, r2
1000857a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000857c:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000857e:	e02b      	b.n	100085d8 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008580:	4b16      	ldr	r3, [pc, #88]	; (100085dc <gpio_pin_set_config+0x1a0>)
10008582:	6d59      	ldr	r1, [r3, #84]	; 0x54
10008584:	2201      	movs	r2, #1
10008586:	4082      	lsls	r2, r0
10008588:	4311      	orrs	r1, r2
1000858a:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000858c:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000858e:	4391      	bics	r1, r2
10008590:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008592:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008594:	e020      	b.n	100085d8 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008596:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
10008598:	2a01      	cmp	r2, #1
1000859a:	d11d      	bne.n	100085d8 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000859c:	280f      	cmp	r0, #15
1000859e:	d806      	bhi.n	100085ae <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
100085a0:	3301      	adds	r3, #1
100085a2:	4083      	lsls	r3, r0
100085a4:	b29b      	uxth	r3, r3
100085a6:	4a10      	ldr	r2, [pc, #64]	; (100085e8 <gpio_pin_set_config+0x1ac>)
100085a8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100085aa:	2300      	movs	r3, #0
100085ac:	e014      	b.n	100085d8 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
100085ae:	281f      	cmp	r0, #31
100085b0:	d808      	bhi.n	100085c4 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
100085b2:	230f      	movs	r3, #15
100085b4:	4018      	ands	r0, r3
100085b6:	3b0e      	subs	r3, #14
100085b8:	4083      	lsls	r3, r0
100085ba:	b29b      	uxth	r3, r3
100085bc:	4a0b      	ldr	r2, [pc, #44]	; (100085ec <gpio_pin_set_config+0x1b0>)
100085be:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100085c0:	2300      	movs	r3, #0
100085c2:	e009      	b.n	100085d8 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
100085c4:	230f      	movs	r3, #15
100085c6:	4018      	ands	r0, r3
100085c8:	3b0e      	subs	r3, #14
100085ca:	4083      	lsls	r3, r0
100085cc:	b29b      	uxth	r3, r3
100085ce:	4a08      	ldr	r2, [pc, #32]	; (100085f0 <gpio_pin_set_config+0x1b4>)
100085d0:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100085d2:	2300      	movs	r3, #0
100085d4:	e000      	b.n	100085d8 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
100085d6:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
100085d8:	0018      	movs	r0, r3
100085da:	bd70      	pop	{r4, r5, r6, pc}
100085dc:	4000b000 	.word	0x4000b000
100085e0:	4000f000 	.word	0x4000f000
100085e4:	4000e000 	.word	0x4000e000
100085e8:	40010000 	.word	0x40010000
100085ec:	40011000 	.word	0x40011000
100085f0:	40013000 	.word	0x40013000

100085f4 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
100085f4:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
100085f6:	280f      	cmp	r0, #15
100085f8:	d810      	bhi.n	1000861c <gpio_pin_set_output_level+0x28>
		if(level) {
100085fa:	2900      	cmp	r1, #0
100085fc:	d007      	beq.n	1000860e <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
100085fe:	4a1d      	ldr	r2, [pc, #116]	; (10008674 <gpio_pin_set_output_level+0x80>)
10008600:	8891      	ldrh	r1, [r2, #4]
10008602:	2301      	movs	r3, #1
10008604:	4083      	lsls	r3, r0
10008606:	430b      	orrs	r3, r1
10008608:	b29b      	uxth	r3, r3
1000860a:	8093      	strh	r3, [r2, #4]
1000860c:	e031      	b.n	10008672 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000860e:	4919      	ldr	r1, [pc, #100]	; (10008674 <gpio_pin_set_output_level+0x80>)
10008610:	888b      	ldrh	r3, [r1, #4]
10008612:	2201      	movs	r2, #1
10008614:	4082      	lsls	r2, r0
10008616:	4393      	bics	r3, r2
10008618:	808b      	strh	r3, [r1, #4]
1000861a:	e02a      	b.n	10008672 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000861c:	281f      	cmp	r0, #31
1000861e:	d814      	bhi.n	1000864a <gpio_pin_set_output_level+0x56>
		if(level) {
10008620:	2900      	cmp	r1, #0
10008622:	d009      	beq.n	10008638 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008624:	4914      	ldr	r1, [pc, #80]	; (10008678 <gpio_pin_set_output_level+0x84>)
10008626:	888c      	ldrh	r4, [r1, #4]
10008628:	220f      	movs	r2, #15
1000862a:	4010      	ands	r0, r2
1000862c:	2301      	movs	r3, #1
1000862e:	4083      	lsls	r3, r0
10008630:	4323      	orrs	r3, r4
10008632:	b29b      	uxth	r3, r3
10008634:	808b      	strh	r3, [r1, #4]
10008636:	e01c      	b.n	10008672 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008638:	490f      	ldr	r1, [pc, #60]	; (10008678 <gpio_pin_set_output_level+0x84>)
1000863a:	888b      	ldrh	r3, [r1, #4]
1000863c:	220f      	movs	r2, #15
1000863e:	4010      	ands	r0, r2
10008640:	3a0e      	subs	r2, #14
10008642:	4082      	lsls	r2, r0
10008644:	4393      	bics	r3, r2
10008646:	808b      	strh	r3, [r1, #4]
10008648:	e013      	b.n	10008672 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000864a:	2900      	cmp	r1, #0
1000864c:	d009      	beq.n	10008662 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000864e:	490b      	ldr	r1, [pc, #44]	; (1000867c <gpio_pin_set_output_level+0x88>)
10008650:	888c      	ldrh	r4, [r1, #4]
10008652:	220f      	movs	r2, #15
10008654:	4010      	ands	r0, r2
10008656:	2301      	movs	r3, #1
10008658:	4083      	lsls	r3, r0
1000865a:	4323      	orrs	r3, r4
1000865c:	b29b      	uxth	r3, r3
1000865e:	808b      	strh	r3, [r1, #4]
10008660:	e007      	b.n	10008672 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008662:	4906      	ldr	r1, [pc, #24]	; (1000867c <gpio_pin_set_output_level+0x88>)
10008664:	888b      	ldrh	r3, [r1, #4]
10008666:	220f      	movs	r2, #15
10008668:	4010      	ands	r0, r2
1000866a:	3a0e      	subs	r2, #14
1000866c:	4082      	lsls	r2, r0
1000866e:	4393      	bics	r3, r2
10008670:	808b      	strh	r3, [r1, #4]
		}
	}
}
10008672:	bd10      	pop	{r4, pc}
10008674:	40010000 	.word	0x40010000
10008678:	40011000 	.word	0x40011000
1000867c:	40013000 	.word	0x40013000

10008680 <gpio_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle.
 */
void gpio_pin_toggle_output_level(const uint8_t gpio_pin)
{
	if (gpio_pin < 16) {
10008680:	280f      	cmp	r0, #15
10008682:	d807      	bhi.n	10008694 <gpio_pin_toggle_output_level+0x14>
		GPIO0->DATAOUT.reg ^= (1 << gpio_pin);
10008684:	4a0e      	ldr	r2, [pc, #56]	; (100086c0 <gpio_pin_toggle_output_level+0x40>)
10008686:	8891      	ldrh	r1, [r2, #4]
10008688:	2301      	movs	r3, #1
1000868a:	4083      	lsls	r3, r0
1000868c:	404b      	eors	r3, r1
1000868e:	b29b      	uxth	r3, r3
10008690:	8093      	strh	r3, [r2, #4]
10008692:	e014      	b.n	100086be <gpio_pin_toggle_output_level+0x3e>
	} else if (gpio_pin < 32) {
10008694:	281f      	cmp	r0, #31
10008696:	d809      	bhi.n	100086ac <gpio_pin_toggle_output_level+0x2c>
		GPIO1->DATAOUT.reg ^= (1 << (gpio_pin % 16));
10008698:	4a0a      	ldr	r2, [pc, #40]	; (100086c4 <gpio_pin_toggle_output_level+0x44>)
1000869a:	8891      	ldrh	r1, [r2, #4]
1000869c:	230f      	movs	r3, #15
1000869e:	4018      	ands	r0, r3
100086a0:	3b0e      	subs	r3, #14
100086a2:	4083      	lsls	r3, r0
100086a4:	404b      	eors	r3, r1
100086a6:	b29b      	uxth	r3, r3
100086a8:	8093      	strh	r3, [r2, #4]
100086aa:	e008      	b.n	100086be <gpio_pin_toggle_output_level+0x3e>
	} else {
		GPIO2->DATAOUT.reg ^= (1 << (gpio_pin % 16));
100086ac:	4a06      	ldr	r2, [pc, #24]	; (100086c8 <gpio_pin_toggle_output_level+0x48>)
100086ae:	8891      	ldrh	r1, [r2, #4]
100086b0:	230f      	movs	r3, #15
100086b2:	4018      	ands	r0, r3
100086b4:	3b0e      	subs	r3, #14
100086b6:	4083      	lsls	r3, r0
100086b8:	404b      	eors	r3, r1
100086ba:	b29b      	uxth	r3, r3
100086bc:	8093      	strh	r3, [r2, #4]
	}
}
100086be:	4770      	bx	lr
100086c0:	40010000 	.word	0x40010000
100086c4:	40011000 	.word	0x40011000
100086c8:	40013000 	.word	0x40013000

100086cc <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
100086cc:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
100086ce:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
100086d0:	23ff      	movs	r3, #255	; 0xff
100086d2:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
100086d4:	2807      	cmp	r0, #7
100086d6:	d833      	bhi.n	10008740 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
100086d8:	4a4e      	ldr	r2, [pc, #312]	; (10008814 <gpio_pinmux_cofiguration+0x148>)
100086da:	6c54      	ldr	r4, [r2, #68]	; 0x44
100086dc:	3bf8      	subs	r3, #248	; 0xf8
100086de:	4003      	ands	r3, r0
100086e0:	009b      	lsls	r3, r3, #2
100086e2:	2607      	movs	r6, #7
100086e4:	409e      	lsls	r6, r3
100086e6:	43b4      	bics	r4, r6
100086e8:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100086ea:	6c54      	ldr	r4, [r2, #68]	; 0x44
100086ec:	000e      	movs	r6, r1
100086ee:	409e      	lsls	r6, r3
100086f0:	0033      	movs	r3, r6
100086f2:	4323      	orrs	r3, r4
100086f4:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
100086f6:	2901      	cmp	r1, #1
100086f8:	d000      	beq.n	100086fc <gpio_pinmux_cofiguration+0x30>
100086fa:	e08a      	b.n	10008812 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
100086fc:	2803      	cmp	r0, #3
100086fe:	d80f      	bhi.n	10008720 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008700:	0011      	movs	r1, r2
10008702:	22d0      	movs	r2, #208	; 0xd0
10008704:	0052      	lsls	r2, r2, #1
10008706:	588c      	ldr	r4, [r1, r2]
10008708:	2303      	movs	r3, #3
1000870a:	4018      	ands	r0, r3
1000870c:	00c0      	lsls	r0, r0, #3
1000870e:	333c      	adds	r3, #60	; 0x3c
10008710:	4083      	lsls	r3, r0
10008712:	439c      	bics	r4, r3
10008714:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008716:	588b      	ldr	r3, [r1, r2]
10008718:	4085      	lsls	r5, r0
1000871a:	431d      	orrs	r5, r3
1000871c:	508d      	str	r5, [r1, r2]
1000871e:	e078      	b.n	10008812 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008720:	493c      	ldr	r1, [pc, #240]	; (10008814 <gpio_pinmux_cofiguration+0x148>)
10008722:	22d2      	movs	r2, #210	; 0xd2
10008724:	0052      	lsls	r2, r2, #1
10008726:	588c      	ldr	r4, [r1, r2]
10008728:	2303      	movs	r3, #3
1000872a:	4018      	ands	r0, r3
1000872c:	00c0      	lsls	r0, r0, #3
1000872e:	333c      	adds	r3, #60	; 0x3c
10008730:	4083      	lsls	r3, r0
10008732:	439c      	bics	r4, r3
10008734:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008736:	588b      	ldr	r3, [r1, r2]
10008738:	4085      	lsls	r5, r0
1000873a:	431d      	orrs	r5, r3
1000873c:	508d      	str	r5, [r1, r2]
1000873e:	e068      	b.n	10008812 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008740:	280f      	cmp	r0, #15
10008742:	d832      	bhi.n	100087aa <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008744:	4a33      	ldr	r2, [pc, #204]	; (10008814 <gpio_pinmux_cofiguration+0x148>)
10008746:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008748:	2307      	movs	r3, #7
1000874a:	4003      	ands	r3, r0
1000874c:	009b      	lsls	r3, r3, #2
1000874e:	2607      	movs	r6, #7
10008750:	409e      	lsls	r6, r3
10008752:	43b4      	bics	r4, r6
10008754:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008756:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008758:	000e      	movs	r6, r1
1000875a:	409e      	lsls	r6, r3
1000875c:	0033      	movs	r3, r6
1000875e:	4323      	orrs	r3, r4
10008760:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008762:	2901      	cmp	r1, #1
10008764:	d155      	bne.n	10008812 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10008766:	280b      	cmp	r0, #11
10008768:	d80f      	bhi.n	1000878a <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000876a:	0011      	movs	r1, r2
1000876c:	22d4      	movs	r2, #212	; 0xd4
1000876e:	0052      	lsls	r2, r2, #1
10008770:	588c      	ldr	r4, [r1, r2]
10008772:	2303      	movs	r3, #3
10008774:	4018      	ands	r0, r3
10008776:	00c0      	lsls	r0, r0, #3
10008778:	333c      	adds	r3, #60	; 0x3c
1000877a:	4083      	lsls	r3, r0
1000877c:	439c      	bics	r4, r3
1000877e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008780:	588b      	ldr	r3, [r1, r2]
10008782:	4085      	lsls	r5, r0
10008784:	431d      	orrs	r5, r3
10008786:	508d      	str	r5, [r1, r2]
10008788:	e043      	b.n	10008812 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000878a:	4922      	ldr	r1, [pc, #136]	; (10008814 <gpio_pinmux_cofiguration+0x148>)
1000878c:	22d6      	movs	r2, #214	; 0xd6
1000878e:	0052      	lsls	r2, r2, #1
10008790:	588c      	ldr	r4, [r1, r2]
10008792:	2303      	movs	r3, #3
10008794:	4018      	ands	r0, r3
10008796:	00c0      	lsls	r0, r0, #3
10008798:	333c      	adds	r3, #60	; 0x3c
1000879a:	4083      	lsls	r3, r0
1000879c:	439c      	bics	r4, r3
1000879e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100087a0:	588b      	ldr	r3, [r1, r2]
100087a2:	4085      	lsls	r5, r0
100087a4:	431d      	orrs	r5, r3
100087a6:	508d      	str	r5, [r1, r2]
100087a8:	e033      	b.n	10008812 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
100087aa:	2817      	cmp	r0, #23
100087ac:	d831      	bhi.n	10008812 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100087ae:	4a19      	ldr	r2, [pc, #100]	; (10008814 <gpio_pinmux_cofiguration+0x148>)
100087b0:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
100087b2:	2307      	movs	r3, #7
100087b4:	4003      	ands	r3, r0
100087b6:	009b      	lsls	r3, r3, #2
100087b8:	2607      	movs	r6, #7
100087ba:	409e      	lsls	r6, r3
100087bc:	43b4      	bics	r4, r6
100087be:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100087c0:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
100087c2:	000e      	movs	r6, r1
100087c4:	409e      	lsls	r6, r3
100087c6:	0033      	movs	r3, r6
100087c8:	4323      	orrs	r3, r4
100087ca:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
100087cc:	2901      	cmp	r1, #1
100087ce:	d120      	bne.n	10008812 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
100087d0:	2813      	cmp	r0, #19
100087d2:	d80f      	bhi.n	100087f4 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100087d4:	0011      	movs	r1, r2
100087d6:	22d8      	movs	r2, #216	; 0xd8
100087d8:	0052      	lsls	r2, r2, #1
100087da:	588c      	ldr	r4, [r1, r2]
100087dc:	2303      	movs	r3, #3
100087de:	4018      	ands	r0, r3
100087e0:	00c0      	lsls	r0, r0, #3
100087e2:	333c      	adds	r3, #60	; 0x3c
100087e4:	4083      	lsls	r3, r0
100087e6:	439c      	bics	r4, r3
100087e8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100087ea:	588b      	ldr	r3, [r1, r2]
100087ec:	4085      	lsls	r5, r0
100087ee:	431d      	orrs	r5, r3
100087f0:	508d      	str	r5, [r1, r2]
100087f2:	e00e      	b.n	10008812 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100087f4:	4a07      	ldr	r2, [pc, #28]	; (10008814 <gpio_pinmux_cofiguration+0x148>)
100087f6:	23da      	movs	r3, #218	; 0xda
100087f8:	005b      	lsls	r3, r3, #1
100087fa:	58d1      	ldr	r1, [r2, r3]
100087fc:	2403      	movs	r4, #3
100087fe:	4020      	ands	r0, r4
10008800:	00c0      	lsls	r0, r0, #3
10008802:	343c      	adds	r4, #60	; 0x3c
10008804:	4084      	lsls	r4, r0
10008806:	43a1      	bics	r1, r4
10008808:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000880a:	58d1      	ldr	r1, [r2, r3]
1000880c:	4085      	lsls	r5, r0
1000880e:	430d      	orrs	r5, r1
10008810:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008812:	bd70      	pop	{r4, r5, r6, pc}
10008814:	4000b000 	.word	0x4000b000

10008818 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
10008818:	230c      	movs	r3, #12
1000881a:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000881c:	2300      	movs	r3, #0
1000881e:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
10008820:	7083      	strb	r3, [r0, #2]
}
10008822:	4770      	bx	lr

10008824 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
10008824:	2301      	movs	r3, #1
10008826:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
10008828:	2300      	movs	r3, #0
1000882a:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000882c:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000882e:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 255;
10008830:	33ff      	adds	r3, #255	; 0xff
10008832:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
10008834:	3bf5      	subs	r3, #245	; 0xf5
10008836:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
10008838:	3301      	adds	r3, #1
1000883a:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000883c:	3301      	adds	r3, #1
1000883e:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
10008840:	3301      	adds	r3, #1
10008842:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
10008844:	3b0b      	subs	r3, #11
10008846:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
10008848:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000884a:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000884c:	6243      	str	r3, [r0, #36]	; 0x24
};
1000884e:	4770      	bx	lr

10008850 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
10008850:	b530      	push	{r4, r5, lr}
10008852:	b083      	sub	sp, #12
10008854:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
10008856:	780b      	ldrb	r3, [r1, #0]
10008858:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000885a:	784b      	ldrb	r3, [r1, #1]
1000885c:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000885e:	788b      	ldrb	r3, [r1, #2]
10008860:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10008862:	ad01      	add	r5, sp, #4
10008864:	0028      	movs	r0, r5
10008866:	4b07      	ldr	r3, [pc, #28]	; (10008884 <spi_attach_slave+0x34>)
10008868:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000886a:	2301      	movs	r3, #1
1000886c:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000886e:	7820      	ldrb	r0, [r4, #0]
10008870:	0029      	movs	r1, r5
10008872:	4b05      	ldr	r3, [pc, #20]	; (10008888 <spi_attach_slave+0x38>)
10008874:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
10008876:	7820      	ldrb	r0, [r4, #0]
10008878:	2101      	movs	r1, #1
1000887a:	4b04      	ldr	r3, [pc, #16]	; (1000888c <spi_attach_slave+0x3c>)
1000887c:	4798      	blx	r3
}
1000887e:	b003      	add	sp, #12
10008880:	bd30      	pop	{r4, r5, pc}
10008882:	46c0      	nop			; (mov r8, r8)
10008884:	1000842d 	.word	0x1000842d
10008888:	1000843d 	.word	0x1000843d
1000888c:	100085f5 	.word	0x100085f5

10008890 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
10008890:	6803      	ldr	r3, [r0, #0]

#if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
10008892:	4a0a      	ldr	r2, [pc, #40]	; (100088bc <spi_enable+0x2c>)
10008894:	4293      	cmp	r3, r2
10008896:	d105      	bne.n	100088a4 <spi_enable+0x14>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008898:	4a09      	ldr	r2, [pc, #36]	; (100088c0 <spi_enable+0x30>)
1000889a:	2110      	movs	r1, #16
1000889c:	6011      	str	r1, [r2, #0]
1000889e:	3110      	adds	r1, #16
100088a0:	6011      	str	r1, [r2, #0]
100088a2:	e007      	b.n	100088b4 <spi_enable+0x24>
		NVIC_EnableIRQ(SPI0_RX_IRQn);
		NVIC_EnableIRQ(SPI0_TX_IRQn);
	} else if(spi_module == SPI1) {
100088a4:	4a07      	ldr	r2, [pc, #28]	; (100088c4 <spi_enable+0x34>)
100088a6:	4293      	cmp	r3, r2
100088a8:	d104      	bne.n	100088b4 <spi_enable+0x24>
100088aa:	4a05      	ldr	r2, [pc, #20]	; (100088c0 <spi_enable+0x30>)
100088ac:	2140      	movs	r1, #64	; 0x40
100088ae:	6011      	str	r1, [r2, #0]
100088b0:	3140      	adds	r1, #64	; 0x40
100088b2:	6011      	str	r1, [r2, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
100088b4:	2201      	movs	r2, #1
100088b6:	761a      	strb	r2, [r3, #24]
}
100088b8:	4770      	bx	lr
100088ba:	46c0      	nop			; (mov r8, r8)
100088bc:	40006000 	.word	0x40006000
100088c0:	e000e100 	.word	0xe000e100
100088c4:	40007000 	.word	0x40007000

100088c8 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
100088c8:	b510      	push	{r4, lr}
	Spi *const spi_module = (module->hw);
100088ca:	6803      	ldr	r3, [r0, #0]

#  if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
100088cc:	4a17      	ldr	r2, [pc, #92]	; (1000892c <spi_disable+0x64>)
100088ce:	4293      	cmp	r3, r2
100088d0:	d106      	bne.n	100088e0 <spi_disable+0x18>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100088d2:	4917      	ldr	r1, [pc, #92]	; (10008930 <spi_disable+0x68>)
100088d4:	2280      	movs	r2, #128	; 0x80
100088d6:	2410      	movs	r4, #16
100088d8:	508c      	str	r4, [r1, r2]
100088da:	3410      	adds	r4, #16
100088dc:	508c      	str	r4, [r1, r2]
100088de:	e007      	b.n	100088f0 <spi_disable+0x28>
		NVIC_DisableIRQ(SPI0_RX_IRQn);
		NVIC_DisableIRQ(SPI0_TX_IRQn);
	} else if(spi_module == SPI1) {
100088e0:	4a14      	ldr	r2, [pc, #80]	; (10008934 <spi_disable+0x6c>)
100088e2:	4293      	cmp	r3, r2
100088e4:	d104      	bne.n	100088f0 <spi_disable+0x28>
100088e6:	4912      	ldr	r1, [pc, #72]	; (10008930 <spi_disable+0x68>)
100088e8:	2280      	movs	r2, #128	; 0x80
100088ea:	2440      	movs	r4, #64	; 0x40
100088ec:	508c      	str	r4, [r1, r2]
100088ee:	508a      	str	r2, [r1, r2]
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
100088f0:	2200      	movs	r2, #0
100088f2:	761a      	strb	r2, [r3, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
100088f4:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
100088f6:	4a0d      	ldr	r2, [pc, #52]	; (1000892c <spi_disable+0x64>)
100088f8:	4293      	cmp	r3, r2
100088fa:	d109      	bne.n	10008910 <spi_disable+0x48>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
100088fc:	2041      	movs	r0, #65	; 0x41
100088fe:	4c0e      	ldr	r4, [pc, #56]	; (10008938 <spi_disable+0x70>)
10008900:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
10008902:	2026      	movs	r0, #38	; 0x26
10008904:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
10008906:	2038      	movs	r0, #56	; 0x38
10008908:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000890a:	2001      	movs	r0, #1
1000890c:	47a0      	blx	r4
1000890e:	e00b      	b.n	10008928 <spi_disable+0x60>
	} else if (spi_module == (void *)SPI1) {
10008910:	4a08      	ldr	r2, [pc, #32]	; (10008934 <spi_disable+0x6c>)
10008912:	4293      	cmp	r3, r2
10008914:	d108      	bne.n	10008928 <spi_disable+0x60>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
10008916:	2042      	movs	r0, #66	; 0x42
10008918:	4c07      	ldr	r4, [pc, #28]	; (10008938 <spi_disable+0x70>)
1000891a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000891c:	2027      	movs	r0, #39	; 0x27
1000891e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
10008920:	2039      	movs	r0, #57	; 0x39
10008922:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
10008924:	2002      	movs	r0, #2
10008926:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
10008928:	bd10      	pop	{r4, pc}
1000892a:	46c0      	nop			; (mov r8, r8)
1000892c:	40006000 	.word	0x40006000
10008930:	e000e100 	.word	0xe000e100
10008934:	40007000 	.word	0x40007000
10008938:	10009429 	.word	0x10009429

1000893c <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000893c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000893e:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
10008940:	4b09      	ldr	r3, [pc, #36]	; (10008968 <spi_reset+0x2c>)
10008942:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
10008944:	4b09      	ldr	r3, [pc, #36]	; (1000896c <spi_reset+0x30>)
10008946:	429c      	cmp	r4, r3
10008948:	d105      	bne.n	10008956 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000894a:	2001      	movs	r0, #1
1000894c:	4c08      	ldr	r4, [pc, #32]	; (10008970 <spi_reset+0x34>)
1000894e:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
10008950:	2038      	movs	r0, #56	; 0x38
10008952:	47a0      	blx	r4
10008954:	e007      	b.n	10008966 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
10008956:	4b07      	ldr	r3, [pc, #28]	; (10008974 <spi_reset+0x38>)
10008958:	429c      	cmp	r4, r3
1000895a:	d104      	bne.n	10008966 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000895c:	2002      	movs	r0, #2
1000895e:	4c04      	ldr	r4, [pc, #16]	; (10008970 <spi_reset+0x34>)
10008960:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
10008962:	2039      	movs	r0, #57	; 0x39
10008964:	47a0      	blx	r4
	}
}
10008966:	bd10      	pop	{r4, pc}
10008968:	100088c9 	.word	0x100088c9
1000896c:	40006000 	.word	0x40006000
10008970:	10009795 	.word	0x10009795
10008974:	40007000 	.word	0x40007000

10008978 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
10008978:	b5f0      	push	{r4, r5, r6, r7, lr}
1000897a:	4657      	mov	r7, sl
1000897c:	4646      	mov	r6, r8
1000897e:	b4c0      	push	{r6, r7}
10008980:	b083      	sub	sp, #12
10008982:	0005      	movs	r5, r0
10008984:	4688      	mov	r8, r1
10008986:	0016      	movs	r6, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
10008988:	6029      	str	r1, [r5, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000898a:	7e0b      	ldrb	r3, [r1, #24]
1000898c:	07db      	lsls	r3, r3, #31
1000898e:	d501      	bpl.n	10008994 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10008990:	2300      	movs	r3, #0
10008992:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
10008994:	0028      	movs	r0, r5
10008996:	4b5e      	ldr	r3, [pc, #376]	; (10008b10 <spi_init+0x198>)
10008998:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000899a:	682b      	ldr	r3, [r5, #0]

	if (spi_module == (void *)SPI0) {
1000899c:	4a5d      	ldr	r2, [pc, #372]	; (10008b14 <spi_init+0x19c>)
1000899e:	4293      	cmp	r3, r2
100089a0:	d109      	bne.n	100089b6 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
100089a2:	2041      	movs	r0, #65	; 0x41
100089a4:	4c5c      	ldr	r4, [pc, #368]	; (10008b18 <spi_init+0x1a0>)
100089a6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
100089a8:	2026      	movs	r0, #38	; 0x26
100089aa:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
100089ac:	2038      	movs	r0, #56	; 0x38
100089ae:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
100089b0:	2001      	movs	r0, #1
100089b2:	47a0      	blx	r4
100089b4:	e00b      	b.n	100089ce <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
100089b6:	4a59      	ldr	r2, [pc, #356]	; (10008b1c <spi_init+0x1a4>)
100089b8:	4293      	cmp	r3, r2
100089ba:	d122      	bne.n	10008a02 <spi_init+0x8a>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
100089bc:	2042      	movs	r0, #66	; 0x42
100089be:	4c56      	ldr	r4, [pc, #344]	; (10008b18 <spi_init+0x1a0>)
100089c0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
100089c2:	2027      	movs	r0, #39	; 0x27
100089c4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
100089c6:	2039      	movs	r0, #57	; 0x39
100089c8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
100089ca:	2002      	movs	r0, #2
100089cc:	47a0      	blx	r4

	spi_reset(module);
	_spi_clock_enable(module);

#if SPI_CALLBACK_MODE == true
	if (module->hw == SPI0) {
100089ce:	682b      	ldr	r3, [r5, #0]
100089d0:	4a50      	ldr	r2, [pc, #320]	; (10008b14 <spi_init+0x19c>)
100089d2:	4293      	cmp	r3, r2
100089d4:	d109      	bne.n	100089ea <spi_init+0x72>
		_spi_instances[0] = module;
100089d6:	4b52      	ldr	r3, [pc, #328]	; (10008b20 <spi_init+0x1a8>)
100089d8:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_SPIRX0_INDEX, (uint32_t)spi_rx0_isr_handler);
100089da:	4952      	ldr	r1, [pc, #328]	; (10008b24 <spi_init+0x1ac>)
100089dc:	2014      	movs	r0, #20
100089de:	4c52      	ldr	r4, [pc, #328]	; (10008b28 <spi_init+0x1b0>)
100089e0:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_SPITX0_INDEX, (uint32_t)spi_tx0_isr_handler);
100089e2:	4952      	ldr	r1, [pc, #328]	; (10008b2c <spi_init+0x1b4>)
100089e4:	2015      	movs	r0, #21
100089e6:	47a0      	blx	r4
100089e8:	e00b      	b.n	10008a02 <spi_init+0x8a>
	} else if (module->hw == SPI1) {
100089ea:	4a4c      	ldr	r2, [pc, #304]	; (10008b1c <spi_init+0x1a4>)
100089ec:	4293      	cmp	r3, r2
100089ee:	d108      	bne.n	10008a02 <spi_init+0x8a>
		_spi_instances[1] = module;
100089f0:	4b4b      	ldr	r3, [pc, #300]	; (10008b20 <spi_init+0x1a8>)
100089f2:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_SPIRX1_INDEX, (uint32_t)spi_rx1_isr_handler);
100089f4:	494e      	ldr	r1, [pc, #312]	; (10008b30 <spi_init+0x1b8>)
100089f6:	2016      	movs	r0, #22
100089f8:	4c4b      	ldr	r4, [pc, #300]	; (10008b28 <spi_init+0x1b0>)
100089fa:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_SPITX1_INDEX, (uint32_t)spi_tx1_isr_handler);
100089fc:	494d      	ldr	r1, [pc, #308]	; (10008b34 <spi_init+0x1bc>)
100089fe:	2017      	movs	r0, #23
10008a00:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10008a02:	a801      	add	r0, sp, #4
10008a04:	4b4c      	ldr	r3, [pc, #304]	; (10008b38 <spi_init+0x1c0>)
10008a06:	4798      	blx	r3
10008a08:	0034      	movs	r4, r6
10008a0a:	3408      	adds	r4, #8
10008a0c:	2318      	movs	r3, #24
10008a0e:	469a      	mov	sl, r3
10008a10:	44b2      	add	sl, r6
10008a12:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
10008a14:	6820      	ldr	r0, [r4, #0]
10008a16:	1c43      	adds	r3, r0, #1
10008a18:	d011      	beq.n	10008a3e <spi_init+0xc6>
			if (config->mode == SPI_MODE_MASTER) {
10008a1a:	7833      	ldrb	r3, [r6, #0]
10008a1c:	2b01      	cmp	r3, #1
10008a1e:	d102      	bne.n	10008a26 <spi_init+0xae>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10008a20:	466a      	mov	r2, sp
10008a22:	7113      	strb	r3, [r2, #4]
10008a24:	e003      	b.n	10008a2e <spi_init+0xb6>
			} else if (config->mode == SPI_MODE_SLAVE) {
10008a26:	2b00      	cmp	r3, #0
10008a28:	d101      	bne.n	10008a2e <spi_init+0xb6>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
10008a2a:	466a      	mov	r2, sp
10008a2c:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
10008a2e:	b2c0      	uxtb	r0, r0
10008a30:	a901      	add	r1, sp, #4
10008a32:	4b42      	ldr	r3, [pc, #264]	; (10008b3c <spi_init+0x1c4>)
10008a34:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
10008a36:	8a39      	ldrh	r1, [r7, #16]
10008a38:	7838      	ldrb	r0, [r7, #0]
10008a3a:	4b41      	ldr	r3, [pc, #260]	; (10008b40 <spi_init+0x1c8>)
10008a3c:	4798      	blx	r3
10008a3e:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
10008a40:	4554      	cmp	r4, sl
10008a42:	d1e6      	bne.n	10008a12 <spi_init+0x9a>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008a44:	78f3      	ldrb	r3, [r6, #3]
10008a46:	4642      	mov	r2, r8
10008a48:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
10008a4a:	7833      	ldrb	r3, [r6, #0]
10008a4c:	2b01      	cmp	r3, #1
10008a4e:	d100      	bne.n	10008a52 <spi_init+0xda>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
10008a50:	7713      	strb	r3, [r2, #28]
	/* Temporary variables */
	uint8_t i;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
10008a52:	2300      	movs	r3, #0
10008a54:	60ab      	str	r3, [r5, #8]
10008a56:	60eb      	str	r3, [r5, #12]
10008a58:	612b      	str	r3, [r5, #16]
10008a5a:	616b      	str	r3, [r5, #20]
	}
	module->tx_buffer_ptr              = NULL;
10008a5c:	61eb      	str	r3, [r5, #28]
	module->rx_buffer_ptr              = NULL;
10008a5e:	61ab      	str	r3, [r5, #24]
	module->remaining_tx_buffer_length = 0x0000;
10008a60:	2200      	movs	r2, #0
10008a62:	84ab      	strh	r3, [r5, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
10008a64:	842b      	strh	r3, [r5, #32]
	module->registered_callback        = 0x00;
10008a66:	3326      	adds	r3, #38	; 0x26
10008a68:	54ea      	strb	r2, [r5, r3]
	module->enabled_callback           = 0x00;
10008a6a:	3301      	adds	r3, #1
10008a6c:	54ea      	strb	r2, [r5, r3]
	module->status                     = STATUS_OK;
10008a6e:	3301      	adds	r3, #1
10008a70:	54ea      	strb	r2, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
10008a72:	3b25      	subs	r3, #37	; 0x25
10008a74:	71eb      	strb	r3, [r5, #7]
	module->locked                     = 0;
10008a76:	712a      	strb	r2, [r5, #4]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
10008a78:	682b      	ldr	r3, [r5, #0]

	module->mode  = config->mode;
10008a7a:	7832      	ldrb	r2, [r6, #0]
10008a7c:	716a      	strb	r2, [r5, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
10008a7e:	7832      	ldrb	r2, [r6, #0]
10008a80:	2a01      	cmp	r2, #1
10008a82:	d101      	bne.n	10008a88 <spi_init+0x110>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
10008a84:	7932      	ldrb	r2, [r6, #4]
10008a86:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
10008a88:	7872      	ldrb	r2, [r6, #1]
10008a8a:	2a04      	cmp	r2, #4
10008a8c:	d104      	bne.n	10008a98 <spi_init+0x120>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
10008a8e:	2124      	movs	r1, #36	; 0x24
10008a90:	5c58      	ldrb	r0, [r3, r1]
10008a92:	4302      	orrs	r2, r0
10008a94:	545a      	strb	r2, [r3, r1]
10008a96:	e004      	b.n	10008aa2 <spi_init+0x12a>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
10008a98:	2124      	movs	r1, #36	; 0x24
10008a9a:	5c5a      	ldrb	r2, [r3, r1]
10008a9c:	2004      	movs	r0, #4
10008a9e:	4382      	bics	r2, r0
10008aa0:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
10008aa2:	78b2      	ldrb	r2, [r6, #2]
10008aa4:	2a01      	cmp	r2, #1
10008aa6:	d01a      	beq.n	10008ade <spi_init+0x166>
10008aa8:	2a00      	cmp	r2, #0
10008aaa:	d004      	beq.n	10008ab6 <spi_init+0x13e>
10008aac:	2a02      	cmp	r2, #2
10008aae:	d00c      	beq.n	10008aca <spi_init+0x152>
10008ab0:	2a03      	cmp	r2, #3
10008ab2:	d01e      	beq.n	10008af2 <spi_init+0x17a>
10008ab4:	e026      	b.n	10008b04 <spi_init+0x18c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10008ab6:	2224      	movs	r2, #36	; 0x24
10008ab8:	5c99      	ldrb	r1, [r3, r2]
10008aba:	2002      	movs	r0, #2
10008abc:	4381      	bics	r1, r0
10008abe:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10008ac0:	5c99      	ldrb	r1, [r3, r2]
10008ac2:	3801      	subs	r0, #1
10008ac4:	4381      	bics	r1, r0
10008ac6:	5499      	strb	r1, [r3, r2]
10008ac8:	e01c      	b.n	10008b04 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10008aca:	2224      	movs	r2, #36	; 0x24
10008acc:	5c98      	ldrb	r0, [r3, r2]
10008ace:	2102      	movs	r1, #2
10008ad0:	4301      	orrs	r1, r0
10008ad2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10008ad4:	5c99      	ldrb	r1, [r3, r2]
10008ad6:	2001      	movs	r0, #1
10008ad8:	4381      	bics	r1, r0
10008ada:	5499      	strb	r1, [r3, r2]
10008adc:	e012      	b.n	10008b04 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10008ade:	2224      	movs	r2, #36	; 0x24
10008ae0:	5c99      	ldrb	r1, [r3, r2]
10008ae2:	2002      	movs	r0, #2
10008ae4:	4381      	bics	r1, r0
10008ae6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10008ae8:	5c98      	ldrb	r0, [r3, r2]
10008aea:	2101      	movs	r1, #1
10008aec:	4301      	orrs	r1, r0
10008aee:	5499      	strb	r1, [r3, r2]
10008af0:	e008      	b.n	10008b04 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10008af2:	2224      	movs	r2, #36	; 0x24
10008af4:	5c98      	ldrb	r0, [r3, r2]
10008af6:	2102      	movs	r1, #2
10008af8:	4301      	orrs	r1, r0
10008afa:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10008afc:	5c98      	ldrb	r0, [r3, r2]
10008afe:	2101      	movs	r1, #1
10008b00:	4301      	orrs	r1, r0
10008b02:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
10008b04:	2000      	movs	r0, #0
10008b06:	b003      	add	sp, #12
10008b08:	bc0c      	pop	{r2, r3}
10008b0a:	4690      	mov	r8, r2
10008b0c:	469a      	mov	sl, r3
10008b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008b10:	1000893d 	.word	0x1000893d
10008b14:	40006000 	.word	0x40006000
10008b18:	100090cd 	.word	0x100090cd
10008b1c:	40007000 	.word	0x40007000
10008b20:	1000a1d0 	.word	0x1000a1d0
10008b24:	10008be9 	.word	0x10008be9
10008b28:	10009bfd 	.word	0x10009bfd
10008b2c:	10008d15 	.word	0x10008d15
10008b30:	10008e19 	.word	0x10008e19
10008b34:	10008f45 	.word	0x10008f45
10008b38:	1000842d 	.word	0x1000842d
10008b3c:	1000843d 	.word	0x1000843d
10008b40:	100086cd 	.word	0x100086cd

10008b44 <spi_write>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Spi *const spi_module = (module->hw);
10008b44:	6803      	ldr	r3, [r0, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10008b46:	7a1a      	ldrb	r2, [r3, #8]
	Spi *const spi_module = (module->hw);

	/* Check if the data register has been copied to the shift register */
	if (!_spi_is_ready_to_write(spi_module)) {
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
10008b48:	2005      	movs	r0, #5
	Assert(module->hw);

	Spi *const spi_module = (module->hw);

	/* Check if the data register has been copied to the shift register */
	if (!_spi_is_ready_to_write(spi_module)) {
10008b4a:	07d2      	lsls	r2, r2, #31
10008b4c:	d501      	bpl.n	10008b52 <spi_write+0xe>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->TRANSMIT_DATA.reg = tx_data & SPI_TRANSMIT_DATA_MASK;
10008b4e:	7019      	strb	r1, [r3, #0]

	return STATUS_OK;
10008b50:	2000      	movs	r0, #0
}
10008b52:	4770      	bx	lr

10008b54 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
10008b54:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b56:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
10008b58:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
10008b5a:	2600      	movs	r6, #0
10008b5c:	466d      	mov	r5, sp
10008b5e:	71ee      	strb	r6, [r5, #7]
10008b60:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
10008b62:	2c00      	cmp	r4, #0
10008b64:	d034      	beq.n	10008bd0 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
10008b66:	2900      	cmp	r1, #0
10008b68:	d104      	bne.n	10008b74 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
10008b6a:	0029      	movs	r1, r5
10008b6c:	7980      	ldrb	r0, [r0, #6]
10008b6e:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
10008b70:	2701      	movs	r7, #1
10008b72:	e00b      	b.n	10008b8c <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
10008b74:	2a00      	cmp	r2, #0
10008b76:	d005      	beq.n	10008b84 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008b78:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
10008b7a:	2b00      	cmp	r3, #0
10008b7c:	d029      	beq.n	10008bd2 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
10008b7e:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10008b80:	2700      	movs	r7, #0
10008b82:	e003      	b.n	10008b8c <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
10008b84:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10008b86:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
10008b88:	466a      	mov	r2, sp
10008b8a:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
10008b8c:	2528      	movs	r5, #40	; 0x28
10008b8e:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
10008b90:	07c0      	lsls	r0, r0, #31
10008b92:	d4fc      	bmi.n	10008b8e <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
10008b94:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
10008b96:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
10008b98:	2b00      	cmp	r3, #0
10008b9a:	d014      	beq.n	10008bc6 <spi_transceive_buffer_wait+0x72>
10008b9c:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
10008b9e:	4278      	negs	r0, r7
10008ba0:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
10008ba2:	4270      	negs	r0, r6
10008ba4:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10008ba6:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
10008ba8:	07c0      	lsls	r0, r0, #31
10008baa:	d5fc      	bpl.n	10008ba6 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
10008bac:	7808      	ldrb	r0, [r1, #0]
10008bae:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
10008bb0:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
10008bb2:	07c0      	lsls	r0, r0, #31
10008bb4:	d5fc      	bpl.n	10008bb0 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
10008bb6:	7920      	ldrb	r0, [r4, #4]
10008bb8:	7010      	strb	r0, [r2, #0]
		transfer_len++;
10008bba:	3501      	adds	r5, #1
10008bbc:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
10008bbe:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
10008bc0:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
10008bc2:	42ab      	cmp	r3, r5
10008bc4:	d1ef      	bne.n	10008ba6 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
10008bc6:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
10008bc8:	06db      	lsls	r3, r3, #27
10008bca:	d5fc      	bpl.n	10008bc6 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
10008bcc:	2000      	movs	r0, #0
10008bce:	e000      	b.n	10008bd2 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
10008bd0:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
10008bd2:	b003      	add	sp, #12
10008bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008bd6:	46c0      	nop			; (mov r8, r8)

10008bd8 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
10008bd8:	b510      	push	{r4, lr}
10008bda:	0013      	movs	r3, r2
	return spi_transceive_buffer_wait(module, tx_data, NULL, length);
10008bdc:	2200      	movs	r2, #0
10008bde:	4c01      	ldr	r4, [pc, #4]	; (10008be4 <spi_write_buffer_wait+0xc>)
10008be0:	47a0      	blx	r4
}
10008be2:	bd10      	pop	{r4, pc}
10008be4:	10008b55 	.word	0x10008b55

10008be8 <spi_rx0_isr_handler>:
	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
}

void spi_rx0_isr_handler(void)
{
10008be8:	b510      	push	{r4, lr}
	struct spi_module *module = _spi_instances[0];
10008bea:	4b48      	ldr	r3, [pc, #288]	; (10008d0c <spi_rx0_isr_handler+0x124>)
10008bec:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10008bee:	6823      	ldr	r3, [r4, #0]
10008bf0:	7b1a      	ldrb	r2, [r3, #12]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
10008bf2:	2130      	movs	r1, #48	; 0x30
10008bf4:	5c59      	ldrb	r1, [r3, r1]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008bf6:	400a      	ands	r2, r1
10008bf8:	07d2      	lsls	r2, r2, #31
10008bfa:	d400      	bmi.n	10008bfe <spi_rx0_isr_handler+0x16>
10008bfc:	e085      	b.n	10008d0a <spi_rx0_isr_handler+0x122>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
10008bfe:	7b1a      	ldrb	r2, [r3, #12]
10008c00:	0692      	lsls	r2, r2, #26
10008c02:	d523      	bpl.n	10008c4c <spi_rx0_isr_handler+0x64>
			if (module->dir != SPI_DIRECTION_WRITE) {
10008c04:	79e2      	ldrb	r2, [r4, #7]
10008c06:	2a01      	cmp	r2, #1
10008c08:	d01d      	beq.n	10008c46 <spi_rx0_isr_handler+0x5e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
10008c0a:	211e      	movs	r1, #30
10008c0c:	2228      	movs	r2, #40	; 0x28
10008c0e:	54a1      	strb	r1, [r4, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
10008c10:	3a25      	subs	r2, #37	; 0x25
10008c12:	71e2      	strb	r2, [r4, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
10008c14:	3112      	adds	r1, #18
10008c16:	5c5a      	ldrb	r2, [r3, r1]
10008c18:	2021      	movs	r0, #33	; 0x21
10008c1a:	4382      	bics	r2, r0
10008c1c:	545a      	strb	r2, [r3, r1]
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10008c1e:	2327      	movs	r3, #39	; 0x27
10008c20:	5ce3      	ldrb	r3, [r4, r3]
10008c22:	071b      	lsls	r3, r3, #28
10008c24:	d50f      	bpl.n	10008c46 <spi_rx0_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
10008c26:	2326      	movs	r3, #38	; 0x26

				module->hw->RX_INTERRUPT_MASK.reg &=
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10008c28:	5ce3      	ldrb	r3, [r4, r3]
10008c2a:	071b      	lsls	r3, r3, #28
10008c2c:	d50b      	bpl.n	10008c46 <spi_rx0_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
10008c2e:	221e      	movs	r2, #30
10008c30:	2328      	movs	r3, #40	; 0x28
10008c32:	54e2      	strb	r2, [r4, r3]
					module->hw->RX_INTERRUPT_MASK.reg &=
10008c34:	6821      	ldr	r1, [r4, #0]
10008c36:	3212      	adds	r2, #18
10008c38:	5c8b      	ldrb	r3, [r1, r2]
10008c3a:	3801      	subs	r0, #1
10008c3c:	4383      	bics	r3, r0
10008c3e:	548b      	strb	r3, [r1, r2]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
10008c40:	0020      	movs	r0, r4
10008c42:	6963      	ldr	r3, [r4, #20]
10008c44:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
10008c46:	6823      	ldr	r3, [r4, #0]
10008c48:	791b      	ldrb	r3, [r3, #4]
10008c4a:	e05e      	b.n	10008d0a <spi_rx0_isr_handler+0x122>
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
10008c4c:	79e2      	ldrb	r2, [r4, #7]
10008c4e:	2a01      	cmp	r2, #1
10008c50:	d113      	bne.n	10008c7a <spi_rx0_isr_handler+0x92>
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->RECEIVE_DATA.reg;
10008c52:	791a      	ldrb	r2, [r3, #4]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
10008c54:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10008c56:	3a01      	subs	r2, #1
10008c58:	b292      	uxth	r2, r2
10008c5a:	8462      	strh	r2, [r4, #34]	; 0x22
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
10008c5c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10008c5e:	b292      	uxth	r2, r2
10008c60:	2a00      	cmp	r2, #0
10008c62:	d152      	bne.n	10008d0a <spi_rx0_isr_handler+0x122>
					module->hw->RX_INTERRUPT_MASK.reg &=
10008c64:	2130      	movs	r1, #48	; 0x30
10008c66:	5c5a      	ldrb	r2, [r3, r1]
10008c68:	2020      	movs	r0, #32
10008c6a:	4382      	bics	r2, r0
10008c6c:	545a      	strb	r2, [r3, r1]
						~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
10008c6e:	2200      	movs	r2, #0
10008c70:	2328      	movs	r3, #40	; 0x28
10008c72:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
10008c74:	3b25      	subs	r3, #37	; 0x25
10008c76:	71e3      	strb	r3, [r4, #7]
10008c78:	e047      	b.n	10008d0a <spi_rx0_isr_handler+0x122>
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	uint16_t received_data = (spi_hw->RECEIVE_DATA.reg & SPI_RECEIVE_DATA_MASK);
10008c7a:	791b      	ldrb	r3, [r3, #4]
10008c7c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10008c7e:	69a2      	ldr	r2, [r4, #24]
10008c80:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008c82:	69a3      	ldr	r3, [r4, #24]
10008c84:	3301      	adds	r3, #1
10008c86:	61a3      	str	r3, [r4, #24]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008c88:	8c23      	ldrh	r3, [r4, #32]
10008c8a:	3b01      	subs	r3, #1
10008c8c:	b29b      	uxth	r3, r3
10008c8e:	8423      	strh	r3, [r4, #32]
						//(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
					//}
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
10008c90:	8c23      	ldrh	r3, [r4, #32]
10008c92:	b29b      	uxth	r3, r3
10008c94:	2b00      	cmp	r3, #0
10008c96:	d138      	bne.n	10008d0a <spi_rx0_isr_handler+0x122>
					if(module->dir == SPI_DIRECTION_READ) {
10008c98:	79e3      	ldrb	r3, [r4, #7]
10008c9a:	2b00      	cmp	r3, #0
10008c9c:	d114      	bne.n	10008cc8 <spi_rx0_isr_handler+0xe0>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
10008c9e:	3327      	adds	r3, #39	; 0x27
10008ca0:	5ce3      	ldrb	r3, [r4, r3]
10008ca2:	079b      	lsls	r3, r3, #30
10008ca4:	d531      	bpl.n	10008d0a <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
10008ca6:	2326      	movs	r3, #38	; 0x26
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
10008ca8:	5ce3      	ldrb	r3, [r4, r3]
10008caa:	079b      	lsls	r3, r3, #30
10008cac:	d52d      	bpl.n	10008d0a <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
10008cae:	2200      	movs	r2, #0
10008cb0:	2328      	movs	r3, #40	; 0x28
10008cb2:	54e2      	strb	r2, [r4, r3]
							module->hw->RX_INTERRUPT_MASK.reg &=
10008cb4:	6821      	ldr	r1, [r4, #0]
10008cb6:	3230      	adds	r2, #48	; 0x30
10008cb8:	5c8b      	ldrb	r3, [r1, r2]
10008cba:	2001      	movs	r0, #1
10008cbc:	4383      	bics	r3, r0
10008cbe:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
10008cc0:	68e3      	ldr	r3, [r4, #12]
10008cc2:	0020      	movs	r0, r4
10008cc4:	4798      	blx	r3
10008cc6:	e020      	b.n	10008d0a <spi_rx0_isr_handler+0x122>
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
10008cc8:	79e3      	ldrb	r3, [r4, #7]
10008cca:	2b02      	cmp	r3, #2
10008ccc:	d11d      	bne.n	10008d0a <spi_rx0_isr_handler+0x122>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10008cce:	3325      	adds	r3, #37	; 0x25
10008cd0:	5ce3      	ldrb	r3, [r4, r3]
10008cd2:	075b      	lsls	r3, r3, #29
10008cd4:	d519      	bpl.n	10008d0a <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
10008cd6:	2326      	movs	r3, #38	; 0x26
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10008cd8:	5ce3      	ldrb	r3, [r4, r3]
10008cda:	075b      	lsls	r3, r3, #29
10008cdc:	d515      	bpl.n	10008d0a <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
								module->hw->RX_INTERRUPT_MASK.reg &=
10008cde:	6821      	ldr	r1, [r4, #0]
10008ce0:	2230      	movs	r2, #48	; 0x30
10008ce2:	5c8b      	ldrb	r3, [r1, r2]
10008ce4:	2001      	movs	r0, #1
10008ce6:	4383      	bics	r3, r0
10008ce8:	548b      	strb	r3, [r1, r2]
										~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
								if (flag_direction_both[0]) {
10008cea:	4b09      	ldr	r3, [pc, #36]	; (10008d10 <spi_rx0_isr_handler+0x128>)
10008cec:	781b      	ldrb	r3, [r3, #0]
10008cee:	2b00      	cmp	r3, #0
10008cf0:	d008      	beq.n	10008d04 <spi_rx0_isr_handler+0x11c>
									module->status = STATUS_OK;
10008cf2:	2300      	movs	r3, #0
10008cf4:	3a08      	subs	r2, #8
10008cf6:	54a3      	strb	r3, [r4, r2]
									flag_direction_both[0] = false;
10008cf8:	4a05      	ldr	r2, [pc, #20]	; (10008d10 <spi_rx0_isr_handler+0x128>)
10008cfa:	7013      	strb	r3, [r2, #0]
									(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
10008cfc:	6923      	ldr	r3, [r4, #16]
10008cfe:	0020      	movs	r0, r4
10008d00:	4798      	blx	r3
10008d02:	e002      	b.n	10008d0a <spi_rx0_isr_handler+0x122>
								} else {
									flag_direction_both[0] = true;
10008d04:	2201      	movs	r2, #1
10008d06:	4b02      	ldr	r3, [pc, #8]	; (10008d10 <spi_rx0_isr_handler+0x128>)
10008d08:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
10008d0a:	bd10      	pop	{r4, pc}
10008d0c:	1000a1d0 	.word	0x1000a1d0
10008d10:	1000a1c8 	.word	0x1000a1c8

10008d14 <spi_tx0_isr_handler>:

void spi_tx0_isr_handler(void)
{
10008d14:	b570      	push	{r4, r5, r6, lr}
	struct spi_module *module = _spi_instances[0];
10008d16:	4b3d      	ldr	r3, [pc, #244]	; (10008e0c <spi_tx0_isr_handler+0xf8>)
10008d18:	6818      	ldr	r0, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10008d1a:	6802      	ldr	r2, [r0, #0]
10008d1c:	7a13      	ldrb	r3, [r2, #8]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
10008d1e:	212c      	movs	r1, #44	; 0x2c
10008d20:	5c51      	ldrb	r1, [r2, r1]
10008d22:	400b      	ands	r3, r1

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
10008d24:	07d9      	lsls	r1, r3, #31
10008d26:	d536      	bpl.n	10008d96 <spi_tx0_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
10008d28:	7941      	ldrb	r1, [r0, #5]
10008d2a:	2901      	cmp	r1, #1
10008d2c:	d133      	bne.n	10008d96 <spi_tx0_isr_handler+0x82>
			(module->dir == SPI_DIRECTION_READ)) {
10008d2e:	79c1      	ldrb	r1, [r0, #7]
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
10008d30:	2900      	cmp	r1, #0
10008d32:	d113      	bne.n	10008d5c <spi_tx0_isr_handler+0x48>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write dummy byte */
	spi_hw->TRANSMIT_DATA.reg = dummy_write;
10008d34:	4936      	ldr	r1, [pc, #216]	; (10008e10 <spi_tx0_isr_handler+0xfc>)
10008d36:	7809      	ldrb	r1, [r1, #0]
10008d38:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
10008d3a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
10008d3c:	3a01      	subs	r2, #1
10008d3e:	b292      	uxth	r2, r2
10008d40:	8442      	strh	r2, [r0, #34]	; 0x22
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
10008d42:	8c42      	ldrh	r2, [r0, #34]	; 0x22
10008d44:	b292      	uxth	r2, r2
10008d46:	2a00      	cmp	r2, #0
10008d48:	d105      	bne.n	10008d56 <spi_tx0_isr_handler+0x42>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
10008d4a:	6804      	ldr	r4, [r0, #0]
10008d4c:	212c      	movs	r1, #44	; 0x2c
10008d4e:	5c62      	ldrb	r2, [r4, r1]
10008d50:	2501      	movs	r5, #1
10008d52:	43aa      	bics	r2, r5
10008d54:	5462      	strb	r2, [r4, r1]
					~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
10008d56:	7942      	ldrb	r2, [r0, #5]
10008d58:	2a01      	cmp	r2, #1
10008d5a:	d11c      	bne.n	10008d96 <spi_tx0_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
10008d5c:	79c2      	ldrb	r2, [r0, #7]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
10008d5e:	2a00      	cmp	r2, #0
10008d60:	d019      	beq.n	10008d96 <spi_tx0_isr_handler+0x82>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
10008d62:	69c2      	ldr	r2, [r0, #28]
10008d64:	7811      	ldrb	r1, [r2, #0]
10008d66:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10008d68:	3201      	adds	r2, #1
10008d6a:	61c2      	str	r2, [r0, #28]

	/* Write the data to send*/
	spi_hw->TRANSMIT_DATA.reg = data_to_send & SPI_TRANSMIT_DATA_MASK;
10008d6c:	6802      	ldr	r2, [r0, #0]
10008d6e:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10008d70:	8c82      	ldrh	r2, [r0, #36]	; 0x24
10008d72:	3a01      	subs	r2, #1
10008d74:	b292      	uxth	r2, r2
10008d76:	8482      	strh	r2, [r0, #36]	; 0x24
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
10008d78:	8c82      	ldrh	r2, [r0, #36]	; 0x24
10008d7a:	b292      	uxth	r2, r2
10008d7c:	2a00      	cmp	r2, #0
10008d7e:	d10a      	bne.n	10008d96 <spi_tx0_isr_handler+0x82>
				module->hw->TX_INTERRUPT_MASK.reg &=
10008d80:	6804      	ldr	r4, [r0, #0]
10008d82:	322c      	adds	r2, #44	; 0x2c
10008d84:	5ca1      	ldrb	r1, [r4, r2]
10008d86:	2501      	movs	r5, #1
10008d88:	43a9      	bics	r1, r5
10008d8a:	54a1      	strb	r1, [r4, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
10008d8c:	6804      	ldr	r4, [r0, #0]
10008d8e:	5ca5      	ldrb	r5, [r4, r2]
10008d90:	2110      	movs	r1, #16
10008d92:	4329      	orrs	r1, r5
10008d94:	54a1      	strb	r1, [r4, r2]
						SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10008d96:	06db      	lsls	r3, r3, #27
10008d98:	d536      	bpl.n	10008e08 <spi_tx0_isr_handler+0xf4>
		if (module->dir == SPI_DIRECTION_WRITE) {
10008d9a:	79c3      	ldrb	r3, [r0, #7]
10008d9c:	2b01      	cmp	r3, #1
10008d9e:	d113      	bne.n	10008dc8 <spi_tx0_isr_handler+0xb4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
10008da0:	3326      	adds	r3, #38	; 0x26
10008da2:	5cc3      	ldrb	r3, [r0, r3]
10008da4:	07db      	lsls	r3, r3, #31
10008da6:	d52f      	bpl.n	10008e08 <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
10008da8:	2326      	movs	r3, #38	; 0x26
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
10008daa:	5cc3      	ldrb	r3, [r0, r3]
10008dac:	07db      	lsls	r3, r3, #31
10008dae:	d52b      	bpl.n	10008e08 <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
					module->status = STATUS_OK;
10008db0:	2200      	movs	r2, #0
10008db2:	2328      	movs	r3, #40	; 0x28
10008db4:	54c2      	strb	r2, [r0, r3]
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
10008db6:	6801      	ldr	r1, [r0, #0]
10008db8:	322c      	adds	r2, #44	; 0x2c
10008dba:	5c8b      	ldrb	r3, [r1, r2]
10008dbc:	2410      	movs	r4, #16
10008dbe:	43a3      	bics	r3, r4
10008dc0:	548b      	strb	r3, [r1, r2]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
10008dc2:	6883      	ldr	r3, [r0, #8]
10008dc4:	4798      	blx	r3
10008dc6:	e01f      	b.n	10008e08 <spi_tx0_isr_handler+0xf4>
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
10008dc8:	79c3      	ldrb	r3, [r0, #7]
10008dca:	2b02      	cmp	r3, #2
10008dcc:	d11c      	bne.n	10008e08 <spi_tx0_isr_handler+0xf4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10008dce:	3325      	adds	r3, #37	; 0x25
10008dd0:	5cc3      	ldrb	r3, [r0, r3]
10008dd2:	075b      	lsls	r3, r3, #29
10008dd4:	d518      	bpl.n	10008e08 <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
10008dd6:	2326      	movs	r3, #38	; 0x26
					module->hw->TX_INTERRUPT_MASK.reg &=
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10008dd8:	5cc3      	ldrb	r3, [r0, r3]
10008dda:	075b      	lsls	r3, r3, #29
10008ddc:	d514      	bpl.n	10008e08 <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
10008dde:	6801      	ldr	r1, [r0, #0]
10008de0:	222c      	movs	r2, #44	; 0x2c
10008de2:	5c8b      	ldrb	r3, [r1, r2]
10008de4:	2410      	movs	r4, #16
10008de6:	43a3      	bics	r3, r4
10008de8:	548b      	strb	r3, [r1, r2]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					if (flag_direction_both[0]) {
10008dea:	4b0a      	ldr	r3, [pc, #40]	; (10008e14 <spi_tx0_isr_handler+0x100>)
10008dec:	781b      	ldrb	r3, [r3, #0]
10008dee:	2b00      	cmp	r3, #0
10008df0:	d007      	beq.n	10008e02 <spi_tx0_isr_handler+0xee>
						module->status = STATUS_OK;
10008df2:	2300      	movs	r3, #0
10008df4:	3a04      	subs	r2, #4
10008df6:	5483      	strb	r3, [r0, r2]
						flag_direction_both[0] = false;
10008df8:	4a06      	ldr	r2, [pc, #24]	; (10008e14 <spi_tx0_isr_handler+0x100>)
10008dfa:	7013      	strb	r3, [r2, #0]
						(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
10008dfc:	6903      	ldr	r3, [r0, #16]
10008dfe:	4798      	blx	r3
10008e00:	e002      	b.n	10008e08 <spi_tx0_isr_handler+0xf4>
					} else {
						flag_direction_both[0] = true;
10008e02:	2201      	movs	r2, #1
10008e04:	4b03      	ldr	r3, [pc, #12]	; (10008e14 <spi_tx0_isr_handler+0x100>)
10008e06:	701a      	strb	r2, [r3, #0]
					}
			}
		}
	}
}
10008e08:	bd70      	pop	{r4, r5, r6, pc}
10008e0a:	46c0      	nop			; (mov r8, r8)
10008e0c:	1000a1d0 	.word	0x1000a1d0
10008e10:	1000a1ca 	.word	0x1000a1ca
10008e14:	1000a1c8 	.word	0x1000a1c8

10008e18 <spi_rx1_isr_handler>:

void spi_rx1_isr_handler(void)
{
10008e18:	b510      	push	{r4, lr}
	struct spi_module *module = _spi_instances[1];
10008e1a:	4b48      	ldr	r3, [pc, #288]	; (10008f3c <spi_rx1_isr_handler+0x124>)
10008e1c:	685c      	ldr	r4, [r3, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10008e1e:	6823      	ldr	r3, [r4, #0]
10008e20:	7b1a      	ldrb	r2, [r3, #12]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
10008e22:	2130      	movs	r1, #48	; 0x30
10008e24:	5c59      	ldrb	r1, [r3, r1]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008e26:	400a      	ands	r2, r1
10008e28:	07d2      	lsls	r2, r2, #31
10008e2a:	d400      	bmi.n	10008e2e <spi_rx1_isr_handler+0x16>
10008e2c:	e085      	b.n	10008f3a <spi_rx1_isr_handler+0x122>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
10008e2e:	7b1a      	ldrb	r2, [r3, #12]
10008e30:	0692      	lsls	r2, r2, #26
10008e32:	d523      	bpl.n	10008e7c <spi_rx1_isr_handler+0x64>
			if (module->dir != SPI_DIRECTION_WRITE) {
10008e34:	79e2      	ldrb	r2, [r4, #7]
10008e36:	2a01      	cmp	r2, #1
10008e38:	d01d      	beq.n	10008e76 <spi_rx1_isr_handler+0x5e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
10008e3a:	211e      	movs	r1, #30
10008e3c:	2228      	movs	r2, #40	; 0x28
10008e3e:	54a1      	strb	r1, [r4, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
10008e40:	3a25      	subs	r2, #37	; 0x25
10008e42:	71e2      	strb	r2, [r4, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
10008e44:	3112      	adds	r1, #18
10008e46:	5c5a      	ldrb	r2, [r3, r1]
10008e48:	2021      	movs	r0, #33	; 0x21
10008e4a:	4382      	bics	r2, r0
10008e4c:	545a      	strb	r2, [r3, r1]
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10008e4e:	2327      	movs	r3, #39	; 0x27
10008e50:	5ce3      	ldrb	r3, [r4, r3]
10008e52:	071b      	lsls	r3, r3, #28
10008e54:	d50f      	bpl.n	10008e76 <spi_rx1_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
10008e56:	2326      	movs	r3, #38	; 0x26

				module->hw->RX_INTERRUPT_MASK.reg &=
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10008e58:	5ce3      	ldrb	r3, [r4, r3]
10008e5a:	071b      	lsls	r3, r3, #28
10008e5c:	d50b      	bpl.n	10008e76 <spi_rx1_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
10008e5e:	221e      	movs	r2, #30
10008e60:	2328      	movs	r3, #40	; 0x28
10008e62:	54e2      	strb	r2, [r4, r3]
					module->hw->RX_INTERRUPT_MASK.reg &=
10008e64:	6821      	ldr	r1, [r4, #0]
10008e66:	3212      	adds	r2, #18
10008e68:	5c8b      	ldrb	r3, [r1, r2]
10008e6a:	3801      	subs	r0, #1
10008e6c:	4383      	bics	r3, r0
10008e6e:	548b      	strb	r3, [r1, r2]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
10008e70:	0020      	movs	r0, r4
10008e72:	6963      	ldr	r3, [r4, #20]
10008e74:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
10008e76:	6823      	ldr	r3, [r4, #0]
10008e78:	791b      	ldrb	r3, [r3, #4]
10008e7a:	e05e      	b.n	10008f3a <spi_rx1_isr_handler+0x122>
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
10008e7c:	79e2      	ldrb	r2, [r4, #7]
10008e7e:	2a01      	cmp	r2, #1
10008e80:	d113      	bne.n	10008eaa <spi_rx1_isr_handler+0x92>
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->RECEIVE_DATA.reg;
10008e82:	791a      	ldrb	r2, [r3, #4]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
10008e84:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10008e86:	3a01      	subs	r2, #1
10008e88:	b292      	uxth	r2, r2
10008e8a:	8462      	strh	r2, [r4, #34]	; 0x22
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
10008e8c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10008e8e:	b292      	uxth	r2, r2
10008e90:	2a00      	cmp	r2, #0
10008e92:	d152      	bne.n	10008f3a <spi_rx1_isr_handler+0x122>
					module->hw->RX_INTERRUPT_MASK.reg &=
10008e94:	2130      	movs	r1, #48	; 0x30
10008e96:	5c5a      	ldrb	r2, [r3, r1]
10008e98:	2020      	movs	r0, #32
10008e9a:	4382      	bics	r2, r0
10008e9c:	545a      	strb	r2, [r3, r1]
							~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
10008e9e:	2200      	movs	r2, #0
10008ea0:	2328      	movs	r3, #40	; 0x28
10008ea2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
10008ea4:	3b25      	subs	r3, #37	; 0x25
10008ea6:	71e3      	strb	r3, [r4, #7]
10008ea8:	e047      	b.n	10008f3a <spi_rx1_isr_handler+0x122>
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	uint16_t received_data = (spi_hw->RECEIVE_DATA.reg & SPI_RECEIVE_DATA_MASK);
10008eaa:	791b      	ldrb	r3, [r3, #4]
10008eac:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10008eae:	69a2      	ldr	r2, [r4, #24]
10008eb0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008eb2:	69a3      	ldr	r3, [r4, #24]
10008eb4:	3301      	adds	r3, #1
10008eb6:	61a3      	str	r3, [r4, #24]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008eb8:	8c23      	ldrh	r3, [r4, #32]
10008eba:	3b01      	subs	r3, #1
10008ebc:	b29b      	uxth	r3, r3
10008ebe:	8423      	strh	r3, [r4, #32]
					module->status = STATUS_OK;
					module->dir = SPI_DIRECTION_IDLE;
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
10008ec0:	8c23      	ldrh	r3, [r4, #32]
10008ec2:	b29b      	uxth	r3, r3
10008ec4:	2b00      	cmp	r3, #0
10008ec6:	d138      	bne.n	10008f3a <spi_rx1_isr_handler+0x122>
					if(module->dir == SPI_DIRECTION_READ) {
10008ec8:	79e3      	ldrb	r3, [r4, #7]
10008eca:	2b00      	cmp	r3, #0
10008ecc:	d114      	bne.n	10008ef8 <spi_rx1_isr_handler+0xe0>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
10008ece:	3327      	adds	r3, #39	; 0x27
10008ed0:	5ce3      	ldrb	r3, [r4, r3]
10008ed2:	079b      	lsls	r3, r3, #30
10008ed4:	d531      	bpl.n	10008f3a <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
10008ed6:	2326      	movs	r3, #38	; 0x26
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
10008ed8:	5ce3      	ldrb	r3, [r4, r3]
10008eda:	079b      	lsls	r3, r3, #30
10008edc:	d52d      	bpl.n	10008f3a <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
10008ede:	2200      	movs	r2, #0
10008ee0:	2328      	movs	r3, #40	; 0x28
10008ee2:	54e2      	strb	r2, [r4, r3]
							module->hw->RX_INTERRUPT_MASK.reg &=
10008ee4:	6821      	ldr	r1, [r4, #0]
10008ee6:	3230      	adds	r2, #48	; 0x30
10008ee8:	5c8b      	ldrb	r3, [r1, r2]
10008eea:	2001      	movs	r0, #1
10008eec:	4383      	bics	r3, r0
10008eee:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
10008ef0:	68e3      	ldr	r3, [r4, #12]
10008ef2:	0020      	movs	r0, r4
10008ef4:	4798      	blx	r3
10008ef6:	e020      	b.n	10008f3a <spi_rx1_isr_handler+0x122>
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
10008ef8:	79e3      	ldrb	r3, [r4, #7]
10008efa:	2b02      	cmp	r3, #2
10008efc:	d11d      	bne.n	10008f3a <spi_rx1_isr_handler+0x122>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10008efe:	3325      	adds	r3, #37	; 0x25
10008f00:	5ce3      	ldrb	r3, [r4, r3]
10008f02:	075b      	lsls	r3, r3, #29
10008f04:	d519      	bpl.n	10008f3a <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
10008f06:	2326      	movs	r3, #38	; 0x26
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10008f08:	5ce3      	ldrb	r3, [r4, r3]
10008f0a:	075b      	lsls	r3, r3, #29
10008f0c:	d515      	bpl.n	10008f3a <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
							module->hw->RX_INTERRUPT_MASK.reg &=
10008f0e:	6821      	ldr	r1, [r4, #0]
10008f10:	2230      	movs	r2, #48	; 0x30
10008f12:	5c8b      	ldrb	r3, [r1, r2]
10008f14:	2001      	movs	r0, #1
10008f16:	4383      	bics	r3, r0
10008f18:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							if (flag_direction_both[1]) {
10008f1a:	4b09      	ldr	r3, [pc, #36]	; (10008f40 <spi_rx1_isr_handler+0x128>)
10008f1c:	785b      	ldrb	r3, [r3, #1]
10008f1e:	2b00      	cmp	r3, #0
10008f20:	d008      	beq.n	10008f34 <spi_rx1_isr_handler+0x11c>
								module->status = STATUS_OK;
10008f22:	2300      	movs	r3, #0
10008f24:	3a08      	subs	r2, #8
10008f26:	54a3      	strb	r3, [r4, r2]
								flag_direction_both[1] = false;
10008f28:	4a05      	ldr	r2, [pc, #20]	; (10008f40 <spi_rx1_isr_handler+0x128>)
10008f2a:	7053      	strb	r3, [r2, #1]
								(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
10008f2c:	6923      	ldr	r3, [r4, #16]
10008f2e:	0020      	movs	r0, r4
10008f30:	4798      	blx	r3
10008f32:	e002      	b.n	10008f3a <spi_rx1_isr_handler+0x122>
							} else {
								flag_direction_both[1] = true;
10008f34:	2201      	movs	r2, #1
10008f36:	4b02      	ldr	r3, [pc, #8]	; (10008f40 <spi_rx1_isr_handler+0x128>)
10008f38:	705a      	strb	r2, [r3, #1]
					}
				}
			}
		}
	}
}
10008f3a:	bd10      	pop	{r4, pc}
10008f3c:	1000a1d0 	.word	0x1000a1d0
10008f40:	1000a1c8 	.word	0x1000a1c8

10008f44 <spi_tx1_isr_handler>:

void spi_tx1_isr_handler(void)
{
10008f44:	b570      	push	{r4, r5, r6, lr}
	struct spi_module *module = _spi_instances[1];
10008f46:	4b3d      	ldr	r3, [pc, #244]	; (1000903c <spi_tx1_isr_handler+0xf8>)
10008f48:	6858      	ldr	r0, [r3, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10008f4a:	6802      	ldr	r2, [r0, #0]
10008f4c:	7a13      	ldrb	r3, [r2, #8]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
10008f4e:	212c      	movs	r1, #44	; 0x2c
10008f50:	5c51      	ldrb	r1, [r2, r1]
10008f52:	400b      	ands	r3, r1

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
10008f54:	07d9      	lsls	r1, r3, #31
10008f56:	d536      	bpl.n	10008fc6 <spi_tx1_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
10008f58:	7941      	ldrb	r1, [r0, #5]
10008f5a:	2901      	cmp	r1, #1
10008f5c:	d133      	bne.n	10008fc6 <spi_tx1_isr_handler+0x82>
		(module->dir == SPI_DIRECTION_READ)) {
10008f5e:	79c1      	ldrb	r1, [r0, #7]
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
10008f60:	2900      	cmp	r1, #0
10008f62:	d113      	bne.n	10008f8c <spi_tx1_isr_handler+0x48>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write dummy byte */
	spi_hw->TRANSMIT_DATA.reg = dummy_write;
10008f64:	4936      	ldr	r1, [pc, #216]	; (10009040 <spi_tx1_isr_handler+0xfc>)
10008f66:	7809      	ldrb	r1, [r1, #0]
10008f68:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
10008f6a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
10008f6c:	3a01      	subs	r2, #1
10008f6e:	b292      	uxth	r2, r2
10008f70:	8442      	strh	r2, [r0, #34]	; 0x22
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
		(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
10008f72:	8c42      	ldrh	r2, [r0, #34]	; 0x22
10008f74:	b292      	uxth	r2, r2
10008f76:	2a00      	cmp	r2, #0
10008f78:	d105      	bne.n	10008f86 <spi_tx1_isr_handler+0x42>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
10008f7a:	6804      	ldr	r4, [r0, #0]
10008f7c:	212c      	movs	r1, #44	; 0x2c
10008f7e:	5c62      	ldrb	r2, [r4, r1]
10008f80:	2501      	movs	r5, #1
10008f82:	43aa      	bics	r2, r5
10008f84:	5462      	strb	r2, [r4, r1]
				~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
10008f86:	7942      	ldrb	r2, [r0, #5]
10008f88:	2a01      	cmp	r2, #1
10008f8a:	d11c      	bne.n	10008fc6 <spi_tx1_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
10008f8c:	79c2      	ldrb	r2, [r0, #7]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
10008f8e:	2a00      	cmp	r2, #0
10008f90:	d019      	beq.n	10008fc6 <spi_tx1_isr_handler+0x82>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
10008f92:	69c2      	ldr	r2, [r0, #28]
10008f94:	7811      	ldrb	r1, [r2, #0]
10008f96:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10008f98:	3201      	adds	r2, #1
10008f9a:	61c2      	str	r2, [r0, #28]

	/* Write the data to send*/
	spi_hw->TRANSMIT_DATA.reg = data_to_send & SPI_TRANSMIT_DATA_MASK;
10008f9c:	6802      	ldr	r2, [r0, #0]
10008f9e:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10008fa0:	8c82      	ldrh	r2, [r0, #36]	; 0x24
10008fa2:	3a01      	subs	r2, #1
10008fa4:	b292      	uxth	r2, r2
10008fa6:	8482      	strh	r2, [r0, #36]	; 0x24
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
10008fa8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
10008faa:	b292      	uxth	r2, r2
10008fac:	2a00      	cmp	r2, #0
10008fae:	d10a      	bne.n	10008fc6 <spi_tx1_isr_handler+0x82>
				module->hw->TX_INTERRUPT_MASK.reg &=
10008fb0:	6804      	ldr	r4, [r0, #0]
10008fb2:	322c      	adds	r2, #44	; 0x2c
10008fb4:	5ca1      	ldrb	r1, [r4, r2]
10008fb6:	2501      	movs	r5, #1
10008fb8:	43a9      	bics	r1, r5
10008fba:	54a1      	strb	r1, [r4, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
10008fbc:	6804      	ldr	r4, [r0, #0]
10008fbe:	5ca5      	ldrb	r5, [r4, r2]
10008fc0:	2110      	movs	r1, #16
10008fc2:	4329      	orrs	r1, r5
10008fc4:	54a1      	strb	r1, [r4, r2]
				SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10008fc6:	06db      	lsls	r3, r3, #27
10008fc8:	d536      	bpl.n	10009038 <spi_tx1_isr_handler+0xf4>
		if (module->dir == SPI_DIRECTION_WRITE) {
10008fca:	79c3      	ldrb	r3, [r0, #7]
10008fcc:	2b01      	cmp	r3, #1
10008fce:	d113      	bne.n	10008ff8 <spi_tx1_isr_handler+0xb4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
10008fd0:	3326      	adds	r3, #38	; 0x26
10008fd2:	5cc3      	ldrb	r3, [r0, r3]
10008fd4:	07db      	lsls	r3, r3, #31
10008fd6:	d52f      	bpl.n	10009038 <spi_tx1_isr_handler+0xf4>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
10008fd8:	2326      	movs	r3, #38	; 0x26
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
10008fda:	5cc3      	ldrb	r3, [r0, r3]
10008fdc:	07db      	lsls	r3, r3, #31
10008fde:	d52b      	bpl.n	10009038 <spi_tx1_isr_handler+0xf4>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
				module->status = STATUS_OK;
10008fe0:	2200      	movs	r2, #0
10008fe2:	2328      	movs	r3, #40	; 0x28
10008fe4:	54c2      	strb	r2, [r0, r3]
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
10008fe6:	6801      	ldr	r1, [r0, #0]
10008fe8:	322c      	adds	r2, #44	; 0x2c
10008fea:	5c8b      	ldrb	r3, [r1, r2]
10008fec:	2410      	movs	r4, #16
10008fee:	43a3      	bics	r3, r4
10008ff0:	548b      	strb	r3, [r1, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
10008ff2:	6883      	ldr	r3, [r0, #8]
10008ff4:	4798      	blx	r3
10008ff6:	e01f      	b.n	10009038 <spi_tx1_isr_handler+0xf4>
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
10008ff8:	79c3      	ldrb	r3, [r0, #7]
10008ffa:	2b02      	cmp	r3, #2
10008ffc:	d11c      	bne.n	10009038 <spi_tx1_isr_handler+0xf4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10008ffe:	3325      	adds	r3, #37	; 0x25
10009000:	5cc3      	ldrb	r3, [r0, r3]
10009002:	075b      	lsls	r3, r3, #29
10009004:	d518      	bpl.n	10009038 <spi_tx1_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
10009006:	2326      	movs	r3, #38	; 0x26
				module->hw->TX_INTERRUPT_MASK.reg &=
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10009008:	5cc3      	ldrb	r3, [r0, r3]
1000900a:	075b      	lsls	r3, r3, #29
1000900c:	d514      	bpl.n	10009038 <spi_tx1_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000900e:	6801      	ldr	r1, [r0, #0]
10009010:	222c      	movs	r2, #44	; 0x2c
10009012:	5c8b      	ldrb	r3, [r1, r2]
10009014:	2410      	movs	r4, #16
10009016:	43a3      	bics	r3, r4
10009018:	548b      	strb	r3, [r1, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				if (flag_direction_both[1]) {
1000901a:	4b0a      	ldr	r3, [pc, #40]	; (10009044 <spi_tx1_isr_handler+0x100>)
1000901c:	785b      	ldrb	r3, [r3, #1]
1000901e:	2b00      	cmp	r3, #0
10009020:	d007      	beq.n	10009032 <spi_tx1_isr_handler+0xee>
					module->status = STATUS_OK;
10009022:	2300      	movs	r3, #0
10009024:	3a04      	subs	r2, #4
10009026:	5483      	strb	r3, [r0, r2]
					flag_direction_both[1] = false;
10009028:	4a06      	ldr	r2, [pc, #24]	; (10009044 <spi_tx1_isr_handler+0x100>)
1000902a:	7053      	strb	r3, [r2, #1]
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
1000902c:	6903      	ldr	r3, [r0, #16]
1000902e:	4798      	blx	r3
10009030:	e002      	b.n	10009038 <spi_tx1_isr_handler+0xf4>
				} else {
					flag_direction_both[1] = true;
10009032:	2201      	movs	r2, #1
10009034:	4b03      	ldr	r3, [pc, #12]	; (10009044 <spi_tx1_isr_handler+0x100>)
10009036:	705a      	strb	r2, [r3, #1]
				}
			}
		}
	}
}
10009038:	bd70      	pop	{r4, r5, r6, pc}
1000903a:	46c0      	nop			; (mov r8, r8)
1000903c:	1000a1d0 	.word	0x1000a1d0
10009040:	1000a1ca 	.word	0x1000a1ca
10009044:	1000a1c8 	.word	0x1000a1c8

10009048 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10009048:	2801      	cmp	r0, #1
1000904a:	d00d      	beq.n	10009068 <system_clock_config+0x20>
1000904c:	2800      	cmp	r0, #0
1000904e:	d002      	beq.n	10009056 <system_clock_config+0xe>
10009050:	2802      	cmp	r0, #2
10009052:	d01c      	beq.n	1000908e <system_clock_config+0x46>
10009054:	e02e      	b.n	100090b4 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
10009056:	4a18      	ldr	r2, [pc, #96]	; (100090b8 <system_clock_config+0x70>)
10009058:	6990      	ldr	r0, [r2, #24]
1000905a:	230c      	movs	r3, #12
1000905c:	4303      	orrs	r3, r0
1000905e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10009060:	4a16      	ldr	r2, [pc, #88]	; (100090bc <system_clock_config+0x74>)
10009062:	4b17      	ldr	r3, [pc, #92]	; (100090c0 <system_clock_config+0x78>)
10009064:	601a      	str	r2, [r3, #0]
			break;
10009066:	e01a      	b.n	1000909e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
10009068:	4b13      	ldr	r3, [pc, #76]	; (100090b8 <system_clock_config+0x70>)
1000906a:	6998      	ldr	r0, [r3, #24]
1000906c:	2208      	movs	r2, #8
1000906e:	4302      	orrs	r2, r0
10009070:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
10009072:	699a      	ldr	r2, [r3, #24]
10009074:	2004      	movs	r0, #4
10009076:	4382      	bics	r2, r0
10009078:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000907a:	4a12      	ldr	r2, [pc, #72]	; (100090c4 <system_clock_config+0x7c>)
1000907c:	6853      	ldr	r3, [r2, #4]
1000907e:	2080      	movs	r0, #128	; 0x80
10009080:	0300      	lsls	r0, r0, #12
10009082:	4303      	orrs	r3, r0
10009084:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10009086:	4a10      	ldr	r2, [pc, #64]	; (100090c8 <system_clock_config+0x80>)
10009088:	4b0d      	ldr	r3, [pc, #52]	; (100090c0 <system_clock_config+0x78>)
1000908a:	601a      	str	r2, [r3, #0]
			break;
1000908c:	e007      	b.n	1000909e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000908e:	4a0a      	ldr	r2, [pc, #40]	; (100090b8 <system_clock_config+0x70>)
10009090:	6993      	ldr	r3, [r2, #24]
10009092:	200c      	movs	r0, #12
10009094:	4383      	bics	r3, r0
10009096:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10009098:	4a08      	ldr	r2, [pc, #32]	; (100090bc <system_clock_config+0x74>)
1000909a:	4b09      	ldr	r3, [pc, #36]	; (100090c0 <system_clock_config+0x78>)
1000909c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000909e:	4b06      	ldr	r3, [pc, #24]	; (100090b8 <system_clock_config+0x70>)
100090a0:	699a      	ldr	r2, [r3, #24]
100090a2:	2003      	movs	r0, #3
100090a4:	4382      	bics	r2, r0
100090a6:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
100090a8:	699a      	ldr	r2, [r3, #24]
100090aa:	4001      	ands	r1, r0
100090ac:	4311      	orrs	r1, r2
100090ae:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
100090b0:	2000      	movs	r0, #0
100090b2:	e000      	b.n	100090b6 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
100090b4:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
100090b6:	4770      	bx	lr
100090b8:	4000b000 	.word	0x4000b000
100090bc:	018cba80 	.word	0x018cba80
100090c0:	1000a1d8 	.word	0x1000a1d8
100090c4:	4000f000 	.word	0x4000f000
100090c8:	001e8480 	.word	0x001e8480

100090cc <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
100090cc:	b500      	push	{lr}
	switch (peripheral) {
100090ce:	2835      	cmp	r0, #53	; 0x35
100090d0:	d900      	bls.n	100090d4 <system_clock_peripheral_enable+0x8>
100090d2:	e1a2      	b.n	1000941a <system_clock_peripheral_enable+0x34e>
100090d4:	0080      	lsls	r0, r0, #2
100090d6:	4bd2      	ldr	r3, [pc, #840]	; (10009420 <system_clock_peripheral_enable+0x354>)
100090d8:	581b      	ldr	r3, [r3, r0]
100090da:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100090dc:	4ad1      	ldr	r2, [pc, #836]	; (10009424 <system_clock_peripheral_enable+0x358>)
100090de:	68d1      	ldr	r1, [r2, #12]
100090e0:	2302      	movs	r3, #2
100090e2:	430b      	orrs	r3, r1
100090e4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090e6:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
100090e8:	e198      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100090ea:	4ace      	ldr	r2, [pc, #824]	; (10009424 <system_clock_peripheral_enable+0x358>)
100090ec:	68d1      	ldr	r1, [r2, #12]
100090ee:	2304      	movs	r3, #4
100090f0:	430b      	orrs	r3, r1
100090f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
100090f6:	e191      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100090f8:	4aca      	ldr	r2, [pc, #808]	; (10009424 <system_clock_peripheral_enable+0x358>)
100090fa:	68d1      	ldr	r1, [r2, #12]
100090fc:	2308      	movs	r3, #8
100090fe:	430b      	orrs	r3, r1
10009100:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009102:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
10009104:	e18a      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009106:	4ac7      	ldr	r2, [pc, #796]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009108:	68d1      	ldr	r1, [r2, #12]
1000910a:	2310      	movs	r3, #16
1000910c:	430b      	orrs	r3, r1
1000910e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009110:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
10009112:	e183      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009114:	4ac3      	ldr	r2, [pc, #780]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009116:	68d1      	ldr	r1, [r2, #12]
10009118:	2320      	movs	r3, #32
1000911a:	430b      	orrs	r3, r1
1000911c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000911e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
10009120:	e17c      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009122:	4ac0      	ldr	r2, [pc, #768]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009124:	68d1      	ldr	r1, [r2, #12]
10009126:	2380      	movs	r3, #128	; 0x80
10009128:	430b      	orrs	r3, r1
1000912a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000912c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000912e:	e175      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009130:	4abc      	ldr	r2, [pc, #752]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009132:	68d3      	ldr	r3, [r2, #12]
10009134:	2180      	movs	r1, #128	; 0x80
10009136:	0049      	lsls	r1, r1, #1
10009138:	430b      	orrs	r3, r1
1000913a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000913c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000913e:	e16d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009140:	4ab8      	ldr	r2, [pc, #736]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009142:	68d3      	ldr	r3, [r2, #12]
10009144:	2180      	movs	r1, #128	; 0x80
10009146:	0109      	lsls	r1, r1, #4
10009148:	430b      	orrs	r3, r1
1000914a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000914c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000914e:	e165      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009150:	4ab4      	ldr	r2, [pc, #720]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009152:	68d3      	ldr	r3, [r2, #12]
10009154:	2180      	movs	r1, #128	; 0x80
10009156:	0149      	lsls	r1, r1, #5
10009158:	430b      	orrs	r3, r1
1000915a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000915c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000915e:	e15d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009160:	4ab0      	ldr	r2, [pc, #704]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009162:	68d3      	ldr	r3, [r2, #12]
10009164:	2180      	movs	r1, #128	; 0x80
10009166:	0189      	lsls	r1, r1, #6
10009168:	430b      	orrs	r3, r1
1000916a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000916c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000916e:	e155      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009170:	4aac      	ldr	r2, [pc, #688]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009172:	68d3      	ldr	r3, [r2, #12]
10009174:	2180      	movs	r1, #128	; 0x80
10009176:	01c9      	lsls	r1, r1, #7
10009178:	430b      	orrs	r3, r1
1000917a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000917c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000917e:	e14d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009180:	4aa8      	ldr	r2, [pc, #672]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009182:	68d3      	ldr	r3, [r2, #12]
10009184:	2180      	movs	r1, #128	; 0x80
10009186:	0209      	lsls	r1, r1, #8
10009188:	430b      	orrs	r3, r1
1000918a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000918c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000918e:	e145      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009190:	4aa4      	ldr	r2, [pc, #656]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009192:	68d3      	ldr	r3, [r2, #12]
10009194:	2180      	movs	r1, #128	; 0x80
10009196:	0249      	lsls	r1, r1, #9
10009198:	430b      	orrs	r3, r1
1000919a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000919c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000919e:	e13d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091a0:	4aa0      	ldr	r2, [pc, #640]	; (10009424 <system_clock_peripheral_enable+0x358>)
100091a2:	68d3      	ldr	r3, [r2, #12]
100091a4:	2180      	movs	r1, #128	; 0x80
100091a6:	0289      	lsls	r1, r1, #10
100091a8:	430b      	orrs	r3, r1
100091aa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
100091ae:	e135      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091b0:	4a9c      	ldr	r2, [pc, #624]	; (10009424 <system_clock_peripheral_enable+0x358>)
100091b2:	68d3      	ldr	r3, [r2, #12]
100091b4:	2180      	movs	r1, #128	; 0x80
100091b6:	02c9      	lsls	r1, r1, #11
100091b8:	430b      	orrs	r3, r1
100091ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
100091be:	e12d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091c0:	4a98      	ldr	r2, [pc, #608]	; (10009424 <system_clock_peripheral_enable+0x358>)
100091c2:	68d3      	ldr	r3, [r2, #12]
100091c4:	2180      	movs	r1, #128	; 0x80
100091c6:	0309      	lsls	r1, r1, #12
100091c8:	430b      	orrs	r3, r1
100091ca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
100091ce:	e125      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091d0:	4a94      	ldr	r2, [pc, #592]	; (10009424 <system_clock_peripheral_enable+0x358>)
100091d2:	68d3      	ldr	r3, [r2, #12]
100091d4:	2180      	movs	r1, #128	; 0x80
100091d6:	0349      	lsls	r1, r1, #13
100091d8:	430b      	orrs	r3, r1
100091da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
100091de:	e11d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091e0:	4a90      	ldr	r2, [pc, #576]	; (10009424 <system_clock_peripheral_enable+0x358>)
100091e2:	68d3      	ldr	r3, [r2, #12]
100091e4:	2180      	movs	r1, #128	; 0x80
100091e6:	0389      	lsls	r1, r1, #14
100091e8:	430b      	orrs	r3, r1
100091ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
100091ee:	e115      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091f0:	4a8c      	ldr	r2, [pc, #560]	; (10009424 <system_clock_peripheral_enable+0x358>)
100091f2:	68d3      	ldr	r3, [r2, #12]
100091f4:	2180      	movs	r1, #128	; 0x80
100091f6:	03c9      	lsls	r1, r1, #15
100091f8:	430b      	orrs	r3, r1
100091fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
100091fe:	e10d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009200:	4a88      	ldr	r2, [pc, #544]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009202:	68d3      	ldr	r3, [r2, #12]
10009204:	2180      	movs	r1, #128	; 0x80
10009206:	0409      	lsls	r1, r1, #16
10009208:	430b      	orrs	r3, r1
1000920a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000920c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000920e:	e105      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009210:	4a84      	ldr	r2, [pc, #528]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009212:	68d3      	ldr	r3, [r2, #12]
10009214:	2180      	movs	r1, #128	; 0x80
10009216:	0449      	lsls	r1, r1, #17
10009218:	430b      	orrs	r3, r1
1000921a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000921c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000921e:	e0fd      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009220:	4a80      	ldr	r2, [pc, #512]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009222:	68d3      	ldr	r3, [r2, #12]
10009224:	2180      	movs	r1, #128	; 0x80
10009226:	0489      	lsls	r1, r1, #18
10009228:	430b      	orrs	r3, r1
1000922a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000922c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000922e:	e0f5      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009230:	4a7c      	ldr	r2, [pc, #496]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009232:	68d3      	ldr	r3, [r2, #12]
10009234:	2180      	movs	r1, #128	; 0x80
10009236:	04c9      	lsls	r1, r1, #19
10009238:	430b      	orrs	r3, r1
1000923a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000923c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000923e:	e0ed      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009240:	4a78      	ldr	r2, [pc, #480]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009242:	68d3      	ldr	r3, [r2, #12]
10009244:	2180      	movs	r1, #128	; 0x80
10009246:	0509      	lsls	r1, r1, #20
10009248:	430b      	orrs	r3, r1
1000924a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000924c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000924e:	e0e5      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009250:	4a74      	ldr	r2, [pc, #464]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009252:	68d3      	ldr	r3, [r2, #12]
10009254:	2180      	movs	r1, #128	; 0x80
10009256:	0549      	lsls	r1, r1, #21
10009258:	430b      	orrs	r3, r1
1000925a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000925c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000925e:	e0dd      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009260:	4a70      	ldr	r2, [pc, #448]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009262:	68d3      	ldr	r3, [r2, #12]
10009264:	2180      	movs	r1, #128	; 0x80
10009266:	0589      	lsls	r1, r1, #22
10009268:	430b      	orrs	r3, r1
1000926a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000926c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000926e:	e0d5      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009270:	4a6c      	ldr	r2, [pc, #432]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009272:	68d3      	ldr	r3, [r2, #12]
10009274:	2180      	movs	r1, #128	; 0x80
10009276:	05c9      	lsls	r1, r1, #23
10009278:	430b      	orrs	r3, r1
1000927a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000927c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000927e:	e0cd      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009280:	4a68      	ldr	r2, [pc, #416]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009282:	6911      	ldr	r1, [r2, #16]
10009284:	2301      	movs	r3, #1
10009286:	430b      	orrs	r3, r1
10009288:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000928a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000928c:	e0c6      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000928e:	4a65      	ldr	r2, [pc, #404]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009290:	6911      	ldr	r1, [r2, #16]
10009292:	2302      	movs	r3, #2
10009294:	430b      	orrs	r3, r1
10009296:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009298:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000929a:	e0bf      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000929c:	4a61      	ldr	r2, [pc, #388]	; (10009424 <system_clock_peripheral_enable+0x358>)
1000929e:	6911      	ldr	r1, [r2, #16]
100092a0:	2304      	movs	r3, #4
100092a2:	430b      	orrs	r3, r1
100092a4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
100092a8:	e0b8      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092aa:	4a5e      	ldr	r2, [pc, #376]	; (10009424 <system_clock_peripheral_enable+0x358>)
100092ac:	6911      	ldr	r1, [r2, #16]
100092ae:	2308      	movs	r3, #8
100092b0:	430b      	orrs	r3, r1
100092b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
100092b6:	e0b1      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092b8:	4a5a      	ldr	r2, [pc, #360]	; (10009424 <system_clock_peripheral_enable+0x358>)
100092ba:	6911      	ldr	r1, [r2, #16]
100092bc:	2310      	movs	r3, #16
100092be:	430b      	orrs	r3, r1
100092c0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092c2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
100092c4:	e0aa      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092c6:	4a57      	ldr	r2, [pc, #348]	; (10009424 <system_clock_peripheral_enable+0x358>)
100092c8:	6911      	ldr	r1, [r2, #16]
100092ca:	2320      	movs	r3, #32
100092cc:	430b      	orrs	r3, r1
100092ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
100092d2:	e0a3      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092d4:	4a53      	ldr	r2, [pc, #332]	; (10009424 <system_clock_peripheral_enable+0x358>)
100092d6:	6911      	ldr	r1, [r2, #16]
100092d8:	2340      	movs	r3, #64	; 0x40
100092da:	430b      	orrs	r3, r1
100092dc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092de:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
100092e0:	e09c      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092e2:	4a50      	ldr	r2, [pc, #320]	; (10009424 <system_clock_peripheral_enable+0x358>)
100092e4:	6911      	ldr	r1, [r2, #16]
100092e6:	2380      	movs	r3, #128	; 0x80
100092e8:	430b      	orrs	r3, r1
100092ea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
100092ee:	e095      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092f0:	4a4c      	ldr	r2, [pc, #304]	; (10009424 <system_clock_peripheral_enable+0x358>)
100092f2:	6913      	ldr	r3, [r2, #16]
100092f4:	2180      	movs	r1, #128	; 0x80
100092f6:	0049      	lsls	r1, r1, #1
100092f8:	430b      	orrs	r3, r1
100092fa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
100092fe:	e08d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009300:	4a48      	ldr	r2, [pc, #288]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009302:	6913      	ldr	r3, [r2, #16]
10009304:	2180      	movs	r1, #128	; 0x80
10009306:	0089      	lsls	r1, r1, #2
10009308:	430b      	orrs	r3, r1
1000930a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000930c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000930e:	e085      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009310:	4a44      	ldr	r2, [pc, #272]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009312:	6913      	ldr	r3, [r2, #16]
10009314:	2180      	movs	r1, #128	; 0x80
10009316:	00c9      	lsls	r1, r1, #3
10009318:	430b      	orrs	r3, r1
1000931a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000931c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000931e:	e07d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009320:	4a40      	ldr	r2, [pc, #256]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009322:	6913      	ldr	r3, [r2, #16]
10009324:	2180      	movs	r1, #128	; 0x80
10009326:	0109      	lsls	r1, r1, #4
10009328:	430b      	orrs	r3, r1
1000932a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000932c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000932e:	e075      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009330:	4a3c      	ldr	r2, [pc, #240]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009332:	6913      	ldr	r3, [r2, #16]
10009334:	2180      	movs	r1, #128	; 0x80
10009336:	0149      	lsls	r1, r1, #5
10009338:	430b      	orrs	r3, r1
1000933a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000933c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000933e:	e06d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009340:	4a38      	ldr	r2, [pc, #224]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009342:	6913      	ldr	r3, [r2, #16]
10009344:	2180      	movs	r1, #128	; 0x80
10009346:	0189      	lsls	r1, r1, #6
10009348:	430b      	orrs	r3, r1
1000934a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000934c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000934e:	e065      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009350:	4a34      	ldr	r2, [pc, #208]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009352:	6913      	ldr	r3, [r2, #16]
10009354:	2180      	movs	r1, #128	; 0x80
10009356:	01c9      	lsls	r1, r1, #7
10009358:	430b      	orrs	r3, r1
1000935a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000935c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000935e:	e05d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009360:	4a30      	ldr	r2, [pc, #192]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009362:	6913      	ldr	r3, [r2, #16]
10009364:	2180      	movs	r1, #128	; 0x80
10009366:	0209      	lsls	r1, r1, #8
10009368:	430b      	orrs	r3, r1
1000936a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000936c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000936e:	e055      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009370:	4a2c      	ldr	r2, [pc, #176]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009372:	6913      	ldr	r3, [r2, #16]
10009374:	2180      	movs	r1, #128	; 0x80
10009376:	0249      	lsls	r1, r1, #9
10009378:	430b      	orrs	r3, r1
1000937a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000937c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000937e:	e04d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009380:	4a28      	ldr	r2, [pc, #160]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009382:	6913      	ldr	r3, [r2, #16]
10009384:	2180      	movs	r1, #128	; 0x80
10009386:	0289      	lsls	r1, r1, #10
10009388:	430b      	orrs	r3, r1
1000938a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000938c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000938e:	e045      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009390:	4a24      	ldr	r2, [pc, #144]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009392:	6913      	ldr	r3, [r2, #16]
10009394:	2180      	movs	r1, #128	; 0x80
10009396:	02c9      	lsls	r1, r1, #11
10009398:	430b      	orrs	r3, r1
1000939a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000939c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000939e:	e03d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093a0:	4a20      	ldr	r2, [pc, #128]	; (10009424 <system_clock_peripheral_enable+0x358>)
100093a2:	6913      	ldr	r3, [r2, #16]
100093a4:	2180      	movs	r1, #128	; 0x80
100093a6:	0309      	lsls	r1, r1, #12
100093a8:	430b      	orrs	r3, r1
100093aa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
100093ae:	e035      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093b0:	4a1c      	ldr	r2, [pc, #112]	; (10009424 <system_clock_peripheral_enable+0x358>)
100093b2:	6913      	ldr	r3, [r2, #16]
100093b4:	2180      	movs	r1, #128	; 0x80
100093b6:	0349      	lsls	r1, r1, #13
100093b8:	430b      	orrs	r3, r1
100093ba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
100093be:	e02d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093c0:	4a18      	ldr	r2, [pc, #96]	; (10009424 <system_clock_peripheral_enable+0x358>)
100093c2:	6913      	ldr	r3, [r2, #16]
100093c4:	2180      	movs	r1, #128	; 0x80
100093c6:	0389      	lsls	r1, r1, #14
100093c8:	430b      	orrs	r3, r1
100093ca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
100093ce:	e025      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093d0:	4a14      	ldr	r2, [pc, #80]	; (10009424 <system_clock_peripheral_enable+0x358>)
100093d2:	6913      	ldr	r3, [r2, #16]
100093d4:	2180      	movs	r1, #128	; 0x80
100093d6:	03c9      	lsls	r1, r1, #15
100093d8:	430b      	orrs	r3, r1
100093da:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
100093de:	e01d      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093e0:	4a10      	ldr	r2, [pc, #64]	; (10009424 <system_clock_peripheral_enable+0x358>)
100093e2:	6913      	ldr	r3, [r2, #16]
100093e4:	2180      	movs	r1, #128	; 0x80
100093e6:	0409      	lsls	r1, r1, #16
100093e8:	430b      	orrs	r3, r1
100093ea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
100093ee:	e015      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
100093f0:	4a0c      	ldr	r2, [pc, #48]	; (10009424 <system_clock_peripheral_enable+0x358>)
100093f2:	7d11      	ldrb	r1, [r2, #20]
100093f4:	2301      	movs	r3, #1
100093f6:	430b      	orrs	r3, r1
100093f8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
100093fc:	e00e      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
100093fe:	4a09      	ldr	r2, [pc, #36]	; (10009424 <system_clock_peripheral_enable+0x358>)
10009400:	7d11      	ldrb	r1, [r2, #20]
10009402:	2302      	movs	r3, #2
10009404:	430b      	orrs	r3, r1
10009406:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009408:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000940a:	e007      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000940c:	4a05      	ldr	r2, [pc, #20]	; (10009424 <system_clock_peripheral_enable+0x358>)
1000940e:	7d11      	ldrb	r1, [r2, #20]
10009410:	2304      	movs	r3, #4
10009412:	430b      	orrs	r3, r1
10009414:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009416:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
10009418:	e000      	b.n	1000941c <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000941a:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000941c:	bd00      	pop	{pc}
1000941e:	46c0      	nop			; (mov r8, r8)
10009420:	10009ec4 	.word	0x10009ec4
10009424:	4000b000 	.word	0x4000b000

10009428 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
10009428:	b500      	push	{lr}
	switch (peripheral) {
1000942a:	2835      	cmp	r0, #53	; 0x35
1000942c:	d900      	bls.n	10009430 <system_clock_peripheral_disable+0x8>
1000942e:	e17d      	b.n	1000972c <system_clock_peripheral_disable+0x304>
10009430:	0080      	lsls	r0, r0, #2
10009432:	4bbf      	ldr	r3, [pc, #764]	; (10009730 <system_clock_peripheral_disable+0x308>)
10009434:	581b      	ldr	r3, [r3, r0]
10009436:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009438:	4abe      	ldr	r2, [pc, #760]	; (10009734 <system_clock_peripheral_disable+0x30c>)
1000943a:	68d3      	ldr	r3, [r2, #12]
1000943c:	2102      	movs	r1, #2
1000943e:	438b      	bics	r3, r1
10009440:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009442:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
10009444:	e173      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009446:	4abb      	ldr	r2, [pc, #748]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009448:	68d3      	ldr	r3, [r2, #12]
1000944a:	2104      	movs	r1, #4
1000944c:	438b      	bics	r3, r1
1000944e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009450:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
10009452:	e16c      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009454:	4ab7      	ldr	r2, [pc, #732]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009456:	68d3      	ldr	r3, [r2, #12]
10009458:	2108      	movs	r1, #8
1000945a:	438b      	bics	r3, r1
1000945c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000945e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
10009460:	e165      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009462:	4ab4      	ldr	r2, [pc, #720]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009464:	68d3      	ldr	r3, [r2, #12]
10009466:	2110      	movs	r1, #16
10009468:	438b      	bics	r3, r1
1000946a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000946c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000946e:	e15e      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009470:	4ab0      	ldr	r2, [pc, #704]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009472:	68d3      	ldr	r3, [r2, #12]
10009474:	2120      	movs	r1, #32
10009476:	438b      	bics	r3, r1
10009478:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000947a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000947c:	e157      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000947e:	4aad      	ldr	r2, [pc, #692]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009480:	68d3      	ldr	r3, [r2, #12]
10009482:	2180      	movs	r1, #128	; 0x80
10009484:	438b      	bics	r3, r1
10009486:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009488:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000948a:	e150      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000948c:	4aa9      	ldr	r2, [pc, #676]	; (10009734 <system_clock_peripheral_disable+0x30c>)
1000948e:	68d1      	ldr	r1, [r2, #12]
10009490:	4ba9      	ldr	r3, [pc, #676]	; (10009738 <system_clock_peripheral_disable+0x310>)
10009492:	400b      	ands	r3, r1
10009494:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009496:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
10009498:	e149      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000949a:	4aa6      	ldr	r2, [pc, #664]	; (10009734 <system_clock_peripheral_disable+0x30c>)
1000949c:	68d1      	ldr	r1, [r2, #12]
1000949e:	4ba7      	ldr	r3, [pc, #668]	; (1000973c <system_clock_peripheral_disable+0x314>)
100094a0:	400b      	ands	r3, r1
100094a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
100094a6:	e142      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100094a8:	4aa2      	ldr	r2, [pc, #648]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100094aa:	68d1      	ldr	r1, [r2, #12]
100094ac:	4ba4      	ldr	r3, [pc, #656]	; (10009740 <system_clock_peripheral_disable+0x318>)
100094ae:	400b      	ands	r3, r1
100094b0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
100094b4:	e13b      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100094b6:	4a9f      	ldr	r2, [pc, #636]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100094b8:	68d1      	ldr	r1, [r2, #12]
100094ba:	4ba2      	ldr	r3, [pc, #648]	; (10009744 <system_clock_peripheral_disable+0x31c>)
100094bc:	400b      	ands	r3, r1
100094be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
100094c2:	e134      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100094c4:	4a9b      	ldr	r2, [pc, #620]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100094c6:	68d1      	ldr	r1, [r2, #12]
100094c8:	4b9f      	ldr	r3, [pc, #636]	; (10009748 <system_clock_peripheral_disable+0x320>)
100094ca:	400b      	ands	r3, r1
100094cc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
100094d0:	e12d      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100094d2:	4a98      	ldr	r2, [pc, #608]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100094d4:	68d1      	ldr	r1, [r2, #12]
100094d6:	4b9d      	ldr	r3, [pc, #628]	; (1000974c <system_clock_peripheral_disable+0x324>)
100094d8:	400b      	ands	r3, r1
100094da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
100094de:	e126      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100094e0:	4a94      	ldr	r2, [pc, #592]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100094e2:	68d1      	ldr	r1, [r2, #12]
100094e4:	4b9a      	ldr	r3, [pc, #616]	; (10009750 <system_clock_peripheral_disable+0x328>)
100094e6:	400b      	ands	r3, r1
100094e8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
100094ec:	e11f      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100094ee:	4a91      	ldr	r2, [pc, #580]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100094f0:	68d1      	ldr	r1, [r2, #12]
100094f2:	4b98      	ldr	r3, [pc, #608]	; (10009754 <system_clock_peripheral_disable+0x32c>)
100094f4:	400b      	ands	r3, r1
100094f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
100094fa:	e118      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100094fc:	4a8d      	ldr	r2, [pc, #564]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100094fe:	68d1      	ldr	r1, [r2, #12]
10009500:	4b95      	ldr	r3, [pc, #596]	; (10009758 <system_clock_peripheral_disable+0x330>)
10009502:	400b      	ands	r3, r1
10009504:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009506:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10009508:	e111      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000950a:	4a8a      	ldr	r2, [pc, #552]	; (10009734 <system_clock_peripheral_disable+0x30c>)
1000950c:	68d1      	ldr	r1, [r2, #12]
1000950e:	4b93      	ldr	r3, [pc, #588]	; (1000975c <system_clock_peripheral_disable+0x334>)
10009510:	400b      	ands	r3, r1
10009512:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009514:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10009516:	e10a      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009518:	4a86      	ldr	r2, [pc, #536]	; (10009734 <system_clock_peripheral_disable+0x30c>)
1000951a:	68d1      	ldr	r1, [r2, #12]
1000951c:	4b90      	ldr	r3, [pc, #576]	; (10009760 <system_clock_peripheral_disable+0x338>)
1000951e:	400b      	ands	r3, r1
10009520:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009522:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10009524:	e103      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009526:	4a83      	ldr	r2, [pc, #524]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009528:	68d1      	ldr	r1, [r2, #12]
1000952a:	4b8e      	ldr	r3, [pc, #568]	; (10009764 <system_clock_peripheral_disable+0x33c>)
1000952c:	400b      	ands	r3, r1
1000952e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009530:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10009532:	e0fc      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009534:	4a7f      	ldr	r2, [pc, #508]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009536:	68d1      	ldr	r1, [r2, #12]
10009538:	4b8b      	ldr	r3, [pc, #556]	; (10009768 <system_clock_peripheral_disable+0x340>)
1000953a:	400b      	ands	r3, r1
1000953c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000953e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10009540:	e0f5      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009542:	4a7c      	ldr	r2, [pc, #496]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009544:	68d1      	ldr	r1, [r2, #12]
10009546:	4b89      	ldr	r3, [pc, #548]	; (1000976c <system_clock_peripheral_disable+0x344>)
10009548:	400b      	ands	r3, r1
1000954a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000954c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000954e:	e0ee      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009550:	4a78      	ldr	r2, [pc, #480]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009552:	68d1      	ldr	r1, [r2, #12]
10009554:	4b86      	ldr	r3, [pc, #536]	; (10009770 <system_clock_peripheral_disable+0x348>)
10009556:	400b      	ands	r3, r1
10009558:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000955a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000955c:	e0e7      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000955e:	4a75      	ldr	r2, [pc, #468]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009560:	68d1      	ldr	r1, [r2, #12]
10009562:	4b84      	ldr	r3, [pc, #528]	; (10009774 <system_clock_peripheral_disable+0x34c>)
10009564:	400b      	ands	r3, r1
10009566:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009568:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000956a:	e0e0      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000956c:	4a71      	ldr	r2, [pc, #452]	; (10009734 <system_clock_peripheral_disable+0x30c>)
1000956e:	68d1      	ldr	r1, [r2, #12]
10009570:	4b81      	ldr	r3, [pc, #516]	; (10009778 <system_clock_peripheral_disable+0x350>)
10009572:	400b      	ands	r3, r1
10009574:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009576:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
10009578:	e0d9      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000957a:	4a6e      	ldr	r2, [pc, #440]	; (10009734 <system_clock_peripheral_disable+0x30c>)
1000957c:	68d1      	ldr	r1, [r2, #12]
1000957e:	4b7f      	ldr	r3, [pc, #508]	; (1000977c <system_clock_peripheral_disable+0x354>)
10009580:	400b      	ands	r3, r1
10009582:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009584:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
10009586:	e0d2      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009588:	4a6a      	ldr	r2, [pc, #424]	; (10009734 <system_clock_peripheral_disable+0x30c>)
1000958a:	68d1      	ldr	r1, [r2, #12]
1000958c:	4b7c      	ldr	r3, [pc, #496]	; (10009780 <system_clock_peripheral_disable+0x358>)
1000958e:	400b      	ands	r3, r1
10009590:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009592:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
10009594:	e0cb      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009596:	4a67      	ldr	r2, [pc, #412]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009598:	68d1      	ldr	r1, [r2, #12]
1000959a:	4b7a      	ldr	r3, [pc, #488]	; (10009784 <system_clock_peripheral_disable+0x35c>)
1000959c:	400b      	ands	r3, r1
1000959e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
100095a2:	e0c4      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100095a4:	4a63      	ldr	r2, [pc, #396]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100095a6:	68d1      	ldr	r1, [r2, #12]
100095a8:	4b77      	ldr	r3, [pc, #476]	; (10009788 <system_clock_peripheral_disable+0x360>)
100095aa:	400b      	ands	r3, r1
100095ac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
100095b0:	e0bd      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100095b2:	4a60      	ldr	r2, [pc, #384]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100095b4:	6913      	ldr	r3, [r2, #16]
100095b6:	2101      	movs	r1, #1
100095b8:	438b      	bics	r3, r1
100095ba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
100095be:	e0b6      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100095c0:	4a5c      	ldr	r2, [pc, #368]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100095c2:	6913      	ldr	r3, [r2, #16]
100095c4:	2102      	movs	r1, #2
100095c6:	438b      	bics	r3, r1
100095c8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
100095cc:	e0af      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100095ce:	4a59      	ldr	r2, [pc, #356]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100095d0:	6913      	ldr	r3, [r2, #16]
100095d2:	2104      	movs	r1, #4
100095d4:	438b      	bics	r3, r1
100095d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
100095da:	e0a8      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100095dc:	4a55      	ldr	r2, [pc, #340]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100095de:	6913      	ldr	r3, [r2, #16]
100095e0:	2108      	movs	r1, #8
100095e2:	438b      	bics	r3, r1
100095e4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
100095e8:	e0a1      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100095ea:	4a52      	ldr	r2, [pc, #328]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100095ec:	6913      	ldr	r3, [r2, #16]
100095ee:	2110      	movs	r1, #16
100095f0:	438b      	bics	r3, r1
100095f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
100095f6:	e09a      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100095f8:	4a4e      	ldr	r2, [pc, #312]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100095fa:	6913      	ldr	r3, [r2, #16]
100095fc:	2120      	movs	r1, #32
100095fe:	438b      	bics	r3, r1
10009600:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009602:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
10009604:	e093      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009606:	4a4b      	ldr	r2, [pc, #300]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009608:	6913      	ldr	r3, [r2, #16]
1000960a:	2140      	movs	r1, #64	; 0x40
1000960c:	438b      	bics	r3, r1
1000960e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009610:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
10009612:	e08c      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009614:	4a47      	ldr	r2, [pc, #284]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009616:	6913      	ldr	r3, [r2, #16]
10009618:	2180      	movs	r1, #128	; 0x80
1000961a:	438b      	bics	r3, r1
1000961c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000961e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
10009620:	e085      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009622:	4a44      	ldr	r2, [pc, #272]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009624:	6911      	ldr	r1, [r2, #16]
10009626:	4b44      	ldr	r3, [pc, #272]	; (10009738 <system_clock_peripheral_disable+0x310>)
10009628:	400b      	ands	r3, r1
1000962a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000962c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000962e:	e07e      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009630:	4a40      	ldr	r2, [pc, #256]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009632:	6911      	ldr	r1, [r2, #16]
10009634:	4b55      	ldr	r3, [pc, #340]	; (1000978c <system_clock_peripheral_disable+0x364>)
10009636:	400b      	ands	r3, r1
10009638:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000963a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000963c:	e077      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000963e:	4a3d      	ldr	r2, [pc, #244]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009640:	6911      	ldr	r1, [r2, #16]
10009642:	4b53      	ldr	r3, [pc, #332]	; (10009790 <system_clock_peripheral_disable+0x368>)
10009644:	400b      	ands	r3, r1
10009646:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009648:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000964a:	e070      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000964c:	4a39      	ldr	r2, [pc, #228]	; (10009734 <system_clock_peripheral_disable+0x30c>)
1000964e:	6911      	ldr	r1, [r2, #16]
10009650:	4b3a      	ldr	r3, [pc, #232]	; (1000973c <system_clock_peripheral_disable+0x314>)
10009652:	400b      	ands	r3, r1
10009654:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009656:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10009658:	e069      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000965a:	4a36      	ldr	r2, [pc, #216]	; (10009734 <system_clock_peripheral_disable+0x30c>)
1000965c:	6911      	ldr	r1, [r2, #16]
1000965e:	4b38      	ldr	r3, [pc, #224]	; (10009740 <system_clock_peripheral_disable+0x318>)
10009660:	400b      	ands	r3, r1
10009662:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009664:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10009666:	e062      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009668:	4a32      	ldr	r2, [pc, #200]	; (10009734 <system_clock_peripheral_disable+0x30c>)
1000966a:	6911      	ldr	r1, [r2, #16]
1000966c:	4b35      	ldr	r3, [pc, #212]	; (10009744 <system_clock_peripheral_disable+0x31c>)
1000966e:	400b      	ands	r3, r1
10009670:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009672:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10009674:	e05b      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009676:	4a2f      	ldr	r2, [pc, #188]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009678:	6911      	ldr	r1, [r2, #16]
1000967a:	4b33      	ldr	r3, [pc, #204]	; (10009748 <system_clock_peripheral_disable+0x320>)
1000967c:	400b      	ands	r3, r1
1000967e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009680:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
10009682:	e054      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009684:	4a2b      	ldr	r2, [pc, #172]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009686:	6911      	ldr	r1, [r2, #16]
10009688:	4b30      	ldr	r3, [pc, #192]	; (1000974c <system_clock_peripheral_disable+0x324>)
1000968a:	400b      	ands	r3, r1
1000968c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000968e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10009690:	e04d      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009692:	4a28      	ldr	r2, [pc, #160]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009694:	6911      	ldr	r1, [r2, #16]
10009696:	4b2e      	ldr	r3, [pc, #184]	; (10009750 <system_clock_peripheral_disable+0x328>)
10009698:	400b      	ands	r3, r1
1000969a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000969c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000969e:	e046      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100096a0:	4a24      	ldr	r2, [pc, #144]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100096a2:	6911      	ldr	r1, [r2, #16]
100096a4:	4b2b      	ldr	r3, [pc, #172]	; (10009754 <system_clock_peripheral_disable+0x32c>)
100096a6:	400b      	ands	r3, r1
100096a8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
100096ac:	e03f      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100096ae:	4a21      	ldr	r2, [pc, #132]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100096b0:	6911      	ldr	r1, [r2, #16]
100096b2:	4b29      	ldr	r3, [pc, #164]	; (10009758 <system_clock_peripheral_disable+0x330>)
100096b4:	400b      	ands	r3, r1
100096b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
100096ba:	e038      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100096bc:	4a1d      	ldr	r2, [pc, #116]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100096be:	6911      	ldr	r1, [r2, #16]
100096c0:	4b26      	ldr	r3, [pc, #152]	; (1000975c <system_clock_peripheral_disable+0x334>)
100096c2:	400b      	ands	r3, r1
100096c4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
100096c8:	e031      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100096ca:	4a1a      	ldr	r2, [pc, #104]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100096cc:	6911      	ldr	r1, [r2, #16]
100096ce:	4b24      	ldr	r3, [pc, #144]	; (10009760 <system_clock_peripheral_disable+0x338>)
100096d0:	400b      	ands	r3, r1
100096d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
100096d6:	e02a      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100096d8:	4a16      	ldr	r2, [pc, #88]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100096da:	6911      	ldr	r1, [r2, #16]
100096dc:	4b21      	ldr	r3, [pc, #132]	; (10009764 <system_clock_peripheral_disable+0x33c>)
100096de:	400b      	ands	r3, r1
100096e0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
100096e4:	e023      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100096e6:	4a13      	ldr	r2, [pc, #76]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100096e8:	6911      	ldr	r1, [r2, #16]
100096ea:	4b1f      	ldr	r3, [pc, #124]	; (10009768 <system_clock_peripheral_disable+0x340>)
100096ec:	400b      	ands	r3, r1
100096ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
100096f2:	e01c      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100096f4:	4a0f      	ldr	r2, [pc, #60]	; (10009734 <system_clock_peripheral_disable+0x30c>)
100096f6:	6911      	ldr	r1, [r2, #16]
100096f8:	4b1c      	ldr	r3, [pc, #112]	; (1000976c <system_clock_peripheral_disable+0x344>)
100096fa:	400b      	ands	r3, r1
100096fc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009700:	e015      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009702:	4a0c      	ldr	r2, [pc, #48]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009704:	7d13      	ldrb	r3, [r2, #20]
10009706:	2101      	movs	r1, #1
10009708:	438b      	bics	r3, r1
1000970a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000970c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000970e:	e00e      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009710:	4a08      	ldr	r2, [pc, #32]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009712:	7d13      	ldrb	r3, [r2, #20]
10009714:	2102      	movs	r1, #2
10009716:	438b      	bics	r3, r1
10009718:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000971a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000971c:	e007      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000971e:	4a05      	ldr	r2, [pc, #20]	; (10009734 <system_clock_peripheral_disable+0x30c>)
10009720:	7d13      	ldrb	r3, [r2, #20]
10009722:	2104      	movs	r1, #4
10009724:	438b      	bics	r3, r1
10009726:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009728:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000972a:	e000      	b.n	1000972e <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000972c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000972e:	bd00      	pop	{pc}
10009730:	10009f9c 	.word	0x10009f9c
10009734:	4000b000 	.word	0x4000b000
10009738:	fffffeff 	.word	0xfffffeff
1000973c:	fffff7ff 	.word	0xfffff7ff
10009740:	ffffefff 	.word	0xffffefff
10009744:	ffffdfff 	.word	0xffffdfff
10009748:	ffffbfff 	.word	0xffffbfff
1000974c:	ffff7fff 	.word	0xffff7fff
10009750:	fffeffff 	.word	0xfffeffff
10009754:	fffdffff 	.word	0xfffdffff
10009758:	fffbffff 	.word	0xfffbffff
1000975c:	fff7ffff 	.word	0xfff7ffff
10009760:	ffefffff 	.word	0xffefffff
10009764:	ffdfffff 	.word	0xffdfffff
10009768:	ffbfffff 	.word	0xffbfffff
1000976c:	ff7fffff 	.word	0xff7fffff
10009770:	feffffff 	.word	0xfeffffff
10009774:	fdffffff 	.word	0xfdffffff
10009778:	fbffffff 	.word	0xfbffffff
1000977c:	f7ffffff 	.word	0xf7ffffff
10009780:	efffffff 	.word	0xefffffff
10009784:	dfffffff 	.word	0xdfffffff
10009788:	bfffffff 	.word	0xbfffffff
1000978c:	fffffdff 	.word	0xfffffdff
10009790:	fffffbff 	.word	0xfffffbff

10009794 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10009794:	b500      	push	{lr}
	switch (peripheral) {
10009796:	2843      	cmp	r0, #67	; 0x43
10009798:	d900      	bls.n	1000979c <system_peripheral_reset+0x8>
1000979a:	e223      	b.n	10009be4 <system_peripheral_reset+0x450>
1000979c:	0080      	lsls	r0, r0, #2
1000979e:	4be0      	ldr	r3, [pc, #896]	; (10009b20 <system_peripheral_reset+0x38c>)
100097a0:	581b      	ldr	r3, [r3, r0]
100097a2:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097a4:	4bdf      	ldr	r3, [pc, #892]	; (10009b24 <system_peripheral_reset+0x390>)
100097a6:	6859      	ldr	r1, [r3, #4]
100097a8:	2202      	movs	r2, #2
100097aa:	4391      	bics	r1, r2
100097ac:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097ae:	6859      	ldr	r1, [r3, #4]
100097b0:	430a      	orrs	r2, r1
100097b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097b4:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
100097b6:	e216      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097b8:	4bda      	ldr	r3, [pc, #872]	; (10009b24 <system_peripheral_reset+0x390>)
100097ba:	6859      	ldr	r1, [r3, #4]
100097bc:	2204      	movs	r2, #4
100097be:	4391      	bics	r1, r2
100097c0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097c2:	6859      	ldr	r1, [r3, #4]
100097c4:	430a      	orrs	r2, r1
100097c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097c8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
100097ca:	e20c      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097cc:	4bd5      	ldr	r3, [pc, #852]	; (10009b24 <system_peripheral_reset+0x390>)
100097ce:	6859      	ldr	r1, [r3, #4]
100097d0:	2208      	movs	r2, #8
100097d2:	4391      	bics	r1, r2
100097d4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097d6:	6859      	ldr	r1, [r3, #4]
100097d8:	430a      	orrs	r2, r1
100097da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097dc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
100097de:	e202      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097e0:	4bd0      	ldr	r3, [pc, #832]	; (10009b24 <system_peripheral_reset+0x390>)
100097e2:	6859      	ldr	r1, [r3, #4]
100097e4:	2210      	movs	r2, #16
100097e6:	4391      	bics	r1, r2
100097e8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097ea:	6859      	ldr	r1, [r3, #4]
100097ec:	430a      	orrs	r2, r1
100097ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097f0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
100097f2:	e1f8      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097f4:	4bcb      	ldr	r3, [pc, #812]	; (10009b24 <system_peripheral_reset+0x390>)
100097f6:	6859      	ldr	r1, [r3, #4]
100097f8:	2220      	movs	r2, #32
100097fa:	4391      	bics	r1, r2
100097fc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097fe:	6859      	ldr	r1, [r3, #4]
10009800:	430a      	orrs	r2, r1
10009802:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009804:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
10009806:	e1ee      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009808:	4bc6      	ldr	r3, [pc, #792]	; (10009b24 <system_peripheral_reset+0x390>)
1000980a:	6859      	ldr	r1, [r3, #4]
1000980c:	2240      	movs	r2, #64	; 0x40
1000980e:	4391      	bics	r1, r2
10009810:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009812:	6859      	ldr	r1, [r3, #4]
10009814:	430a      	orrs	r2, r1
10009816:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009818:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000981a:	e1e4      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000981c:	4bc1      	ldr	r3, [pc, #772]	; (10009b24 <system_peripheral_reset+0x390>)
1000981e:	6859      	ldr	r1, [r3, #4]
10009820:	2280      	movs	r2, #128	; 0x80
10009822:	4391      	bics	r1, r2
10009824:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009826:	6859      	ldr	r1, [r3, #4]
10009828:	430a      	orrs	r2, r1
1000982a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000982c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000982e:	e1da      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009830:	4bbc      	ldr	r3, [pc, #752]	; (10009b24 <system_peripheral_reset+0x390>)
10009832:	6859      	ldr	r1, [r3, #4]
10009834:	4abc      	ldr	r2, [pc, #752]	; (10009b28 <system_peripheral_reset+0x394>)
10009836:	400a      	ands	r2, r1
10009838:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000983a:	685a      	ldr	r2, [r3, #4]
1000983c:	2180      	movs	r1, #128	; 0x80
1000983e:	0049      	lsls	r1, r1, #1
10009840:	430a      	orrs	r2, r1
10009842:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009844:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
10009846:	e1ce      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009848:	4bb6      	ldr	r3, [pc, #728]	; (10009b24 <system_peripheral_reset+0x390>)
1000984a:	6859      	ldr	r1, [r3, #4]
1000984c:	4ab7      	ldr	r2, [pc, #732]	; (10009b2c <system_peripheral_reset+0x398>)
1000984e:	400a      	ands	r2, r1
10009850:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009852:	685a      	ldr	r2, [r3, #4]
10009854:	2180      	movs	r1, #128	; 0x80
10009856:	0089      	lsls	r1, r1, #2
10009858:	430a      	orrs	r2, r1
1000985a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000985c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000985e:	e1c2      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009860:	4bb0      	ldr	r3, [pc, #704]	; (10009b24 <system_peripheral_reset+0x390>)
10009862:	6859      	ldr	r1, [r3, #4]
10009864:	4ab2      	ldr	r2, [pc, #712]	; (10009b30 <system_peripheral_reset+0x39c>)
10009866:	400a      	ands	r2, r1
10009868:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000986a:	685a      	ldr	r2, [r3, #4]
1000986c:	2180      	movs	r1, #128	; 0x80
1000986e:	00c9      	lsls	r1, r1, #3
10009870:	430a      	orrs	r2, r1
10009872:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009874:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10009876:	e1b6      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009878:	4baa      	ldr	r3, [pc, #680]	; (10009b24 <system_peripheral_reset+0x390>)
1000987a:	6859      	ldr	r1, [r3, #4]
1000987c:	4aad      	ldr	r2, [pc, #692]	; (10009b34 <system_peripheral_reset+0x3a0>)
1000987e:	400a      	ands	r2, r1
10009880:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009882:	685a      	ldr	r2, [r3, #4]
10009884:	2180      	movs	r1, #128	; 0x80
10009886:	0109      	lsls	r1, r1, #4
10009888:	430a      	orrs	r2, r1
1000988a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000988c:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000988e:	e1aa      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009890:	4ba4      	ldr	r3, [pc, #656]	; (10009b24 <system_peripheral_reset+0x390>)
10009892:	6859      	ldr	r1, [r3, #4]
10009894:	4aa8      	ldr	r2, [pc, #672]	; (10009b38 <system_peripheral_reset+0x3a4>)
10009896:	400a      	ands	r2, r1
10009898:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000989a:	685a      	ldr	r2, [r3, #4]
1000989c:	2180      	movs	r1, #128	; 0x80
1000989e:	0149      	lsls	r1, r1, #5
100098a0:	430a      	orrs	r2, r1
100098a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098a4:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
100098a6:	e19e      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100098a8:	4b9e      	ldr	r3, [pc, #632]	; (10009b24 <system_peripheral_reset+0x390>)
100098aa:	6859      	ldr	r1, [r3, #4]
100098ac:	4aa3      	ldr	r2, [pc, #652]	; (10009b3c <system_peripheral_reset+0x3a8>)
100098ae:	400a      	ands	r2, r1
100098b0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100098b2:	685a      	ldr	r2, [r3, #4]
100098b4:	2180      	movs	r1, #128	; 0x80
100098b6:	0189      	lsls	r1, r1, #6
100098b8:	430a      	orrs	r2, r1
100098ba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098bc:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
100098be:	e192      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100098c0:	4b98      	ldr	r3, [pc, #608]	; (10009b24 <system_peripheral_reset+0x390>)
100098c2:	6859      	ldr	r1, [r3, #4]
100098c4:	4a9e      	ldr	r2, [pc, #632]	; (10009b40 <system_peripheral_reset+0x3ac>)
100098c6:	400a      	ands	r2, r1
100098c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100098ca:	685a      	ldr	r2, [r3, #4]
100098cc:	2180      	movs	r1, #128	; 0x80
100098ce:	01c9      	lsls	r1, r1, #7
100098d0:	430a      	orrs	r2, r1
100098d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098d4:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
100098d6:	e186      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100098d8:	4b92      	ldr	r3, [pc, #584]	; (10009b24 <system_peripheral_reset+0x390>)
100098da:	6859      	ldr	r1, [r3, #4]
100098dc:	4a99      	ldr	r2, [pc, #612]	; (10009b44 <system_peripheral_reset+0x3b0>)
100098de:	400a      	ands	r2, r1
100098e0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100098e2:	685a      	ldr	r2, [r3, #4]
100098e4:	2180      	movs	r1, #128	; 0x80
100098e6:	0209      	lsls	r1, r1, #8
100098e8:	430a      	orrs	r2, r1
100098ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098ec:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
100098ee:	e17a      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100098f0:	4b8c      	ldr	r3, [pc, #560]	; (10009b24 <system_peripheral_reset+0x390>)
100098f2:	6859      	ldr	r1, [r3, #4]
100098f4:	4a94      	ldr	r2, [pc, #592]	; (10009b48 <system_peripheral_reset+0x3b4>)
100098f6:	400a      	ands	r2, r1
100098f8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100098fa:	685a      	ldr	r2, [r3, #4]
100098fc:	2180      	movs	r1, #128	; 0x80
100098fe:	0249      	lsls	r1, r1, #9
10009900:	430a      	orrs	r2, r1
10009902:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009904:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
10009906:	e16e      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009908:	4b86      	ldr	r3, [pc, #536]	; (10009b24 <system_peripheral_reset+0x390>)
1000990a:	6859      	ldr	r1, [r3, #4]
1000990c:	4a8f      	ldr	r2, [pc, #572]	; (10009b4c <system_peripheral_reset+0x3b8>)
1000990e:	400a      	ands	r2, r1
10009910:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009912:	685a      	ldr	r2, [r3, #4]
10009914:	2180      	movs	r1, #128	; 0x80
10009916:	0289      	lsls	r1, r1, #10
10009918:	430a      	orrs	r2, r1
1000991a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000991c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000991e:	e162      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009920:	4b80      	ldr	r3, [pc, #512]	; (10009b24 <system_peripheral_reset+0x390>)
10009922:	6859      	ldr	r1, [r3, #4]
10009924:	4a8a      	ldr	r2, [pc, #552]	; (10009b50 <system_peripheral_reset+0x3bc>)
10009926:	400a      	ands	r2, r1
10009928:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000992a:	685a      	ldr	r2, [r3, #4]
1000992c:	2180      	movs	r1, #128	; 0x80
1000992e:	02c9      	lsls	r1, r1, #11
10009930:	430a      	orrs	r2, r1
10009932:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009934:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10009936:	e156      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009938:	4b7a      	ldr	r3, [pc, #488]	; (10009b24 <system_peripheral_reset+0x390>)
1000993a:	6859      	ldr	r1, [r3, #4]
1000993c:	4a85      	ldr	r2, [pc, #532]	; (10009b54 <system_peripheral_reset+0x3c0>)
1000993e:	400a      	ands	r2, r1
10009940:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009942:	685a      	ldr	r2, [r3, #4]
10009944:	2180      	movs	r1, #128	; 0x80
10009946:	0309      	lsls	r1, r1, #12
10009948:	430a      	orrs	r2, r1
1000994a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000994c:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000994e:	e14a      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009950:	4b74      	ldr	r3, [pc, #464]	; (10009b24 <system_peripheral_reset+0x390>)
10009952:	6859      	ldr	r1, [r3, #4]
10009954:	4a80      	ldr	r2, [pc, #512]	; (10009b58 <system_peripheral_reset+0x3c4>)
10009956:	400a      	ands	r2, r1
10009958:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000995a:	685a      	ldr	r2, [r3, #4]
1000995c:	2180      	movs	r1, #128	; 0x80
1000995e:	0349      	lsls	r1, r1, #13
10009960:	430a      	orrs	r2, r1
10009962:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009964:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10009966:	e13e      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009968:	4b6e      	ldr	r3, [pc, #440]	; (10009b24 <system_peripheral_reset+0x390>)
1000996a:	6859      	ldr	r1, [r3, #4]
1000996c:	4a7b      	ldr	r2, [pc, #492]	; (10009b5c <system_peripheral_reset+0x3c8>)
1000996e:	400a      	ands	r2, r1
10009970:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009972:	685a      	ldr	r2, [r3, #4]
10009974:	2180      	movs	r1, #128	; 0x80
10009976:	0389      	lsls	r1, r1, #14
10009978:	430a      	orrs	r2, r1
1000997a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000997c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000997e:	e132      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009980:	4b68      	ldr	r3, [pc, #416]	; (10009b24 <system_peripheral_reset+0x390>)
10009982:	6859      	ldr	r1, [r3, #4]
10009984:	4a76      	ldr	r2, [pc, #472]	; (10009b60 <system_peripheral_reset+0x3cc>)
10009986:	400a      	ands	r2, r1
10009988:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000998a:	685a      	ldr	r2, [r3, #4]
1000998c:	2180      	movs	r1, #128	; 0x80
1000998e:	03c9      	lsls	r1, r1, #15
10009990:	430a      	orrs	r2, r1
10009992:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009994:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10009996:	e126      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009998:	4b62      	ldr	r3, [pc, #392]	; (10009b24 <system_peripheral_reset+0x390>)
1000999a:	6859      	ldr	r1, [r3, #4]
1000999c:	4a71      	ldr	r2, [pc, #452]	; (10009b64 <system_peripheral_reset+0x3d0>)
1000999e:	400a      	ands	r2, r1
100099a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100099a2:	685a      	ldr	r2, [r3, #4]
100099a4:	2180      	movs	r1, #128	; 0x80
100099a6:	0409      	lsls	r1, r1, #16
100099a8:	430a      	orrs	r2, r1
100099aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099ac:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
100099ae:	e11a      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100099b0:	4b5c      	ldr	r3, [pc, #368]	; (10009b24 <system_peripheral_reset+0x390>)
100099b2:	6859      	ldr	r1, [r3, #4]
100099b4:	4a6c      	ldr	r2, [pc, #432]	; (10009b68 <system_peripheral_reset+0x3d4>)
100099b6:	400a      	ands	r2, r1
100099b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100099ba:	685a      	ldr	r2, [r3, #4]
100099bc:	2180      	movs	r1, #128	; 0x80
100099be:	0449      	lsls	r1, r1, #17
100099c0:	430a      	orrs	r2, r1
100099c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099c4:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
100099c6:	e10e      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100099c8:	4b56      	ldr	r3, [pc, #344]	; (10009b24 <system_peripheral_reset+0x390>)
100099ca:	6859      	ldr	r1, [r3, #4]
100099cc:	4a67      	ldr	r2, [pc, #412]	; (10009b6c <system_peripheral_reset+0x3d8>)
100099ce:	400a      	ands	r2, r1
100099d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100099d2:	685a      	ldr	r2, [r3, #4]
100099d4:	2180      	movs	r1, #128	; 0x80
100099d6:	0489      	lsls	r1, r1, #18
100099d8:	430a      	orrs	r2, r1
100099da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099dc:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
100099de:	e102      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100099e0:	4b50      	ldr	r3, [pc, #320]	; (10009b24 <system_peripheral_reset+0x390>)
100099e2:	6859      	ldr	r1, [r3, #4]
100099e4:	4a62      	ldr	r2, [pc, #392]	; (10009b70 <system_peripheral_reset+0x3dc>)
100099e6:	400a      	ands	r2, r1
100099e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100099ea:	685a      	ldr	r2, [r3, #4]
100099ec:	2180      	movs	r1, #128	; 0x80
100099ee:	04c9      	lsls	r1, r1, #19
100099f0:	430a      	orrs	r2, r1
100099f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099f4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
100099f6:	e0f6      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100099f8:	4b4a      	ldr	r3, [pc, #296]	; (10009b24 <system_peripheral_reset+0x390>)
100099fa:	6859      	ldr	r1, [r3, #4]
100099fc:	4a5d      	ldr	r2, [pc, #372]	; (10009b74 <system_peripheral_reset+0x3e0>)
100099fe:	400a      	ands	r2, r1
10009a00:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a02:	685a      	ldr	r2, [r3, #4]
10009a04:	2180      	movs	r1, #128	; 0x80
10009a06:	0509      	lsls	r1, r1, #20
10009a08:	430a      	orrs	r2, r1
10009a0a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a0c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
10009a0e:	e0ea      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009a10:	4b44      	ldr	r3, [pc, #272]	; (10009b24 <system_peripheral_reset+0x390>)
10009a12:	6859      	ldr	r1, [r3, #4]
10009a14:	4a58      	ldr	r2, [pc, #352]	; (10009b78 <system_peripheral_reset+0x3e4>)
10009a16:	400a      	ands	r2, r1
10009a18:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a1a:	685a      	ldr	r2, [r3, #4]
10009a1c:	2180      	movs	r1, #128	; 0x80
10009a1e:	0549      	lsls	r1, r1, #21
10009a20:	430a      	orrs	r2, r1
10009a22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a24:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
10009a26:	e0de      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009a28:	4b3e      	ldr	r3, [pc, #248]	; (10009b24 <system_peripheral_reset+0x390>)
10009a2a:	6859      	ldr	r1, [r3, #4]
10009a2c:	4a53      	ldr	r2, [pc, #332]	; (10009b7c <system_peripheral_reset+0x3e8>)
10009a2e:	400a      	ands	r2, r1
10009a30:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a32:	685a      	ldr	r2, [r3, #4]
10009a34:	2180      	movs	r1, #128	; 0x80
10009a36:	0589      	lsls	r1, r1, #22
10009a38:	430a      	orrs	r2, r1
10009a3a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a3c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
10009a3e:	e0d2      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009a40:	4b38      	ldr	r3, [pc, #224]	; (10009b24 <system_peripheral_reset+0x390>)
10009a42:	6859      	ldr	r1, [r3, #4]
10009a44:	4a4e      	ldr	r2, [pc, #312]	; (10009b80 <system_peripheral_reset+0x3ec>)
10009a46:	400a      	ands	r2, r1
10009a48:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a4a:	685a      	ldr	r2, [r3, #4]
10009a4c:	2180      	movs	r1, #128	; 0x80
10009a4e:	05c9      	lsls	r1, r1, #23
10009a50:	430a      	orrs	r2, r1
10009a52:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a54:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
10009a56:	e0c6      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009a58:	4a32      	ldr	r2, [pc, #200]	; (10009b24 <system_peripheral_reset+0x390>)
10009a5a:	6853      	ldr	r3, [r2, #4]
10009a5c:	005b      	lsls	r3, r3, #1
10009a5e:	085b      	lsrs	r3, r3, #1
10009a60:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a62:	6853      	ldr	r3, [r2, #4]
10009a64:	2180      	movs	r1, #128	; 0x80
10009a66:	0609      	lsls	r1, r1, #24
10009a68:	430b      	orrs	r3, r1
10009a6a:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a6c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
10009a6e:	e0ba      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009a70:	4b2c      	ldr	r3, [pc, #176]	; (10009b24 <system_peripheral_reset+0x390>)
10009a72:	891a      	ldrh	r2, [r3, #8]
10009a74:	2101      	movs	r1, #1
10009a76:	438a      	bics	r2, r1
10009a78:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009a7a:	8919      	ldrh	r1, [r3, #8]
10009a7c:	2201      	movs	r2, #1
10009a7e:	430a      	orrs	r2, r1
10009a80:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a82:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
10009a84:	e0af      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009a86:	4b27      	ldr	r3, [pc, #156]	; (10009b24 <system_peripheral_reset+0x390>)
10009a88:	891a      	ldrh	r2, [r3, #8]
10009a8a:	2102      	movs	r1, #2
10009a8c:	438a      	bics	r2, r1
10009a8e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009a90:	8919      	ldrh	r1, [r3, #8]
10009a92:	2202      	movs	r2, #2
10009a94:	430a      	orrs	r2, r1
10009a96:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a98:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
10009a9a:	e0a4      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009a9c:	4b21      	ldr	r3, [pc, #132]	; (10009b24 <system_peripheral_reset+0x390>)
10009a9e:	891a      	ldrh	r2, [r3, #8]
10009aa0:	2104      	movs	r1, #4
10009aa2:	438a      	bics	r2, r1
10009aa4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009aa6:	8919      	ldrh	r1, [r3, #8]
10009aa8:	2204      	movs	r2, #4
10009aaa:	430a      	orrs	r2, r1
10009aac:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009aae:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
10009ab0:	e099      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009ab2:	4b1c      	ldr	r3, [pc, #112]	; (10009b24 <system_peripheral_reset+0x390>)
10009ab4:	891a      	ldrh	r2, [r3, #8]
10009ab6:	2108      	movs	r1, #8
10009ab8:	438a      	bics	r2, r1
10009aba:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009abc:	8919      	ldrh	r1, [r3, #8]
10009abe:	2208      	movs	r2, #8
10009ac0:	430a      	orrs	r2, r1
10009ac2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ac4:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10009ac6:	e08e      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009ac8:	4b16      	ldr	r3, [pc, #88]	; (10009b24 <system_peripheral_reset+0x390>)
10009aca:	891a      	ldrh	r2, [r3, #8]
10009acc:	2110      	movs	r1, #16
10009ace:	438a      	bics	r2, r1
10009ad0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009ad2:	8919      	ldrh	r1, [r3, #8]
10009ad4:	2210      	movs	r2, #16
10009ad6:	430a      	orrs	r2, r1
10009ad8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ada:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10009adc:	e083      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009ade:	4b11      	ldr	r3, [pc, #68]	; (10009b24 <system_peripheral_reset+0x390>)
10009ae0:	891a      	ldrh	r2, [r3, #8]
10009ae2:	2120      	movs	r1, #32
10009ae4:	438a      	bics	r2, r1
10009ae6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009ae8:	8919      	ldrh	r1, [r3, #8]
10009aea:	2220      	movs	r2, #32
10009aec:	430a      	orrs	r2, r1
10009aee:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009af0:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10009af2:	e078      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009af4:	4b0b      	ldr	r3, [pc, #44]	; (10009b24 <system_peripheral_reset+0x390>)
10009af6:	891a      	ldrh	r2, [r3, #8]
10009af8:	2140      	movs	r1, #64	; 0x40
10009afa:	438a      	bics	r2, r1
10009afc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009afe:	8919      	ldrh	r1, [r3, #8]
10009b00:	2240      	movs	r2, #64	; 0x40
10009b02:	430a      	orrs	r2, r1
10009b04:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b06:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10009b08:	e06d      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009b0a:	4b06      	ldr	r3, [pc, #24]	; (10009b24 <system_peripheral_reset+0x390>)
10009b0c:	891a      	ldrh	r2, [r3, #8]
10009b0e:	2180      	movs	r1, #128	; 0x80
10009b10:	438a      	bics	r2, r1
10009b12:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009b14:	8919      	ldrh	r1, [r3, #8]
10009b16:	2280      	movs	r2, #128	; 0x80
10009b18:	430a      	orrs	r2, r1
10009b1a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b1c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
10009b1e:	e062      	b.n	10009be6 <system_peripheral_reset+0x452>
10009b20:	1000a074 	.word	0x1000a074
10009b24:	4000b000 	.word	0x4000b000
10009b28:	fffffeff 	.word	0xfffffeff
10009b2c:	fffffdff 	.word	0xfffffdff
10009b30:	fffffbff 	.word	0xfffffbff
10009b34:	fffff7ff 	.word	0xfffff7ff
10009b38:	ffffefff 	.word	0xffffefff
10009b3c:	ffffdfff 	.word	0xffffdfff
10009b40:	ffffbfff 	.word	0xffffbfff
10009b44:	ffff7fff 	.word	0xffff7fff
10009b48:	fffeffff 	.word	0xfffeffff
10009b4c:	fffdffff 	.word	0xfffdffff
10009b50:	fffbffff 	.word	0xfffbffff
10009b54:	fff7ffff 	.word	0xfff7ffff
10009b58:	ffefffff 	.word	0xffefffff
10009b5c:	ffdfffff 	.word	0xffdfffff
10009b60:	ffbfffff 	.word	0xffbfffff
10009b64:	ff7fffff 	.word	0xff7fffff
10009b68:	feffffff 	.word	0xfeffffff
10009b6c:	fdffffff 	.word	0xfdffffff
10009b70:	fbffffff 	.word	0xfbffffff
10009b74:	f7ffffff 	.word	0xf7ffffff
10009b78:	efffffff 	.word	0xefffffff
10009b7c:	dfffffff 	.word	0xdfffffff
10009b80:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009b84:	4b18      	ldr	r3, [pc, #96]	; (10009be8 <system_peripheral_reset+0x454>)
10009b86:	8919      	ldrh	r1, [r3, #8]
10009b88:	4a18      	ldr	r2, [pc, #96]	; (10009bec <system_peripheral_reset+0x458>)
10009b8a:	400a      	ands	r2, r1
10009b8c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009b8e:	8919      	ldrh	r1, [r3, #8]
10009b90:	2280      	movs	r2, #128	; 0x80
10009b92:	0052      	lsls	r2, r2, #1
10009b94:	430a      	orrs	r2, r1
10009b96:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b98:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
10009b9a:	e024      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009b9c:	4b12      	ldr	r3, [pc, #72]	; (10009be8 <system_peripheral_reset+0x454>)
10009b9e:	8919      	ldrh	r1, [r3, #8]
10009ba0:	4a13      	ldr	r2, [pc, #76]	; (10009bf0 <system_peripheral_reset+0x45c>)
10009ba2:	400a      	ands	r2, r1
10009ba4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009ba6:	8919      	ldrh	r1, [r3, #8]
10009ba8:	2280      	movs	r2, #128	; 0x80
10009baa:	0092      	lsls	r2, r2, #2
10009bac:	430a      	orrs	r2, r1
10009bae:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bb0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10009bb2:	e018      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009bb4:	4b0c      	ldr	r3, [pc, #48]	; (10009be8 <system_peripheral_reset+0x454>)
10009bb6:	8919      	ldrh	r1, [r3, #8]
10009bb8:	4a0e      	ldr	r2, [pc, #56]	; (10009bf4 <system_peripheral_reset+0x460>)
10009bba:	400a      	ands	r2, r1
10009bbc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009bbe:	8919      	ldrh	r1, [r3, #8]
10009bc0:	2280      	movs	r2, #128	; 0x80
10009bc2:	00d2      	lsls	r2, r2, #3
10009bc4:	430a      	orrs	r2, r1
10009bc6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bc8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
10009bca:	e00c      	b.n	10009be6 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009bcc:	4b06      	ldr	r3, [pc, #24]	; (10009be8 <system_peripheral_reset+0x454>)
10009bce:	8919      	ldrh	r1, [r3, #8]
10009bd0:	4a09      	ldr	r2, [pc, #36]	; (10009bf8 <system_peripheral_reset+0x464>)
10009bd2:	400a      	ands	r2, r1
10009bd4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009bd6:	8919      	ldrh	r1, [r3, #8]
10009bd8:	2280      	movs	r2, #128	; 0x80
10009bda:	0112      	lsls	r2, r2, #4
10009bdc:	430a      	orrs	r2, r1
10009bde:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009be0:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
10009be2:	e000      	b.n	10009be6 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009be4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009be6:	bd00      	pop	{pc}
10009be8:	4000b000 	.word	0x4000b000
10009bec:	fffffeff 	.word	0xfffffeff
10009bf0:	fffffdff 	.word	0xfffffdff
10009bf4:	fffffbff 	.word	0xfffffbff
10009bf8:	fffff7ff 	.word	0xfffff7ff

10009bfc <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10009bfc:	2380      	movs	r3, #128	; 0x80
10009bfe:	04db      	lsls	r3, r3, #19
10009c00:	469c      	mov	ip, r3
10009c02:	4460      	add	r0, ip
10009c04:	0080      	lsls	r0, r0, #2
10009c06:	6001      	str	r1, [r0, #0]
}
10009c08:	4770      	bx	lr
10009c0a:	46c0      	nop			; (mov r8, r8)

10009c0c <timer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TIMER module configuration structure to set
 */
void timer_get_config_defaults(struct timer_config *config)
{
	config->reload_value = 0;
10009c0c:	2300      	movs	r3, #0
10009c0e:	6003      	str	r3, [r0, #0]
	config->interrupt_enable = true;
10009c10:	3301      	adds	r3, #1
10009c12:	7103      	strb	r3, [r0, #4]
}
10009c14:	4770      	bx	lr
10009c16:	46c0      	nop			; (mov r8, r8)

10009c18 <timer_clear_interrupt_status>:
 *
 * Clear the TIMER0 module interrupt status
 */
void timer_clear_interrupt_status(void)
{
	TIMER0->INTSTATUSCLEAR.reg = 1;
10009c18:	2201      	movs	r2, #1
10009c1a:	2380      	movs	r3, #128	; 0x80
10009c1c:	05db      	lsls	r3, r3, #23
10009c1e:	731a      	strb	r2, [r3, #12]
	/* Wait for operation finish */
	while (TIMER0->INTSTATUSCLEAR.reg);
10009c20:	001a      	movs	r2, r3
10009c22:	7b13      	ldrb	r3, [r2, #12]
10009c24:	2b00      	cmp	r3, #0
10009c26:	d1fc      	bne.n	10009c22 <timer_clear_interrupt_status+0xa>
}
10009c28:	4770      	bx	lr
10009c2a:	46c0      	nop			; (mov r8, r8)

10009c2c <timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void timer_isr_handler(void)
{
10009c2c:	b510      	push	{r4, lr}
 *
 * \retval The status of module
 */
uint32_t timer_get_interrupt_status(void)
{
	return TIMER0->INTSTATUSCLEAR.reg;
10009c2e:	2380      	movs	r3, #128	; 0x80
10009c30:	05db      	lsls	r3, r3, #23
10009c32:	7b1b      	ldrb	r3, [r3, #12]
 * Timer ISR handler.
 *
 */
static void timer_isr_handler(void)
{
	if (timer_get_interrupt_status()) {
10009c34:	2b00      	cmp	r3, #0
10009c36:	d006      	beq.n	10009c46 <timer_isr_handler+0x1a>
		timer_clear_interrupt_status();
10009c38:	4b03      	ldr	r3, [pc, #12]	; (10009c48 <timer_isr_handler+0x1c>)
10009c3a:	4798      	blx	r3
		
		if (timer_callback) {
10009c3c:	4b03      	ldr	r3, [pc, #12]	; (10009c4c <timer_isr_handler+0x20>)
10009c3e:	681b      	ldr	r3, [r3, #0]
10009c40:	2b00      	cmp	r3, #0
10009c42:	d000      	beq.n	10009c46 <timer_isr_handler+0x1a>
			timer_callback();
10009c44:	4798      	blx	r3
		}
	}
}
10009c46:	bd10      	pop	{r4, pc}
10009c48:	10009c19 	.word	0x10009c19
10009c4c:	1000a1cc 	.word	0x1000a1cc

10009c50 <timer_enable>:
 *
 * Enable the TIMER0 module
 */
void timer_enable(void)
{
	TIMER0->CTRL.reg |= TIMER_CTRL_ENABLE;
10009c50:	2280      	movs	r2, #128	; 0x80
10009c52:	05d2      	lsls	r2, r2, #23
10009c54:	7811      	ldrb	r1, [r2, #0]
10009c56:	2301      	movs	r3, #1
10009c58:	430b      	orrs	r3, r1
10009c5a:	7013      	strb	r3, [r2, #0]
}
10009c5c:	4770      	bx	lr
10009c5e:	46c0      	nop			; (mov r8, r8)

10009c60 <timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void timer_register_callback(timer_callback_t fun)
{
	timer_callback = fun; 
10009c60:	4b01      	ldr	r3, [pc, #4]	; (10009c68 <timer_register_callback+0x8>)
10009c62:	6018      	str	r0, [r3, #0]
}
10009c64:	4770      	bx	lr
10009c66:	46c0      	nop			; (mov r8, r8)
10009c68:	1000a1cc 	.word	0x1000a1cc

10009c6c <timer_init>:
 * \param[in]     config       Pointer to the TIMER configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void timer_init(const struct timer_config *config)
{
10009c6c:	b510      	push	{r4, lr}
10009c6e:	0004      	movs	r4, r0
	/* Global reset */
	system_peripheral_reset(PERIPHERAL_TIMER);
10009c70:	2006      	movs	r0, #6
10009c72:	4b09      	ldr	r3, [pc, #36]	; (10009c98 <timer_init+0x2c>)
10009c74:	4798      	blx	r3

	TIMER0->CTRL.reg = config->interrupt_enable << TIMER_CTRL_INTERRUPT_ENABLE_Pos;
10009c76:	7923      	ldrb	r3, [r4, #4]
10009c78:	00db      	lsls	r3, r3, #3
10009c7a:	b2db      	uxtb	r3, r3
10009c7c:	2280      	movs	r2, #128	; 0x80
10009c7e:	05d2      	lsls	r2, r2, #23
10009c80:	7013      	strb	r3, [r2, #0]
	TIMER0->RELOAD.reg = config->reload_value;
10009c82:	6823      	ldr	r3, [r4, #0]
10009c84:	6093      	str	r3, [r2, #8]
	
	timer_callback = NULL;
10009c86:	2200      	movs	r2, #0
10009c88:	4b04      	ldr	r3, [pc, #16]	; (10009c9c <timer_init+0x30>)
10009c8a:	601a      	str	r2, [r3, #0]
	system_register_isr(RAM_ISR_TABLE_TIMER0_INDEX, (uint32_t)timer_isr_handler);
10009c8c:	4904      	ldr	r1, [pc, #16]	; (10009ca0 <timer_init+0x34>)
10009c8e:	202a      	movs	r0, #42	; 0x2a
10009c90:	4b04      	ldr	r3, [pc, #16]	; (10009ca4 <timer_init+0x38>)
10009c92:	4798      	blx	r3
10009c94:	bd10      	pop	{r4, pc}
10009c96:	46c0      	nop			; (mov r8, r8)
10009c98:	10009795 	.word	0x10009795
10009c9c:	1000a1cc 	.word	0x1000a1cc
10009ca0:	10009c2d 	.word	0x10009c2d
10009ca4:	10009bfd 	.word	0x10009bfd

10009ca8 <timer_callback>:

LCDSPIModule module;
uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH];

static void timer_callback(void)
{
10009ca8:	b510      	push	{r4, lr}
	gpio_pin_toggle_output_level(PIN_LP_GPIO_20);
10009caa:	2014      	movs	r0, #20
10009cac:	4b01      	ldr	r3, [pc, #4]	; (10009cb4 <timer_callback+0xc>)
10009cae:	4798      	blx	r3
}
10009cb0:	bd10      	pop	{r4, pc}
10009cb2:	46c0      	nop			; (mov r8, r8)
10009cb4:	10008681 	.word	0x10008681

10009cb8 <delay_us>:
	config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
	dualtimer_init(&config_dualtimer);
}

static void delay_us(uint32_t time)
{
10009cb8:	b510      	push	{r4, lr}
	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG, time*26);
10009cba:	231a      	movs	r3, #26
10009cbc:	4343      	muls	r3, r0
10009cbe:	001a      	movs	r2, r3
10009cc0:	2100      	movs	r1, #0
10009cc2:	2000      	movs	r0, #0
10009cc4:	4b03      	ldr	r3, [pc, #12]	; (10009cd4 <delay_us+0x1c>)
10009cc6:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER1)){}
10009cc8:	4c03      	ldr	r4, [pc, #12]	; (10009cd8 <delay_us+0x20>)
10009cca:	2000      	movs	r0, #0
10009ccc:	47a0      	blx	r4
10009cce:	2800      	cmp	r0, #0
10009cd0:	d1fb      	bne.n	10009cca <delay_us+0x12>
}
10009cd2:	bd10      	pop	{r4, pc}
10009cd4:	10008165 	.word	0x10008165
10009cd8:	10008151 	.word	0x10008151

10009cdc <main>:

int main(void)
{
10009cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009cde:	b089      	sub	sp, #36	; 0x24
    /* Initialize the SAM system */
    system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
10009ce0:	2100      	movs	r1, #0
10009ce2:	2000      	movs	r0, #0
10009ce4:	4b4d      	ldr	r3, [pc, #308]	; (10009e1c <main+0x140>)
10009ce6:	4798      	blx	r3
}

static void configure_timer(void)
{
	struct timer_config config_timer;
	timer_get_config_defaults(&config_timer);
10009ce8:	ac01      	add	r4, sp, #4
10009cea:	0020      	movs	r0, r4
10009cec:	4b4c      	ldr	r3, [pc, #304]	; (10009e20 <main+0x144>)
10009cee:	4798      	blx	r3
	config_timer.reload_value = 2600000;
10009cf0:	4b4c      	ldr	r3, [pc, #304]	; (10009e24 <main+0x148>)
10009cf2:	9301      	str	r3, [sp, #4]
	timer_init(&config_timer);
10009cf4:	0020      	movs	r0, r4
10009cf6:	4b4c      	ldr	r3, [pc, #304]	; (10009e28 <main+0x14c>)
10009cf8:	4798      	blx	r3
	timer_enable();
10009cfa:	4b4c      	ldr	r3, [pc, #304]	; (10009e2c <main+0x150>)
10009cfc:	4798      	blx	r3
}
 static void configure_timer_callback(void)
 {
	 timer_register_callback(timer_callback);
10009cfe:	484c      	ldr	r0, [pc, #304]	; (10009e30 <main+0x154>)
10009d00:	4b4c      	ldr	r3, [pc, #304]	; (10009e34 <main+0x158>)
10009d02:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009d04:	2280      	movs	r2, #128	; 0x80
10009d06:	04d2      	lsls	r2, r2, #19
10009d08:	4b4b      	ldr	r3, [pc, #300]	; (10009e38 <main+0x15c>)
10009d0a:	601a      	str	r2, [r3, #0]
 }

static void configure_gpio_pins(void)
{
	struct gpio_config config_gpio_pin;
	gpio_get_config_defaults(&config_gpio_pin);
10009d0c:	0020      	movs	r0, r4
10009d0e:	4b4b      	ldr	r3, [pc, #300]	; (10009e3c <main+0x160>)
10009d10:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009d12:	2301      	movs	r3, #1
10009d14:	7023      	strb	r3, [r4, #0]
	gpio_pin_set_config(PIN_LP_GPIO_16 , &config_gpio_pin);
10009d16:	0021      	movs	r1, r4
10009d18:	2010      	movs	r0, #16
10009d1a:	4d49      	ldr	r5, [pc, #292]	; (10009e40 <main+0x164>)
10009d1c:	47a8      	blx	r5
	gpio_pin_set_config(PIN_LP_GPIO_20 , &config_gpio_pin);
10009d1e:	0021      	movs	r1, r4
10009d20:	2014      	movs	r0, #20
10009d22:	47a8      	blx	r5
	gpio_pin_set_output_level(PIN_LP_GPIO_16, false);
10009d24:	2100      	movs	r1, #0
10009d26:	2010      	movs	r0, #16
10009d28:	4d46      	ldr	r5, [pc, #280]	; (10009e44 <main+0x168>)
10009d2a:	47a8      	blx	r5
	gpio_pin_set_output_level(PIN_LP_GPIO_20, false);
10009d2c:	2100      	movs	r1, #0
10009d2e:	2014      	movs	r0, #20
10009d30:	47a8      	blx	r5


static void configure_dualtimer(void)
{
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
10009d32:	0020      	movs	r0, r4
10009d34:	4b44      	ldr	r3, [pc, #272]	; (10009e48 <main+0x16c>)
10009d36:	4798      	blx	r3
	config_dualtimer.timer1.load_value = 0;
10009d38:	2300      	movs	r3, #0
10009d3a:	60a3      	str	r3, [r4, #8]
	config_dualtimer.timer2.load_value = 0;
10009d3c:	6163      	str	r3, [r4, #20]
	config_dualtimer.timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10009d3e:	70e3      	strb	r3, [r4, #3]
	config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009d40:	7063      	strb	r3, [r4, #1]
	dualtimer_init(&config_dualtimer);
10009d42:	0020      	movs	r0, r4
10009d44:	4b41      	ldr	r3, [pc, #260]	; (10009e4c <main+0x170>)
10009d46:	4798      	blx	r3
    system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
	configure_timer();
	configure_timer_callback();
	configure_gpio_pins();
	configure_dualtimer();
	Setup(&module);
10009d48:	4841      	ldr	r0, [pc, #260]	; (10009e50 <main+0x174>)
10009d4a:	4b42      	ldr	r3, [pc, #264]	; (10009e54 <main+0x178>)
10009d4c:	4798      	blx	r3
10009d4e:	4a42      	ldr	r2, [pc, #264]	; (10009e58 <main+0x17c>)
10009d50:	23c0      	movs	r3, #192	; 0xc0
10009d52:	00db      	lsls	r3, r3, #3
10009d54:	18d1      	adds	r1, r2, r3

	for(uint8_t i=0;i<32;i++)
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0xFF;
10009d56:	25ff      	movs	r5, #255	; 0xff
		}
		for(uint8_t j=24;j<48;j++)
		{
			frameBuffer[i][j] = 0x00;
10009d58:	2400      	movs	r4, #0
10009d5a:	e011      	b.n	10009d80 <main+0xa4>

	for(uint8_t i=0;i<32;i++)
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0xFF;
10009d5c:	701d      	strb	r5, [r3, #0]
10009d5e:	3301      	adds	r3, #1
	configure_dualtimer();
	Setup(&module);

	for(uint8_t i=0;i<32;i++)
	{
		for(uint8_t j=0;j<24;j++)
10009d60:	429a      	cmp	r2, r3
10009d62:	d1fb      	bne.n	10009d5c <main+0x80>
10009d64:	0010      	movs	r0, r2
10009d66:	3018      	adds	r0, #24
10009d68:	0013      	movs	r3, r2
		{
			frameBuffer[i][j] = 0xFF;
		}
		for(uint8_t j=24;j<48;j++)
		{
			frameBuffer[i][j] = 0x00;
10009d6a:	701c      	strb	r4, [r3, #0]
10009d6c:	3301      	adds	r3, #1
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0xFF;
		}
		for(uint8_t j=24;j<48;j++)
10009d6e:	4283      	cmp	r3, r0
10009d70:	d1fb      	bne.n	10009d6a <main+0x8e>
10009d72:	3230      	adds	r2, #48	; 0x30
	configure_timer_callback();
	configure_gpio_pins();
	configure_dualtimer();
	Setup(&module);

	for(uint8_t i=0;i<32;i++)
10009d74:	4291      	cmp	r1, r2
10009d76:	d103      	bne.n	10009d80 <main+0xa4>
10009d78:	4a38      	ldr	r2, [pc, #224]	; (10009e5c <main+0x180>)
	}
	for(uint8_t i=32;i<64;i++)
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0x00;
10009d7a:	2500      	movs	r5, #0
		}
		for(uint8_t j=24;j<48;j++)
		{
			frameBuffer[i][j] = 0xFF;
10009d7c:	24ff      	movs	r4, #255	; 0xff
10009d7e:	e014      	b.n	10009daa <main+0xce>
10009d80:	0013      	movs	r3, r2
10009d82:	3b18      	subs	r3, #24
10009d84:	e7ea      	b.n	10009d5c <main+0x80>
	}
	for(uint8_t i=32;i<64;i++)
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0x00;
10009d86:	701d      	strb	r5, [r3, #0]
10009d88:	3301      	adds	r3, #1
			frameBuffer[i][j] = 0x00;
		}
	}
	for(uint8_t i=32;i<64;i++)
	{
		for(uint8_t j=0;j<24;j++)
10009d8a:	428b      	cmp	r3, r1
10009d8c:	d1fb      	bne.n	10009d86 <main+0xaa>
10009d8e:	0008      	movs	r0, r1
10009d90:	3018      	adds	r0, #24
10009d92:	000b      	movs	r3, r1
		{
			frameBuffer[i][j] = 0x00;
		}
		for(uint8_t j=24;j<48;j++)
		{
			frameBuffer[i][j] = 0xFF;
10009d94:	701c      	strb	r4, [r3, #0]
10009d96:	3301      	adds	r3, #1
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0x00;
		}
		for(uint8_t j=24;j<48;j++)
10009d98:	4283      	cmp	r3, r0
10009d9a:	d1fb      	bne.n	10009d94 <main+0xb8>
10009d9c:	3130      	adds	r1, #48	; 0x30
		for(uint8_t j=24;j<48;j++)
		{
			frameBuffer[i][j] = 0x00;
		}
	}
	for(uint8_t i=32;i<64;i++)
10009d9e:	428a      	cmp	r2, r1
10009da0:	d103      	bne.n	10009daa <main+0xce>
10009da2:	4d2f      	ldr	r5, [pc, #188]	; (10009e60 <main+0x184>)
	}
	for(uint8_t i=64;i<96;i++)
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0xFF;
10009da4:	24ff      	movs	r4, #255	; 0xff
		}
		for(uint8_t j=24;j<48;j++)
		{
			frameBuffer[i][j] = 0x00;
10009da6:	2000      	movs	r0, #0
10009da8:	e014      	b.n	10009dd4 <main+0xf8>
10009daa:	000b      	movs	r3, r1
10009dac:	3b18      	subs	r3, #24
10009dae:	e7ea      	b.n	10009d86 <main+0xaa>
	}
	for(uint8_t i=64;i<96;i++)
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0xFF;
10009db0:	701c      	strb	r4, [r3, #0]
10009db2:	3301      	adds	r3, #1
			frameBuffer[i][j] = 0xFF;
		}
	}
	for(uint8_t i=64;i<96;i++)
	{
		for(uint8_t j=0;j<24;j++)
10009db4:	4293      	cmp	r3, r2
10009db6:	d1fb      	bne.n	10009db0 <main+0xd4>
10009db8:	0011      	movs	r1, r2
10009dba:	3118      	adds	r1, #24
10009dbc:	0013      	movs	r3, r2
		{
			frameBuffer[i][j] = 0xFF;
		}
		for(uint8_t j=24;j<48;j++)
		{
			frameBuffer[i][j] = 0x00;
10009dbe:	7018      	strb	r0, [r3, #0]
10009dc0:	3301      	adds	r3, #1
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0xFF;
		}
		for(uint8_t j=24;j<48;j++)
10009dc2:	4299      	cmp	r1, r3
10009dc4:	d1fb      	bne.n	10009dbe <main+0xe2>
10009dc6:	3230      	adds	r2, #48	; 0x30
		for(uint8_t j=24;j<48;j++)
		{
			frameBuffer[i][j] = 0xFF;
		}
	}
	for(uint8_t i=64;i<96;i++)
10009dc8:	4295      	cmp	r5, r2
10009dca:	d103      	bne.n	10009dd4 <main+0xf8>
10009dcc:	4c25      	ldr	r4, [pc, #148]	; (10009e64 <main+0x188>)
	}
	for(uint8_t i=96;i<128;i++)
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0x00;
10009dce:	2100      	movs	r1, #0
		}
		for(uint8_t j=24;j<48;j++)
		{
			frameBuffer[i][j] = 0xFF;
10009dd0:	22ff      	movs	r2, #255	; 0xff
10009dd2:	e010      	b.n	10009df6 <main+0x11a>
10009dd4:	0013      	movs	r3, r2
10009dd6:	3b18      	subs	r3, #24
10009dd8:	e7ea      	b.n	10009db0 <main+0xd4>
	}
	for(uint8_t i=96;i<128;i++)
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0x00;
10009dda:	7019      	strb	r1, [r3, #0]
10009ddc:	3301      	adds	r3, #1
			frameBuffer[i][j] = 0x00;
		}
	}
	for(uint8_t i=96;i<128;i++)
	{
		for(uint8_t j=0;j<24;j++)
10009dde:	42ab      	cmp	r3, r5
10009de0:	d1fb      	bne.n	10009dda <main+0xfe>
10009de2:	0028      	movs	r0, r5
10009de4:	3018      	adds	r0, #24
10009de6:	002b      	movs	r3, r5
		{
			frameBuffer[i][j] = 0x00;
		}
		for(uint8_t j=24;j<48;j++)
		{
			frameBuffer[i][j] = 0xFF;
10009de8:	701a      	strb	r2, [r3, #0]
10009dea:	3301      	adds	r3, #1
	{
		for(uint8_t j=0;j<24;j++)
		{
			frameBuffer[i][j] = 0x00;
		}
		for(uint8_t j=24;j<48;j++)
10009dec:	4298      	cmp	r0, r3
10009dee:	d1fb      	bne.n	10009de8 <main+0x10c>
10009df0:	3530      	adds	r5, #48	; 0x30
		for(uint8_t j=24;j<48;j++)
		{
			frameBuffer[i][j] = 0x00;
		}
	}
	for(uint8_t i=96;i<128;i++)
10009df2:	42ac      	cmp	r4, r5
10009df4:	d002      	beq.n	10009dfc <main+0x120>
10009df6:	002b      	movs	r3, r5
10009df8:	3b18      	subs	r3, #24
10009dfa:	e7ee      	b.n	10009dda <main+0xfe>
	//Transfer(frameBuffer,0,50,&module);
	//Display(&module);
	while(1){
		//Transfer(frameBuffer,0,50,&module);
		//Display(&module);
		delay_us(1000000);
10009dfc:	4d1a      	ldr	r5, [pc, #104]	; (10009e68 <main+0x18c>)
		//ClearDisplay(&module);
		delay_us(1000000);
		Transfer(frameBuffer,1,128,&module);
10009dfe:	4f14      	ldr	r7, [pc, #80]	; (10009e50 <main+0x174>)
10009e00:	4e1a      	ldr	r6, [pc, #104]	; (10009e6c <main+0x190>)
	//Transfer(frameBuffer,0,50,&module);
	//Display(&module);
	while(1){
		//Transfer(frameBuffer,0,50,&module);
		//Display(&module);
		delay_us(1000000);
10009e02:	4c1b      	ldr	r4, [pc, #108]	; (10009e70 <main+0x194>)
10009e04:	0020      	movs	r0, r4
10009e06:	47a8      	blx	r5
		//ClearDisplay(&module);
		delay_us(1000000);
10009e08:	0020      	movs	r0, r4
10009e0a:	47a8      	blx	r5
		Transfer(frameBuffer,1,128,&module);
10009e0c:	003b      	movs	r3, r7
10009e0e:	2280      	movs	r2, #128	; 0x80
10009e10:	2101      	movs	r1, #1
10009e12:	0030      	movs	r0, r6
10009e14:	4c17      	ldr	r4, [pc, #92]	; (10009e74 <main+0x198>)
10009e16:	47a0      	blx	r4
10009e18:	e7f3      	b.n	10009e02 <main+0x126>
10009e1a:	46c0      	nop			; (mov r8, r8)
10009e1c:	10009049 	.word	0x10009049
10009e20:	10009c0d 	.word	0x10009c0d
10009e24:	0027ac40 	.word	0x0027ac40
10009e28:	10009c6d 	.word	0x10009c6d
10009e2c:	10009c51 	.word	0x10009c51
10009e30:	10009ca9 	.word	0x10009ca9
10009e34:	10009c61 	.word	0x10009c61
10009e38:	e000e100 	.word	0xe000e100
10009e3c:	1000842d 	.word	0x1000842d
10009e40:	1000843d 	.word	0x1000843d
10009e44:	100085f5 	.word	0x100085f5
10009e48:	1000812d 	.word	0x1000812d
10009e4c:	100081b1 	.word	0x100081b1
10009e50:	1000a1dc 	.word	0x1000a1dc
10009e54:	100082d9 	.word	0x100082d9
10009e58:	1000a224 	.word	0x1000a224
10009e5c:	1000ae24 	.word	0x1000ae24
10009e60:	1000b424 	.word	0x1000b424
10009e64:	1000ba24 	.word	0x1000ba24
10009e68:	10009cb9 	.word	0x10009cb9
10009e6c:	1000a20c 	.word	0x1000a20c
10009e70:	000f4240 	.word	0x000f4240
10009e74:	10008389 	.word	0x10008389

10009e78 <__libc_init_array>:
10009e78:	4b0e      	ldr	r3, [pc, #56]	; (10009eb4 <__libc_init_array+0x3c>)
10009e7a:	b570      	push	{r4, r5, r6, lr}
10009e7c:	2500      	movs	r5, #0
10009e7e:	001e      	movs	r6, r3
10009e80:	4c0d      	ldr	r4, [pc, #52]	; (10009eb8 <__libc_init_array+0x40>)
10009e82:	1ae4      	subs	r4, r4, r3
10009e84:	10a4      	asrs	r4, r4, #2
10009e86:	42a5      	cmp	r5, r4
10009e88:	d004      	beq.n	10009e94 <__libc_init_array+0x1c>
10009e8a:	00ab      	lsls	r3, r5, #2
10009e8c:	58f3      	ldr	r3, [r6, r3]
10009e8e:	4798      	blx	r3
10009e90:	3501      	adds	r5, #1
10009e92:	e7f8      	b.n	10009e86 <__libc_init_array+0xe>
10009e94:	f000 f976 	bl	1000a184 <_init>
10009e98:	4b08      	ldr	r3, [pc, #32]	; (10009ebc <__libc_init_array+0x44>)
10009e9a:	2500      	movs	r5, #0
10009e9c:	001e      	movs	r6, r3
10009e9e:	4c08      	ldr	r4, [pc, #32]	; (10009ec0 <__libc_init_array+0x48>)
10009ea0:	1ae4      	subs	r4, r4, r3
10009ea2:	10a4      	asrs	r4, r4, #2
10009ea4:	42a5      	cmp	r5, r4
10009ea6:	d004      	beq.n	10009eb2 <__libc_init_array+0x3a>
10009ea8:	00ab      	lsls	r3, r5, #2
10009eaa:	58f3      	ldr	r3, [r6, r3]
10009eac:	4798      	blx	r3
10009eae:	3501      	adds	r5, #1
10009eb0:	e7f8      	b.n	10009ea4 <__libc_init_array+0x2c>
10009eb2:	bd70      	pop	{r4, r5, r6, pc}
10009eb4:	1000a190 	.word	0x1000a190
10009eb8:	1000a190 	.word	0x1000a190
10009ebc:	1000a190 	.word	0x1000a190
10009ec0:	1000a194 	.word	0x1000a194
10009ec4:	100090dc 	.word	0x100090dc
10009ec8:	100090ea 	.word	0x100090ea
10009ecc:	100090f8 	.word	0x100090f8
10009ed0:	10009106 	.word	0x10009106
10009ed4:	10009114 	.word	0x10009114
10009ed8:	10009122 	.word	0x10009122
10009edc:	10009130 	.word	0x10009130
10009ee0:	10009140 	.word	0x10009140
10009ee4:	10009150 	.word	0x10009150
10009ee8:	10009160 	.word	0x10009160
10009eec:	10009170 	.word	0x10009170
10009ef0:	10009180 	.word	0x10009180
10009ef4:	10009190 	.word	0x10009190
10009ef8:	100091a0 	.word	0x100091a0
10009efc:	100091b0 	.word	0x100091b0
10009f00:	100091c0 	.word	0x100091c0
10009f04:	100091d0 	.word	0x100091d0
10009f08:	100091e0 	.word	0x100091e0
10009f0c:	100091f0 	.word	0x100091f0
10009f10:	10009200 	.word	0x10009200
10009f14:	10009210 	.word	0x10009210
10009f18:	10009220 	.word	0x10009220
10009f1c:	10009230 	.word	0x10009230
10009f20:	10009240 	.word	0x10009240
10009f24:	10009250 	.word	0x10009250
10009f28:	10009260 	.word	0x10009260
10009f2c:	10009270 	.word	0x10009270
10009f30:	10009280 	.word	0x10009280
10009f34:	1000928e 	.word	0x1000928e
10009f38:	1000929c 	.word	0x1000929c
10009f3c:	100092aa 	.word	0x100092aa
10009f40:	100092b8 	.word	0x100092b8
10009f44:	100092c6 	.word	0x100092c6
10009f48:	100092d4 	.word	0x100092d4
10009f4c:	100092e2 	.word	0x100092e2
10009f50:	100092f0 	.word	0x100092f0
10009f54:	10009300 	.word	0x10009300
10009f58:	10009310 	.word	0x10009310
10009f5c:	10009320 	.word	0x10009320
10009f60:	10009330 	.word	0x10009330
10009f64:	10009340 	.word	0x10009340
10009f68:	10009350 	.word	0x10009350
10009f6c:	10009360 	.word	0x10009360
10009f70:	10009370 	.word	0x10009370
10009f74:	10009380 	.word	0x10009380
10009f78:	10009390 	.word	0x10009390
10009f7c:	100093a0 	.word	0x100093a0
10009f80:	100093b0 	.word	0x100093b0
10009f84:	100093c0 	.word	0x100093c0
10009f88:	100093d0 	.word	0x100093d0
10009f8c:	100093e0 	.word	0x100093e0
10009f90:	100093f0 	.word	0x100093f0
10009f94:	100093fe 	.word	0x100093fe
10009f98:	1000940c 	.word	0x1000940c
10009f9c:	10009438 	.word	0x10009438
10009fa0:	10009446 	.word	0x10009446
10009fa4:	10009454 	.word	0x10009454
10009fa8:	10009462 	.word	0x10009462
10009fac:	10009470 	.word	0x10009470
10009fb0:	1000947e 	.word	0x1000947e
10009fb4:	1000948c 	.word	0x1000948c
10009fb8:	1000949a 	.word	0x1000949a
10009fbc:	100094a8 	.word	0x100094a8
10009fc0:	100094b6 	.word	0x100094b6
10009fc4:	100094c4 	.word	0x100094c4
10009fc8:	100094d2 	.word	0x100094d2
10009fcc:	100094e0 	.word	0x100094e0
10009fd0:	100094ee 	.word	0x100094ee
10009fd4:	100094fc 	.word	0x100094fc
10009fd8:	1000950a 	.word	0x1000950a
10009fdc:	10009518 	.word	0x10009518
10009fe0:	10009526 	.word	0x10009526
10009fe4:	10009534 	.word	0x10009534
10009fe8:	10009542 	.word	0x10009542
10009fec:	10009550 	.word	0x10009550
10009ff0:	1000955e 	.word	0x1000955e
10009ff4:	1000956c 	.word	0x1000956c
10009ff8:	1000957a 	.word	0x1000957a
10009ffc:	10009588 	.word	0x10009588
1000a000:	10009596 	.word	0x10009596
1000a004:	100095a4 	.word	0x100095a4
1000a008:	100095b2 	.word	0x100095b2
1000a00c:	100095c0 	.word	0x100095c0
1000a010:	100095ce 	.word	0x100095ce
1000a014:	100095dc 	.word	0x100095dc
1000a018:	100095ea 	.word	0x100095ea
1000a01c:	100095f8 	.word	0x100095f8
1000a020:	10009606 	.word	0x10009606
1000a024:	10009614 	.word	0x10009614
1000a028:	10009622 	.word	0x10009622
1000a02c:	10009630 	.word	0x10009630
1000a030:	1000963e 	.word	0x1000963e
1000a034:	1000964c 	.word	0x1000964c
1000a038:	1000965a 	.word	0x1000965a
1000a03c:	10009668 	.word	0x10009668
1000a040:	10009676 	.word	0x10009676
1000a044:	10009684 	.word	0x10009684
1000a048:	10009692 	.word	0x10009692
1000a04c:	100096a0 	.word	0x100096a0
1000a050:	100096ae 	.word	0x100096ae
1000a054:	100096bc 	.word	0x100096bc
1000a058:	100096ca 	.word	0x100096ca
1000a05c:	100096d8 	.word	0x100096d8
1000a060:	100096e6 	.word	0x100096e6
1000a064:	100096f4 	.word	0x100096f4
1000a068:	10009702 	.word	0x10009702
1000a06c:	10009710 	.word	0x10009710
1000a070:	1000971e 	.word	0x1000971e
1000a074:	100097b8 	.word	0x100097b8
1000a078:	100097e0 	.word	0x100097e0
1000a07c:	10009808 	.word	0x10009808
1000a080:	10009830 	.word	0x10009830
1000a084:	10009a70 	.word	0x10009a70
1000a088:	10009860 	.word	0x10009860
1000a08c:	10009878 	.word	0x10009878
1000a090:	100098f0 	.word	0x100098f0
1000a094:	10009908 	.word	0x10009908
1000a098:	10009890 	.word	0x10009890
1000a09c:	100098a8 	.word	0x100098a8
1000a0a0:	100098c0 	.word	0x100098c0
1000a0a4:	100098d8 	.word	0x100098d8
1000a0a8:	10009920 	.word	0x10009920
1000a0ac:	10009be4 	.word	0x10009be4
1000a0b0:	10009be4 	.word	0x10009be4
1000a0b4:	10009be4 	.word	0x10009be4
1000a0b8:	10009be4 	.word	0x10009be4
1000a0bc:	10009be4 	.word	0x10009be4
1000a0c0:	10009be4 	.word	0x10009be4
1000a0c4:	10009be4 	.word	0x10009be4
1000a0c8:	10009be4 	.word	0x10009be4
1000a0cc:	100099c8 	.word	0x100099c8
1000a0d0:	100099e0 	.word	0x100099e0
1000a0d4:	100099f8 	.word	0x100099f8
1000a0d8:	10009a86 	.word	0x10009a86
1000a0dc:	10009950 	.word	0x10009950
1000a0e0:	10009be4 	.word	0x10009be4
1000a0e4:	10009be4 	.word	0x10009be4
1000a0e8:	10009be4 	.word	0x10009be4
1000a0ec:	10009be4 	.word	0x10009be4
1000a0f0:	10009be4 	.word	0x10009be4
1000a0f4:	10009be4 	.word	0x10009be4
1000a0f8:	10009a10 	.word	0x10009a10
1000a0fc:	10009a28 	.word	0x10009a28
1000a100:	10009a40 	.word	0x10009a40
1000a104:	10009a58 	.word	0x10009a58
1000a108:	10009be4 	.word	0x10009be4
1000a10c:	10009b9c 	.word	0x10009b9c
1000a110:	10009bb4 	.word	0x10009bb4
1000a114:	10009be4 	.word	0x10009be4
1000a118:	10009be4 	.word	0x10009be4
1000a11c:	10009ab2 	.word	0x10009ab2
1000a120:	10009ac8 	.word	0x10009ac8
1000a124:	10009ade 	.word	0x10009ade
1000a128:	10009af4 	.word	0x10009af4
1000a12c:	10009be4 	.word	0x10009be4
1000a130:	10009be4 	.word	0x10009be4
1000a134:	10009be4 	.word	0x10009be4
1000a138:	10009be4 	.word	0x10009be4
1000a13c:	10009be4 	.word	0x10009be4
1000a140:	10009be4 	.word	0x10009be4
1000a144:	10009be4 	.word	0x10009be4
1000a148:	10009be4 	.word	0x10009be4
1000a14c:	100097a4 	.word	0x100097a4
1000a150:	100097cc 	.word	0x100097cc
1000a154:	100097f4 	.word	0x100097f4
1000a158:	1000981c 	.word	0x1000981c
1000a15c:	10009848 	.word	0x10009848
1000a160:	10009938 	.word	0x10009938
1000a164:	10009968 	.word	0x10009968
1000a168:	10009980 	.word	0x10009980
1000a16c:	10009998 	.word	0x10009998
1000a170:	100099b0 	.word	0x100099b0
1000a174:	10009a9c 	.word	0x10009a9c
1000a178:	10009b0a 	.word	0x10009b0a
1000a17c:	10009b84 	.word	0x10009b84
1000a180:	10009bcc 	.word	0x10009bcc

1000a184 <_init>:
1000a184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a186:	46c0      	nop			; (mov r8, r8)
1000a188:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a18a:	bc08      	pop	{r3}
1000a18c:	469e      	mov	lr, r3
1000a18e:	4770      	bx	lr

1000a190 <__init_array_start>:
1000a190:	100080b1 	.word	0x100080b1

1000a194 <_fini>:
1000a194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a196:	46c0      	nop			; (mov r8, r8)
1000a198:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a19a:	bc08      	pop	{r3}
1000a19c:	469e      	mov	lr, r3
1000a19e:	4770      	bx	lr

1000a1a0 <__fini_array_start>:
1000a1a0:	10008089 	.word	0x10008089
