
SmartwatchT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002268  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  1000a268  1000a268  0000a268  2**0
                  CONTENTS
  2 .bss          00001868  1000a268  1000a268  0000a268  2**2
                  ALLOC
  3 .stack        00000800  1000bad0  1000bad0  0000a268  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0000a268  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0000a290  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001a4f7  00000000  00000000  0000a2e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018a7  00000000  00000000  000247e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002c93  00000000  00000000  00026087  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000408  00000000  00000000  00028d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003d8  00000000  00000000  00029122  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c8bd  00000000  00000000  000294fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000641f  00000000  00000000  00045db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00123031  00000000  00000000  0004c1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000928  00000000  00000000  0016f208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1000a268 	.word	0x1000a268
10008068:	1000a268 	.word	0x1000a268
1000806c:	1000a268 	.word	0x1000a268
10008070:	1000bad0 	.word	0x1000bad0
10008074:	1000a268 	.word	0x1000a268
10008078:	1000a26c 	.word	0x1000a26c
1000807c:	1000a26c 	.word	0x1000a26c
10008080:	10009f3d 	.word	0x10009f3d
10008084:	10009e51 	.word	0x10009e51

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	1000a268 	.word	0x1000a268
100080a8:	00000000 	.word	0x00000000
100080ac:	1000a268 	.word	0x1000a268

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	1000a26c 	.word	0x1000a26c
100080dc:	1000a268 	.word	0x1000a268
100080e0:	1000a268 	.word	0x1000a268
100080e4:	00000000 	.word	0x00000000

100080e8 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
100080e8:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
100080ea:	4b0d      	ldr	r3, [pc, #52]	; (10008120 <dualtimer_isr_handler+0x38>)
100080ec:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
100080ee:	2b00      	cmp	r3, #0
100080f0:	d007      	beq.n	10008102 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
100080f2:	2201      	movs	r2, #1
100080f4:	4b0a      	ldr	r3, [pc, #40]	; (10008120 <dualtimer_isr_handler+0x38>)
100080f6:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
100080f8:	4b0a      	ldr	r3, [pc, #40]	; (10008124 <dualtimer_isr_handler+0x3c>)
100080fa:	681b      	ldr	r3, [r3, #0]
100080fc:	2b00      	cmp	r3, #0
100080fe:	d000      	beq.n	10008102 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008100:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008102:	2334      	movs	r3, #52	; 0x34
10008104:	4a06      	ldr	r2, [pc, #24]	; (10008120 <dualtimer_isr_handler+0x38>)
10008106:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008108:	2b00      	cmp	r3, #0
1000810a:	d007      	beq.n	1000811c <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000810c:	2101      	movs	r1, #1
1000810e:	232c      	movs	r3, #44	; 0x2c
10008110:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008112:	4b05      	ldr	r3, [pc, #20]	; (10008128 <dualtimer_isr_handler+0x40>)
10008114:	681b      	ldr	r3, [r3, #0]
10008116:	2b00      	cmp	r3, #0
10008118:	d000      	beq.n	1000811c <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000811a:	4798      	blx	r3
	}
}
1000811c:	bd10      	pop	{r4, pc}
1000811e:	46c0      	nop			; (mov r8, r8)
10008120:	40001000 	.word	0x40001000
10008124:	1000a284 	.word	0x1000a284
10008128:	1000a288 	.word	0x1000a288

1000812c <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000812c:	2301      	movs	r3, #1
1000812e:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008130:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008132:	2202      	movs	r2, #2
10008134:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008136:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008138:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000813a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000813c:	2200      	movs	r2, #0
1000813e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008140:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008142:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008144:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008146:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008148:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000814a:	7602      	strb	r2, [r0, #24]
}
1000814c:	4770      	bx	lr
1000814e:	46c0      	nop			; (mov r8, r8)

10008150 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008150:	2800      	cmp	r0, #0
10008152:	d102      	bne.n	1000815a <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
10008154:	4b02      	ldr	r3, [pc, #8]	; (10008160 <dualtimer_get_value+0x10>)
10008156:	6858      	ldr	r0, [r3, #4]
10008158:	e001      	b.n	1000815e <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000815a:	4b01      	ldr	r3, [pc, #4]	; (10008160 <dualtimer_get_value+0x10>)
1000815c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000815e:	4770      	bx	lr
10008160:	40001000 	.word	0x40001000

10008164 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10008164:	2800      	cmp	r0, #0
10008166:	d107      	bne.n	10008178 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008168:	2900      	cmp	r1, #0
1000816a:	d102      	bne.n	10008172 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000816c:	4b06      	ldr	r3, [pc, #24]	; (10008188 <dualtimer_set_counter+0x24>)
1000816e:	601a      	str	r2, [r3, #0]
10008170:	e009      	b.n	10008186 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
10008172:	4b05      	ldr	r3, [pc, #20]	; (10008188 <dualtimer_set_counter+0x24>)
10008174:	619a      	str	r2, [r3, #24]
10008176:	e006      	b.n	10008186 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008178:	2900      	cmp	r1, #0
1000817a:	d102      	bne.n	10008182 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000817c:	4b02      	ldr	r3, [pc, #8]	; (10008188 <dualtimer_set_counter+0x24>)
1000817e:	621a      	str	r2, [r3, #32]
10008180:	e001      	b.n	10008186 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008182:	4b01      	ldr	r3, [pc, #4]	; (10008188 <dualtimer_set_counter+0x24>)
10008184:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10008186:	4770      	bx	lr
10008188:	40001000 	.word	0x40001000

1000818c <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000818c:	2800      	cmp	r0, #0
1000818e:	d105      	bne.n	1000819c <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008190:	4a06      	ldr	r2, [pc, #24]	; (100081ac <dualtimer_enable+0x20>)
10008192:	7a11      	ldrb	r1, [r2, #8]
10008194:	2380      	movs	r3, #128	; 0x80
10008196:	430b      	orrs	r3, r1
10008198:	7213      	strb	r3, [r2, #8]
1000819a:	e005      	b.n	100081a8 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000819c:	4903      	ldr	r1, [pc, #12]	; (100081ac <dualtimer_enable+0x20>)
1000819e:	2228      	movs	r2, #40	; 0x28
100081a0:	5c88      	ldrb	r0, [r1, r2]
100081a2:	2380      	movs	r3, #128	; 0x80
100081a4:	4303      	orrs	r3, r0
100081a6:	548b      	strb	r3, [r1, r2]
	}
}
100081a8:	4770      	bx	lr
100081aa:	46c0      	nop			; (mov r8, r8)
100081ac:	40001000 	.word	0x40001000

100081b0 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081b0:	b570      	push	{r4, r5, r6, lr}
100081b2:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
100081b4:	2004      	movs	r0, #4
100081b6:	4b39      	ldr	r3, [pc, #228]	; (1000829c <dualtimer_init+0xec>)
100081b8:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100081ba:	7823      	ldrb	r3, [r4, #0]
100081bc:	2b00      	cmp	r3, #0
100081be:	d102      	bne.n	100081c6 <dualtimer_init+0x16>
100081c0:	7b23      	ldrb	r3, [r4, #12]
100081c2:	2b00      	cmp	r3, #0
100081c4:	d065      	beq.n	10008292 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081c6:	4936      	ldr	r1, [pc, #216]	; (100082a0 <dualtimer_init+0xf0>)
100081c8:	68ca      	ldr	r2, [r1, #12]
100081ca:	2320      	movs	r3, #32
100081cc:	4313      	orrs	r3, r2
100081ce:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
100081d0:	7e22      	ldrb	r2, [r4, #24]
100081d2:	698b      	ldr	r3, [r1, #24]
100081d4:	2003      	movs	r0, #3
100081d6:	4002      	ands	r2, r0
100081d8:	0112      	lsls	r2, r2, #4
100081da:	302d      	adds	r0, #45	; 0x2d
100081dc:	4383      	bics	r3, r0
100081de:	4313      	orrs	r3, r2
100081e0:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
100081e2:	7823      	ldrb	r3, [r4, #0]
100081e4:	2b00      	cmp	r3, #0
100081e6:	d026      	beq.n	10008236 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081e8:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
100081ea:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081ec:	2b00      	cmp	r3, #0
100081ee:	d003      	beq.n	100081f8 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
100081f0:	3b02      	subs	r3, #2
100081f2:	425d      	negs	r5, r3
100081f4:	415d      	adcs	r5, r3
100081f6:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
100081f8:	78a2      	ldrb	r2, [r4, #2]
100081fa:	0052      	lsls	r2, r2, #1
100081fc:	2502      	movs	r5, #2
100081fe:	402a      	ands	r2, r5
10008200:	78e3      	ldrb	r3, [r4, #3]
10008202:	009b      	lsls	r3, r3, #2
10008204:	350a      	adds	r5, #10
10008206:	402b      	ands	r3, r5
10008208:	431a      	orrs	r2, r3
1000820a:	0015      	movs	r5, r2
1000820c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000820e:	7923      	ldrb	r3, [r4, #4]
10008210:	2b00      	cmp	r3, #0
10008212:	d001      	beq.n	10008218 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008214:	2320      	movs	r3, #32
10008216:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008218:	4b22      	ldr	r3, [pc, #136]	; (100082a4 <dualtimer_init+0xf4>)
1000821a:	68a2      	ldr	r2, [r4, #8]
1000821c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000821e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008220:	491f      	ldr	r1, [pc, #124]	; (100082a0 <dualtimer_init+0xf0>)
10008222:	22c4      	movs	r2, #196	; 0xc4
10008224:	0052      	lsls	r2, r2, #1
10008226:	5c88      	ldrb	r0, [r1, r2]
10008228:	2301      	movs	r3, #1
1000822a:	4303      	orrs	r3, r0
1000822c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000822e:	2000      	movs	r0, #0
10008230:	4b1d      	ldr	r3, [pc, #116]	; (100082a8 <dualtimer_init+0xf8>)
10008232:	4798      	blx	r3
10008234:	e000      	b.n	10008238 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008236:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008238:	7b23      	ldrb	r3, [r4, #12]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d029      	beq.n	10008292 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000823e:	7b63      	ldrb	r3, [r4, #13]
10008240:	2b00      	cmp	r3, #0
10008242:	d005      	beq.n	10008250 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008244:	2b01      	cmp	r3, #1
10008246:	d005      	beq.n	10008254 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008248:	2b02      	cmp	r3, #2
1000824a:	d104      	bne.n	10008256 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000824c:	2540      	movs	r5, #64	; 0x40
1000824e:	e002      	b.n	10008256 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008250:	2501      	movs	r5, #1
10008252:	e000      	b.n	10008256 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008254:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008256:	7ba3      	ldrb	r3, [r4, #14]
10008258:	005b      	lsls	r3, r3, #1
1000825a:	2102      	movs	r1, #2
1000825c:	4019      	ands	r1, r3
1000825e:	7be2      	ldrb	r2, [r4, #15]
10008260:	0092      	lsls	r2, r2, #2
10008262:	230c      	movs	r3, #12
10008264:	4013      	ands	r3, r2
10008266:	430b      	orrs	r3, r1
10008268:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000826a:	7c23      	ldrb	r3, [r4, #16]
1000826c:	2b00      	cmp	r3, #0
1000826e:	d001      	beq.n	10008274 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008270:	2320      	movs	r3, #32
10008272:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008274:	6962      	ldr	r2, [r4, #20]
10008276:	4b0b      	ldr	r3, [pc, #44]	; (100082a4 <dualtimer_init+0xf4>)
10008278:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000827a:	2228      	movs	r2, #40	; 0x28
1000827c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000827e:	4908      	ldr	r1, [pc, #32]	; (100082a0 <dualtimer_init+0xf0>)
10008280:	3261      	adds	r2, #97	; 0x61
10008282:	32ff      	adds	r2, #255	; 0xff
10008284:	5c88      	ldrb	r0, [r1, r2]
10008286:	2302      	movs	r3, #2
10008288:	4303      	orrs	r3, r0
1000828a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000828c:	2001      	movs	r0, #1
1000828e:	4b06      	ldr	r3, [pc, #24]	; (100082a8 <dualtimer_init+0xf8>)
10008290:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10008292:	4906      	ldr	r1, [pc, #24]	; (100082ac <dualtimer_init+0xfc>)
10008294:	201e      	movs	r0, #30
10008296:	4b06      	ldr	r3, [pc, #24]	; (100082b0 <dualtimer_init+0x100>)
10008298:	4798      	blx	r3
}
1000829a:	bd70      	pop	{r4, r5, r6, pc}
1000829c:	10009909 	.word	0x10009909
100082a0:	4000b000 	.word	0x4000b000
100082a4:	40001000 	.word	0x40001000
100082a8:	1000818d 	.word	0x1000818d
100082ac:	100080e9 	.word	0x100080e9
100082b0:	10009d71 	.word	0x10009d71

100082b4 <draw_pixel>:
const uint8_t BLUE	  = 0x20;
const uint8_t MAGENTA = 0xA0;
const uint8_t CYAN	  = 0x60;

static void draw_pixel(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t color)
{
100082b4:	b530      	push	{r4, r5, lr}
	uint8_t bit_offset = (x*3)&0x07;
100082b6:	004c      	lsls	r4, r1, #1
100082b8:	190c      	adds	r4, r1, r4
100082ba:	2507      	movs	r5, #7
100082bc:	402c      	ands	r4, r5
	frameBuffer[y][(x*3)>>3] = (frameBuffer[y][(x*3)>>3] & ~(0xE0>>bit_offset)) | (color>>bit_offset);
100082be:	0055      	lsls	r5, r2, #1
100082c0:	18aa      	adds	r2, r5, r2
100082c2:	0112      	lsls	r2, r2, #4
100082c4:	1880      	adds	r0, r0, r2
100082c6:	004a      	lsls	r2, r1, #1
100082c8:	1851      	adds	r1, r2, r1
100082ca:	10c9      	asrs	r1, r1, #3
100082cc:	25e0      	movs	r5, #224	; 0xe0
100082ce:	4125      	asrs	r5, r4
100082d0:	5c42      	ldrb	r2, [r0, r1]
100082d2:	43aa      	bics	r2, r5
100082d4:	001d      	movs	r5, r3
100082d6:	4125      	asrs	r5, r4
100082d8:	432a      	orrs	r2, r5
100082da:	5442      	strb	r2, [r0, r1]
	if (bit_offset > 5)
100082dc:	2c05      	cmp	r4, #5
100082de:	d90a      	bls.n	100082f6 <draw_pixel+0x42>
	{
		frameBuffer[y][((x*3)>>3)+1] = (frameBuffer[y][((x*3)>>3)+1] & (0xFF>>(bit_offset-5))) | (color << (8-bit_offset));
100082e0:	3101      	adds	r1, #1
100082e2:	1f65      	subs	r5, r4, #5
100082e4:	22ff      	movs	r2, #255	; 0xff
100082e6:	412a      	asrs	r2, r5
100082e8:	5c45      	ldrb	r5, [r0, r1]
100082ea:	402a      	ands	r2, r5
100082ec:	2508      	movs	r5, #8
100082ee:	1b2c      	subs	r4, r5, r4
100082f0:	40a3      	lsls	r3, r4
100082f2:	4313      	orrs	r3, r2
100082f4:	5443      	strb	r3, [r0, r1]
	}
}
100082f6:	bd30      	pop	{r4, r5, pc}

100082f8 <delay_us>:
	config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
	dualtimer_init(&config_dualtimer);
}

static void delay_us(uint32_t time)
{
100082f8:	b510      	push	{r4, lr}
	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG, time*26);
100082fa:	231a      	movs	r3, #26
100082fc:	4343      	muls	r3, r0
100082fe:	001a      	movs	r2, r3
10008300:	2100      	movs	r1, #0
10008302:	2000      	movs	r0, #0
10008304:	4b03      	ldr	r3, [pc, #12]	; (10008314 <delay_us+0x1c>)
10008306:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER1)){}
10008308:	4c03      	ldr	r4, [pc, #12]	; (10008318 <delay_us+0x20>)
1000830a:	2000      	movs	r0, #0
1000830c:	47a0      	blx	r4
1000830e:	2800      	cmp	r0, #0
10008310:	d1fb      	bne.n	1000830a <delay_us+0x12>
}
10008312:	bd10      	pop	{r4, pc}
10008314:	10008165 	.word	0x10008165
10008318:	10008151 	.word	0x10008151

1000831c <Setup>:
	spi_enable(&(module->LCD_spi_master_instance));
	//! [enable]
}

void Setup(LCDSPIModule* module)
{
1000831c:	b530      	push	{r4, r5, lr}
1000831e:	b08d      	sub	sp, #52	; 0x34
10008320:	0005      	movs	r5, r0
	//! [slave_config]
	struct spi_slave_inst_config slave_dev_config;
	//! [slave_config]
	/* Configure and initialize software device instance of peripheral slave */
	//! [slave_conf_defaults]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
10008322:	ac01      	add	r4, sp, #4
10008324:	0020      	movs	r0, r4
10008326:	4b14      	ldr	r3, [pc, #80]	; (10008378 <Setup+0x5c>)
10008328:	4798      	blx	r3
	//! [slave_conf_defaults]
	//! [ss_pin]
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
1000832a:	2310      	movs	r3, #16
1000832c:	7023      	strb	r3, [r4, #0]
	//! [ss_pin]
	//! [slave_init]
	spi_attach_slave(&(module->LCD_slave), &slave_dev_config);
1000832e:	0028      	movs	r0, r5
10008330:	302c      	adds	r0, #44	; 0x2c
10008332:	0021      	movs	r1, r4
10008334:	4b11      	ldr	r3, [pc, #68]	; (1000837c <Setup+0x60>)
10008336:	4798      	blx	r3
	//! [slave_init]
	/* Configure, initialize and enable SPI module */
	//! [conf_defaults]
	spi_get_config_defaults(&config_spi_master);
10008338:	ac02      	add	r4, sp, #8
1000833a:	0020      	movs	r0, r4
1000833c:	4b10      	ldr	r3, [pc, #64]	; (10008380 <Setup+0x64>)
1000833e:	4798      	blx	r3
	//! [conf_defaults]
	//! [transfer_mode]
	config_spi_master.transfer_mode = CONF_SPI_TRANSFER_MODE;
10008340:	2300      	movs	r3, #0
10008342:	70a3      	strb	r3, [r4, #2]
	//! [transfer_mode]
	//! [clock_divider]
	config_spi_master.clock_divider = 154;
10008344:	339a      	adds	r3, #154	; 0x9a
10008346:	7123      	strb	r3, [r4, #4]
	//! [clock_divider]
	/* Configure pad 0 */
	//! [sck]
	config_spi_master.pin_number_pad[0] = CONF_SPI_PIN_SCK;
10008348:	3b89      	subs	r3, #137	; 0x89
1000834a:	60a3      	str	r3, [r4, #8]
	config_spi_master.pinmux_sel_pad[0] = CONF_SPI_MUX_SCK;
1000834c:	3b0d      	subs	r3, #13
1000834e:	61a3      	str	r3, [r4, #24]
	//! [sck]
	/* Configure pad 1 */
	//! [mosi]
	config_spi_master.pin_number_pad[1] = CONF_SPI_PIN_MOSI;
10008350:	2213      	movs	r2, #19
10008352:	60e2      	str	r2, [r4, #12]
	config_spi_master.pinmux_sel_pad[1] = CONF_SPI_MUX_MOSI;
10008354:	61e3      	str	r3, [r4, #28]
	//! [mosi]
	/* Configure pad 2 */
	//! [ssn]
	config_spi_master.pin_number_pad[2] = PINMUX_UNUSED;
10008356:	3a14      	subs	r2, #20
10008358:	6122      	str	r2, [r4, #16]
	config_spi_master.pinmux_sel_pad[2] = PINMUX_UNUSED;
1000835a:	6222      	str	r2, [r4, #32]
	//! [ssn]
	/* Configure pad 3 */
	//! [miso]
	config_spi_master.pin_number_pad[3] = CONF_SPI_PIN_MISO;
1000835c:	3213      	adds	r2, #19
1000835e:	6162      	str	r2, [r4, #20]
	config_spi_master.pinmux_sel_pad[3] = CONF_SPI_MUX_MISO;
10008360:	6263      	str	r3, [r4, #36]	; 0x24
	//! [miso]
	//! [init]
	spi_init(&(module->LCD_spi_master_instance), CONF_SPI, &config_spi_master);
10008362:	0022      	movs	r2, r4
10008364:	4907      	ldr	r1, [pc, #28]	; (10008384 <Setup+0x68>)
10008366:	0028      	movs	r0, r5
10008368:	4b07      	ldr	r3, [pc, #28]	; (10008388 <Setup+0x6c>)
1000836a:	4798      	blx	r3
	//! [init]

	//! [enable]
	spi_enable(&(module->LCD_spi_master_instance));
1000836c:	0028      	movs	r0, r5
1000836e:	4b07      	ldr	r3, [pc, #28]	; (1000838c <Setup+0x70>)
10008370:	4798      	blx	r3

void Setup(LCDSPIModule* module)
{
	configure_spi_master(module);

}
10008372:	b00d      	add	sp, #52	; 0x34
10008374:	bd30      	pop	{r4, r5, pc}
10008376:	46c0      	nop			; (mov r8, r8)
10008378:	1000898d 	.word	0x1000898d
1000837c:	100089c5 	.word	0x100089c5
10008380:	10008999 	.word	0x10008999
10008384:	40007000 	.word	0x40007000
10008388:	10008aed 	.word	0x10008aed
1000838c:	10008a05 	.word	0x10008a05

10008390 <generate_color_test_pattern>:
	res = res | ((foo & 0x80) >> 7);
	return res;
}

void generate_color_test_pattern(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
10008390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008392:	4657      	mov	r7, sl
10008394:	464e      	mov	r6, r9
10008396:	b4c0      	push	{r6, r7}
10008398:	0005      	movs	r5, r0
1000839a:	2400      	movs	r4, #0
	for(uint8_t i = 0; i<128; i++)
	{
		for(uint8_t j=0; j<16;j++)
		{
			draw_pixel(frameBuffer, j, i, BLACK);
1000839c:	4b30      	ldr	r3, [pc, #192]	; (10008460 <generate_color_test_pattern+0xd0>)
1000839e:	4699      	mov	r9, r3
		}
		for(uint8_t j=16; j<32;j++)
		{
			draw_pixel(frameBuffer, j, i, RED);
100083a0:	001f      	movs	r7, r3
100083a2:	e057      	b.n	10008454 <generate_color_test_pattern+0xc4>
{
	for(uint8_t i = 0; i<128; i++)
	{
		for(uint8_t j=0; j<16;j++)
		{
			draw_pixel(frameBuffer, j, i, BLACK);
100083a4:	2300      	movs	r3, #0
100083a6:	0022      	movs	r2, r4
100083a8:	0031      	movs	r1, r6
100083aa:	0028      	movs	r0, r5
100083ac:	47c8      	blx	r9

void generate_color_test_pattern(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
	for(uint8_t i = 0; i<128; i++)
	{
		for(uint8_t j=0; j<16;j++)
100083ae:	3601      	adds	r6, #1
100083b0:	b2f6      	uxtb	r6, r6
100083b2:	2e10      	cmp	r6, #16
100083b4:	d1f6      	bne.n	100083a4 <generate_color_test_pattern+0x14>
		{
			draw_pixel(frameBuffer, j, i, BLACK);
		}
		for(uint8_t j=16; j<32;j++)
		{
			draw_pixel(frameBuffer, j, i, RED);
100083b6:	2380      	movs	r3, #128	; 0x80
100083b8:	0022      	movs	r2, r4
100083ba:	0031      	movs	r1, r6
100083bc:	0028      	movs	r0, r5
100083be:	47b8      	blx	r7
	{
		for(uint8_t j=0; j<16;j++)
		{
			draw_pixel(frameBuffer, j, i, BLACK);
		}
		for(uint8_t j=16; j<32;j++)
100083c0:	3601      	adds	r6, #1
100083c2:	b2f6      	uxtb	r6, r6
100083c4:	2e20      	cmp	r6, #32
100083c6:	d1f6      	bne.n	100083b6 <generate_color_test_pattern+0x26>
		{
			draw_pixel(frameBuffer, j, i, RED);
		}
		for(uint8_t j=32; j<48;j++)
		{
			draw_pixel(frameBuffer, j, i, GREEN);
100083c8:	4b25      	ldr	r3, [pc, #148]	; (10008460 <generate_color_test_pattern+0xd0>)
100083ca:	469a      	mov	sl, r3
100083cc:	2340      	movs	r3, #64	; 0x40
100083ce:	0022      	movs	r2, r4
100083d0:	0031      	movs	r1, r6
100083d2:	0028      	movs	r0, r5
100083d4:	47d0      	blx	sl
		}
		for(uint8_t j=16; j<32;j++)
		{
			draw_pixel(frameBuffer, j, i, RED);
		}
		for(uint8_t j=32; j<48;j++)
100083d6:	3601      	adds	r6, #1
100083d8:	b2f6      	uxtb	r6, r6
100083da:	2e30      	cmp	r6, #48	; 0x30
100083dc:	d1f6      	bne.n	100083cc <generate_color_test_pattern+0x3c>
		{
			draw_pixel(frameBuffer, j, i, GREEN);
		}
		for(uint8_t j=48; j<64;j++)
		{
			draw_pixel(frameBuffer, j, i, YELLOW);
100083de:	4b20      	ldr	r3, [pc, #128]	; (10008460 <generate_color_test_pattern+0xd0>)
100083e0:	469a      	mov	sl, r3
100083e2:	23c0      	movs	r3, #192	; 0xc0
100083e4:	0022      	movs	r2, r4
100083e6:	0031      	movs	r1, r6
100083e8:	0028      	movs	r0, r5
100083ea:	47d0      	blx	sl
		}
		for(uint8_t j=32; j<48;j++)
		{
			draw_pixel(frameBuffer, j, i, GREEN);
		}
		for(uint8_t j=48; j<64;j++)
100083ec:	3601      	adds	r6, #1
100083ee:	b2f6      	uxtb	r6, r6
100083f0:	2e40      	cmp	r6, #64	; 0x40
100083f2:	d1f6      	bne.n	100083e2 <generate_color_test_pattern+0x52>
		{
			draw_pixel(frameBuffer, j, i, YELLOW);
		}
		for(uint8_t j=64; j<80;j++)
		{
			draw_pixel(frameBuffer, j, i, BLUE);
100083f4:	4b1a      	ldr	r3, [pc, #104]	; (10008460 <generate_color_test_pattern+0xd0>)
100083f6:	469a      	mov	sl, r3
100083f8:	2320      	movs	r3, #32
100083fa:	0022      	movs	r2, r4
100083fc:	0031      	movs	r1, r6
100083fe:	0028      	movs	r0, r5
10008400:	47d0      	blx	sl
		}
		for(uint8_t j=48; j<64;j++)
		{
			draw_pixel(frameBuffer, j, i, YELLOW);
		}
		for(uint8_t j=64; j<80;j++)
10008402:	3601      	adds	r6, #1
10008404:	b2f6      	uxtb	r6, r6
10008406:	2e50      	cmp	r6, #80	; 0x50
10008408:	d1f6      	bne.n	100083f8 <generate_color_test_pattern+0x68>
		{
			draw_pixel(frameBuffer, j, i, BLUE);
		}
		for(uint8_t j=80; j<96;j++)
		{
			draw_pixel(frameBuffer, j, i, MAGENTA);
1000840a:	4b15      	ldr	r3, [pc, #84]	; (10008460 <generate_color_test_pattern+0xd0>)
1000840c:	469a      	mov	sl, r3
1000840e:	23a0      	movs	r3, #160	; 0xa0
10008410:	0022      	movs	r2, r4
10008412:	0031      	movs	r1, r6
10008414:	0028      	movs	r0, r5
10008416:	47d0      	blx	sl
		}
		for(uint8_t j=64; j<80;j++)
		{
			draw_pixel(frameBuffer, j, i, BLUE);
		}
		for(uint8_t j=80; j<96;j++)
10008418:	3601      	adds	r6, #1
1000841a:	b2f6      	uxtb	r6, r6
1000841c:	2e60      	cmp	r6, #96	; 0x60
1000841e:	d1f6      	bne.n	1000840e <generate_color_test_pattern+0x7e>
		{
			draw_pixel(frameBuffer, j, i, MAGENTA);
		}
		for(uint8_t j=96; j<112;j++)
		{
			draw_pixel(frameBuffer, j, i, CYAN);
10008420:	4b0f      	ldr	r3, [pc, #60]	; (10008460 <generate_color_test_pattern+0xd0>)
10008422:	469a      	mov	sl, r3
10008424:	2360      	movs	r3, #96	; 0x60
10008426:	0022      	movs	r2, r4
10008428:	0031      	movs	r1, r6
1000842a:	0028      	movs	r0, r5
1000842c:	47d0      	blx	sl
		}
		for(uint8_t j=80; j<96;j++)
		{
			draw_pixel(frameBuffer, j, i, MAGENTA);
		}
		for(uint8_t j=96; j<112;j++)
1000842e:	3601      	adds	r6, #1
10008430:	b2f6      	uxtb	r6, r6
10008432:	2e70      	cmp	r6, #112	; 0x70
10008434:	d1f6      	bne.n	10008424 <generate_color_test_pattern+0x94>
		{
			draw_pixel(frameBuffer, j, i, CYAN);
		}
		for(uint8_t j=112; j<128;j++)
		{
			draw_pixel(frameBuffer, j, i, WHITE);
10008436:	4b0a      	ldr	r3, [pc, #40]	; (10008460 <generate_color_test_pattern+0xd0>)
10008438:	469a      	mov	sl, r3
1000843a:	23e0      	movs	r3, #224	; 0xe0
1000843c:	0022      	movs	r2, r4
1000843e:	0031      	movs	r1, r6
10008440:	0028      	movs	r0, r5
10008442:	47d0      	blx	sl
		}
		for(uint8_t j=96; j<112;j++)
		{
			draw_pixel(frameBuffer, j, i, CYAN);
		}
		for(uint8_t j=112; j<128;j++)
10008444:	3601      	adds	r6, #1
10008446:	b2f6      	uxtb	r6, r6
10008448:	2e80      	cmp	r6, #128	; 0x80
1000844a:	d1f6      	bne.n	1000843a <generate_color_test_pattern+0xaa>
	return res;
}

void generate_color_test_pattern(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
	for(uint8_t i = 0; i<128; i++)
1000844c:	3401      	adds	r4, #1
1000844e:	b2e4      	uxtb	r4, r4
10008450:	2c80      	cmp	r4, #128	; 0x80
10008452:	d001      	beq.n	10008458 <generate_color_test_pattern+0xc8>
	res = res | ((foo & 0x80) >> 7);
	return res;
}

void generate_color_test_pattern(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
10008454:	2600      	movs	r6, #0
10008456:	e7a5      	b.n	100083a4 <generate_color_test_pattern+0x14>
		for(uint8_t j=112; j<128;j++)
		{
			draw_pixel(frameBuffer, j, i, WHITE);
		}
	}
}
10008458:	bc0c      	pop	{r2, r3}
1000845a:	4691      	mov	r9, r2
1000845c:	469a      	mov	sl, r3
1000845e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008460:	100082b5 	.word	0x100082b5

10008464 <Transfer>:

void Transfer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t startLine, uint8_t endLine, LCDSPIModule* module)
{
10008464:	b5f0      	push	{r4, r5, r6, r7, lr}
10008466:	465f      	mov	r7, fp
10008468:	464e      	mov	r6, r9
1000846a:	4645      	mov	r5, r8
1000846c:	b4e0      	push	{r5, r6, r7}
1000846e:	b082      	sub	sp, #8
10008470:	4680      	mov	r8, r0
10008472:	000d      	movs	r5, r1
10008474:	4691      	mov	r9, r2
10008476:	001c      	movs	r4, r3
10008478:	9301      	str	r3, [sp, #4]
	generate_color_test_pattern(frameBuffer);
1000847a:	4b2c      	ldr	r3, [pc, #176]	; (1000852c <Transfer+0xc8>)
1000847c:	4798      	blx	r3
	//! [select_slave]
	gpio_pin_set_output_level(PIN_LP_GPIO_16, true);
1000847e:	2101      	movs	r1, #1
10008480:	2010      	movs	r0, #16
10008482:	4b2b      	ldr	r3, [pc, #172]	; (10008530 <Transfer+0xcc>)
10008484:	4798      	blx	r3
	//! [select_slave]

	//! [delay]
	delay_us(5); //tsSCS
10008486:	2005      	movs	r0, #5
10008488:	4b2a      	ldr	r3, [pc, #168]	; (10008534 <Transfer+0xd0>)
1000848a:	4798      	blx	r3
	//! [delay]

	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0
1000848c:	9400      	str	r4, [sp, #0]
1000848e:	2180      	movs	r1, #128	; 0x80
10008490:	0020      	movs	r0, r4
10008492:	4b29      	ldr	r3, [pc, #164]	; (10008538 <Transfer+0xd4>)
10008494:	4798      	blx	r3

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
10008496:	3d01      	subs	r5, #1
10008498:	b2ed      	uxtb	r5, r5
1000849a:	454d      	cmp	r5, r9
1000849c:	d231      	bcs.n	10008502 <Transfer+0x9e>
	res = res | ((foo & 0x02) << 5);
	res = res | ((foo & 0x04) << 3);
	res = res | ((foo & 0x08) << 1);
	res = res | ((foo & 0x10) >> 1);
	res = res | ((foo & 0x20) >> 3);
	res = res | ((foo & 0x40) >> 5);
1000849e:	2340      	movs	r3, #64	; 0x40
100084a0:	469b      	mov	fp, r3
	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
	{
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
100084a2:	4f25      	ldr	r7, [pc, #148]	; (10008538 <Transfer+0xd4>)
		spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
100084a4:	4e25      	ldr	r6, [pc, #148]	; (1000853c <Transfer+0xd8>)
	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
	{
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
100084a6:	1c6c      	adds	r4, r5, #1
100084a8:	b2e4      	uxtb	r4, r4
	res = res | ((foo & 0x02) << 5);
	res = res | ((foo & 0x04) << 3);
	res = res | ((foo & 0x08) << 1);
	res = res | ((foo & 0x10) >> 1);
	res = res | ((foo & 0x20) >> 3);
	res = res | ((foo & 0x40) >> 5);
100084aa:	0163      	lsls	r3, r4, #5
100084ac:	4659      	mov	r1, fp
100084ae:	4019      	ands	r1, r3
100084b0:	00e2      	lsls	r2, r4, #3
100084b2:	2320      	movs	r3, #32
100084b4:	4013      	ands	r3, r2
100084b6:	430b      	orrs	r3, r1
100084b8:	01e2      	lsls	r2, r4, #7
100084ba:	4313      	orrs	r3, r2
100084bc:	0062      	lsls	r2, r4, #1
100084be:	2110      	movs	r1, #16
100084c0:	400a      	ands	r2, r1
100084c2:	4313      	orrs	r3, r2
100084c4:	1062      	asrs	r2, r4, #1
100084c6:	3908      	subs	r1, #8
100084c8:	400a      	ands	r2, r1
100084ca:	4313      	orrs	r3, r2
100084cc:	10e2      	asrs	r2, r4, #3
100084ce:	3904      	subs	r1, #4
100084d0:	400a      	ands	r2, r1
100084d2:	4313      	orrs	r3, r2
100084d4:	1162      	asrs	r2, r4, #5
100084d6:	3902      	subs	r1, #2
100084d8:	400a      	ands	r2, r1
100084da:	4313      	orrs	r3, r2
100084dc:	b2db      	uxtb	r3, r3
	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
	{
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
100084de:	09e1      	lsrs	r1, r4, #7
100084e0:	4319      	orrs	r1, r3
100084e2:	9800      	ldr	r0, [sp, #0]
100084e4:	47b8      	blx	r7
		spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
100084e6:	0069      	lsls	r1, r5, #1
100084e8:	1949      	adds	r1, r1, r5
100084ea:	0109      	lsls	r1, r1, #4
100084ec:	4441      	add	r1, r8
100084ee:	2230      	movs	r2, #48	; 0x30
100084f0:	9d00      	ldr	r5, [sp, #0]
100084f2:	0028      	movs	r0, r5
100084f4:	47b0      	blx	r6
		spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
100084f6:	2100      	movs	r1, #0
100084f8:	0028      	movs	r0, r5
100084fa:	47b8      	blx	r7
	//! [delay]

	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
100084fc:	0025      	movs	r5, r4
100084fe:	45a1      	cmp	r9, r4
10008500:	d8d1      	bhi.n	100084a6 <Transfer+0x42>
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
		spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
		spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
	}

	spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
10008502:	2100      	movs	r1, #0
10008504:	9801      	ldr	r0, [sp, #4]
10008506:	4b0c      	ldr	r3, [pc, #48]	; (10008538 <Transfer+0xd4>)
10008508:	4798      	blx	r3
	//! [write]
	//! [delay]
	delay_us(220);
1000850a:	20dc      	movs	r0, #220	; 0xdc
1000850c:	4c09      	ldr	r4, [pc, #36]	; (10008534 <Transfer+0xd0>)
1000850e:	47a0      	blx	r4
	//! [delay]
	//! [deselect_slave]
	gpio_pin_set_output_level(PIN_LP_GPIO_16, false);
10008510:	2100      	movs	r1, #0
10008512:	2010      	movs	r0, #16
10008514:	4b06      	ldr	r3, [pc, #24]	; (10008530 <Transfer+0xcc>)
10008516:	4798      	blx	r3
	//! [deselect_slave]
	delay_us(1000);
10008518:	20fa      	movs	r0, #250	; 0xfa
1000851a:	0080      	lsls	r0, r0, #2
1000851c:	47a0      	blx	r4
}
1000851e:	b002      	add	sp, #8
10008520:	bc1c      	pop	{r2, r3, r4}
10008522:	4690      	mov	r8, r2
10008524:	4699      	mov	r9, r3
10008526:	46a3      	mov	fp, r4
10008528:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000852a:	46c0      	nop			; (mov r8, r8)
1000852c:	10008391 	.word	0x10008391
10008530:	10008769 	.word	0x10008769
10008534:	100082f9 	.word	0x100082f9
10008538:	10008cb9 	.word	0x10008cb9
1000853c:	10008d4d 	.word	0x10008d4d

10008540 <ClearDisplay>:
	//! [deselect_slave]
	delay_us(1000);
}

void ClearDisplay(LCDSPIModule* module)
{
10008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008542:	0007      	movs	r7, r0
	//! [select_slave]
	//spi_select_slave(&(module->LCD_spi_master_instance), &(module->LCD_slave), false);
	gpio_pin_set_output_level(PIN_LP_GPIO_16, true);
10008544:	2101      	movs	r1, #1
10008546:	2010      	movs	r0, #16
10008548:	4d0a      	ldr	r5, [pc, #40]	; (10008574 <ClearDisplay+0x34>)
1000854a:	47a8      	blx	r5
	//! [select_slave]

	//! [delay]
	delay_us(5);
1000854c:	2005      	movs	r0, #5
1000854e:	4c0a      	ldr	r4, [pc, #40]	; (10008578 <ClearDisplay+0x38>)
10008550:	47a0      	blx	r4
	//! [delay]

	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x20);// M0=0 M1=0 M2=1 DMY=0
10008552:	2120      	movs	r1, #32
10008554:	0038      	movs	r0, r7
10008556:	4e09      	ldr	r6, [pc, #36]	; (1000857c <ClearDisplay+0x3c>)
10008558:	47b0      	blx	r6
	spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
1000855a:	2100      	movs	r1, #0
1000855c:	0038      	movs	r0, r7
1000855e:	47b0      	blx	r6
	//! [write]
	//! [delay]
	delay_us(170);
10008560:	20aa      	movs	r0, #170	; 0xaa
10008562:	47a0      	blx	r4
	//! [delay]
	//! [deselect_slave]
	//spi_select_slave(&(module->LCD_spi_master_instance), &(module->LCD_slave), true);
	gpio_pin_set_output_level(PIN_LP_GPIO_16, false);
10008564:	2100      	movs	r1, #0
10008566:	2010      	movs	r0, #16
10008568:	47a8      	blx	r5
	//! [deselect_slave]
	delay_us(1000);
1000856a:	20fa      	movs	r0, #250	; 0xfa
1000856c:	0080      	lsls	r0, r0, #2
1000856e:	47a0      	blx	r4
}
10008570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008572:	46c0      	nop			; (mov r8, r8)
10008574:	10008769 	.word	0x10008769
10008578:	100082f9 	.word	0x100082f9
1000857c:	10008cb9 	.word	0x10008cb9

10008580 <ClearBuffer>:

void ClearBuffer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
10008580:	23c0      	movs	r3, #192	; 0xc0
10008582:	015b      	lsls	r3, r3, #5
10008584:	18c1      	adds	r1, r0, r3
	for(uint8_t i=0;i<FRAME_HEIGHT;i++)
		for(uint8_t j=0;j<FRAME_WIDTH;j++)
			frameBuffer[i][j] = 0;
10008586:	2200      	movs	r2, #0
10008588:	e006      	b.n	10008598 <ClearBuffer+0x18>
1000858a:	7002      	strb	r2, [r0, #0]
1000858c:	3001      	adds	r0, #1
}

void ClearBuffer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
	for(uint8_t i=0;i<FRAME_HEIGHT;i++)
		for(uint8_t j=0;j<FRAME_WIDTH;j++)
1000858e:	4298      	cmp	r0, r3
10008590:	d1fb      	bne.n	1000858a <ClearBuffer+0xa>
10008592:	0018      	movs	r0, r3
	delay_us(1000);
}

void ClearBuffer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
	for(uint8_t i=0;i<FRAME_HEIGHT;i++)
10008594:	4299      	cmp	r1, r3
10008596:	d002      	beq.n	1000859e <ClearBuffer+0x1e>
10008598:	0003      	movs	r3, r0
1000859a:	3330      	adds	r3, #48	; 0x30
1000859c:	e7f5      	b.n	1000858a <ClearBuffer+0xa>
		for(uint8_t j=0;j<FRAME_WIDTH;j++)
			frameBuffer[i][j] = 0;

1000859e:	4770      	bx	lr

100085a0 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
100085a0:	2300      	movs	r3, #0
100085a2:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
100085a4:	2201      	movs	r2, #1
100085a6:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
100085a8:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
100085aa:	70c3      	strb	r3, [r0, #3]
}
100085ac:	4770      	bx	lr
100085ae:	46c0      	nop			; (mov r8, r8)

100085b0 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
100085b0:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
100085b2:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
100085b4:	2801      	cmp	r0, #1
100085b6:	d800      	bhi.n	100085ba <gpio_pin_set_config+0xa>
100085b8:	e0c8      	b.n	1000874c <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
100085ba:	2807      	cmp	r0, #7
100085bc:	d809      	bhi.n	100085d2 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
100085be:	4d64      	ldr	r5, [pc, #400]	; (10008750 <gpio_pin_set_config+0x1a0>)
100085c0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
100085c2:	3b10      	subs	r3, #16
100085c4:	4003      	ands	r3, r0
100085c6:	009b      	lsls	r3, r3, #2
100085c8:	2407      	movs	r4, #7
100085ca:	409c      	lsls	r4, r3
100085cc:	43a2      	bics	r2, r4
100085ce:	646a      	str	r2, [r5, #68]	; 0x44
100085d0:	e029      	b.n	10008626 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
100085d2:	280f      	cmp	r0, #15
100085d4:	d809      	bhi.n	100085ea <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
100085d6:	4d5e      	ldr	r5, [pc, #376]	; (10008750 <gpio_pin_set_config+0x1a0>)
100085d8:	6caa      	ldr	r2, [r5, #72]	; 0x48
100085da:	2307      	movs	r3, #7
100085dc:	4003      	ands	r3, r0
100085de:	009b      	lsls	r3, r3, #2
100085e0:	2407      	movs	r4, #7
100085e2:	409c      	lsls	r4, r3
100085e4:	43a2      	bics	r2, r4
100085e6:	64aa      	str	r2, [r5, #72]	; 0x48
100085e8:	e01d      	b.n	10008626 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
100085ea:	2817      	cmp	r0, #23
100085ec:	d809      	bhi.n	10008602 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100085ee:	4d58      	ldr	r5, [pc, #352]	; (10008750 <gpio_pin_set_config+0x1a0>)
100085f0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
100085f2:	2307      	movs	r3, #7
100085f4:	4003      	ands	r3, r0
100085f6:	009b      	lsls	r3, r3, #2
100085f8:	2407      	movs	r4, #7
100085fa:	409c      	lsls	r4, r3
100085fc:	43a2      	bics	r2, r4
100085fe:	64ea      	str	r2, [r5, #76]	; 0x4c
10008600:	e011      	b.n	10008626 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
10008602:	0003      	movs	r3, r0
10008604:	3b2c      	subs	r3, #44	; 0x2c
10008606:	2b03      	cmp	r3, #3
10008608:	d80d      	bhi.n	10008626 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000860a:	4d52      	ldr	r5, [pc, #328]	; (10008754 <gpio_pin_set_config+0x1a4>)
1000860c:	2482      	movs	r4, #130	; 0x82
1000860e:	00e4      	lsls	r4, r4, #3
10008610:	5d2a      	ldrb	r2, [r5, r4]
10008612:	0712      	lsls	r2, r2, #28
10008614:	2601      	movs	r6, #1
10008616:	409e      	lsls	r6, r3
10008618:	0f12      	lsrs	r2, r2, #28
1000861a:	5d2b      	ldrb	r3, [r5, r4]
1000861c:	43b2      	bics	r2, r6
1000861e:	260f      	movs	r6, #15
10008620:	43b3      	bics	r3, r6
10008622:	4313      	orrs	r3, r2
10008624:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
10008626:	0003      	movs	r3, r0
10008628:	3b1d      	subs	r3, #29
1000862a:	2b02      	cmp	r3, #2
1000862c:	d829      	bhi.n	10008682 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000862e:	784b      	ldrb	r3, [r1, #1]
10008630:	2b01      	cmp	r3, #1
10008632:	d108      	bne.n	10008646 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
10008634:	4d47      	ldr	r5, [pc, #284]	; (10008754 <gpio_pin_set_config+0x1a4>)
10008636:	7d2b      	ldrb	r3, [r5, #20]
10008638:	241f      	movs	r4, #31
1000863a:	1a24      	subs	r4, r4, r0
1000863c:	2201      	movs	r2, #1
1000863e:	40a2      	lsls	r2, r4
10008640:	4393      	bics	r3, r2
10008642:	752b      	strb	r3, [r5, #20]
10008644:	e008      	b.n	10008658 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
10008646:	4c43      	ldr	r4, [pc, #268]	; (10008754 <gpio_pin_set_config+0x1a4>)
10008648:	7d25      	ldrb	r5, [r4, #20]
1000864a:	221f      	movs	r2, #31
1000864c:	1a12      	subs	r2, r2, r0
1000864e:	2301      	movs	r3, #1
10008650:	4093      	lsls	r3, r2
10008652:	432b      	orrs	r3, r5
10008654:	b2db      	uxtb	r3, r3
10008656:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
10008658:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000865a:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000865c:	2a00      	cmp	r2, #0
1000865e:	d075      	beq.n	1000874c <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10008660:	493c      	ldr	r1, [pc, #240]	; (10008754 <gpio_pin_set_config+0x1a4>)
10008662:	880c      	ldrh	r4, [r1, #0]
10008664:	221f      	movs	r2, #31
10008666:	1a10      	subs	r0, r2, r0
10008668:	0080      	lsls	r0, r0, #2
1000866a:	3301      	adds	r3, #1
1000866c:	4083      	lsls	r3, r0
1000866e:	4323      	orrs	r3, r4
10008670:	b29b      	uxth	r3, r3
10008672:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008674:	4a38      	ldr	r2, [pc, #224]	; (10008758 <gpio_pin_set_config+0x1a8>)
10008676:	7811      	ldrb	r1, [r2, #0]
10008678:	2302      	movs	r3, #2
1000867a:	430b      	orrs	r3, r1
1000867c:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000867e:	2300      	movs	r3, #0
10008680:	e064      	b.n	1000874c <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
10008682:	780a      	ldrb	r2, [r1, #0]
10008684:	2a00      	cmp	r2, #0
10008686:	d140      	bne.n	1000870a <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10008688:	280f      	cmp	r0, #15
1000868a:	d808      	bhi.n	1000869e <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000868c:	2301      	movs	r3, #1
1000868e:	4083      	lsls	r3, r0
10008690:	b29b      	uxth	r3, r3
10008692:	4a32      	ldr	r2, [pc, #200]	; (1000875c <gpio_pin_set_config+0x1ac>)
10008694:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008696:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008698:	281f      	cmp	r0, #31
1000869a:	d857      	bhi.n	1000874c <gpio_pin_set_config+0x19c>
1000869c:	e012      	b.n	100086c4 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000869e:	281f      	cmp	r0, #31
100086a0:	d807      	bhi.n	100086b2 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
100086a2:	220f      	movs	r2, #15
100086a4:	4002      	ands	r2, r0
100086a6:	2301      	movs	r3, #1
100086a8:	4093      	lsls	r3, r2
100086aa:	b29b      	uxth	r3, r3
100086ac:	4a2c      	ldr	r2, [pc, #176]	; (10008760 <gpio_pin_set_config+0x1b0>)
100086ae:	8293      	strh	r3, [r2, #20]
100086b0:	e008      	b.n	100086c4 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
100086b2:	230f      	movs	r3, #15
100086b4:	4018      	ands	r0, r3
100086b6:	3b0e      	subs	r3, #14
100086b8:	4083      	lsls	r3, r0
100086ba:	b29b      	uxth	r3, r3
100086bc:	4a29      	ldr	r2, [pc, #164]	; (10008764 <gpio_pin_set_config+0x1b4>)
100086be:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100086c0:	2300      	movs	r3, #0
100086c2:	e043      	b.n	1000874c <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
100086c4:	784b      	ldrb	r3, [r1, #1]
100086c6:	2b01      	cmp	r3, #1
100086c8:	d00c      	beq.n	100086e4 <gpio_pin_set_config+0x134>
100086ca:	2b00      	cmp	r3, #0
100086cc:	d002      	beq.n	100086d4 <gpio_pin_set_config+0x124>
100086ce:	2b02      	cmp	r3, #2
100086d0:	d010      	beq.n	100086f4 <gpio_pin_set_config+0x144>
100086d2:	e03a      	b.n	1000874a <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
100086d4:	491e      	ldr	r1, [pc, #120]	; (10008750 <gpio_pin_set_config+0x1a0>)
100086d6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
100086d8:	2301      	movs	r3, #1
100086da:	4083      	lsls	r3, r0
100086dc:	4313      	orrs	r3, r2
100086de:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100086e0:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
100086e2:	e033      	b.n	1000874c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
100086e4:	491a      	ldr	r1, [pc, #104]	; (10008750 <gpio_pin_set_config+0x1a0>)
100086e6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
100086e8:	2201      	movs	r2, #1
100086ea:	4082      	lsls	r2, r0
100086ec:	4393      	bics	r3, r2
100086ee:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100086f0:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
100086f2:	e02b      	b.n	1000874c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
100086f4:	4b16      	ldr	r3, [pc, #88]	; (10008750 <gpio_pin_set_config+0x1a0>)
100086f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
100086f8:	2201      	movs	r2, #1
100086fa:	4082      	lsls	r2, r0
100086fc:	4311      	orrs	r1, r2
100086fe:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008700:	6d19      	ldr	r1, [r3, #80]	; 0x50
10008702:	4391      	bics	r1, r2
10008704:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008706:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008708:	e020      	b.n	1000874c <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000870a:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000870c:	2a01      	cmp	r2, #1
1000870e:	d11d      	bne.n	1000874c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
10008710:	280f      	cmp	r0, #15
10008712:	d806      	bhi.n	10008722 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
10008714:	3301      	adds	r3, #1
10008716:	4083      	lsls	r3, r0
10008718:	b29b      	uxth	r3, r3
1000871a:	4a10      	ldr	r2, [pc, #64]	; (1000875c <gpio_pin_set_config+0x1ac>)
1000871c:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000871e:	2300      	movs	r3, #0
10008720:	e014      	b.n	1000874c <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
10008722:	281f      	cmp	r0, #31
10008724:	d808      	bhi.n	10008738 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
10008726:	230f      	movs	r3, #15
10008728:	4018      	ands	r0, r3
1000872a:	3b0e      	subs	r3, #14
1000872c:	4083      	lsls	r3, r0
1000872e:	b29b      	uxth	r3, r3
10008730:	4a0b      	ldr	r2, [pc, #44]	; (10008760 <gpio_pin_set_config+0x1b0>)
10008732:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008734:	2300      	movs	r3, #0
10008736:	e009      	b.n	1000874c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
10008738:	230f      	movs	r3, #15
1000873a:	4018      	ands	r0, r3
1000873c:	3b0e      	subs	r3, #14
1000873e:	4083      	lsls	r3, r0
10008740:	b29b      	uxth	r3, r3
10008742:	4a08      	ldr	r2, [pc, #32]	; (10008764 <gpio_pin_set_config+0x1b4>)
10008744:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008746:	2300      	movs	r3, #0
10008748:	e000      	b.n	1000874c <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000874a:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000874c:	0018      	movs	r0, r3
1000874e:	bd70      	pop	{r4, r5, r6, pc}
10008750:	4000b000 	.word	0x4000b000
10008754:	4000f000 	.word	0x4000f000
10008758:	4000e000 	.word	0x4000e000
1000875c:	40010000 	.word	0x40010000
10008760:	40011000 	.word	0x40011000
10008764:	40013000 	.word	0x40013000

10008768 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
10008768:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000876a:	280f      	cmp	r0, #15
1000876c:	d810      	bhi.n	10008790 <gpio_pin_set_output_level+0x28>
		if(level) {
1000876e:	2900      	cmp	r1, #0
10008770:	d007      	beq.n	10008782 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
10008772:	4a1d      	ldr	r2, [pc, #116]	; (100087e8 <gpio_pin_set_output_level+0x80>)
10008774:	8891      	ldrh	r1, [r2, #4]
10008776:	2301      	movs	r3, #1
10008778:	4083      	lsls	r3, r0
1000877a:	430b      	orrs	r3, r1
1000877c:	b29b      	uxth	r3, r3
1000877e:	8093      	strh	r3, [r2, #4]
10008780:	e031      	b.n	100087e6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
10008782:	4919      	ldr	r1, [pc, #100]	; (100087e8 <gpio_pin_set_output_level+0x80>)
10008784:	888b      	ldrh	r3, [r1, #4]
10008786:	2201      	movs	r2, #1
10008788:	4082      	lsls	r2, r0
1000878a:	4393      	bics	r3, r2
1000878c:	808b      	strh	r3, [r1, #4]
1000878e:	e02a      	b.n	100087e6 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
10008790:	281f      	cmp	r0, #31
10008792:	d814      	bhi.n	100087be <gpio_pin_set_output_level+0x56>
		if(level) {
10008794:	2900      	cmp	r1, #0
10008796:	d009      	beq.n	100087ac <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008798:	4914      	ldr	r1, [pc, #80]	; (100087ec <gpio_pin_set_output_level+0x84>)
1000879a:	888c      	ldrh	r4, [r1, #4]
1000879c:	220f      	movs	r2, #15
1000879e:	4010      	ands	r0, r2
100087a0:	2301      	movs	r3, #1
100087a2:	4083      	lsls	r3, r0
100087a4:	4323      	orrs	r3, r4
100087a6:	b29b      	uxth	r3, r3
100087a8:	808b      	strh	r3, [r1, #4]
100087aa:	e01c      	b.n	100087e6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
100087ac:	490f      	ldr	r1, [pc, #60]	; (100087ec <gpio_pin_set_output_level+0x84>)
100087ae:	888b      	ldrh	r3, [r1, #4]
100087b0:	220f      	movs	r2, #15
100087b2:	4010      	ands	r0, r2
100087b4:	3a0e      	subs	r2, #14
100087b6:	4082      	lsls	r2, r0
100087b8:	4393      	bics	r3, r2
100087ba:	808b      	strh	r3, [r1, #4]
100087bc:	e013      	b.n	100087e6 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
100087be:	2900      	cmp	r1, #0
100087c0:	d009      	beq.n	100087d6 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
100087c2:	490b      	ldr	r1, [pc, #44]	; (100087f0 <gpio_pin_set_output_level+0x88>)
100087c4:	888c      	ldrh	r4, [r1, #4]
100087c6:	220f      	movs	r2, #15
100087c8:	4010      	ands	r0, r2
100087ca:	2301      	movs	r3, #1
100087cc:	4083      	lsls	r3, r0
100087ce:	4323      	orrs	r3, r4
100087d0:	b29b      	uxth	r3, r3
100087d2:	808b      	strh	r3, [r1, #4]
100087d4:	e007      	b.n	100087e6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
100087d6:	4906      	ldr	r1, [pc, #24]	; (100087f0 <gpio_pin_set_output_level+0x88>)
100087d8:	888b      	ldrh	r3, [r1, #4]
100087da:	220f      	movs	r2, #15
100087dc:	4010      	ands	r0, r2
100087de:	3a0e      	subs	r2, #14
100087e0:	4082      	lsls	r2, r0
100087e2:	4393      	bics	r3, r2
100087e4:	808b      	strh	r3, [r1, #4]
		}
	}
}
100087e6:	bd10      	pop	{r4, pc}
100087e8:	40010000 	.word	0x40010000
100087ec:	40011000 	.word	0x40011000
100087f0:	40013000 	.word	0x40013000

100087f4 <gpio_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle.
 */
void gpio_pin_toggle_output_level(const uint8_t gpio_pin)
{
	if (gpio_pin < 16) {
100087f4:	280f      	cmp	r0, #15
100087f6:	d807      	bhi.n	10008808 <gpio_pin_toggle_output_level+0x14>
		GPIO0->DATAOUT.reg ^= (1 << gpio_pin);
100087f8:	4a0e      	ldr	r2, [pc, #56]	; (10008834 <gpio_pin_toggle_output_level+0x40>)
100087fa:	8891      	ldrh	r1, [r2, #4]
100087fc:	2301      	movs	r3, #1
100087fe:	4083      	lsls	r3, r0
10008800:	404b      	eors	r3, r1
10008802:	b29b      	uxth	r3, r3
10008804:	8093      	strh	r3, [r2, #4]
10008806:	e014      	b.n	10008832 <gpio_pin_toggle_output_level+0x3e>
	} else if (gpio_pin < 32) {
10008808:	281f      	cmp	r0, #31
1000880a:	d809      	bhi.n	10008820 <gpio_pin_toggle_output_level+0x2c>
		GPIO1->DATAOUT.reg ^= (1 << (gpio_pin % 16));
1000880c:	4a0a      	ldr	r2, [pc, #40]	; (10008838 <gpio_pin_toggle_output_level+0x44>)
1000880e:	8891      	ldrh	r1, [r2, #4]
10008810:	230f      	movs	r3, #15
10008812:	4018      	ands	r0, r3
10008814:	3b0e      	subs	r3, #14
10008816:	4083      	lsls	r3, r0
10008818:	404b      	eors	r3, r1
1000881a:	b29b      	uxth	r3, r3
1000881c:	8093      	strh	r3, [r2, #4]
1000881e:	e008      	b.n	10008832 <gpio_pin_toggle_output_level+0x3e>
	} else {
		GPIO2->DATAOUT.reg ^= (1 << (gpio_pin % 16));
10008820:	4a06      	ldr	r2, [pc, #24]	; (1000883c <gpio_pin_toggle_output_level+0x48>)
10008822:	8891      	ldrh	r1, [r2, #4]
10008824:	230f      	movs	r3, #15
10008826:	4018      	ands	r0, r3
10008828:	3b0e      	subs	r3, #14
1000882a:	4083      	lsls	r3, r0
1000882c:	404b      	eors	r3, r1
1000882e:	b29b      	uxth	r3, r3
10008830:	8093      	strh	r3, [r2, #4]
	}
}
10008832:	4770      	bx	lr
10008834:	40010000 	.word	0x40010000
10008838:	40011000 	.word	0x40011000
1000883c:	40013000 	.word	0x40013000

10008840 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008840:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008842:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008844:	23ff      	movs	r3, #255	; 0xff
10008846:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008848:	2807      	cmp	r0, #7
1000884a:	d833      	bhi.n	100088b4 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000884c:	4a4e      	ldr	r2, [pc, #312]	; (10008988 <gpio_pinmux_cofiguration+0x148>)
1000884e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008850:	3bf8      	subs	r3, #248	; 0xf8
10008852:	4003      	ands	r3, r0
10008854:	009b      	lsls	r3, r3, #2
10008856:	2607      	movs	r6, #7
10008858:	409e      	lsls	r6, r3
1000885a:	43b4      	bics	r4, r6
1000885c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000885e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008860:	000e      	movs	r6, r1
10008862:	409e      	lsls	r6, r3
10008864:	0033      	movs	r3, r6
10008866:	4323      	orrs	r3, r4
10008868:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000886a:	2901      	cmp	r1, #1
1000886c:	d000      	beq.n	10008870 <gpio_pinmux_cofiguration+0x30>
1000886e:	e08a      	b.n	10008986 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10008870:	2803      	cmp	r0, #3
10008872:	d80f      	bhi.n	10008894 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008874:	0011      	movs	r1, r2
10008876:	22d0      	movs	r2, #208	; 0xd0
10008878:	0052      	lsls	r2, r2, #1
1000887a:	588c      	ldr	r4, [r1, r2]
1000887c:	2303      	movs	r3, #3
1000887e:	4018      	ands	r0, r3
10008880:	00c0      	lsls	r0, r0, #3
10008882:	333c      	adds	r3, #60	; 0x3c
10008884:	4083      	lsls	r3, r0
10008886:	439c      	bics	r4, r3
10008888:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000888a:	588b      	ldr	r3, [r1, r2]
1000888c:	4085      	lsls	r5, r0
1000888e:	431d      	orrs	r5, r3
10008890:	508d      	str	r5, [r1, r2]
10008892:	e078      	b.n	10008986 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008894:	493c      	ldr	r1, [pc, #240]	; (10008988 <gpio_pinmux_cofiguration+0x148>)
10008896:	22d2      	movs	r2, #210	; 0xd2
10008898:	0052      	lsls	r2, r2, #1
1000889a:	588c      	ldr	r4, [r1, r2]
1000889c:	2303      	movs	r3, #3
1000889e:	4018      	ands	r0, r3
100088a0:	00c0      	lsls	r0, r0, #3
100088a2:	333c      	adds	r3, #60	; 0x3c
100088a4:	4083      	lsls	r3, r0
100088a6:	439c      	bics	r4, r3
100088a8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100088aa:	588b      	ldr	r3, [r1, r2]
100088ac:	4085      	lsls	r5, r0
100088ae:	431d      	orrs	r5, r3
100088b0:	508d      	str	r5, [r1, r2]
100088b2:	e068      	b.n	10008986 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
100088b4:	280f      	cmp	r0, #15
100088b6:	d832      	bhi.n	1000891e <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
100088b8:	4a33      	ldr	r2, [pc, #204]	; (10008988 <gpio_pinmux_cofiguration+0x148>)
100088ba:	6c94      	ldr	r4, [r2, #72]	; 0x48
100088bc:	2307      	movs	r3, #7
100088be:	4003      	ands	r3, r0
100088c0:	009b      	lsls	r3, r3, #2
100088c2:	2607      	movs	r6, #7
100088c4:	409e      	lsls	r6, r3
100088c6:	43b4      	bics	r4, r6
100088c8:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100088ca:	6c94      	ldr	r4, [r2, #72]	; 0x48
100088cc:	000e      	movs	r6, r1
100088ce:	409e      	lsls	r6, r3
100088d0:	0033      	movs	r3, r6
100088d2:	4323      	orrs	r3, r4
100088d4:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
100088d6:	2901      	cmp	r1, #1
100088d8:	d155      	bne.n	10008986 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
100088da:	280b      	cmp	r0, #11
100088dc:	d80f      	bhi.n	100088fe <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100088de:	0011      	movs	r1, r2
100088e0:	22d4      	movs	r2, #212	; 0xd4
100088e2:	0052      	lsls	r2, r2, #1
100088e4:	588c      	ldr	r4, [r1, r2]
100088e6:	2303      	movs	r3, #3
100088e8:	4018      	ands	r0, r3
100088ea:	00c0      	lsls	r0, r0, #3
100088ec:	333c      	adds	r3, #60	; 0x3c
100088ee:	4083      	lsls	r3, r0
100088f0:	439c      	bics	r4, r3
100088f2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100088f4:	588b      	ldr	r3, [r1, r2]
100088f6:	4085      	lsls	r5, r0
100088f8:	431d      	orrs	r5, r3
100088fa:	508d      	str	r5, [r1, r2]
100088fc:	e043      	b.n	10008986 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100088fe:	4922      	ldr	r1, [pc, #136]	; (10008988 <gpio_pinmux_cofiguration+0x148>)
10008900:	22d6      	movs	r2, #214	; 0xd6
10008902:	0052      	lsls	r2, r2, #1
10008904:	588c      	ldr	r4, [r1, r2]
10008906:	2303      	movs	r3, #3
10008908:	4018      	ands	r0, r3
1000890a:	00c0      	lsls	r0, r0, #3
1000890c:	333c      	adds	r3, #60	; 0x3c
1000890e:	4083      	lsls	r3, r0
10008910:	439c      	bics	r4, r3
10008912:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008914:	588b      	ldr	r3, [r1, r2]
10008916:	4085      	lsls	r5, r0
10008918:	431d      	orrs	r5, r3
1000891a:	508d      	str	r5, [r1, r2]
1000891c:	e033      	b.n	10008986 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000891e:	2817      	cmp	r0, #23
10008920:	d831      	bhi.n	10008986 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008922:	4a19      	ldr	r2, [pc, #100]	; (10008988 <gpio_pinmux_cofiguration+0x148>)
10008924:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008926:	2307      	movs	r3, #7
10008928:	4003      	ands	r3, r0
1000892a:	009b      	lsls	r3, r3, #2
1000892c:	2607      	movs	r6, #7
1000892e:	409e      	lsls	r6, r3
10008930:	43b4      	bics	r4, r6
10008932:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008934:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008936:	000e      	movs	r6, r1
10008938:	409e      	lsls	r6, r3
1000893a:	0033      	movs	r3, r6
1000893c:	4323      	orrs	r3, r4
1000893e:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008940:	2901      	cmp	r1, #1
10008942:	d120      	bne.n	10008986 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008944:	2813      	cmp	r0, #19
10008946:	d80f      	bhi.n	10008968 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008948:	0011      	movs	r1, r2
1000894a:	22d8      	movs	r2, #216	; 0xd8
1000894c:	0052      	lsls	r2, r2, #1
1000894e:	588c      	ldr	r4, [r1, r2]
10008950:	2303      	movs	r3, #3
10008952:	4018      	ands	r0, r3
10008954:	00c0      	lsls	r0, r0, #3
10008956:	333c      	adds	r3, #60	; 0x3c
10008958:	4083      	lsls	r3, r0
1000895a:	439c      	bics	r4, r3
1000895c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000895e:	588b      	ldr	r3, [r1, r2]
10008960:	4085      	lsls	r5, r0
10008962:	431d      	orrs	r5, r3
10008964:	508d      	str	r5, [r1, r2]
10008966:	e00e      	b.n	10008986 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008968:	4a07      	ldr	r2, [pc, #28]	; (10008988 <gpio_pinmux_cofiguration+0x148>)
1000896a:	23da      	movs	r3, #218	; 0xda
1000896c:	005b      	lsls	r3, r3, #1
1000896e:	58d1      	ldr	r1, [r2, r3]
10008970:	2403      	movs	r4, #3
10008972:	4020      	ands	r0, r4
10008974:	00c0      	lsls	r0, r0, #3
10008976:	343c      	adds	r4, #60	; 0x3c
10008978:	4084      	lsls	r4, r0
1000897a:	43a1      	bics	r1, r4
1000897c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000897e:	58d1      	ldr	r1, [r2, r3]
10008980:	4085      	lsls	r5, r0
10008982:	430d      	orrs	r5, r1
10008984:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008986:	bd70      	pop	{r4, r5, r6, pc}
10008988:	4000b000 	.word	0x4000b000

1000898c <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000898c:	230c      	movs	r3, #12
1000898e:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
10008990:	2300      	movs	r3, #0
10008992:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
10008994:	7083      	strb	r3, [r0, #2]
}
10008996:	4770      	bx	lr

10008998 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
10008998:	2301      	movs	r3, #1
1000899a:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000899c:	2300      	movs	r3, #0
1000899e:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
100089a0:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
100089a2:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 255;
100089a4:	33ff      	adds	r3, #255	; 0xff
100089a6:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
100089a8:	3bf5      	subs	r3, #245	; 0xf5
100089aa:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
100089ac:	3301      	adds	r3, #1
100089ae:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
100089b0:	3301      	adds	r3, #1
100089b2:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
100089b4:	3301      	adds	r3, #1
100089b6:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
100089b8:	3b0b      	subs	r3, #11
100089ba:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
100089bc:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
100089be:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
100089c0:	6243      	str	r3, [r0, #36]	; 0x24
};
100089c2:	4770      	bx	lr

100089c4 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
100089c4:	b530      	push	{r4, r5, lr}
100089c6:	b083      	sub	sp, #12
100089c8:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
100089ca:	780b      	ldrb	r3, [r1, #0]
100089cc:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
100089ce:	784b      	ldrb	r3, [r1, #1]
100089d0:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
100089d2:	788b      	ldrb	r3, [r1, #2]
100089d4:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
100089d6:	ad01      	add	r5, sp, #4
100089d8:	0028      	movs	r0, r5
100089da:	4b07      	ldr	r3, [pc, #28]	; (100089f8 <spi_attach_slave+0x34>)
100089dc:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
100089de:	2301      	movs	r3, #1
100089e0:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
100089e2:	7820      	ldrb	r0, [r4, #0]
100089e4:	0029      	movs	r1, r5
100089e6:	4b05      	ldr	r3, [pc, #20]	; (100089fc <spi_attach_slave+0x38>)
100089e8:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
100089ea:	7820      	ldrb	r0, [r4, #0]
100089ec:	2101      	movs	r1, #1
100089ee:	4b04      	ldr	r3, [pc, #16]	; (10008a00 <spi_attach_slave+0x3c>)
100089f0:	4798      	blx	r3
}
100089f2:	b003      	add	sp, #12
100089f4:	bd30      	pop	{r4, r5, pc}
100089f6:	46c0      	nop			; (mov r8, r8)
100089f8:	100085a1 	.word	0x100085a1
100089fc:	100085b1 	.word	0x100085b1
10008a00:	10008769 	.word	0x10008769

10008a04 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
10008a04:	6803      	ldr	r3, [r0, #0]

#if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
10008a06:	4a0a      	ldr	r2, [pc, #40]	; (10008a30 <spi_enable+0x2c>)
10008a08:	4293      	cmp	r3, r2
10008a0a:	d105      	bne.n	10008a18 <spi_enable+0x14>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008a0c:	4a09      	ldr	r2, [pc, #36]	; (10008a34 <spi_enable+0x30>)
10008a0e:	2110      	movs	r1, #16
10008a10:	6011      	str	r1, [r2, #0]
10008a12:	3110      	adds	r1, #16
10008a14:	6011      	str	r1, [r2, #0]
10008a16:	e007      	b.n	10008a28 <spi_enable+0x24>
		NVIC_EnableIRQ(SPI0_RX_IRQn);
		NVIC_EnableIRQ(SPI0_TX_IRQn);
	} else if(spi_module == SPI1) {
10008a18:	4a07      	ldr	r2, [pc, #28]	; (10008a38 <spi_enable+0x34>)
10008a1a:	4293      	cmp	r3, r2
10008a1c:	d104      	bne.n	10008a28 <spi_enable+0x24>
10008a1e:	4a05      	ldr	r2, [pc, #20]	; (10008a34 <spi_enable+0x30>)
10008a20:	2140      	movs	r1, #64	; 0x40
10008a22:	6011      	str	r1, [r2, #0]
10008a24:	3140      	adds	r1, #64	; 0x40
10008a26:	6011      	str	r1, [r2, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
10008a28:	2201      	movs	r2, #1
10008a2a:	761a      	strb	r2, [r3, #24]
}
10008a2c:	4770      	bx	lr
10008a2e:	46c0      	nop			; (mov r8, r8)
10008a30:	40006000 	.word	0x40006000
10008a34:	e000e100 	.word	0xe000e100
10008a38:	40007000 	.word	0x40007000

10008a3c <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
10008a3c:	b510      	push	{r4, lr}
	Spi *const spi_module = (module->hw);
10008a3e:	6803      	ldr	r3, [r0, #0]

#  if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
10008a40:	4a17      	ldr	r2, [pc, #92]	; (10008aa0 <spi_disable+0x64>)
10008a42:	4293      	cmp	r3, r2
10008a44:	d106      	bne.n	10008a54 <spi_disable+0x18>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008a46:	4917      	ldr	r1, [pc, #92]	; (10008aa4 <spi_disable+0x68>)
10008a48:	2280      	movs	r2, #128	; 0x80
10008a4a:	2410      	movs	r4, #16
10008a4c:	508c      	str	r4, [r1, r2]
10008a4e:	3410      	adds	r4, #16
10008a50:	508c      	str	r4, [r1, r2]
10008a52:	e007      	b.n	10008a64 <spi_disable+0x28>
		NVIC_DisableIRQ(SPI0_RX_IRQn);
		NVIC_DisableIRQ(SPI0_TX_IRQn);
	} else if(spi_module == SPI1) {
10008a54:	4a14      	ldr	r2, [pc, #80]	; (10008aa8 <spi_disable+0x6c>)
10008a56:	4293      	cmp	r3, r2
10008a58:	d104      	bne.n	10008a64 <spi_disable+0x28>
10008a5a:	4912      	ldr	r1, [pc, #72]	; (10008aa4 <spi_disable+0x68>)
10008a5c:	2280      	movs	r2, #128	; 0x80
10008a5e:	2440      	movs	r4, #64	; 0x40
10008a60:	508c      	str	r4, [r1, r2]
10008a62:	508a      	str	r2, [r1, r2]
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10008a64:	2200      	movs	r2, #0
10008a66:	761a      	strb	r2, [r3, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10008a68:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
10008a6a:	4a0d      	ldr	r2, [pc, #52]	; (10008aa0 <spi_disable+0x64>)
10008a6c:	4293      	cmp	r3, r2
10008a6e:	d109      	bne.n	10008a84 <spi_disable+0x48>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
10008a70:	2041      	movs	r0, #65	; 0x41
10008a72:	4c0e      	ldr	r4, [pc, #56]	; (10008aac <spi_disable+0x70>)
10008a74:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
10008a76:	2026      	movs	r0, #38	; 0x26
10008a78:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
10008a7a:	2038      	movs	r0, #56	; 0x38
10008a7c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
10008a7e:	2001      	movs	r0, #1
10008a80:	47a0      	blx	r4
10008a82:	e00b      	b.n	10008a9c <spi_disable+0x60>
	} else if (spi_module == (void *)SPI1) {
10008a84:	4a08      	ldr	r2, [pc, #32]	; (10008aa8 <spi_disable+0x6c>)
10008a86:	4293      	cmp	r3, r2
10008a88:	d108      	bne.n	10008a9c <spi_disable+0x60>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
10008a8a:	2042      	movs	r0, #66	; 0x42
10008a8c:	4c07      	ldr	r4, [pc, #28]	; (10008aac <spi_disable+0x70>)
10008a8e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
10008a90:	2027      	movs	r0, #39	; 0x27
10008a92:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
10008a94:	2039      	movs	r0, #57	; 0x39
10008a96:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
10008a98:	2002      	movs	r0, #2
10008a9a:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
10008a9c:	bd10      	pop	{r4, pc}
10008a9e:	46c0      	nop			; (mov r8, r8)
10008aa0:	40006000 	.word	0x40006000
10008aa4:	e000e100 	.word	0xe000e100
10008aa8:	40007000 	.word	0x40007000
10008aac:	1000959d 	.word	0x1000959d

10008ab0 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
10008ab0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
10008ab2:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
10008ab4:	4b09      	ldr	r3, [pc, #36]	; (10008adc <spi_reset+0x2c>)
10008ab6:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
10008ab8:	4b09      	ldr	r3, [pc, #36]	; (10008ae0 <spi_reset+0x30>)
10008aba:	429c      	cmp	r4, r3
10008abc:	d105      	bne.n	10008aca <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
10008abe:	2001      	movs	r0, #1
10008ac0:	4c08      	ldr	r4, [pc, #32]	; (10008ae4 <spi_reset+0x34>)
10008ac2:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
10008ac4:	2038      	movs	r0, #56	; 0x38
10008ac6:	47a0      	blx	r4
10008ac8:	e007      	b.n	10008ada <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
10008aca:	4b07      	ldr	r3, [pc, #28]	; (10008ae8 <spi_reset+0x38>)
10008acc:	429c      	cmp	r4, r3
10008ace:	d104      	bne.n	10008ada <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
10008ad0:	2002      	movs	r0, #2
10008ad2:	4c04      	ldr	r4, [pc, #16]	; (10008ae4 <spi_reset+0x34>)
10008ad4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
10008ad6:	2039      	movs	r0, #57	; 0x39
10008ad8:	47a0      	blx	r4
	}
}
10008ada:	bd10      	pop	{r4, pc}
10008adc:	10008a3d 	.word	0x10008a3d
10008ae0:	40006000 	.word	0x40006000
10008ae4:	10009909 	.word	0x10009909
10008ae8:	40007000 	.word	0x40007000

10008aec <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
10008aec:	b5f0      	push	{r4, r5, r6, r7, lr}
10008aee:	4657      	mov	r7, sl
10008af0:	4646      	mov	r6, r8
10008af2:	b4c0      	push	{r6, r7}
10008af4:	b083      	sub	sp, #12
10008af6:	0005      	movs	r5, r0
10008af8:	4688      	mov	r8, r1
10008afa:	0016      	movs	r6, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
10008afc:	6029      	str	r1, [r5, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
10008afe:	7e0b      	ldrb	r3, [r1, #24]
10008b00:	07db      	lsls	r3, r3, #31
10008b02:	d501      	bpl.n	10008b08 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10008b04:	2300      	movs	r3, #0
10008b06:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
10008b08:	0028      	movs	r0, r5
10008b0a:	4b5e      	ldr	r3, [pc, #376]	; (10008c84 <spi_init+0x198>)
10008b0c:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10008b0e:	682b      	ldr	r3, [r5, #0]

	if (spi_module == (void *)SPI0) {
10008b10:	4a5d      	ldr	r2, [pc, #372]	; (10008c88 <spi_init+0x19c>)
10008b12:	4293      	cmp	r3, r2
10008b14:	d109      	bne.n	10008b2a <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
10008b16:	2041      	movs	r0, #65	; 0x41
10008b18:	4c5c      	ldr	r4, [pc, #368]	; (10008c8c <spi_init+0x1a0>)
10008b1a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
10008b1c:	2026      	movs	r0, #38	; 0x26
10008b1e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
10008b20:	2038      	movs	r0, #56	; 0x38
10008b22:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
10008b24:	2001      	movs	r0, #1
10008b26:	47a0      	blx	r4
10008b28:	e00b      	b.n	10008b42 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
10008b2a:	4a59      	ldr	r2, [pc, #356]	; (10008c90 <spi_init+0x1a4>)
10008b2c:	4293      	cmp	r3, r2
10008b2e:	d122      	bne.n	10008b76 <spi_init+0x8a>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
10008b30:	2042      	movs	r0, #66	; 0x42
10008b32:	4c56      	ldr	r4, [pc, #344]	; (10008c8c <spi_init+0x1a0>)
10008b34:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
10008b36:	2027      	movs	r0, #39	; 0x27
10008b38:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
10008b3a:	2039      	movs	r0, #57	; 0x39
10008b3c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
10008b3e:	2002      	movs	r0, #2
10008b40:	47a0      	blx	r4

	spi_reset(module);
	_spi_clock_enable(module);

#if SPI_CALLBACK_MODE == true
	if (module->hw == SPI0) {
10008b42:	682b      	ldr	r3, [r5, #0]
10008b44:	4a50      	ldr	r2, [pc, #320]	; (10008c88 <spi_init+0x19c>)
10008b46:	4293      	cmp	r3, r2
10008b48:	d109      	bne.n	10008b5e <spi_init+0x72>
		_spi_instances[0] = module;
10008b4a:	4b52      	ldr	r3, [pc, #328]	; (10008c94 <spi_init+0x1a8>)
10008b4c:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_SPIRX0_INDEX, (uint32_t)spi_rx0_isr_handler);
10008b4e:	4952      	ldr	r1, [pc, #328]	; (10008c98 <spi_init+0x1ac>)
10008b50:	2014      	movs	r0, #20
10008b52:	4c52      	ldr	r4, [pc, #328]	; (10008c9c <spi_init+0x1b0>)
10008b54:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_SPITX0_INDEX, (uint32_t)spi_tx0_isr_handler);
10008b56:	4952      	ldr	r1, [pc, #328]	; (10008ca0 <spi_init+0x1b4>)
10008b58:	2015      	movs	r0, #21
10008b5a:	47a0      	blx	r4
10008b5c:	e00b      	b.n	10008b76 <spi_init+0x8a>
	} else if (module->hw == SPI1) {
10008b5e:	4a4c      	ldr	r2, [pc, #304]	; (10008c90 <spi_init+0x1a4>)
10008b60:	4293      	cmp	r3, r2
10008b62:	d108      	bne.n	10008b76 <spi_init+0x8a>
		_spi_instances[1] = module;
10008b64:	4b4b      	ldr	r3, [pc, #300]	; (10008c94 <spi_init+0x1a8>)
10008b66:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_SPIRX1_INDEX, (uint32_t)spi_rx1_isr_handler);
10008b68:	494e      	ldr	r1, [pc, #312]	; (10008ca4 <spi_init+0x1b8>)
10008b6a:	2016      	movs	r0, #22
10008b6c:	4c4b      	ldr	r4, [pc, #300]	; (10008c9c <spi_init+0x1b0>)
10008b6e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_SPITX1_INDEX, (uint32_t)spi_tx1_isr_handler);
10008b70:	494d      	ldr	r1, [pc, #308]	; (10008ca8 <spi_init+0x1bc>)
10008b72:	2017      	movs	r0, #23
10008b74:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10008b76:	a801      	add	r0, sp, #4
10008b78:	4b4c      	ldr	r3, [pc, #304]	; (10008cac <spi_init+0x1c0>)
10008b7a:	4798      	blx	r3
10008b7c:	0034      	movs	r4, r6
10008b7e:	3408      	adds	r4, #8
10008b80:	2318      	movs	r3, #24
10008b82:	469a      	mov	sl, r3
10008b84:	44b2      	add	sl, r6
10008b86:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
10008b88:	6820      	ldr	r0, [r4, #0]
10008b8a:	1c43      	adds	r3, r0, #1
10008b8c:	d011      	beq.n	10008bb2 <spi_init+0xc6>
			if (config->mode == SPI_MODE_MASTER) {
10008b8e:	7833      	ldrb	r3, [r6, #0]
10008b90:	2b01      	cmp	r3, #1
10008b92:	d102      	bne.n	10008b9a <spi_init+0xae>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10008b94:	466a      	mov	r2, sp
10008b96:	7113      	strb	r3, [r2, #4]
10008b98:	e003      	b.n	10008ba2 <spi_init+0xb6>
			} else if (config->mode == SPI_MODE_SLAVE) {
10008b9a:	2b00      	cmp	r3, #0
10008b9c:	d101      	bne.n	10008ba2 <spi_init+0xb6>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
10008b9e:	466a      	mov	r2, sp
10008ba0:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
10008ba2:	b2c0      	uxtb	r0, r0
10008ba4:	a901      	add	r1, sp, #4
10008ba6:	4b42      	ldr	r3, [pc, #264]	; (10008cb0 <spi_init+0x1c4>)
10008ba8:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
10008baa:	8a39      	ldrh	r1, [r7, #16]
10008bac:	7838      	ldrb	r0, [r7, #0]
10008bae:	4b41      	ldr	r3, [pc, #260]	; (10008cb4 <spi_init+0x1c8>)
10008bb0:	4798      	blx	r3
10008bb2:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
10008bb4:	4554      	cmp	r4, sl
10008bb6:	d1e6      	bne.n	10008b86 <spi_init+0x9a>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008bb8:	78f3      	ldrb	r3, [r6, #3]
10008bba:	4642      	mov	r2, r8
10008bbc:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
10008bbe:	7833      	ldrb	r3, [r6, #0]
10008bc0:	2b01      	cmp	r3, #1
10008bc2:	d100      	bne.n	10008bc6 <spi_init+0xda>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
10008bc4:	7713      	strb	r3, [r2, #28]
	/* Temporary variables */
	uint8_t i;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
10008bc6:	2300      	movs	r3, #0
10008bc8:	60ab      	str	r3, [r5, #8]
10008bca:	60eb      	str	r3, [r5, #12]
10008bcc:	612b      	str	r3, [r5, #16]
10008bce:	616b      	str	r3, [r5, #20]
	}
	module->tx_buffer_ptr              = NULL;
10008bd0:	61eb      	str	r3, [r5, #28]
	module->rx_buffer_ptr              = NULL;
10008bd2:	61ab      	str	r3, [r5, #24]
	module->remaining_tx_buffer_length = 0x0000;
10008bd4:	2200      	movs	r2, #0
10008bd6:	84ab      	strh	r3, [r5, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
10008bd8:	842b      	strh	r3, [r5, #32]
	module->registered_callback        = 0x00;
10008bda:	3326      	adds	r3, #38	; 0x26
10008bdc:	54ea      	strb	r2, [r5, r3]
	module->enabled_callback           = 0x00;
10008bde:	3301      	adds	r3, #1
10008be0:	54ea      	strb	r2, [r5, r3]
	module->status                     = STATUS_OK;
10008be2:	3301      	adds	r3, #1
10008be4:	54ea      	strb	r2, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
10008be6:	3b25      	subs	r3, #37	; 0x25
10008be8:	71eb      	strb	r3, [r5, #7]
	module->locked                     = 0;
10008bea:	712a      	strb	r2, [r5, #4]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
10008bec:	682b      	ldr	r3, [r5, #0]

	module->mode  = config->mode;
10008bee:	7832      	ldrb	r2, [r6, #0]
10008bf0:	716a      	strb	r2, [r5, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
10008bf2:	7832      	ldrb	r2, [r6, #0]
10008bf4:	2a01      	cmp	r2, #1
10008bf6:	d101      	bne.n	10008bfc <spi_init+0x110>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
10008bf8:	7932      	ldrb	r2, [r6, #4]
10008bfa:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
10008bfc:	7872      	ldrb	r2, [r6, #1]
10008bfe:	2a04      	cmp	r2, #4
10008c00:	d104      	bne.n	10008c0c <spi_init+0x120>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
10008c02:	2124      	movs	r1, #36	; 0x24
10008c04:	5c58      	ldrb	r0, [r3, r1]
10008c06:	4302      	orrs	r2, r0
10008c08:	545a      	strb	r2, [r3, r1]
10008c0a:	e004      	b.n	10008c16 <spi_init+0x12a>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
10008c0c:	2124      	movs	r1, #36	; 0x24
10008c0e:	5c5a      	ldrb	r2, [r3, r1]
10008c10:	2004      	movs	r0, #4
10008c12:	4382      	bics	r2, r0
10008c14:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
10008c16:	78b2      	ldrb	r2, [r6, #2]
10008c18:	2a01      	cmp	r2, #1
10008c1a:	d01a      	beq.n	10008c52 <spi_init+0x166>
10008c1c:	2a00      	cmp	r2, #0
10008c1e:	d004      	beq.n	10008c2a <spi_init+0x13e>
10008c20:	2a02      	cmp	r2, #2
10008c22:	d00c      	beq.n	10008c3e <spi_init+0x152>
10008c24:	2a03      	cmp	r2, #3
10008c26:	d01e      	beq.n	10008c66 <spi_init+0x17a>
10008c28:	e026      	b.n	10008c78 <spi_init+0x18c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10008c2a:	2224      	movs	r2, #36	; 0x24
10008c2c:	5c99      	ldrb	r1, [r3, r2]
10008c2e:	2002      	movs	r0, #2
10008c30:	4381      	bics	r1, r0
10008c32:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10008c34:	5c99      	ldrb	r1, [r3, r2]
10008c36:	3801      	subs	r0, #1
10008c38:	4381      	bics	r1, r0
10008c3a:	5499      	strb	r1, [r3, r2]
10008c3c:	e01c      	b.n	10008c78 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10008c3e:	2224      	movs	r2, #36	; 0x24
10008c40:	5c98      	ldrb	r0, [r3, r2]
10008c42:	2102      	movs	r1, #2
10008c44:	4301      	orrs	r1, r0
10008c46:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10008c48:	5c99      	ldrb	r1, [r3, r2]
10008c4a:	2001      	movs	r0, #1
10008c4c:	4381      	bics	r1, r0
10008c4e:	5499      	strb	r1, [r3, r2]
10008c50:	e012      	b.n	10008c78 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10008c52:	2224      	movs	r2, #36	; 0x24
10008c54:	5c99      	ldrb	r1, [r3, r2]
10008c56:	2002      	movs	r0, #2
10008c58:	4381      	bics	r1, r0
10008c5a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10008c5c:	5c98      	ldrb	r0, [r3, r2]
10008c5e:	2101      	movs	r1, #1
10008c60:	4301      	orrs	r1, r0
10008c62:	5499      	strb	r1, [r3, r2]
10008c64:	e008      	b.n	10008c78 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10008c66:	2224      	movs	r2, #36	; 0x24
10008c68:	5c98      	ldrb	r0, [r3, r2]
10008c6a:	2102      	movs	r1, #2
10008c6c:	4301      	orrs	r1, r0
10008c6e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10008c70:	5c98      	ldrb	r0, [r3, r2]
10008c72:	2101      	movs	r1, #1
10008c74:	4301      	orrs	r1, r0
10008c76:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
10008c78:	2000      	movs	r0, #0
10008c7a:	b003      	add	sp, #12
10008c7c:	bc0c      	pop	{r2, r3}
10008c7e:	4690      	mov	r8, r2
10008c80:	469a      	mov	sl, r3
10008c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008c84:	10008ab1 	.word	0x10008ab1
10008c88:	40006000 	.word	0x40006000
10008c8c:	10009241 	.word	0x10009241
10008c90:	40007000 	.word	0x40007000
10008c94:	1000a294 	.word	0x1000a294
10008c98:	10008d5d 	.word	0x10008d5d
10008c9c:	10009d71 	.word	0x10009d71
10008ca0:	10008e89 	.word	0x10008e89
10008ca4:	10008f8d 	.word	0x10008f8d
10008ca8:	100090b9 	.word	0x100090b9
10008cac:	100085a1 	.word	0x100085a1
10008cb0:	100085b1 	.word	0x100085b1
10008cb4:	10008841 	.word	0x10008841

10008cb8 <spi_write>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Spi *const spi_module = (module->hw);
10008cb8:	6803      	ldr	r3, [r0, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10008cba:	7a1a      	ldrb	r2, [r3, #8]
	Spi *const spi_module = (module->hw);

	/* Check if the data register has been copied to the shift register */
	if (!_spi_is_ready_to_write(spi_module)) {
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
10008cbc:	2005      	movs	r0, #5
	Assert(module->hw);

	Spi *const spi_module = (module->hw);

	/* Check if the data register has been copied to the shift register */
	if (!_spi_is_ready_to_write(spi_module)) {
10008cbe:	07d2      	lsls	r2, r2, #31
10008cc0:	d501      	bpl.n	10008cc6 <spi_write+0xe>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->TRANSMIT_DATA.reg = tx_data & SPI_TRANSMIT_DATA_MASK;
10008cc2:	7019      	strb	r1, [r3, #0]

	return STATUS_OK;
10008cc4:	2000      	movs	r0, #0
}
10008cc6:	4770      	bx	lr

10008cc8 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
10008cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10008cca:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
10008ccc:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
10008cce:	2600      	movs	r6, #0
10008cd0:	466d      	mov	r5, sp
10008cd2:	71ee      	strb	r6, [r5, #7]
10008cd4:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
10008cd6:	2c00      	cmp	r4, #0
10008cd8:	d034      	beq.n	10008d44 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
10008cda:	2900      	cmp	r1, #0
10008cdc:	d104      	bne.n	10008ce8 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
10008cde:	0029      	movs	r1, r5
10008ce0:	7980      	ldrb	r0, [r0, #6]
10008ce2:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
10008ce4:	2701      	movs	r7, #1
10008ce6:	e00b      	b.n	10008d00 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
10008ce8:	2a00      	cmp	r2, #0
10008cea:	d005      	beq.n	10008cf8 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008cec:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
10008cee:	2b00      	cmp	r3, #0
10008cf0:	d029      	beq.n	10008d46 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
10008cf2:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10008cf4:	2700      	movs	r7, #0
10008cf6:	e003      	b.n	10008d00 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
10008cf8:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10008cfa:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
10008cfc:	466a      	mov	r2, sp
10008cfe:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
10008d00:	2528      	movs	r5, #40	; 0x28
10008d02:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
10008d04:	07c0      	lsls	r0, r0, #31
10008d06:	d4fc      	bmi.n	10008d02 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
10008d08:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
10008d0a:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
10008d0c:	2b00      	cmp	r3, #0
10008d0e:	d014      	beq.n	10008d3a <spi_transceive_buffer_wait+0x72>
10008d10:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
10008d12:	4278      	negs	r0, r7
10008d14:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
10008d16:	4270      	negs	r0, r6
10008d18:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10008d1a:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
10008d1c:	07c0      	lsls	r0, r0, #31
10008d1e:	d5fc      	bpl.n	10008d1a <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
10008d20:	7808      	ldrb	r0, [r1, #0]
10008d22:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
10008d24:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
10008d26:	07c0      	lsls	r0, r0, #31
10008d28:	d5fc      	bpl.n	10008d24 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
10008d2a:	7920      	ldrb	r0, [r4, #4]
10008d2c:	7010      	strb	r0, [r2, #0]
		transfer_len++;
10008d2e:	3501      	adds	r5, #1
10008d30:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
10008d32:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
10008d34:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
10008d36:	42ab      	cmp	r3, r5
10008d38:	d1ef      	bne.n	10008d1a <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
10008d3a:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
10008d3c:	06db      	lsls	r3, r3, #27
10008d3e:	d5fc      	bpl.n	10008d3a <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
10008d40:	2000      	movs	r0, #0
10008d42:	e000      	b.n	10008d46 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
10008d44:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
10008d46:	b003      	add	sp, #12
10008d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008d4a:	46c0      	nop			; (mov r8, r8)

10008d4c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
10008d4c:	b510      	push	{r4, lr}
10008d4e:	0013      	movs	r3, r2
	return spi_transceive_buffer_wait(module, tx_data, NULL, length);
10008d50:	2200      	movs	r2, #0
10008d52:	4c01      	ldr	r4, [pc, #4]	; (10008d58 <spi_write_buffer_wait+0xc>)
10008d54:	47a0      	blx	r4
}
10008d56:	bd10      	pop	{r4, pc}
10008d58:	10008cc9 	.word	0x10008cc9

10008d5c <spi_rx0_isr_handler>:
	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
}

void spi_rx0_isr_handler(void)
{
10008d5c:	b510      	push	{r4, lr}
	struct spi_module *module = _spi_instances[0];
10008d5e:	4b48      	ldr	r3, [pc, #288]	; (10008e80 <spi_rx0_isr_handler+0x124>)
10008d60:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10008d62:	6823      	ldr	r3, [r4, #0]
10008d64:	7b1a      	ldrb	r2, [r3, #12]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
10008d66:	2130      	movs	r1, #48	; 0x30
10008d68:	5c59      	ldrb	r1, [r3, r1]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008d6a:	400a      	ands	r2, r1
10008d6c:	07d2      	lsls	r2, r2, #31
10008d6e:	d400      	bmi.n	10008d72 <spi_rx0_isr_handler+0x16>
10008d70:	e085      	b.n	10008e7e <spi_rx0_isr_handler+0x122>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
10008d72:	7b1a      	ldrb	r2, [r3, #12]
10008d74:	0692      	lsls	r2, r2, #26
10008d76:	d523      	bpl.n	10008dc0 <spi_rx0_isr_handler+0x64>
			if (module->dir != SPI_DIRECTION_WRITE) {
10008d78:	79e2      	ldrb	r2, [r4, #7]
10008d7a:	2a01      	cmp	r2, #1
10008d7c:	d01d      	beq.n	10008dba <spi_rx0_isr_handler+0x5e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
10008d7e:	211e      	movs	r1, #30
10008d80:	2228      	movs	r2, #40	; 0x28
10008d82:	54a1      	strb	r1, [r4, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
10008d84:	3a25      	subs	r2, #37	; 0x25
10008d86:	71e2      	strb	r2, [r4, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
10008d88:	3112      	adds	r1, #18
10008d8a:	5c5a      	ldrb	r2, [r3, r1]
10008d8c:	2021      	movs	r0, #33	; 0x21
10008d8e:	4382      	bics	r2, r0
10008d90:	545a      	strb	r2, [r3, r1]
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10008d92:	2327      	movs	r3, #39	; 0x27
10008d94:	5ce3      	ldrb	r3, [r4, r3]
10008d96:	071b      	lsls	r3, r3, #28
10008d98:	d50f      	bpl.n	10008dba <spi_rx0_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
10008d9a:	2326      	movs	r3, #38	; 0x26

				module->hw->RX_INTERRUPT_MASK.reg &=
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10008d9c:	5ce3      	ldrb	r3, [r4, r3]
10008d9e:	071b      	lsls	r3, r3, #28
10008da0:	d50b      	bpl.n	10008dba <spi_rx0_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
10008da2:	221e      	movs	r2, #30
10008da4:	2328      	movs	r3, #40	; 0x28
10008da6:	54e2      	strb	r2, [r4, r3]
					module->hw->RX_INTERRUPT_MASK.reg &=
10008da8:	6821      	ldr	r1, [r4, #0]
10008daa:	3212      	adds	r2, #18
10008dac:	5c8b      	ldrb	r3, [r1, r2]
10008dae:	3801      	subs	r0, #1
10008db0:	4383      	bics	r3, r0
10008db2:	548b      	strb	r3, [r1, r2]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
10008db4:	0020      	movs	r0, r4
10008db6:	6963      	ldr	r3, [r4, #20]
10008db8:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
10008dba:	6823      	ldr	r3, [r4, #0]
10008dbc:	791b      	ldrb	r3, [r3, #4]
10008dbe:	e05e      	b.n	10008e7e <spi_rx0_isr_handler+0x122>
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
10008dc0:	79e2      	ldrb	r2, [r4, #7]
10008dc2:	2a01      	cmp	r2, #1
10008dc4:	d113      	bne.n	10008dee <spi_rx0_isr_handler+0x92>
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->RECEIVE_DATA.reg;
10008dc6:	791a      	ldrb	r2, [r3, #4]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
10008dc8:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10008dca:	3a01      	subs	r2, #1
10008dcc:	b292      	uxth	r2, r2
10008dce:	8462      	strh	r2, [r4, #34]	; 0x22
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
10008dd0:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10008dd2:	b292      	uxth	r2, r2
10008dd4:	2a00      	cmp	r2, #0
10008dd6:	d152      	bne.n	10008e7e <spi_rx0_isr_handler+0x122>
					module->hw->RX_INTERRUPT_MASK.reg &=
10008dd8:	2130      	movs	r1, #48	; 0x30
10008dda:	5c5a      	ldrb	r2, [r3, r1]
10008ddc:	2020      	movs	r0, #32
10008dde:	4382      	bics	r2, r0
10008de0:	545a      	strb	r2, [r3, r1]
						~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
10008de2:	2200      	movs	r2, #0
10008de4:	2328      	movs	r3, #40	; 0x28
10008de6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
10008de8:	3b25      	subs	r3, #37	; 0x25
10008dea:	71e3      	strb	r3, [r4, #7]
10008dec:	e047      	b.n	10008e7e <spi_rx0_isr_handler+0x122>
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	uint16_t received_data = (spi_hw->RECEIVE_DATA.reg & SPI_RECEIVE_DATA_MASK);
10008dee:	791b      	ldrb	r3, [r3, #4]
10008df0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10008df2:	69a2      	ldr	r2, [r4, #24]
10008df4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008df6:	69a3      	ldr	r3, [r4, #24]
10008df8:	3301      	adds	r3, #1
10008dfa:	61a3      	str	r3, [r4, #24]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008dfc:	8c23      	ldrh	r3, [r4, #32]
10008dfe:	3b01      	subs	r3, #1
10008e00:	b29b      	uxth	r3, r3
10008e02:	8423      	strh	r3, [r4, #32]
						//(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
					//}
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
10008e04:	8c23      	ldrh	r3, [r4, #32]
10008e06:	b29b      	uxth	r3, r3
10008e08:	2b00      	cmp	r3, #0
10008e0a:	d138      	bne.n	10008e7e <spi_rx0_isr_handler+0x122>
					if(module->dir == SPI_DIRECTION_READ) {
10008e0c:	79e3      	ldrb	r3, [r4, #7]
10008e0e:	2b00      	cmp	r3, #0
10008e10:	d114      	bne.n	10008e3c <spi_rx0_isr_handler+0xe0>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
10008e12:	3327      	adds	r3, #39	; 0x27
10008e14:	5ce3      	ldrb	r3, [r4, r3]
10008e16:	079b      	lsls	r3, r3, #30
10008e18:	d531      	bpl.n	10008e7e <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
10008e1a:	2326      	movs	r3, #38	; 0x26
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
10008e1c:	5ce3      	ldrb	r3, [r4, r3]
10008e1e:	079b      	lsls	r3, r3, #30
10008e20:	d52d      	bpl.n	10008e7e <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
10008e22:	2200      	movs	r2, #0
10008e24:	2328      	movs	r3, #40	; 0x28
10008e26:	54e2      	strb	r2, [r4, r3]
							module->hw->RX_INTERRUPT_MASK.reg &=
10008e28:	6821      	ldr	r1, [r4, #0]
10008e2a:	3230      	adds	r2, #48	; 0x30
10008e2c:	5c8b      	ldrb	r3, [r1, r2]
10008e2e:	2001      	movs	r0, #1
10008e30:	4383      	bics	r3, r0
10008e32:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
10008e34:	68e3      	ldr	r3, [r4, #12]
10008e36:	0020      	movs	r0, r4
10008e38:	4798      	blx	r3
10008e3a:	e020      	b.n	10008e7e <spi_rx0_isr_handler+0x122>
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
10008e3c:	79e3      	ldrb	r3, [r4, #7]
10008e3e:	2b02      	cmp	r3, #2
10008e40:	d11d      	bne.n	10008e7e <spi_rx0_isr_handler+0x122>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10008e42:	3325      	adds	r3, #37	; 0x25
10008e44:	5ce3      	ldrb	r3, [r4, r3]
10008e46:	075b      	lsls	r3, r3, #29
10008e48:	d519      	bpl.n	10008e7e <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
10008e4a:	2326      	movs	r3, #38	; 0x26
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10008e4c:	5ce3      	ldrb	r3, [r4, r3]
10008e4e:	075b      	lsls	r3, r3, #29
10008e50:	d515      	bpl.n	10008e7e <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
								module->hw->RX_INTERRUPT_MASK.reg &=
10008e52:	6821      	ldr	r1, [r4, #0]
10008e54:	2230      	movs	r2, #48	; 0x30
10008e56:	5c8b      	ldrb	r3, [r1, r2]
10008e58:	2001      	movs	r0, #1
10008e5a:	4383      	bics	r3, r0
10008e5c:	548b      	strb	r3, [r1, r2]
										~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
								if (flag_direction_both[0]) {
10008e5e:	4b09      	ldr	r3, [pc, #36]	; (10008e84 <spi_rx0_isr_handler+0x128>)
10008e60:	781b      	ldrb	r3, [r3, #0]
10008e62:	2b00      	cmp	r3, #0
10008e64:	d008      	beq.n	10008e78 <spi_rx0_isr_handler+0x11c>
									module->status = STATUS_OK;
10008e66:	2300      	movs	r3, #0
10008e68:	3a08      	subs	r2, #8
10008e6a:	54a3      	strb	r3, [r4, r2]
									flag_direction_both[0] = false;
10008e6c:	4a05      	ldr	r2, [pc, #20]	; (10008e84 <spi_rx0_isr_handler+0x128>)
10008e6e:	7013      	strb	r3, [r2, #0]
									(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
10008e70:	6923      	ldr	r3, [r4, #16]
10008e72:	0020      	movs	r0, r4
10008e74:	4798      	blx	r3
10008e76:	e002      	b.n	10008e7e <spi_rx0_isr_handler+0x122>
								} else {
									flag_direction_both[0] = true;
10008e78:	2201      	movs	r2, #1
10008e7a:	4b02      	ldr	r3, [pc, #8]	; (10008e84 <spi_rx0_isr_handler+0x128>)
10008e7c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
10008e7e:	bd10      	pop	{r4, pc}
10008e80:	1000a294 	.word	0x1000a294
10008e84:	1000a28c 	.word	0x1000a28c

10008e88 <spi_tx0_isr_handler>:

void spi_tx0_isr_handler(void)
{
10008e88:	b570      	push	{r4, r5, r6, lr}
	struct spi_module *module = _spi_instances[0];
10008e8a:	4b3d      	ldr	r3, [pc, #244]	; (10008f80 <spi_tx0_isr_handler+0xf8>)
10008e8c:	6818      	ldr	r0, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10008e8e:	6802      	ldr	r2, [r0, #0]
10008e90:	7a13      	ldrb	r3, [r2, #8]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
10008e92:	212c      	movs	r1, #44	; 0x2c
10008e94:	5c51      	ldrb	r1, [r2, r1]
10008e96:	400b      	ands	r3, r1

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
10008e98:	07d9      	lsls	r1, r3, #31
10008e9a:	d536      	bpl.n	10008f0a <spi_tx0_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
10008e9c:	7941      	ldrb	r1, [r0, #5]
10008e9e:	2901      	cmp	r1, #1
10008ea0:	d133      	bne.n	10008f0a <spi_tx0_isr_handler+0x82>
			(module->dir == SPI_DIRECTION_READ)) {
10008ea2:	79c1      	ldrb	r1, [r0, #7]
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
10008ea4:	2900      	cmp	r1, #0
10008ea6:	d113      	bne.n	10008ed0 <spi_tx0_isr_handler+0x48>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write dummy byte */
	spi_hw->TRANSMIT_DATA.reg = dummy_write;
10008ea8:	4936      	ldr	r1, [pc, #216]	; (10008f84 <spi_tx0_isr_handler+0xfc>)
10008eaa:	7809      	ldrb	r1, [r1, #0]
10008eac:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
10008eae:	8c42      	ldrh	r2, [r0, #34]	; 0x22
10008eb0:	3a01      	subs	r2, #1
10008eb2:	b292      	uxth	r2, r2
10008eb4:	8442      	strh	r2, [r0, #34]	; 0x22
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
10008eb6:	8c42      	ldrh	r2, [r0, #34]	; 0x22
10008eb8:	b292      	uxth	r2, r2
10008eba:	2a00      	cmp	r2, #0
10008ebc:	d105      	bne.n	10008eca <spi_tx0_isr_handler+0x42>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
10008ebe:	6804      	ldr	r4, [r0, #0]
10008ec0:	212c      	movs	r1, #44	; 0x2c
10008ec2:	5c62      	ldrb	r2, [r4, r1]
10008ec4:	2501      	movs	r5, #1
10008ec6:	43aa      	bics	r2, r5
10008ec8:	5462      	strb	r2, [r4, r1]
					~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
10008eca:	7942      	ldrb	r2, [r0, #5]
10008ecc:	2a01      	cmp	r2, #1
10008ece:	d11c      	bne.n	10008f0a <spi_tx0_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
10008ed0:	79c2      	ldrb	r2, [r0, #7]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
10008ed2:	2a00      	cmp	r2, #0
10008ed4:	d019      	beq.n	10008f0a <spi_tx0_isr_handler+0x82>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
10008ed6:	69c2      	ldr	r2, [r0, #28]
10008ed8:	7811      	ldrb	r1, [r2, #0]
10008eda:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10008edc:	3201      	adds	r2, #1
10008ede:	61c2      	str	r2, [r0, #28]

	/* Write the data to send*/
	spi_hw->TRANSMIT_DATA.reg = data_to_send & SPI_TRANSMIT_DATA_MASK;
10008ee0:	6802      	ldr	r2, [r0, #0]
10008ee2:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10008ee4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
10008ee6:	3a01      	subs	r2, #1
10008ee8:	b292      	uxth	r2, r2
10008eea:	8482      	strh	r2, [r0, #36]	; 0x24
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
10008eec:	8c82      	ldrh	r2, [r0, #36]	; 0x24
10008eee:	b292      	uxth	r2, r2
10008ef0:	2a00      	cmp	r2, #0
10008ef2:	d10a      	bne.n	10008f0a <spi_tx0_isr_handler+0x82>
				module->hw->TX_INTERRUPT_MASK.reg &=
10008ef4:	6804      	ldr	r4, [r0, #0]
10008ef6:	322c      	adds	r2, #44	; 0x2c
10008ef8:	5ca1      	ldrb	r1, [r4, r2]
10008efa:	2501      	movs	r5, #1
10008efc:	43a9      	bics	r1, r5
10008efe:	54a1      	strb	r1, [r4, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
10008f00:	6804      	ldr	r4, [r0, #0]
10008f02:	5ca5      	ldrb	r5, [r4, r2]
10008f04:	2110      	movs	r1, #16
10008f06:	4329      	orrs	r1, r5
10008f08:	54a1      	strb	r1, [r4, r2]
						SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10008f0a:	06db      	lsls	r3, r3, #27
10008f0c:	d536      	bpl.n	10008f7c <spi_tx0_isr_handler+0xf4>
		if (module->dir == SPI_DIRECTION_WRITE) {
10008f0e:	79c3      	ldrb	r3, [r0, #7]
10008f10:	2b01      	cmp	r3, #1
10008f12:	d113      	bne.n	10008f3c <spi_tx0_isr_handler+0xb4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
10008f14:	3326      	adds	r3, #38	; 0x26
10008f16:	5cc3      	ldrb	r3, [r0, r3]
10008f18:	07db      	lsls	r3, r3, #31
10008f1a:	d52f      	bpl.n	10008f7c <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
10008f1c:	2326      	movs	r3, #38	; 0x26
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
10008f1e:	5cc3      	ldrb	r3, [r0, r3]
10008f20:	07db      	lsls	r3, r3, #31
10008f22:	d52b      	bpl.n	10008f7c <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
					module->status = STATUS_OK;
10008f24:	2200      	movs	r2, #0
10008f26:	2328      	movs	r3, #40	; 0x28
10008f28:	54c2      	strb	r2, [r0, r3]
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
10008f2a:	6801      	ldr	r1, [r0, #0]
10008f2c:	322c      	adds	r2, #44	; 0x2c
10008f2e:	5c8b      	ldrb	r3, [r1, r2]
10008f30:	2410      	movs	r4, #16
10008f32:	43a3      	bics	r3, r4
10008f34:	548b      	strb	r3, [r1, r2]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
10008f36:	6883      	ldr	r3, [r0, #8]
10008f38:	4798      	blx	r3
10008f3a:	e01f      	b.n	10008f7c <spi_tx0_isr_handler+0xf4>
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
10008f3c:	79c3      	ldrb	r3, [r0, #7]
10008f3e:	2b02      	cmp	r3, #2
10008f40:	d11c      	bne.n	10008f7c <spi_tx0_isr_handler+0xf4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10008f42:	3325      	adds	r3, #37	; 0x25
10008f44:	5cc3      	ldrb	r3, [r0, r3]
10008f46:	075b      	lsls	r3, r3, #29
10008f48:	d518      	bpl.n	10008f7c <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
10008f4a:	2326      	movs	r3, #38	; 0x26
					module->hw->TX_INTERRUPT_MASK.reg &=
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10008f4c:	5cc3      	ldrb	r3, [r0, r3]
10008f4e:	075b      	lsls	r3, r3, #29
10008f50:	d514      	bpl.n	10008f7c <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
10008f52:	6801      	ldr	r1, [r0, #0]
10008f54:	222c      	movs	r2, #44	; 0x2c
10008f56:	5c8b      	ldrb	r3, [r1, r2]
10008f58:	2410      	movs	r4, #16
10008f5a:	43a3      	bics	r3, r4
10008f5c:	548b      	strb	r3, [r1, r2]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					if (flag_direction_both[0]) {
10008f5e:	4b0a      	ldr	r3, [pc, #40]	; (10008f88 <spi_tx0_isr_handler+0x100>)
10008f60:	781b      	ldrb	r3, [r3, #0]
10008f62:	2b00      	cmp	r3, #0
10008f64:	d007      	beq.n	10008f76 <spi_tx0_isr_handler+0xee>
						module->status = STATUS_OK;
10008f66:	2300      	movs	r3, #0
10008f68:	3a04      	subs	r2, #4
10008f6a:	5483      	strb	r3, [r0, r2]
						flag_direction_both[0] = false;
10008f6c:	4a06      	ldr	r2, [pc, #24]	; (10008f88 <spi_tx0_isr_handler+0x100>)
10008f6e:	7013      	strb	r3, [r2, #0]
						(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
10008f70:	6903      	ldr	r3, [r0, #16]
10008f72:	4798      	blx	r3
10008f74:	e002      	b.n	10008f7c <spi_tx0_isr_handler+0xf4>
					} else {
						flag_direction_both[0] = true;
10008f76:	2201      	movs	r2, #1
10008f78:	4b03      	ldr	r3, [pc, #12]	; (10008f88 <spi_tx0_isr_handler+0x100>)
10008f7a:	701a      	strb	r2, [r3, #0]
					}
			}
		}
	}
}
10008f7c:	bd70      	pop	{r4, r5, r6, pc}
10008f7e:	46c0      	nop			; (mov r8, r8)
10008f80:	1000a294 	.word	0x1000a294
10008f84:	1000a28e 	.word	0x1000a28e
10008f88:	1000a28c 	.word	0x1000a28c

10008f8c <spi_rx1_isr_handler>:

void spi_rx1_isr_handler(void)
{
10008f8c:	b510      	push	{r4, lr}
	struct spi_module *module = _spi_instances[1];
10008f8e:	4b48      	ldr	r3, [pc, #288]	; (100090b0 <spi_rx1_isr_handler+0x124>)
10008f90:	685c      	ldr	r4, [r3, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10008f92:	6823      	ldr	r3, [r4, #0]
10008f94:	7b1a      	ldrb	r2, [r3, #12]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
10008f96:	2130      	movs	r1, #48	; 0x30
10008f98:	5c59      	ldrb	r1, [r3, r1]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008f9a:	400a      	ands	r2, r1
10008f9c:	07d2      	lsls	r2, r2, #31
10008f9e:	d400      	bmi.n	10008fa2 <spi_rx1_isr_handler+0x16>
10008fa0:	e085      	b.n	100090ae <spi_rx1_isr_handler+0x122>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
10008fa2:	7b1a      	ldrb	r2, [r3, #12]
10008fa4:	0692      	lsls	r2, r2, #26
10008fa6:	d523      	bpl.n	10008ff0 <spi_rx1_isr_handler+0x64>
			if (module->dir != SPI_DIRECTION_WRITE) {
10008fa8:	79e2      	ldrb	r2, [r4, #7]
10008faa:	2a01      	cmp	r2, #1
10008fac:	d01d      	beq.n	10008fea <spi_rx1_isr_handler+0x5e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
10008fae:	211e      	movs	r1, #30
10008fb0:	2228      	movs	r2, #40	; 0x28
10008fb2:	54a1      	strb	r1, [r4, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
10008fb4:	3a25      	subs	r2, #37	; 0x25
10008fb6:	71e2      	strb	r2, [r4, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
10008fb8:	3112      	adds	r1, #18
10008fba:	5c5a      	ldrb	r2, [r3, r1]
10008fbc:	2021      	movs	r0, #33	; 0x21
10008fbe:	4382      	bics	r2, r0
10008fc0:	545a      	strb	r2, [r3, r1]
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10008fc2:	2327      	movs	r3, #39	; 0x27
10008fc4:	5ce3      	ldrb	r3, [r4, r3]
10008fc6:	071b      	lsls	r3, r3, #28
10008fc8:	d50f      	bpl.n	10008fea <spi_rx1_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
10008fca:	2326      	movs	r3, #38	; 0x26

				module->hw->RX_INTERRUPT_MASK.reg &=
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10008fcc:	5ce3      	ldrb	r3, [r4, r3]
10008fce:	071b      	lsls	r3, r3, #28
10008fd0:	d50b      	bpl.n	10008fea <spi_rx1_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
10008fd2:	221e      	movs	r2, #30
10008fd4:	2328      	movs	r3, #40	; 0x28
10008fd6:	54e2      	strb	r2, [r4, r3]
					module->hw->RX_INTERRUPT_MASK.reg &=
10008fd8:	6821      	ldr	r1, [r4, #0]
10008fda:	3212      	adds	r2, #18
10008fdc:	5c8b      	ldrb	r3, [r1, r2]
10008fde:	3801      	subs	r0, #1
10008fe0:	4383      	bics	r3, r0
10008fe2:	548b      	strb	r3, [r1, r2]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
10008fe4:	0020      	movs	r0, r4
10008fe6:	6963      	ldr	r3, [r4, #20]
10008fe8:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
10008fea:	6823      	ldr	r3, [r4, #0]
10008fec:	791b      	ldrb	r3, [r3, #4]
10008fee:	e05e      	b.n	100090ae <spi_rx1_isr_handler+0x122>
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
10008ff0:	79e2      	ldrb	r2, [r4, #7]
10008ff2:	2a01      	cmp	r2, #1
10008ff4:	d113      	bne.n	1000901e <spi_rx1_isr_handler+0x92>
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->RECEIVE_DATA.reg;
10008ff6:	791a      	ldrb	r2, [r3, #4]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
10008ff8:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10008ffa:	3a01      	subs	r2, #1
10008ffc:	b292      	uxth	r2, r2
10008ffe:	8462      	strh	r2, [r4, #34]	; 0x22
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
10009000:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10009002:	b292      	uxth	r2, r2
10009004:	2a00      	cmp	r2, #0
10009006:	d152      	bne.n	100090ae <spi_rx1_isr_handler+0x122>
					module->hw->RX_INTERRUPT_MASK.reg &=
10009008:	2130      	movs	r1, #48	; 0x30
1000900a:	5c5a      	ldrb	r2, [r3, r1]
1000900c:	2020      	movs	r0, #32
1000900e:	4382      	bics	r2, r0
10009010:	545a      	strb	r2, [r3, r1]
							~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
10009012:	2200      	movs	r2, #0
10009014:	2328      	movs	r3, #40	; 0x28
10009016:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
10009018:	3b25      	subs	r3, #37	; 0x25
1000901a:	71e3      	strb	r3, [r4, #7]
1000901c:	e047      	b.n	100090ae <spi_rx1_isr_handler+0x122>
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	uint16_t received_data = (spi_hw->RECEIVE_DATA.reg & SPI_RECEIVE_DATA_MASK);
1000901e:	791b      	ldrb	r3, [r3, #4]
10009020:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009022:	69a2      	ldr	r2, [r4, #24]
10009024:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009026:	69a3      	ldr	r3, [r4, #24]
10009028:	3301      	adds	r3, #1
1000902a:	61a3      	str	r3, [r4, #24]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000902c:	8c23      	ldrh	r3, [r4, #32]
1000902e:	3b01      	subs	r3, #1
10009030:	b29b      	uxth	r3, r3
10009032:	8423      	strh	r3, [r4, #32]
					module->status = STATUS_OK;
					module->dir = SPI_DIRECTION_IDLE;
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
10009034:	8c23      	ldrh	r3, [r4, #32]
10009036:	b29b      	uxth	r3, r3
10009038:	2b00      	cmp	r3, #0
1000903a:	d138      	bne.n	100090ae <spi_rx1_isr_handler+0x122>
					if(module->dir == SPI_DIRECTION_READ) {
1000903c:	79e3      	ldrb	r3, [r4, #7]
1000903e:	2b00      	cmp	r3, #0
10009040:	d114      	bne.n	1000906c <spi_rx1_isr_handler+0xe0>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
10009042:	3327      	adds	r3, #39	; 0x27
10009044:	5ce3      	ldrb	r3, [r4, r3]
10009046:	079b      	lsls	r3, r3, #30
10009048:	d531      	bpl.n	100090ae <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
1000904a:	2326      	movs	r3, #38	; 0x26
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000904c:	5ce3      	ldrb	r3, [r4, r3]
1000904e:	079b      	lsls	r3, r3, #30
10009050:	d52d      	bpl.n	100090ae <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
10009052:	2200      	movs	r2, #0
10009054:	2328      	movs	r3, #40	; 0x28
10009056:	54e2      	strb	r2, [r4, r3]
							module->hw->RX_INTERRUPT_MASK.reg &=
10009058:	6821      	ldr	r1, [r4, #0]
1000905a:	3230      	adds	r2, #48	; 0x30
1000905c:	5c8b      	ldrb	r3, [r1, r2]
1000905e:	2001      	movs	r0, #1
10009060:	4383      	bics	r3, r0
10009062:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
10009064:	68e3      	ldr	r3, [r4, #12]
10009066:	0020      	movs	r0, r4
10009068:	4798      	blx	r3
1000906a:	e020      	b.n	100090ae <spi_rx1_isr_handler+0x122>
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
1000906c:	79e3      	ldrb	r3, [r4, #7]
1000906e:	2b02      	cmp	r3, #2
10009070:	d11d      	bne.n	100090ae <spi_rx1_isr_handler+0x122>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10009072:	3325      	adds	r3, #37	; 0x25
10009074:	5ce3      	ldrb	r3, [r4, r3]
10009076:	075b      	lsls	r3, r3, #29
10009078:	d519      	bpl.n	100090ae <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000907a:	2326      	movs	r3, #38	; 0x26
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000907c:	5ce3      	ldrb	r3, [r4, r3]
1000907e:	075b      	lsls	r3, r3, #29
10009080:	d515      	bpl.n	100090ae <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
							module->hw->RX_INTERRUPT_MASK.reg &=
10009082:	6821      	ldr	r1, [r4, #0]
10009084:	2230      	movs	r2, #48	; 0x30
10009086:	5c8b      	ldrb	r3, [r1, r2]
10009088:	2001      	movs	r0, #1
1000908a:	4383      	bics	r3, r0
1000908c:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							if (flag_direction_both[1]) {
1000908e:	4b09      	ldr	r3, [pc, #36]	; (100090b4 <spi_rx1_isr_handler+0x128>)
10009090:	785b      	ldrb	r3, [r3, #1]
10009092:	2b00      	cmp	r3, #0
10009094:	d008      	beq.n	100090a8 <spi_rx1_isr_handler+0x11c>
								module->status = STATUS_OK;
10009096:	2300      	movs	r3, #0
10009098:	3a08      	subs	r2, #8
1000909a:	54a3      	strb	r3, [r4, r2]
								flag_direction_both[1] = false;
1000909c:	4a05      	ldr	r2, [pc, #20]	; (100090b4 <spi_rx1_isr_handler+0x128>)
1000909e:	7053      	strb	r3, [r2, #1]
								(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
100090a0:	6923      	ldr	r3, [r4, #16]
100090a2:	0020      	movs	r0, r4
100090a4:	4798      	blx	r3
100090a6:	e002      	b.n	100090ae <spi_rx1_isr_handler+0x122>
							} else {
								flag_direction_both[1] = true;
100090a8:	2201      	movs	r2, #1
100090aa:	4b02      	ldr	r3, [pc, #8]	; (100090b4 <spi_rx1_isr_handler+0x128>)
100090ac:	705a      	strb	r2, [r3, #1]
					}
				}
			}
		}
	}
}
100090ae:	bd10      	pop	{r4, pc}
100090b0:	1000a294 	.word	0x1000a294
100090b4:	1000a28c 	.word	0x1000a28c

100090b8 <spi_tx1_isr_handler>:

void spi_tx1_isr_handler(void)
{
100090b8:	b570      	push	{r4, r5, r6, lr}
	struct spi_module *module = _spi_instances[1];
100090ba:	4b3d      	ldr	r3, [pc, #244]	; (100091b0 <spi_tx1_isr_handler+0xf8>)
100090bc:	6858      	ldr	r0, [r3, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100090be:	6802      	ldr	r2, [r0, #0]
100090c0:	7a13      	ldrb	r3, [r2, #8]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
100090c2:	212c      	movs	r1, #44	; 0x2c
100090c4:	5c51      	ldrb	r1, [r2, r1]
100090c6:	400b      	ands	r3, r1

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
100090c8:	07d9      	lsls	r1, r3, #31
100090ca:	d536      	bpl.n	1000913a <spi_tx1_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
100090cc:	7941      	ldrb	r1, [r0, #5]
100090ce:	2901      	cmp	r1, #1
100090d0:	d133      	bne.n	1000913a <spi_tx1_isr_handler+0x82>
		(module->dir == SPI_DIRECTION_READ)) {
100090d2:	79c1      	ldrb	r1, [r0, #7]
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
100090d4:	2900      	cmp	r1, #0
100090d6:	d113      	bne.n	10009100 <spi_tx1_isr_handler+0x48>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write dummy byte */
	spi_hw->TRANSMIT_DATA.reg = dummy_write;
100090d8:	4936      	ldr	r1, [pc, #216]	; (100091b4 <spi_tx1_isr_handler+0xfc>)
100090da:	7809      	ldrb	r1, [r1, #0]
100090dc:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
100090de:	8c42      	ldrh	r2, [r0, #34]	; 0x22
100090e0:	3a01      	subs	r2, #1
100090e2:	b292      	uxth	r2, r2
100090e4:	8442      	strh	r2, [r0, #34]	; 0x22
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
		(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
100090e6:	8c42      	ldrh	r2, [r0, #34]	; 0x22
100090e8:	b292      	uxth	r2, r2
100090ea:	2a00      	cmp	r2, #0
100090ec:	d105      	bne.n	100090fa <spi_tx1_isr_handler+0x42>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
100090ee:	6804      	ldr	r4, [r0, #0]
100090f0:	212c      	movs	r1, #44	; 0x2c
100090f2:	5c62      	ldrb	r2, [r4, r1]
100090f4:	2501      	movs	r5, #1
100090f6:	43aa      	bics	r2, r5
100090f8:	5462      	strb	r2, [r4, r1]
				~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
100090fa:	7942      	ldrb	r2, [r0, #5]
100090fc:	2a01      	cmp	r2, #1
100090fe:	d11c      	bne.n	1000913a <spi_tx1_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
10009100:	79c2      	ldrb	r2, [r0, #7]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
10009102:	2a00      	cmp	r2, #0
10009104:	d019      	beq.n	1000913a <spi_tx1_isr_handler+0x82>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
10009106:	69c2      	ldr	r2, [r0, #28]
10009108:	7811      	ldrb	r1, [r2, #0]
1000910a:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000910c:	3201      	adds	r2, #1
1000910e:	61c2      	str	r2, [r0, #28]

	/* Write the data to send*/
	spi_hw->TRANSMIT_DATA.reg = data_to_send & SPI_TRANSMIT_DATA_MASK;
10009110:	6802      	ldr	r2, [r0, #0]
10009112:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009114:	8c82      	ldrh	r2, [r0, #36]	; 0x24
10009116:	3a01      	subs	r2, #1
10009118:	b292      	uxth	r2, r2
1000911a:	8482      	strh	r2, [r0, #36]	; 0x24
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
1000911c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
1000911e:	b292      	uxth	r2, r2
10009120:	2a00      	cmp	r2, #0
10009122:	d10a      	bne.n	1000913a <spi_tx1_isr_handler+0x82>
				module->hw->TX_INTERRUPT_MASK.reg &=
10009124:	6804      	ldr	r4, [r0, #0]
10009126:	322c      	adds	r2, #44	; 0x2c
10009128:	5ca1      	ldrb	r1, [r4, r2]
1000912a:	2501      	movs	r5, #1
1000912c:	43a9      	bics	r1, r5
1000912e:	54a1      	strb	r1, [r4, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
10009130:	6804      	ldr	r4, [r0, #0]
10009132:	5ca5      	ldrb	r5, [r4, r2]
10009134:	2110      	movs	r1, #16
10009136:	4329      	orrs	r1, r5
10009138:	54a1      	strb	r1, [r4, r2]
				SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000913a:	06db      	lsls	r3, r3, #27
1000913c:	d536      	bpl.n	100091ac <spi_tx1_isr_handler+0xf4>
		if (module->dir == SPI_DIRECTION_WRITE) {
1000913e:	79c3      	ldrb	r3, [r0, #7]
10009140:	2b01      	cmp	r3, #1
10009142:	d113      	bne.n	1000916c <spi_tx1_isr_handler+0xb4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
10009144:	3326      	adds	r3, #38	; 0x26
10009146:	5cc3      	ldrb	r3, [r0, r3]
10009148:	07db      	lsls	r3, r3, #31
1000914a:	d52f      	bpl.n	100091ac <spi_tx1_isr_handler+0xf4>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
1000914c:	2326      	movs	r3, #38	; 0x26
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
1000914e:	5cc3      	ldrb	r3, [r0, r3]
10009150:	07db      	lsls	r3, r3, #31
10009152:	d52b      	bpl.n	100091ac <spi_tx1_isr_handler+0xf4>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
				module->status = STATUS_OK;
10009154:	2200      	movs	r2, #0
10009156:	2328      	movs	r3, #40	; 0x28
10009158:	54c2      	strb	r2, [r0, r3]
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000915a:	6801      	ldr	r1, [r0, #0]
1000915c:	322c      	adds	r2, #44	; 0x2c
1000915e:	5c8b      	ldrb	r3, [r1, r2]
10009160:	2410      	movs	r4, #16
10009162:	43a3      	bics	r3, r4
10009164:	548b      	strb	r3, [r1, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
10009166:	6883      	ldr	r3, [r0, #8]
10009168:	4798      	blx	r3
1000916a:	e01f      	b.n	100091ac <spi_tx1_isr_handler+0xf4>
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
1000916c:	79c3      	ldrb	r3, [r0, #7]
1000916e:	2b02      	cmp	r3, #2
10009170:	d11c      	bne.n	100091ac <spi_tx1_isr_handler+0xf4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10009172:	3325      	adds	r3, #37	; 0x25
10009174:	5cc3      	ldrb	r3, [r0, r3]
10009176:	075b      	lsls	r3, r3, #29
10009178:	d518      	bpl.n	100091ac <spi_tx1_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000917a:	2326      	movs	r3, #38	; 0x26
				module->hw->TX_INTERRUPT_MASK.reg &=
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000917c:	5cc3      	ldrb	r3, [r0, r3]
1000917e:	075b      	lsls	r3, r3, #29
10009180:	d514      	bpl.n	100091ac <spi_tx1_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
10009182:	6801      	ldr	r1, [r0, #0]
10009184:	222c      	movs	r2, #44	; 0x2c
10009186:	5c8b      	ldrb	r3, [r1, r2]
10009188:	2410      	movs	r4, #16
1000918a:	43a3      	bics	r3, r4
1000918c:	548b      	strb	r3, [r1, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				if (flag_direction_both[1]) {
1000918e:	4b0a      	ldr	r3, [pc, #40]	; (100091b8 <spi_tx1_isr_handler+0x100>)
10009190:	785b      	ldrb	r3, [r3, #1]
10009192:	2b00      	cmp	r3, #0
10009194:	d007      	beq.n	100091a6 <spi_tx1_isr_handler+0xee>
					module->status = STATUS_OK;
10009196:	2300      	movs	r3, #0
10009198:	3a04      	subs	r2, #4
1000919a:	5483      	strb	r3, [r0, r2]
					flag_direction_both[1] = false;
1000919c:	4a06      	ldr	r2, [pc, #24]	; (100091b8 <spi_tx1_isr_handler+0x100>)
1000919e:	7053      	strb	r3, [r2, #1]
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
100091a0:	6903      	ldr	r3, [r0, #16]
100091a2:	4798      	blx	r3
100091a4:	e002      	b.n	100091ac <spi_tx1_isr_handler+0xf4>
				} else {
					flag_direction_both[1] = true;
100091a6:	2201      	movs	r2, #1
100091a8:	4b03      	ldr	r3, [pc, #12]	; (100091b8 <spi_tx1_isr_handler+0x100>)
100091aa:	705a      	strb	r2, [r3, #1]
				}
			}
		}
	}
}
100091ac:	bd70      	pop	{r4, r5, r6, pc}
100091ae:	46c0      	nop			; (mov r8, r8)
100091b0:	1000a294 	.word	0x1000a294
100091b4:	1000a28e 	.word	0x1000a28e
100091b8:	1000a28c 	.word	0x1000a28c

100091bc <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
100091bc:	2801      	cmp	r0, #1
100091be:	d00d      	beq.n	100091dc <system_clock_config+0x20>
100091c0:	2800      	cmp	r0, #0
100091c2:	d002      	beq.n	100091ca <system_clock_config+0xe>
100091c4:	2802      	cmp	r0, #2
100091c6:	d01c      	beq.n	10009202 <system_clock_config+0x46>
100091c8:	e02e      	b.n	10009228 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
100091ca:	4a18      	ldr	r2, [pc, #96]	; (1000922c <system_clock_config+0x70>)
100091cc:	6990      	ldr	r0, [r2, #24]
100091ce:	230c      	movs	r3, #12
100091d0:	4303      	orrs	r3, r0
100091d2:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
100091d4:	4a16      	ldr	r2, [pc, #88]	; (10009230 <system_clock_config+0x74>)
100091d6:	4b17      	ldr	r3, [pc, #92]	; (10009234 <system_clock_config+0x78>)
100091d8:	601a      	str	r2, [r3, #0]
			break;
100091da:	e01a      	b.n	10009212 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
100091dc:	4b13      	ldr	r3, [pc, #76]	; (1000922c <system_clock_config+0x70>)
100091de:	6998      	ldr	r0, [r3, #24]
100091e0:	2208      	movs	r2, #8
100091e2:	4302      	orrs	r2, r0
100091e4:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
100091e6:	699a      	ldr	r2, [r3, #24]
100091e8:	2004      	movs	r0, #4
100091ea:	4382      	bics	r2, r0
100091ec:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
100091ee:	4a12      	ldr	r2, [pc, #72]	; (10009238 <system_clock_config+0x7c>)
100091f0:	6853      	ldr	r3, [r2, #4]
100091f2:	2080      	movs	r0, #128	; 0x80
100091f4:	0300      	lsls	r0, r0, #12
100091f6:	4303      	orrs	r3, r0
100091f8:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
100091fa:	4a10      	ldr	r2, [pc, #64]	; (1000923c <system_clock_config+0x80>)
100091fc:	4b0d      	ldr	r3, [pc, #52]	; (10009234 <system_clock_config+0x78>)
100091fe:	601a      	str	r2, [r3, #0]
			break;
10009200:	e007      	b.n	10009212 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
10009202:	4a0a      	ldr	r2, [pc, #40]	; (1000922c <system_clock_config+0x70>)
10009204:	6993      	ldr	r3, [r2, #24]
10009206:	200c      	movs	r0, #12
10009208:	4383      	bics	r3, r0
1000920a:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000920c:	4a08      	ldr	r2, [pc, #32]	; (10009230 <system_clock_config+0x74>)
1000920e:	4b09      	ldr	r3, [pc, #36]	; (10009234 <system_clock_config+0x78>)
10009210:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
10009212:	4b06      	ldr	r3, [pc, #24]	; (1000922c <system_clock_config+0x70>)
10009214:	699a      	ldr	r2, [r3, #24]
10009216:	2003      	movs	r0, #3
10009218:	4382      	bics	r2, r0
1000921a:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000921c:	699a      	ldr	r2, [r3, #24]
1000921e:	4001      	ands	r1, r0
10009220:	4311      	orrs	r1, r2
10009222:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10009224:	2000      	movs	r0, #0
10009226:	e000      	b.n	1000922a <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10009228:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000922a:	4770      	bx	lr
1000922c:	4000b000 	.word	0x4000b000
10009230:	018cba80 	.word	0x018cba80
10009234:	1000a29c 	.word	0x1000a29c
10009238:	4000f000 	.word	0x4000f000
1000923c:	001e8480 	.word	0x001e8480

10009240 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10009240:	b500      	push	{lr}
	switch (peripheral) {
10009242:	2835      	cmp	r0, #53	; 0x35
10009244:	d900      	bls.n	10009248 <system_clock_peripheral_enable+0x8>
10009246:	e1a2      	b.n	1000958e <system_clock_peripheral_enable+0x34e>
10009248:	0080      	lsls	r0, r0, #2
1000924a:	4bd2      	ldr	r3, [pc, #840]	; (10009594 <system_clock_peripheral_enable+0x354>)
1000924c:	581b      	ldr	r3, [r3, r0]
1000924e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009250:	4ad1      	ldr	r2, [pc, #836]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009252:	68d1      	ldr	r1, [r2, #12]
10009254:	2302      	movs	r3, #2
10009256:	430b      	orrs	r3, r1
10009258:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000925a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000925c:	e198      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000925e:	4ace      	ldr	r2, [pc, #824]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009260:	68d1      	ldr	r1, [r2, #12]
10009262:	2304      	movs	r3, #4
10009264:	430b      	orrs	r3, r1
10009266:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009268:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000926a:	e191      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000926c:	4aca      	ldr	r2, [pc, #808]	; (10009598 <system_clock_peripheral_enable+0x358>)
1000926e:	68d1      	ldr	r1, [r2, #12]
10009270:	2308      	movs	r3, #8
10009272:	430b      	orrs	r3, r1
10009274:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009276:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
10009278:	e18a      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000927a:	4ac7      	ldr	r2, [pc, #796]	; (10009598 <system_clock_peripheral_enable+0x358>)
1000927c:	68d1      	ldr	r1, [r2, #12]
1000927e:	2310      	movs	r3, #16
10009280:	430b      	orrs	r3, r1
10009282:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009284:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
10009286:	e183      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009288:	4ac3      	ldr	r2, [pc, #780]	; (10009598 <system_clock_peripheral_enable+0x358>)
1000928a:	68d1      	ldr	r1, [r2, #12]
1000928c:	2320      	movs	r3, #32
1000928e:	430b      	orrs	r3, r1
10009290:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009292:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
10009294:	e17c      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009296:	4ac0      	ldr	r2, [pc, #768]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009298:	68d1      	ldr	r1, [r2, #12]
1000929a:	2380      	movs	r3, #128	; 0x80
1000929c:	430b      	orrs	r3, r1
1000929e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
100092a2:	e175      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092a4:	4abc      	ldr	r2, [pc, #752]	; (10009598 <system_clock_peripheral_enable+0x358>)
100092a6:	68d3      	ldr	r3, [r2, #12]
100092a8:	2180      	movs	r1, #128	; 0x80
100092aa:	0049      	lsls	r1, r1, #1
100092ac:	430b      	orrs	r3, r1
100092ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
100092b2:	e16d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092b4:	4ab8      	ldr	r2, [pc, #736]	; (10009598 <system_clock_peripheral_enable+0x358>)
100092b6:	68d3      	ldr	r3, [r2, #12]
100092b8:	2180      	movs	r1, #128	; 0x80
100092ba:	0109      	lsls	r1, r1, #4
100092bc:	430b      	orrs	r3, r1
100092be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
100092c2:	e165      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092c4:	4ab4      	ldr	r2, [pc, #720]	; (10009598 <system_clock_peripheral_enable+0x358>)
100092c6:	68d3      	ldr	r3, [r2, #12]
100092c8:	2180      	movs	r1, #128	; 0x80
100092ca:	0149      	lsls	r1, r1, #5
100092cc:	430b      	orrs	r3, r1
100092ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
100092d2:	e15d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092d4:	4ab0      	ldr	r2, [pc, #704]	; (10009598 <system_clock_peripheral_enable+0x358>)
100092d6:	68d3      	ldr	r3, [r2, #12]
100092d8:	2180      	movs	r1, #128	; 0x80
100092da:	0189      	lsls	r1, r1, #6
100092dc:	430b      	orrs	r3, r1
100092de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
100092e2:	e155      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092e4:	4aac      	ldr	r2, [pc, #688]	; (10009598 <system_clock_peripheral_enable+0x358>)
100092e6:	68d3      	ldr	r3, [r2, #12]
100092e8:	2180      	movs	r1, #128	; 0x80
100092ea:	01c9      	lsls	r1, r1, #7
100092ec:	430b      	orrs	r3, r1
100092ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
100092f2:	e14d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092f4:	4aa8      	ldr	r2, [pc, #672]	; (10009598 <system_clock_peripheral_enable+0x358>)
100092f6:	68d3      	ldr	r3, [r2, #12]
100092f8:	2180      	movs	r1, #128	; 0x80
100092fa:	0209      	lsls	r1, r1, #8
100092fc:	430b      	orrs	r3, r1
100092fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009300:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
10009302:	e145      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009304:	4aa4      	ldr	r2, [pc, #656]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009306:	68d3      	ldr	r3, [r2, #12]
10009308:	2180      	movs	r1, #128	; 0x80
1000930a:	0249      	lsls	r1, r1, #9
1000930c:	430b      	orrs	r3, r1
1000930e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009310:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
10009312:	e13d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009314:	4aa0      	ldr	r2, [pc, #640]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009316:	68d3      	ldr	r3, [r2, #12]
10009318:	2180      	movs	r1, #128	; 0x80
1000931a:	0289      	lsls	r1, r1, #10
1000931c:	430b      	orrs	r3, r1
1000931e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009320:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10009322:	e135      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009324:	4a9c      	ldr	r2, [pc, #624]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009326:	68d3      	ldr	r3, [r2, #12]
10009328:	2180      	movs	r1, #128	; 0x80
1000932a:	02c9      	lsls	r1, r1, #11
1000932c:	430b      	orrs	r3, r1
1000932e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009330:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10009332:	e12d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009334:	4a98      	ldr	r2, [pc, #608]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009336:	68d3      	ldr	r3, [r2, #12]
10009338:	2180      	movs	r1, #128	; 0x80
1000933a:	0309      	lsls	r1, r1, #12
1000933c:	430b      	orrs	r3, r1
1000933e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009340:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10009342:	e125      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009344:	4a94      	ldr	r2, [pc, #592]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009346:	68d3      	ldr	r3, [r2, #12]
10009348:	2180      	movs	r1, #128	; 0x80
1000934a:	0349      	lsls	r1, r1, #13
1000934c:	430b      	orrs	r3, r1
1000934e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009350:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10009352:	e11d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009354:	4a90      	ldr	r2, [pc, #576]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009356:	68d3      	ldr	r3, [r2, #12]
10009358:	2180      	movs	r1, #128	; 0x80
1000935a:	0389      	lsls	r1, r1, #14
1000935c:	430b      	orrs	r3, r1
1000935e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009360:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10009362:	e115      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009364:	4a8c      	ldr	r2, [pc, #560]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009366:	68d3      	ldr	r3, [r2, #12]
10009368:	2180      	movs	r1, #128	; 0x80
1000936a:	03c9      	lsls	r1, r1, #15
1000936c:	430b      	orrs	r3, r1
1000936e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009370:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10009372:	e10d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009374:	4a88      	ldr	r2, [pc, #544]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009376:	68d3      	ldr	r3, [r2, #12]
10009378:	2180      	movs	r1, #128	; 0x80
1000937a:	0409      	lsls	r1, r1, #16
1000937c:	430b      	orrs	r3, r1
1000937e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009380:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10009382:	e105      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009384:	4a84      	ldr	r2, [pc, #528]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009386:	68d3      	ldr	r3, [r2, #12]
10009388:	2180      	movs	r1, #128	; 0x80
1000938a:	0449      	lsls	r1, r1, #17
1000938c:	430b      	orrs	r3, r1
1000938e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009390:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10009392:	e0fd      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009394:	4a80      	ldr	r2, [pc, #512]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009396:	68d3      	ldr	r3, [r2, #12]
10009398:	2180      	movs	r1, #128	; 0x80
1000939a:	0489      	lsls	r1, r1, #18
1000939c:	430b      	orrs	r3, r1
1000939e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
100093a2:	e0f5      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100093a4:	4a7c      	ldr	r2, [pc, #496]	; (10009598 <system_clock_peripheral_enable+0x358>)
100093a6:	68d3      	ldr	r3, [r2, #12]
100093a8:	2180      	movs	r1, #128	; 0x80
100093aa:	04c9      	lsls	r1, r1, #19
100093ac:	430b      	orrs	r3, r1
100093ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
100093b2:	e0ed      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100093b4:	4a78      	ldr	r2, [pc, #480]	; (10009598 <system_clock_peripheral_enable+0x358>)
100093b6:	68d3      	ldr	r3, [r2, #12]
100093b8:	2180      	movs	r1, #128	; 0x80
100093ba:	0509      	lsls	r1, r1, #20
100093bc:	430b      	orrs	r3, r1
100093be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
100093c2:	e0e5      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100093c4:	4a74      	ldr	r2, [pc, #464]	; (10009598 <system_clock_peripheral_enable+0x358>)
100093c6:	68d3      	ldr	r3, [r2, #12]
100093c8:	2180      	movs	r1, #128	; 0x80
100093ca:	0549      	lsls	r1, r1, #21
100093cc:	430b      	orrs	r3, r1
100093ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
100093d2:	e0dd      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100093d4:	4a70      	ldr	r2, [pc, #448]	; (10009598 <system_clock_peripheral_enable+0x358>)
100093d6:	68d3      	ldr	r3, [r2, #12]
100093d8:	2180      	movs	r1, #128	; 0x80
100093da:	0589      	lsls	r1, r1, #22
100093dc:	430b      	orrs	r3, r1
100093de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
100093e2:	e0d5      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100093e4:	4a6c      	ldr	r2, [pc, #432]	; (10009598 <system_clock_peripheral_enable+0x358>)
100093e6:	68d3      	ldr	r3, [r2, #12]
100093e8:	2180      	movs	r1, #128	; 0x80
100093ea:	05c9      	lsls	r1, r1, #23
100093ec:	430b      	orrs	r3, r1
100093ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
100093f2:	e0cd      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093f4:	4a68      	ldr	r2, [pc, #416]	; (10009598 <system_clock_peripheral_enable+0x358>)
100093f6:	6911      	ldr	r1, [r2, #16]
100093f8:	2301      	movs	r3, #1
100093fa:	430b      	orrs	r3, r1
100093fc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
10009400:	e0c6      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009402:	4a65      	ldr	r2, [pc, #404]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009404:	6911      	ldr	r1, [r2, #16]
10009406:	2302      	movs	r3, #2
10009408:	430b      	orrs	r3, r1
1000940a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000940c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000940e:	e0bf      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009410:	4a61      	ldr	r2, [pc, #388]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009412:	6911      	ldr	r1, [r2, #16]
10009414:	2304      	movs	r3, #4
10009416:	430b      	orrs	r3, r1
10009418:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000941a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000941c:	e0b8      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000941e:	4a5e      	ldr	r2, [pc, #376]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009420:	6911      	ldr	r1, [r2, #16]
10009422:	2308      	movs	r3, #8
10009424:	430b      	orrs	r3, r1
10009426:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009428:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000942a:	e0b1      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000942c:	4a5a      	ldr	r2, [pc, #360]	; (10009598 <system_clock_peripheral_enable+0x358>)
1000942e:	6911      	ldr	r1, [r2, #16]
10009430:	2310      	movs	r3, #16
10009432:	430b      	orrs	r3, r1
10009434:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009436:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
10009438:	e0aa      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000943a:	4a57      	ldr	r2, [pc, #348]	; (10009598 <system_clock_peripheral_enable+0x358>)
1000943c:	6911      	ldr	r1, [r2, #16]
1000943e:	2320      	movs	r3, #32
10009440:	430b      	orrs	r3, r1
10009442:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009444:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
10009446:	e0a3      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009448:	4a53      	ldr	r2, [pc, #332]	; (10009598 <system_clock_peripheral_enable+0x358>)
1000944a:	6911      	ldr	r1, [r2, #16]
1000944c:	2340      	movs	r3, #64	; 0x40
1000944e:	430b      	orrs	r3, r1
10009450:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009452:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
10009454:	e09c      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009456:	4a50      	ldr	r2, [pc, #320]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009458:	6911      	ldr	r1, [r2, #16]
1000945a:	2380      	movs	r3, #128	; 0x80
1000945c:	430b      	orrs	r3, r1
1000945e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009460:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
10009462:	e095      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009464:	4a4c      	ldr	r2, [pc, #304]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009466:	6913      	ldr	r3, [r2, #16]
10009468:	2180      	movs	r1, #128	; 0x80
1000946a:	0049      	lsls	r1, r1, #1
1000946c:	430b      	orrs	r3, r1
1000946e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009470:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
10009472:	e08d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009474:	4a48      	ldr	r2, [pc, #288]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009476:	6913      	ldr	r3, [r2, #16]
10009478:	2180      	movs	r1, #128	; 0x80
1000947a:	0089      	lsls	r1, r1, #2
1000947c:	430b      	orrs	r3, r1
1000947e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009480:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
10009482:	e085      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009484:	4a44      	ldr	r2, [pc, #272]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009486:	6913      	ldr	r3, [r2, #16]
10009488:	2180      	movs	r1, #128	; 0x80
1000948a:	00c9      	lsls	r1, r1, #3
1000948c:	430b      	orrs	r3, r1
1000948e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009490:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10009492:	e07d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009494:	4a40      	ldr	r2, [pc, #256]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009496:	6913      	ldr	r3, [r2, #16]
10009498:	2180      	movs	r1, #128	; 0x80
1000949a:	0109      	lsls	r1, r1, #4
1000949c:	430b      	orrs	r3, r1
1000949e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
100094a2:	e075      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094a4:	4a3c      	ldr	r2, [pc, #240]	; (10009598 <system_clock_peripheral_enable+0x358>)
100094a6:	6913      	ldr	r3, [r2, #16]
100094a8:	2180      	movs	r1, #128	; 0x80
100094aa:	0149      	lsls	r1, r1, #5
100094ac:	430b      	orrs	r3, r1
100094ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
100094b2:	e06d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094b4:	4a38      	ldr	r2, [pc, #224]	; (10009598 <system_clock_peripheral_enable+0x358>)
100094b6:	6913      	ldr	r3, [r2, #16]
100094b8:	2180      	movs	r1, #128	; 0x80
100094ba:	0189      	lsls	r1, r1, #6
100094bc:	430b      	orrs	r3, r1
100094be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
100094c2:	e065      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094c4:	4a34      	ldr	r2, [pc, #208]	; (10009598 <system_clock_peripheral_enable+0x358>)
100094c6:	6913      	ldr	r3, [r2, #16]
100094c8:	2180      	movs	r1, #128	; 0x80
100094ca:	01c9      	lsls	r1, r1, #7
100094cc:	430b      	orrs	r3, r1
100094ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
100094d2:	e05d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094d4:	4a30      	ldr	r2, [pc, #192]	; (10009598 <system_clock_peripheral_enable+0x358>)
100094d6:	6913      	ldr	r3, [r2, #16]
100094d8:	2180      	movs	r1, #128	; 0x80
100094da:	0209      	lsls	r1, r1, #8
100094dc:	430b      	orrs	r3, r1
100094de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
100094e2:	e055      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094e4:	4a2c      	ldr	r2, [pc, #176]	; (10009598 <system_clock_peripheral_enable+0x358>)
100094e6:	6913      	ldr	r3, [r2, #16]
100094e8:	2180      	movs	r1, #128	; 0x80
100094ea:	0249      	lsls	r1, r1, #9
100094ec:	430b      	orrs	r3, r1
100094ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
100094f2:	e04d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094f4:	4a28      	ldr	r2, [pc, #160]	; (10009598 <system_clock_peripheral_enable+0x358>)
100094f6:	6913      	ldr	r3, [r2, #16]
100094f8:	2180      	movs	r1, #128	; 0x80
100094fa:	0289      	lsls	r1, r1, #10
100094fc:	430b      	orrs	r3, r1
100094fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009500:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10009502:	e045      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009504:	4a24      	ldr	r2, [pc, #144]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009506:	6913      	ldr	r3, [r2, #16]
10009508:	2180      	movs	r1, #128	; 0x80
1000950a:	02c9      	lsls	r1, r1, #11
1000950c:	430b      	orrs	r3, r1
1000950e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009510:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10009512:	e03d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009514:	4a20      	ldr	r2, [pc, #128]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009516:	6913      	ldr	r3, [r2, #16]
10009518:	2180      	movs	r1, #128	; 0x80
1000951a:	0309      	lsls	r1, r1, #12
1000951c:	430b      	orrs	r3, r1
1000951e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009520:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10009522:	e035      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009524:	4a1c      	ldr	r2, [pc, #112]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009526:	6913      	ldr	r3, [r2, #16]
10009528:	2180      	movs	r1, #128	; 0x80
1000952a:	0349      	lsls	r1, r1, #13
1000952c:	430b      	orrs	r3, r1
1000952e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009530:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10009532:	e02d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009534:	4a18      	ldr	r2, [pc, #96]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009536:	6913      	ldr	r3, [r2, #16]
10009538:	2180      	movs	r1, #128	; 0x80
1000953a:	0389      	lsls	r1, r1, #14
1000953c:	430b      	orrs	r3, r1
1000953e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009540:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10009542:	e025      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009544:	4a14      	ldr	r2, [pc, #80]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009546:	6913      	ldr	r3, [r2, #16]
10009548:	2180      	movs	r1, #128	; 0x80
1000954a:	03c9      	lsls	r1, r1, #15
1000954c:	430b      	orrs	r3, r1
1000954e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009550:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10009552:	e01d      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009554:	4a10      	ldr	r2, [pc, #64]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009556:	6913      	ldr	r3, [r2, #16]
10009558:	2180      	movs	r1, #128	; 0x80
1000955a:	0409      	lsls	r1, r1, #16
1000955c:	430b      	orrs	r3, r1
1000955e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009560:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009562:	e015      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10009564:	4a0c      	ldr	r2, [pc, #48]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009566:	7d11      	ldrb	r1, [r2, #20]
10009568:	2301      	movs	r3, #1
1000956a:	430b      	orrs	r3, r1
1000956c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000956e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
10009570:	e00e      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10009572:	4a09      	ldr	r2, [pc, #36]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009574:	7d11      	ldrb	r1, [r2, #20]
10009576:	2302      	movs	r3, #2
10009578:	430b      	orrs	r3, r1
1000957a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000957c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000957e:	e007      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10009580:	4a05      	ldr	r2, [pc, #20]	; (10009598 <system_clock_peripheral_enable+0x358>)
10009582:	7d11      	ldrb	r1, [r2, #20]
10009584:	2304      	movs	r3, #4
10009586:	430b      	orrs	r3, r1
10009588:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000958a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000958c:	e000      	b.n	10009590 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000958e:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009590:	bd00      	pop	{pc}
10009592:	46c0      	nop			; (mov r8, r8)
10009594:	10009f88 	.word	0x10009f88
10009598:	4000b000 	.word	0x4000b000

1000959c <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000959c:	b500      	push	{lr}
	switch (peripheral) {
1000959e:	2835      	cmp	r0, #53	; 0x35
100095a0:	d900      	bls.n	100095a4 <system_clock_peripheral_disable+0x8>
100095a2:	e17d      	b.n	100098a0 <system_clock_peripheral_disable+0x304>
100095a4:	0080      	lsls	r0, r0, #2
100095a6:	4bbf      	ldr	r3, [pc, #764]	; (100098a4 <system_clock_peripheral_disable+0x308>)
100095a8:	581b      	ldr	r3, [r3, r0]
100095aa:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100095ac:	4abe      	ldr	r2, [pc, #760]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100095ae:	68d3      	ldr	r3, [r2, #12]
100095b0:	2102      	movs	r1, #2
100095b2:	438b      	bics	r3, r1
100095b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095b6:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
100095b8:	e173      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100095ba:	4abb      	ldr	r2, [pc, #748]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100095bc:	68d3      	ldr	r3, [r2, #12]
100095be:	2104      	movs	r1, #4
100095c0:	438b      	bics	r3, r1
100095c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
100095c6:	e16c      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100095c8:	4ab7      	ldr	r2, [pc, #732]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100095ca:	68d3      	ldr	r3, [r2, #12]
100095cc:	2108      	movs	r1, #8
100095ce:	438b      	bics	r3, r1
100095d0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
100095d4:	e165      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100095d6:	4ab4      	ldr	r2, [pc, #720]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100095d8:	68d3      	ldr	r3, [r2, #12]
100095da:	2110      	movs	r1, #16
100095dc:	438b      	bics	r3, r1
100095de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
100095e2:	e15e      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100095e4:	4ab0      	ldr	r2, [pc, #704]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100095e6:	68d3      	ldr	r3, [r2, #12]
100095e8:	2120      	movs	r1, #32
100095ea:	438b      	bics	r3, r1
100095ec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
100095f0:	e157      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100095f2:	4aad      	ldr	r2, [pc, #692]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100095f4:	68d3      	ldr	r3, [r2, #12]
100095f6:	2180      	movs	r1, #128	; 0x80
100095f8:	438b      	bics	r3, r1
100095fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
100095fe:	e150      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009600:	4aa9      	ldr	r2, [pc, #676]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009602:	68d1      	ldr	r1, [r2, #12]
10009604:	4ba9      	ldr	r3, [pc, #676]	; (100098ac <system_clock_peripheral_disable+0x310>)
10009606:	400b      	ands	r3, r1
10009608:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000960a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000960c:	e149      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000960e:	4aa6      	ldr	r2, [pc, #664]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009610:	68d1      	ldr	r1, [r2, #12]
10009612:	4ba7      	ldr	r3, [pc, #668]	; (100098b0 <system_clock_peripheral_disable+0x314>)
10009614:	400b      	ands	r3, r1
10009616:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009618:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000961a:	e142      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000961c:	4aa2      	ldr	r2, [pc, #648]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000961e:	68d1      	ldr	r1, [r2, #12]
10009620:	4ba4      	ldr	r3, [pc, #656]	; (100098b4 <system_clock_peripheral_disable+0x318>)
10009622:	400b      	ands	r3, r1
10009624:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009626:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
10009628:	e13b      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000962a:	4a9f      	ldr	r2, [pc, #636]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000962c:	68d1      	ldr	r1, [r2, #12]
1000962e:	4ba2      	ldr	r3, [pc, #648]	; (100098b8 <system_clock_peripheral_disable+0x31c>)
10009630:	400b      	ands	r3, r1
10009632:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009634:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
10009636:	e134      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009638:	4a9b      	ldr	r2, [pc, #620]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000963a:	68d1      	ldr	r1, [r2, #12]
1000963c:	4b9f      	ldr	r3, [pc, #636]	; (100098bc <system_clock_peripheral_disable+0x320>)
1000963e:	400b      	ands	r3, r1
10009640:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009642:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
10009644:	e12d      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009646:	4a98      	ldr	r2, [pc, #608]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009648:	68d1      	ldr	r1, [r2, #12]
1000964a:	4b9d      	ldr	r3, [pc, #628]	; (100098c0 <system_clock_peripheral_disable+0x324>)
1000964c:	400b      	ands	r3, r1
1000964e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009650:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
10009652:	e126      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009654:	4a94      	ldr	r2, [pc, #592]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009656:	68d1      	ldr	r1, [r2, #12]
10009658:	4b9a      	ldr	r3, [pc, #616]	; (100098c4 <system_clock_peripheral_disable+0x328>)
1000965a:	400b      	ands	r3, r1
1000965c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000965e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
10009660:	e11f      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009662:	4a91      	ldr	r2, [pc, #580]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009664:	68d1      	ldr	r1, [r2, #12]
10009666:	4b98      	ldr	r3, [pc, #608]	; (100098c8 <system_clock_peripheral_disable+0x32c>)
10009668:	400b      	ands	r3, r1
1000966a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000966c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000966e:	e118      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009670:	4a8d      	ldr	r2, [pc, #564]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009672:	68d1      	ldr	r1, [r2, #12]
10009674:	4b95      	ldr	r3, [pc, #596]	; (100098cc <system_clock_peripheral_disable+0x330>)
10009676:	400b      	ands	r3, r1
10009678:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000967a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000967c:	e111      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000967e:	4a8a      	ldr	r2, [pc, #552]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009680:	68d1      	ldr	r1, [r2, #12]
10009682:	4b93      	ldr	r3, [pc, #588]	; (100098d0 <system_clock_peripheral_disable+0x334>)
10009684:	400b      	ands	r3, r1
10009686:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009688:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000968a:	e10a      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000968c:	4a86      	ldr	r2, [pc, #536]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000968e:	68d1      	ldr	r1, [r2, #12]
10009690:	4b90      	ldr	r3, [pc, #576]	; (100098d4 <system_clock_peripheral_disable+0x338>)
10009692:	400b      	ands	r3, r1
10009694:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009696:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10009698:	e103      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000969a:	4a83      	ldr	r2, [pc, #524]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000969c:	68d1      	ldr	r1, [r2, #12]
1000969e:	4b8e      	ldr	r3, [pc, #568]	; (100098d8 <system_clock_peripheral_disable+0x33c>)
100096a0:	400b      	ands	r3, r1
100096a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
100096a6:	e0fc      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100096a8:	4a7f      	ldr	r2, [pc, #508]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100096aa:	68d1      	ldr	r1, [r2, #12]
100096ac:	4b8b      	ldr	r3, [pc, #556]	; (100098dc <system_clock_peripheral_disable+0x340>)
100096ae:	400b      	ands	r3, r1
100096b0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
100096b4:	e0f5      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100096b6:	4a7c      	ldr	r2, [pc, #496]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100096b8:	68d1      	ldr	r1, [r2, #12]
100096ba:	4b89      	ldr	r3, [pc, #548]	; (100098e0 <system_clock_peripheral_disable+0x344>)
100096bc:	400b      	ands	r3, r1
100096be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
100096c2:	e0ee      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100096c4:	4a78      	ldr	r2, [pc, #480]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100096c6:	68d1      	ldr	r1, [r2, #12]
100096c8:	4b86      	ldr	r3, [pc, #536]	; (100098e4 <system_clock_peripheral_disable+0x348>)
100096ca:	400b      	ands	r3, r1
100096cc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
100096d0:	e0e7      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100096d2:	4a75      	ldr	r2, [pc, #468]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100096d4:	68d1      	ldr	r1, [r2, #12]
100096d6:	4b84      	ldr	r3, [pc, #528]	; (100098e8 <system_clock_peripheral_disable+0x34c>)
100096d8:	400b      	ands	r3, r1
100096da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
100096de:	e0e0      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100096e0:	4a71      	ldr	r2, [pc, #452]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100096e2:	68d1      	ldr	r1, [r2, #12]
100096e4:	4b81      	ldr	r3, [pc, #516]	; (100098ec <system_clock_peripheral_disable+0x350>)
100096e6:	400b      	ands	r3, r1
100096e8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
100096ec:	e0d9      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100096ee:	4a6e      	ldr	r2, [pc, #440]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100096f0:	68d1      	ldr	r1, [r2, #12]
100096f2:	4b7f      	ldr	r3, [pc, #508]	; (100098f0 <system_clock_peripheral_disable+0x354>)
100096f4:	400b      	ands	r3, r1
100096f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
100096fa:	e0d2      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100096fc:	4a6a      	ldr	r2, [pc, #424]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100096fe:	68d1      	ldr	r1, [r2, #12]
10009700:	4b7c      	ldr	r3, [pc, #496]	; (100098f4 <system_clock_peripheral_disable+0x358>)
10009702:	400b      	ands	r3, r1
10009704:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009706:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
10009708:	e0cb      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000970a:	4a67      	ldr	r2, [pc, #412]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000970c:	68d1      	ldr	r1, [r2, #12]
1000970e:	4b7a      	ldr	r3, [pc, #488]	; (100098f8 <system_clock_peripheral_disable+0x35c>)
10009710:	400b      	ands	r3, r1
10009712:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009714:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
10009716:	e0c4      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009718:	4a63      	ldr	r2, [pc, #396]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000971a:	68d1      	ldr	r1, [r2, #12]
1000971c:	4b77      	ldr	r3, [pc, #476]	; (100098fc <system_clock_peripheral_disable+0x360>)
1000971e:	400b      	ands	r3, r1
10009720:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009722:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10009724:	e0bd      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009726:	4a60      	ldr	r2, [pc, #384]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009728:	6913      	ldr	r3, [r2, #16]
1000972a:	2101      	movs	r1, #1
1000972c:	438b      	bics	r3, r1
1000972e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009730:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
10009732:	e0b6      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009734:	4a5c      	ldr	r2, [pc, #368]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009736:	6913      	ldr	r3, [r2, #16]
10009738:	2102      	movs	r1, #2
1000973a:	438b      	bics	r3, r1
1000973c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000973e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
10009740:	e0af      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009742:	4a59      	ldr	r2, [pc, #356]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009744:	6913      	ldr	r3, [r2, #16]
10009746:	2104      	movs	r1, #4
10009748:	438b      	bics	r3, r1
1000974a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000974c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000974e:	e0a8      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009750:	4a55      	ldr	r2, [pc, #340]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009752:	6913      	ldr	r3, [r2, #16]
10009754:	2108      	movs	r1, #8
10009756:	438b      	bics	r3, r1
10009758:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000975a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000975c:	e0a1      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000975e:	4a52      	ldr	r2, [pc, #328]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009760:	6913      	ldr	r3, [r2, #16]
10009762:	2110      	movs	r1, #16
10009764:	438b      	bics	r3, r1
10009766:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009768:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000976a:	e09a      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000976c:	4a4e      	ldr	r2, [pc, #312]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000976e:	6913      	ldr	r3, [r2, #16]
10009770:	2120      	movs	r1, #32
10009772:	438b      	bics	r3, r1
10009774:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009776:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
10009778:	e093      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000977a:	4a4b      	ldr	r2, [pc, #300]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000977c:	6913      	ldr	r3, [r2, #16]
1000977e:	2140      	movs	r1, #64	; 0x40
10009780:	438b      	bics	r3, r1
10009782:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009784:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
10009786:	e08c      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009788:	4a47      	ldr	r2, [pc, #284]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000978a:	6913      	ldr	r3, [r2, #16]
1000978c:	2180      	movs	r1, #128	; 0x80
1000978e:	438b      	bics	r3, r1
10009790:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009792:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
10009794:	e085      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009796:	4a44      	ldr	r2, [pc, #272]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009798:	6911      	ldr	r1, [r2, #16]
1000979a:	4b44      	ldr	r3, [pc, #272]	; (100098ac <system_clock_peripheral_disable+0x310>)
1000979c:	400b      	ands	r3, r1
1000979e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
100097a2:	e07e      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100097a4:	4a40      	ldr	r2, [pc, #256]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100097a6:	6911      	ldr	r1, [r2, #16]
100097a8:	4b55      	ldr	r3, [pc, #340]	; (10009900 <system_clock_peripheral_disable+0x364>)
100097aa:	400b      	ands	r3, r1
100097ac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
100097b0:	e077      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100097b2:	4a3d      	ldr	r2, [pc, #244]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100097b4:	6911      	ldr	r1, [r2, #16]
100097b6:	4b53      	ldr	r3, [pc, #332]	; (10009904 <system_clock_peripheral_disable+0x368>)
100097b8:	400b      	ands	r3, r1
100097ba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
100097be:	e070      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100097c0:	4a39      	ldr	r2, [pc, #228]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100097c2:	6911      	ldr	r1, [r2, #16]
100097c4:	4b3a      	ldr	r3, [pc, #232]	; (100098b0 <system_clock_peripheral_disable+0x314>)
100097c6:	400b      	ands	r3, r1
100097c8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
100097cc:	e069      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100097ce:	4a36      	ldr	r2, [pc, #216]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100097d0:	6911      	ldr	r1, [r2, #16]
100097d2:	4b38      	ldr	r3, [pc, #224]	; (100098b4 <system_clock_peripheral_disable+0x318>)
100097d4:	400b      	ands	r3, r1
100097d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
100097da:	e062      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100097dc:	4a32      	ldr	r2, [pc, #200]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100097de:	6911      	ldr	r1, [r2, #16]
100097e0:	4b35      	ldr	r3, [pc, #212]	; (100098b8 <system_clock_peripheral_disable+0x31c>)
100097e2:	400b      	ands	r3, r1
100097e4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
100097e8:	e05b      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100097ea:	4a2f      	ldr	r2, [pc, #188]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100097ec:	6911      	ldr	r1, [r2, #16]
100097ee:	4b33      	ldr	r3, [pc, #204]	; (100098bc <system_clock_peripheral_disable+0x320>)
100097f0:	400b      	ands	r3, r1
100097f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
100097f6:	e054      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100097f8:	4a2b      	ldr	r2, [pc, #172]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
100097fa:	6911      	ldr	r1, [r2, #16]
100097fc:	4b30      	ldr	r3, [pc, #192]	; (100098c0 <system_clock_peripheral_disable+0x324>)
100097fe:	400b      	ands	r3, r1
10009800:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009802:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10009804:	e04d      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009806:	4a28      	ldr	r2, [pc, #160]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009808:	6911      	ldr	r1, [r2, #16]
1000980a:	4b2e      	ldr	r3, [pc, #184]	; (100098c4 <system_clock_peripheral_disable+0x328>)
1000980c:	400b      	ands	r3, r1
1000980e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009810:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10009812:	e046      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009814:	4a24      	ldr	r2, [pc, #144]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009816:	6911      	ldr	r1, [r2, #16]
10009818:	4b2b      	ldr	r3, [pc, #172]	; (100098c8 <system_clock_peripheral_disable+0x32c>)
1000981a:	400b      	ands	r3, r1
1000981c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000981e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10009820:	e03f      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009822:	4a21      	ldr	r2, [pc, #132]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009824:	6911      	ldr	r1, [r2, #16]
10009826:	4b29      	ldr	r3, [pc, #164]	; (100098cc <system_clock_peripheral_disable+0x330>)
10009828:	400b      	ands	r3, r1
1000982a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000982c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000982e:	e038      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009830:	4a1d      	ldr	r2, [pc, #116]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009832:	6911      	ldr	r1, [r2, #16]
10009834:	4b26      	ldr	r3, [pc, #152]	; (100098d0 <system_clock_peripheral_disable+0x334>)
10009836:	400b      	ands	r3, r1
10009838:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000983a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000983c:	e031      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000983e:	4a1a      	ldr	r2, [pc, #104]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009840:	6911      	ldr	r1, [r2, #16]
10009842:	4b24      	ldr	r3, [pc, #144]	; (100098d4 <system_clock_peripheral_disable+0x338>)
10009844:	400b      	ands	r3, r1
10009846:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009848:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000984a:	e02a      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000984c:	4a16      	ldr	r2, [pc, #88]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000984e:	6911      	ldr	r1, [r2, #16]
10009850:	4b21      	ldr	r3, [pc, #132]	; (100098d8 <system_clock_peripheral_disable+0x33c>)
10009852:	400b      	ands	r3, r1
10009854:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009856:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10009858:	e023      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000985a:	4a13      	ldr	r2, [pc, #76]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000985c:	6911      	ldr	r1, [r2, #16]
1000985e:	4b1f      	ldr	r3, [pc, #124]	; (100098dc <system_clock_peripheral_disable+0x340>)
10009860:	400b      	ands	r3, r1
10009862:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009864:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10009866:	e01c      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009868:	4a0f      	ldr	r2, [pc, #60]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
1000986a:	6911      	ldr	r1, [r2, #16]
1000986c:	4b1c      	ldr	r3, [pc, #112]	; (100098e0 <system_clock_peripheral_disable+0x344>)
1000986e:	400b      	ands	r3, r1
10009870:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009872:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009874:	e015      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009876:	4a0c      	ldr	r2, [pc, #48]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009878:	7d13      	ldrb	r3, [r2, #20]
1000987a:	2101      	movs	r1, #1
1000987c:	438b      	bics	r3, r1
1000987e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009880:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
10009882:	e00e      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009884:	4a08      	ldr	r2, [pc, #32]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009886:	7d13      	ldrb	r3, [r2, #20]
10009888:	2102      	movs	r1, #2
1000988a:	438b      	bics	r3, r1
1000988c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000988e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
10009890:	e007      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009892:	4a05      	ldr	r2, [pc, #20]	; (100098a8 <system_clock_peripheral_disable+0x30c>)
10009894:	7d13      	ldrb	r3, [r2, #20]
10009896:	2104      	movs	r1, #4
10009898:	438b      	bics	r3, r1
1000989a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000989c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000989e:	e000      	b.n	100098a2 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
100098a0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
100098a2:	bd00      	pop	{pc}
100098a4:	1000a060 	.word	0x1000a060
100098a8:	4000b000 	.word	0x4000b000
100098ac:	fffffeff 	.word	0xfffffeff
100098b0:	fffff7ff 	.word	0xfffff7ff
100098b4:	ffffefff 	.word	0xffffefff
100098b8:	ffffdfff 	.word	0xffffdfff
100098bc:	ffffbfff 	.word	0xffffbfff
100098c0:	ffff7fff 	.word	0xffff7fff
100098c4:	fffeffff 	.word	0xfffeffff
100098c8:	fffdffff 	.word	0xfffdffff
100098cc:	fffbffff 	.word	0xfffbffff
100098d0:	fff7ffff 	.word	0xfff7ffff
100098d4:	ffefffff 	.word	0xffefffff
100098d8:	ffdfffff 	.word	0xffdfffff
100098dc:	ffbfffff 	.word	0xffbfffff
100098e0:	ff7fffff 	.word	0xff7fffff
100098e4:	feffffff 	.word	0xfeffffff
100098e8:	fdffffff 	.word	0xfdffffff
100098ec:	fbffffff 	.word	0xfbffffff
100098f0:	f7ffffff 	.word	0xf7ffffff
100098f4:	efffffff 	.word	0xefffffff
100098f8:	dfffffff 	.word	0xdfffffff
100098fc:	bfffffff 	.word	0xbfffffff
10009900:	fffffdff 	.word	0xfffffdff
10009904:	fffffbff 	.word	0xfffffbff

10009908 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10009908:	b500      	push	{lr}
	switch (peripheral) {
1000990a:	2843      	cmp	r0, #67	; 0x43
1000990c:	d900      	bls.n	10009910 <system_peripheral_reset+0x8>
1000990e:	e223      	b.n	10009d58 <system_peripheral_reset+0x450>
10009910:	0080      	lsls	r0, r0, #2
10009912:	4be0      	ldr	r3, [pc, #896]	; (10009c94 <system_peripheral_reset+0x38c>)
10009914:	581b      	ldr	r3, [r3, r0]
10009916:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009918:	4bdf      	ldr	r3, [pc, #892]	; (10009c98 <system_peripheral_reset+0x390>)
1000991a:	6859      	ldr	r1, [r3, #4]
1000991c:	2202      	movs	r2, #2
1000991e:	4391      	bics	r1, r2
10009920:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009922:	6859      	ldr	r1, [r3, #4]
10009924:	430a      	orrs	r2, r1
10009926:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009928:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000992a:	e216      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000992c:	4bda      	ldr	r3, [pc, #872]	; (10009c98 <system_peripheral_reset+0x390>)
1000992e:	6859      	ldr	r1, [r3, #4]
10009930:	2204      	movs	r2, #4
10009932:	4391      	bics	r1, r2
10009934:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009936:	6859      	ldr	r1, [r3, #4]
10009938:	430a      	orrs	r2, r1
1000993a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000993c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000993e:	e20c      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009940:	4bd5      	ldr	r3, [pc, #852]	; (10009c98 <system_peripheral_reset+0x390>)
10009942:	6859      	ldr	r1, [r3, #4]
10009944:	2208      	movs	r2, #8
10009946:	4391      	bics	r1, r2
10009948:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000994a:	6859      	ldr	r1, [r3, #4]
1000994c:	430a      	orrs	r2, r1
1000994e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009950:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
10009952:	e202      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009954:	4bd0      	ldr	r3, [pc, #832]	; (10009c98 <system_peripheral_reset+0x390>)
10009956:	6859      	ldr	r1, [r3, #4]
10009958:	2210      	movs	r2, #16
1000995a:	4391      	bics	r1, r2
1000995c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000995e:	6859      	ldr	r1, [r3, #4]
10009960:	430a      	orrs	r2, r1
10009962:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009964:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
10009966:	e1f8      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009968:	4bcb      	ldr	r3, [pc, #812]	; (10009c98 <system_peripheral_reset+0x390>)
1000996a:	6859      	ldr	r1, [r3, #4]
1000996c:	2220      	movs	r2, #32
1000996e:	4391      	bics	r1, r2
10009970:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009972:	6859      	ldr	r1, [r3, #4]
10009974:	430a      	orrs	r2, r1
10009976:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009978:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000997a:	e1ee      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000997c:	4bc6      	ldr	r3, [pc, #792]	; (10009c98 <system_peripheral_reset+0x390>)
1000997e:	6859      	ldr	r1, [r3, #4]
10009980:	2240      	movs	r2, #64	; 0x40
10009982:	4391      	bics	r1, r2
10009984:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009986:	6859      	ldr	r1, [r3, #4]
10009988:	430a      	orrs	r2, r1
1000998a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000998c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000998e:	e1e4      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009990:	4bc1      	ldr	r3, [pc, #772]	; (10009c98 <system_peripheral_reset+0x390>)
10009992:	6859      	ldr	r1, [r3, #4]
10009994:	2280      	movs	r2, #128	; 0x80
10009996:	4391      	bics	r1, r2
10009998:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000999a:	6859      	ldr	r1, [r3, #4]
1000999c:	430a      	orrs	r2, r1
1000999e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099a0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
100099a2:	e1da      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100099a4:	4bbc      	ldr	r3, [pc, #752]	; (10009c98 <system_peripheral_reset+0x390>)
100099a6:	6859      	ldr	r1, [r3, #4]
100099a8:	4abc      	ldr	r2, [pc, #752]	; (10009c9c <system_peripheral_reset+0x394>)
100099aa:	400a      	ands	r2, r1
100099ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100099ae:	685a      	ldr	r2, [r3, #4]
100099b0:	2180      	movs	r1, #128	; 0x80
100099b2:	0049      	lsls	r1, r1, #1
100099b4:	430a      	orrs	r2, r1
100099b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099b8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
100099ba:	e1ce      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100099bc:	4bb6      	ldr	r3, [pc, #728]	; (10009c98 <system_peripheral_reset+0x390>)
100099be:	6859      	ldr	r1, [r3, #4]
100099c0:	4ab7      	ldr	r2, [pc, #732]	; (10009ca0 <system_peripheral_reset+0x398>)
100099c2:	400a      	ands	r2, r1
100099c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100099c6:	685a      	ldr	r2, [r3, #4]
100099c8:	2180      	movs	r1, #128	; 0x80
100099ca:	0089      	lsls	r1, r1, #2
100099cc:	430a      	orrs	r2, r1
100099ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099d0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
100099d2:	e1c2      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100099d4:	4bb0      	ldr	r3, [pc, #704]	; (10009c98 <system_peripheral_reset+0x390>)
100099d6:	6859      	ldr	r1, [r3, #4]
100099d8:	4ab2      	ldr	r2, [pc, #712]	; (10009ca4 <system_peripheral_reset+0x39c>)
100099da:	400a      	ands	r2, r1
100099dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100099de:	685a      	ldr	r2, [r3, #4]
100099e0:	2180      	movs	r1, #128	; 0x80
100099e2:	00c9      	lsls	r1, r1, #3
100099e4:	430a      	orrs	r2, r1
100099e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099e8:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
100099ea:	e1b6      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100099ec:	4baa      	ldr	r3, [pc, #680]	; (10009c98 <system_peripheral_reset+0x390>)
100099ee:	6859      	ldr	r1, [r3, #4]
100099f0:	4aad      	ldr	r2, [pc, #692]	; (10009ca8 <system_peripheral_reset+0x3a0>)
100099f2:	400a      	ands	r2, r1
100099f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100099f6:	685a      	ldr	r2, [r3, #4]
100099f8:	2180      	movs	r1, #128	; 0x80
100099fa:	0109      	lsls	r1, r1, #4
100099fc:	430a      	orrs	r2, r1
100099fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a00:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
10009a02:	e1aa      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009a04:	4ba4      	ldr	r3, [pc, #656]	; (10009c98 <system_peripheral_reset+0x390>)
10009a06:	6859      	ldr	r1, [r3, #4]
10009a08:	4aa8      	ldr	r2, [pc, #672]	; (10009cac <system_peripheral_reset+0x3a4>)
10009a0a:	400a      	ands	r2, r1
10009a0c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a0e:	685a      	ldr	r2, [r3, #4]
10009a10:	2180      	movs	r1, #128	; 0x80
10009a12:	0149      	lsls	r1, r1, #5
10009a14:	430a      	orrs	r2, r1
10009a16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a18:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
10009a1a:	e19e      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009a1c:	4b9e      	ldr	r3, [pc, #632]	; (10009c98 <system_peripheral_reset+0x390>)
10009a1e:	6859      	ldr	r1, [r3, #4]
10009a20:	4aa3      	ldr	r2, [pc, #652]	; (10009cb0 <system_peripheral_reset+0x3a8>)
10009a22:	400a      	ands	r2, r1
10009a24:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a26:	685a      	ldr	r2, [r3, #4]
10009a28:	2180      	movs	r1, #128	; 0x80
10009a2a:	0189      	lsls	r1, r1, #6
10009a2c:	430a      	orrs	r2, r1
10009a2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a30:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
10009a32:	e192      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009a34:	4b98      	ldr	r3, [pc, #608]	; (10009c98 <system_peripheral_reset+0x390>)
10009a36:	6859      	ldr	r1, [r3, #4]
10009a38:	4a9e      	ldr	r2, [pc, #632]	; (10009cb4 <system_peripheral_reset+0x3ac>)
10009a3a:	400a      	ands	r2, r1
10009a3c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a3e:	685a      	ldr	r2, [r3, #4]
10009a40:	2180      	movs	r1, #128	; 0x80
10009a42:	01c9      	lsls	r1, r1, #7
10009a44:	430a      	orrs	r2, r1
10009a46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a48:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
10009a4a:	e186      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009a4c:	4b92      	ldr	r3, [pc, #584]	; (10009c98 <system_peripheral_reset+0x390>)
10009a4e:	6859      	ldr	r1, [r3, #4]
10009a50:	4a99      	ldr	r2, [pc, #612]	; (10009cb8 <system_peripheral_reset+0x3b0>)
10009a52:	400a      	ands	r2, r1
10009a54:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a56:	685a      	ldr	r2, [r3, #4]
10009a58:	2180      	movs	r1, #128	; 0x80
10009a5a:	0209      	lsls	r1, r1, #8
10009a5c:	430a      	orrs	r2, r1
10009a5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a60:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
10009a62:	e17a      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009a64:	4b8c      	ldr	r3, [pc, #560]	; (10009c98 <system_peripheral_reset+0x390>)
10009a66:	6859      	ldr	r1, [r3, #4]
10009a68:	4a94      	ldr	r2, [pc, #592]	; (10009cbc <system_peripheral_reset+0x3b4>)
10009a6a:	400a      	ands	r2, r1
10009a6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a6e:	685a      	ldr	r2, [r3, #4]
10009a70:	2180      	movs	r1, #128	; 0x80
10009a72:	0249      	lsls	r1, r1, #9
10009a74:	430a      	orrs	r2, r1
10009a76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a78:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
10009a7a:	e16e      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009a7c:	4b86      	ldr	r3, [pc, #536]	; (10009c98 <system_peripheral_reset+0x390>)
10009a7e:	6859      	ldr	r1, [r3, #4]
10009a80:	4a8f      	ldr	r2, [pc, #572]	; (10009cc0 <system_peripheral_reset+0x3b8>)
10009a82:	400a      	ands	r2, r1
10009a84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a86:	685a      	ldr	r2, [r3, #4]
10009a88:	2180      	movs	r1, #128	; 0x80
10009a8a:	0289      	lsls	r1, r1, #10
10009a8c:	430a      	orrs	r2, r1
10009a8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a90:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
10009a92:	e162      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009a94:	4b80      	ldr	r3, [pc, #512]	; (10009c98 <system_peripheral_reset+0x390>)
10009a96:	6859      	ldr	r1, [r3, #4]
10009a98:	4a8a      	ldr	r2, [pc, #552]	; (10009cc4 <system_peripheral_reset+0x3bc>)
10009a9a:	400a      	ands	r2, r1
10009a9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009a9e:	685a      	ldr	r2, [r3, #4]
10009aa0:	2180      	movs	r1, #128	; 0x80
10009aa2:	02c9      	lsls	r1, r1, #11
10009aa4:	430a      	orrs	r2, r1
10009aa6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009aa8:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10009aaa:	e156      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009aac:	4b7a      	ldr	r3, [pc, #488]	; (10009c98 <system_peripheral_reset+0x390>)
10009aae:	6859      	ldr	r1, [r3, #4]
10009ab0:	4a85      	ldr	r2, [pc, #532]	; (10009cc8 <system_peripheral_reset+0x3c0>)
10009ab2:	400a      	ands	r2, r1
10009ab4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009ab6:	685a      	ldr	r2, [r3, #4]
10009ab8:	2180      	movs	r1, #128	; 0x80
10009aba:	0309      	lsls	r1, r1, #12
10009abc:	430a      	orrs	r2, r1
10009abe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ac0:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10009ac2:	e14a      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009ac4:	4b74      	ldr	r3, [pc, #464]	; (10009c98 <system_peripheral_reset+0x390>)
10009ac6:	6859      	ldr	r1, [r3, #4]
10009ac8:	4a80      	ldr	r2, [pc, #512]	; (10009ccc <system_peripheral_reset+0x3c4>)
10009aca:	400a      	ands	r2, r1
10009acc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009ace:	685a      	ldr	r2, [r3, #4]
10009ad0:	2180      	movs	r1, #128	; 0x80
10009ad2:	0349      	lsls	r1, r1, #13
10009ad4:	430a      	orrs	r2, r1
10009ad6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ad8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10009ada:	e13e      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009adc:	4b6e      	ldr	r3, [pc, #440]	; (10009c98 <system_peripheral_reset+0x390>)
10009ade:	6859      	ldr	r1, [r3, #4]
10009ae0:	4a7b      	ldr	r2, [pc, #492]	; (10009cd0 <system_peripheral_reset+0x3c8>)
10009ae2:	400a      	ands	r2, r1
10009ae4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009ae6:	685a      	ldr	r2, [r3, #4]
10009ae8:	2180      	movs	r1, #128	; 0x80
10009aea:	0389      	lsls	r1, r1, #14
10009aec:	430a      	orrs	r2, r1
10009aee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009af0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10009af2:	e132      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009af4:	4b68      	ldr	r3, [pc, #416]	; (10009c98 <system_peripheral_reset+0x390>)
10009af6:	6859      	ldr	r1, [r3, #4]
10009af8:	4a76      	ldr	r2, [pc, #472]	; (10009cd4 <system_peripheral_reset+0x3cc>)
10009afa:	400a      	ands	r2, r1
10009afc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009afe:	685a      	ldr	r2, [r3, #4]
10009b00:	2180      	movs	r1, #128	; 0x80
10009b02:	03c9      	lsls	r1, r1, #15
10009b04:	430a      	orrs	r2, r1
10009b06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b08:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10009b0a:	e126      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b0c:	4b62      	ldr	r3, [pc, #392]	; (10009c98 <system_peripheral_reset+0x390>)
10009b0e:	6859      	ldr	r1, [r3, #4]
10009b10:	4a71      	ldr	r2, [pc, #452]	; (10009cd8 <system_peripheral_reset+0x3d0>)
10009b12:	400a      	ands	r2, r1
10009b14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b16:	685a      	ldr	r2, [r3, #4]
10009b18:	2180      	movs	r1, #128	; 0x80
10009b1a:	0409      	lsls	r1, r1, #16
10009b1c:	430a      	orrs	r2, r1
10009b1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b20:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10009b22:	e11a      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b24:	4b5c      	ldr	r3, [pc, #368]	; (10009c98 <system_peripheral_reset+0x390>)
10009b26:	6859      	ldr	r1, [r3, #4]
10009b28:	4a6c      	ldr	r2, [pc, #432]	; (10009cdc <system_peripheral_reset+0x3d4>)
10009b2a:	400a      	ands	r2, r1
10009b2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b2e:	685a      	ldr	r2, [r3, #4]
10009b30:	2180      	movs	r1, #128	; 0x80
10009b32:	0449      	lsls	r1, r1, #17
10009b34:	430a      	orrs	r2, r1
10009b36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b38:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10009b3a:	e10e      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b3c:	4b56      	ldr	r3, [pc, #344]	; (10009c98 <system_peripheral_reset+0x390>)
10009b3e:	6859      	ldr	r1, [r3, #4]
10009b40:	4a67      	ldr	r2, [pc, #412]	; (10009ce0 <system_peripheral_reset+0x3d8>)
10009b42:	400a      	ands	r2, r1
10009b44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b46:	685a      	ldr	r2, [r3, #4]
10009b48:	2180      	movs	r1, #128	; 0x80
10009b4a:	0489      	lsls	r1, r1, #18
10009b4c:	430a      	orrs	r2, r1
10009b4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b50:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
10009b52:	e102      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b54:	4b50      	ldr	r3, [pc, #320]	; (10009c98 <system_peripheral_reset+0x390>)
10009b56:	6859      	ldr	r1, [r3, #4]
10009b58:	4a62      	ldr	r2, [pc, #392]	; (10009ce4 <system_peripheral_reset+0x3dc>)
10009b5a:	400a      	ands	r2, r1
10009b5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b5e:	685a      	ldr	r2, [r3, #4]
10009b60:	2180      	movs	r1, #128	; 0x80
10009b62:	04c9      	lsls	r1, r1, #19
10009b64:	430a      	orrs	r2, r1
10009b66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b68:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
10009b6a:	e0f6      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b6c:	4b4a      	ldr	r3, [pc, #296]	; (10009c98 <system_peripheral_reset+0x390>)
10009b6e:	6859      	ldr	r1, [r3, #4]
10009b70:	4a5d      	ldr	r2, [pc, #372]	; (10009ce8 <system_peripheral_reset+0x3e0>)
10009b72:	400a      	ands	r2, r1
10009b74:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b76:	685a      	ldr	r2, [r3, #4]
10009b78:	2180      	movs	r1, #128	; 0x80
10009b7a:	0509      	lsls	r1, r1, #20
10009b7c:	430a      	orrs	r2, r1
10009b7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b80:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
10009b82:	e0ea      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b84:	4b44      	ldr	r3, [pc, #272]	; (10009c98 <system_peripheral_reset+0x390>)
10009b86:	6859      	ldr	r1, [r3, #4]
10009b88:	4a58      	ldr	r2, [pc, #352]	; (10009cec <system_peripheral_reset+0x3e4>)
10009b8a:	400a      	ands	r2, r1
10009b8c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b8e:	685a      	ldr	r2, [r3, #4]
10009b90:	2180      	movs	r1, #128	; 0x80
10009b92:	0549      	lsls	r1, r1, #21
10009b94:	430a      	orrs	r2, r1
10009b96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b98:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
10009b9a:	e0de      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b9c:	4b3e      	ldr	r3, [pc, #248]	; (10009c98 <system_peripheral_reset+0x390>)
10009b9e:	6859      	ldr	r1, [r3, #4]
10009ba0:	4a53      	ldr	r2, [pc, #332]	; (10009cf0 <system_peripheral_reset+0x3e8>)
10009ba2:	400a      	ands	r2, r1
10009ba4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009ba6:	685a      	ldr	r2, [r3, #4]
10009ba8:	2180      	movs	r1, #128	; 0x80
10009baa:	0589      	lsls	r1, r1, #22
10009bac:	430a      	orrs	r2, r1
10009bae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bb0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
10009bb2:	e0d2      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009bb4:	4b38      	ldr	r3, [pc, #224]	; (10009c98 <system_peripheral_reset+0x390>)
10009bb6:	6859      	ldr	r1, [r3, #4]
10009bb8:	4a4e      	ldr	r2, [pc, #312]	; (10009cf4 <system_peripheral_reset+0x3ec>)
10009bba:	400a      	ands	r2, r1
10009bbc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009bbe:	685a      	ldr	r2, [r3, #4]
10009bc0:	2180      	movs	r1, #128	; 0x80
10009bc2:	05c9      	lsls	r1, r1, #23
10009bc4:	430a      	orrs	r2, r1
10009bc6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bc8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
10009bca:	e0c6      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009bcc:	4a32      	ldr	r2, [pc, #200]	; (10009c98 <system_peripheral_reset+0x390>)
10009bce:	6853      	ldr	r3, [r2, #4]
10009bd0:	005b      	lsls	r3, r3, #1
10009bd2:	085b      	lsrs	r3, r3, #1
10009bd4:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009bd6:	6853      	ldr	r3, [r2, #4]
10009bd8:	2180      	movs	r1, #128	; 0x80
10009bda:	0609      	lsls	r1, r1, #24
10009bdc:	430b      	orrs	r3, r1
10009bde:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009be0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
10009be2:	e0ba      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009be4:	4b2c      	ldr	r3, [pc, #176]	; (10009c98 <system_peripheral_reset+0x390>)
10009be6:	891a      	ldrh	r2, [r3, #8]
10009be8:	2101      	movs	r1, #1
10009bea:	438a      	bics	r2, r1
10009bec:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009bee:	8919      	ldrh	r1, [r3, #8]
10009bf0:	2201      	movs	r2, #1
10009bf2:	430a      	orrs	r2, r1
10009bf4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bf6:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
10009bf8:	e0af      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009bfa:	4b27      	ldr	r3, [pc, #156]	; (10009c98 <system_peripheral_reset+0x390>)
10009bfc:	891a      	ldrh	r2, [r3, #8]
10009bfe:	2102      	movs	r1, #2
10009c00:	438a      	bics	r2, r1
10009c02:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009c04:	8919      	ldrh	r1, [r3, #8]
10009c06:	2202      	movs	r2, #2
10009c08:	430a      	orrs	r2, r1
10009c0a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c0c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
10009c0e:	e0a4      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009c10:	4b21      	ldr	r3, [pc, #132]	; (10009c98 <system_peripheral_reset+0x390>)
10009c12:	891a      	ldrh	r2, [r3, #8]
10009c14:	2104      	movs	r1, #4
10009c16:	438a      	bics	r2, r1
10009c18:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009c1a:	8919      	ldrh	r1, [r3, #8]
10009c1c:	2204      	movs	r2, #4
10009c1e:	430a      	orrs	r2, r1
10009c20:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c22:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
10009c24:	e099      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009c26:	4b1c      	ldr	r3, [pc, #112]	; (10009c98 <system_peripheral_reset+0x390>)
10009c28:	891a      	ldrh	r2, [r3, #8]
10009c2a:	2108      	movs	r1, #8
10009c2c:	438a      	bics	r2, r1
10009c2e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009c30:	8919      	ldrh	r1, [r3, #8]
10009c32:	2208      	movs	r2, #8
10009c34:	430a      	orrs	r2, r1
10009c36:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c38:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10009c3a:	e08e      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009c3c:	4b16      	ldr	r3, [pc, #88]	; (10009c98 <system_peripheral_reset+0x390>)
10009c3e:	891a      	ldrh	r2, [r3, #8]
10009c40:	2110      	movs	r1, #16
10009c42:	438a      	bics	r2, r1
10009c44:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009c46:	8919      	ldrh	r1, [r3, #8]
10009c48:	2210      	movs	r2, #16
10009c4a:	430a      	orrs	r2, r1
10009c4c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c4e:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10009c50:	e083      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009c52:	4b11      	ldr	r3, [pc, #68]	; (10009c98 <system_peripheral_reset+0x390>)
10009c54:	891a      	ldrh	r2, [r3, #8]
10009c56:	2120      	movs	r1, #32
10009c58:	438a      	bics	r2, r1
10009c5a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009c5c:	8919      	ldrh	r1, [r3, #8]
10009c5e:	2220      	movs	r2, #32
10009c60:	430a      	orrs	r2, r1
10009c62:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c64:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10009c66:	e078      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009c68:	4b0b      	ldr	r3, [pc, #44]	; (10009c98 <system_peripheral_reset+0x390>)
10009c6a:	891a      	ldrh	r2, [r3, #8]
10009c6c:	2140      	movs	r1, #64	; 0x40
10009c6e:	438a      	bics	r2, r1
10009c70:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009c72:	8919      	ldrh	r1, [r3, #8]
10009c74:	2240      	movs	r2, #64	; 0x40
10009c76:	430a      	orrs	r2, r1
10009c78:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c7a:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10009c7c:	e06d      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009c7e:	4b06      	ldr	r3, [pc, #24]	; (10009c98 <system_peripheral_reset+0x390>)
10009c80:	891a      	ldrh	r2, [r3, #8]
10009c82:	2180      	movs	r1, #128	; 0x80
10009c84:	438a      	bics	r2, r1
10009c86:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009c88:	8919      	ldrh	r1, [r3, #8]
10009c8a:	2280      	movs	r2, #128	; 0x80
10009c8c:	430a      	orrs	r2, r1
10009c8e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c90:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
10009c92:	e062      	b.n	10009d5a <system_peripheral_reset+0x452>
10009c94:	1000a138 	.word	0x1000a138
10009c98:	4000b000 	.word	0x4000b000
10009c9c:	fffffeff 	.word	0xfffffeff
10009ca0:	fffffdff 	.word	0xfffffdff
10009ca4:	fffffbff 	.word	0xfffffbff
10009ca8:	fffff7ff 	.word	0xfffff7ff
10009cac:	ffffefff 	.word	0xffffefff
10009cb0:	ffffdfff 	.word	0xffffdfff
10009cb4:	ffffbfff 	.word	0xffffbfff
10009cb8:	ffff7fff 	.word	0xffff7fff
10009cbc:	fffeffff 	.word	0xfffeffff
10009cc0:	fffdffff 	.word	0xfffdffff
10009cc4:	fffbffff 	.word	0xfffbffff
10009cc8:	fff7ffff 	.word	0xfff7ffff
10009ccc:	ffefffff 	.word	0xffefffff
10009cd0:	ffdfffff 	.word	0xffdfffff
10009cd4:	ffbfffff 	.word	0xffbfffff
10009cd8:	ff7fffff 	.word	0xff7fffff
10009cdc:	feffffff 	.word	0xfeffffff
10009ce0:	fdffffff 	.word	0xfdffffff
10009ce4:	fbffffff 	.word	0xfbffffff
10009ce8:	f7ffffff 	.word	0xf7ffffff
10009cec:	efffffff 	.word	0xefffffff
10009cf0:	dfffffff 	.word	0xdfffffff
10009cf4:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009cf8:	4b18      	ldr	r3, [pc, #96]	; (10009d5c <system_peripheral_reset+0x454>)
10009cfa:	8919      	ldrh	r1, [r3, #8]
10009cfc:	4a18      	ldr	r2, [pc, #96]	; (10009d60 <system_peripheral_reset+0x458>)
10009cfe:	400a      	ands	r2, r1
10009d00:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009d02:	8919      	ldrh	r1, [r3, #8]
10009d04:	2280      	movs	r2, #128	; 0x80
10009d06:	0052      	lsls	r2, r2, #1
10009d08:	430a      	orrs	r2, r1
10009d0a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d0c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
10009d0e:	e024      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009d10:	4b12      	ldr	r3, [pc, #72]	; (10009d5c <system_peripheral_reset+0x454>)
10009d12:	8919      	ldrh	r1, [r3, #8]
10009d14:	4a13      	ldr	r2, [pc, #76]	; (10009d64 <system_peripheral_reset+0x45c>)
10009d16:	400a      	ands	r2, r1
10009d18:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009d1a:	8919      	ldrh	r1, [r3, #8]
10009d1c:	2280      	movs	r2, #128	; 0x80
10009d1e:	0092      	lsls	r2, r2, #2
10009d20:	430a      	orrs	r2, r1
10009d22:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d24:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10009d26:	e018      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009d28:	4b0c      	ldr	r3, [pc, #48]	; (10009d5c <system_peripheral_reset+0x454>)
10009d2a:	8919      	ldrh	r1, [r3, #8]
10009d2c:	4a0e      	ldr	r2, [pc, #56]	; (10009d68 <system_peripheral_reset+0x460>)
10009d2e:	400a      	ands	r2, r1
10009d30:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009d32:	8919      	ldrh	r1, [r3, #8]
10009d34:	2280      	movs	r2, #128	; 0x80
10009d36:	00d2      	lsls	r2, r2, #3
10009d38:	430a      	orrs	r2, r1
10009d3a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d3c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
10009d3e:	e00c      	b.n	10009d5a <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009d40:	4b06      	ldr	r3, [pc, #24]	; (10009d5c <system_peripheral_reset+0x454>)
10009d42:	8919      	ldrh	r1, [r3, #8]
10009d44:	4a09      	ldr	r2, [pc, #36]	; (10009d6c <system_peripheral_reset+0x464>)
10009d46:	400a      	ands	r2, r1
10009d48:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009d4a:	8919      	ldrh	r1, [r3, #8]
10009d4c:	2280      	movs	r2, #128	; 0x80
10009d4e:	0112      	lsls	r2, r2, #4
10009d50:	430a      	orrs	r2, r1
10009d52:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d54:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
10009d56:	e000      	b.n	10009d5a <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009d58:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009d5a:	bd00      	pop	{pc}
10009d5c:	4000b000 	.word	0x4000b000
10009d60:	fffffeff 	.word	0xfffffeff
10009d64:	fffffdff 	.word	0xfffffdff
10009d68:	fffffbff 	.word	0xfffffbff
10009d6c:	fffff7ff 	.word	0xfffff7ff

10009d70 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10009d70:	2380      	movs	r3, #128	; 0x80
10009d72:	04db      	lsls	r3, r3, #19
10009d74:	469c      	mov	ip, r3
10009d76:	4460      	add	r0, ip
10009d78:	0080      	lsls	r0, r0, #2
10009d7a:	6001      	str	r1, [r0, #0]
}
10009d7c:	4770      	bx	lr
10009d7e:	46c0      	nop			; (mov r8, r8)

10009d80 <timer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TIMER module configuration structure to set
 */
void timer_get_config_defaults(struct timer_config *config)
{
	config->reload_value = 0;
10009d80:	2300      	movs	r3, #0
10009d82:	6003      	str	r3, [r0, #0]
	config->interrupt_enable = true;
10009d84:	3301      	adds	r3, #1
10009d86:	7103      	strb	r3, [r0, #4]
}
10009d88:	4770      	bx	lr
10009d8a:	46c0      	nop			; (mov r8, r8)

10009d8c <timer_clear_interrupt_status>:
 *
 * Clear the TIMER0 module interrupt status
 */
void timer_clear_interrupt_status(void)
{
	TIMER0->INTSTATUSCLEAR.reg = 1;
10009d8c:	2201      	movs	r2, #1
10009d8e:	2380      	movs	r3, #128	; 0x80
10009d90:	05db      	lsls	r3, r3, #23
10009d92:	731a      	strb	r2, [r3, #12]
	/* Wait for operation finish */
	while (TIMER0->INTSTATUSCLEAR.reg);
10009d94:	001a      	movs	r2, r3
10009d96:	7b13      	ldrb	r3, [r2, #12]
10009d98:	2b00      	cmp	r3, #0
10009d9a:	d1fc      	bne.n	10009d96 <timer_clear_interrupt_status+0xa>
}
10009d9c:	4770      	bx	lr
10009d9e:	46c0      	nop			; (mov r8, r8)

10009da0 <timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void timer_isr_handler(void)
{
10009da0:	b510      	push	{r4, lr}
 *
 * \retval The status of module
 */
uint32_t timer_get_interrupt_status(void)
{
	return TIMER0->INTSTATUSCLEAR.reg;
10009da2:	2380      	movs	r3, #128	; 0x80
10009da4:	05db      	lsls	r3, r3, #23
10009da6:	7b1b      	ldrb	r3, [r3, #12]
 * Timer ISR handler.
 *
 */
static void timer_isr_handler(void)
{
	if (timer_get_interrupt_status()) {
10009da8:	2b00      	cmp	r3, #0
10009daa:	d006      	beq.n	10009dba <timer_isr_handler+0x1a>
		timer_clear_interrupt_status();
10009dac:	4b03      	ldr	r3, [pc, #12]	; (10009dbc <timer_isr_handler+0x1c>)
10009dae:	4798      	blx	r3
		
		if (timer_callback) {
10009db0:	4b03      	ldr	r3, [pc, #12]	; (10009dc0 <timer_isr_handler+0x20>)
10009db2:	681b      	ldr	r3, [r3, #0]
10009db4:	2b00      	cmp	r3, #0
10009db6:	d000      	beq.n	10009dba <timer_isr_handler+0x1a>
			timer_callback();
10009db8:	4798      	blx	r3
		}
	}
}
10009dba:	bd10      	pop	{r4, pc}
10009dbc:	10009d8d 	.word	0x10009d8d
10009dc0:	1000a290 	.word	0x1000a290

10009dc4 <timer_enable>:
 *
 * Enable the TIMER0 module
 */
void timer_enable(void)
{
	TIMER0->CTRL.reg |= TIMER_CTRL_ENABLE;
10009dc4:	2280      	movs	r2, #128	; 0x80
10009dc6:	05d2      	lsls	r2, r2, #23
10009dc8:	7811      	ldrb	r1, [r2, #0]
10009dca:	2301      	movs	r3, #1
10009dcc:	430b      	orrs	r3, r1
10009dce:	7013      	strb	r3, [r2, #0]
}
10009dd0:	4770      	bx	lr
10009dd2:	46c0      	nop			; (mov r8, r8)

10009dd4 <timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void timer_register_callback(timer_callback_t fun)
{
	timer_callback = fun; 
10009dd4:	4b01      	ldr	r3, [pc, #4]	; (10009ddc <timer_register_callback+0x8>)
10009dd6:	6018      	str	r0, [r3, #0]
}
10009dd8:	4770      	bx	lr
10009dda:	46c0      	nop			; (mov r8, r8)
10009ddc:	1000a290 	.word	0x1000a290

10009de0 <timer_init>:
 * \param[in]     config       Pointer to the TIMER configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void timer_init(const struct timer_config *config)
{
10009de0:	b510      	push	{r4, lr}
10009de2:	0004      	movs	r4, r0
	/* Global reset */
	system_peripheral_reset(PERIPHERAL_TIMER);
10009de4:	2006      	movs	r0, #6
10009de6:	4b09      	ldr	r3, [pc, #36]	; (10009e0c <timer_init+0x2c>)
10009de8:	4798      	blx	r3

	TIMER0->CTRL.reg = config->interrupt_enable << TIMER_CTRL_INTERRUPT_ENABLE_Pos;
10009dea:	7923      	ldrb	r3, [r4, #4]
10009dec:	00db      	lsls	r3, r3, #3
10009dee:	b2db      	uxtb	r3, r3
10009df0:	2280      	movs	r2, #128	; 0x80
10009df2:	05d2      	lsls	r2, r2, #23
10009df4:	7013      	strb	r3, [r2, #0]
	TIMER0->RELOAD.reg = config->reload_value;
10009df6:	6823      	ldr	r3, [r4, #0]
10009df8:	6093      	str	r3, [r2, #8]
	
	timer_callback = NULL;
10009dfa:	2200      	movs	r2, #0
10009dfc:	4b04      	ldr	r3, [pc, #16]	; (10009e10 <timer_init+0x30>)
10009dfe:	601a      	str	r2, [r3, #0]
	system_register_isr(RAM_ISR_TABLE_TIMER0_INDEX, (uint32_t)timer_isr_handler);
10009e00:	4904      	ldr	r1, [pc, #16]	; (10009e14 <timer_init+0x34>)
10009e02:	202a      	movs	r0, #42	; 0x2a
10009e04:	4b04      	ldr	r3, [pc, #16]	; (10009e18 <timer_init+0x38>)
10009e06:	4798      	blx	r3
10009e08:	bd10      	pop	{r4, pc}
10009e0a:	46c0      	nop			; (mov r8, r8)
10009e0c:	10009909 	.word	0x10009909
10009e10:	1000a290 	.word	0x1000a290
10009e14:	10009da1 	.word	0x10009da1
10009e18:	10009d71 	.word	0x10009d71

10009e1c <timer_callback>:

LCDSPIModule module;
uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH];

static void timer_callback(void)
{
10009e1c:	b510      	push	{r4, lr}
	gpio_pin_toggle_output_level(PIN_LP_GPIO_20);
10009e1e:	2014      	movs	r0, #20
10009e20:	4b01      	ldr	r3, [pc, #4]	; (10009e28 <timer_callback+0xc>)
10009e22:	4798      	blx	r3
}
10009e24:	bd10      	pop	{r4, pc}
10009e26:	46c0      	nop			; (mov r8, r8)
10009e28:	100087f5 	.word	0x100087f5

10009e2c <delay_us>:
	config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
	dualtimer_init(&config_dualtimer);
}

static void delay_us(uint32_t time)
{
10009e2c:	b510      	push	{r4, lr}
	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG, time*26);
10009e2e:	231a      	movs	r3, #26
10009e30:	4343      	muls	r3, r0
10009e32:	001a      	movs	r2, r3
10009e34:	2100      	movs	r1, #0
10009e36:	2000      	movs	r0, #0
10009e38:	4b03      	ldr	r3, [pc, #12]	; (10009e48 <delay_us+0x1c>)
10009e3a:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER1)){}
10009e3c:	4c03      	ldr	r4, [pc, #12]	; (10009e4c <delay_us+0x20>)
10009e3e:	2000      	movs	r0, #0
10009e40:	47a0      	blx	r4
10009e42:	2800      	cmp	r0, #0
10009e44:	d1fb      	bne.n	10009e3e <delay_us+0x12>
}
10009e46:	bd10      	pop	{r4, pc}
10009e48:	10008165 	.word	0x10008165
10009e4c:	10008151 	.word	0x10008151

10009e50 <main>:
		}
	}
}

int main(void)
{
10009e50:	b5f0      	push	{r4, r5, r6, r7, lr}
10009e52:	b089      	sub	sp, #36	; 0x24
    /* Initialize the SAM system */
    system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
10009e54:	2100      	movs	r1, #0
10009e56:	2000      	movs	r0, #0
10009e58:	4b23      	ldr	r3, [pc, #140]	; (10009ee8 <main+0x98>)
10009e5a:	4798      	blx	r3
}

static void configure_timer(void)
{
	struct timer_config config_timer;
	timer_get_config_defaults(&config_timer);
10009e5c:	ac01      	add	r4, sp, #4
10009e5e:	0020      	movs	r0, r4
10009e60:	4b22      	ldr	r3, [pc, #136]	; (10009eec <main+0x9c>)
10009e62:	4798      	blx	r3
	config_timer.reload_value = 2600000;
10009e64:	4b22      	ldr	r3, [pc, #136]	; (10009ef0 <main+0xa0>)
10009e66:	9301      	str	r3, [sp, #4]
	timer_init(&config_timer);
10009e68:	0020      	movs	r0, r4
10009e6a:	4b22      	ldr	r3, [pc, #136]	; (10009ef4 <main+0xa4>)
10009e6c:	4798      	blx	r3
	timer_enable();
10009e6e:	4b22      	ldr	r3, [pc, #136]	; (10009ef8 <main+0xa8>)
10009e70:	4798      	blx	r3
}
 static void configure_timer_callback(void)
 {
	 timer_register_callback(timer_callback);
10009e72:	4822      	ldr	r0, [pc, #136]	; (10009efc <main+0xac>)
10009e74:	4b22      	ldr	r3, [pc, #136]	; (10009f00 <main+0xb0>)
10009e76:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009e78:	2280      	movs	r2, #128	; 0x80
10009e7a:	04d2      	lsls	r2, r2, #19
10009e7c:	4b21      	ldr	r3, [pc, #132]	; (10009f04 <main+0xb4>)
10009e7e:	601a      	str	r2, [r3, #0]
 }

static void configure_gpio_pins(void)
{
	struct gpio_config config_gpio_pin;
	gpio_get_config_defaults(&config_gpio_pin);
10009e80:	0020      	movs	r0, r4
10009e82:	4b21      	ldr	r3, [pc, #132]	; (10009f08 <main+0xb8>)
10009e84:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009e86:	2301      	movs	r3, #1
10009e88:	7023      	strb	r3, [r4, #0]
	gpio_pin_set_config(PIN_LP_GPIO_16 , &config_gpio_pin);
10009e8a:	0021      	movs	r1, r4
10009e8c:	2010      	movs	r0, #16
10009e8e:	4d1f      	ldr	r5, [pc, #124]	; (10009f0c <main+0xbc>)
10009e90:	47a8      	blx	r5
	gpio_pin_set_config(PIN_LP_GPIO_20 , &config_gpio_pin);
10009e92:	0021      	movs	r1, r4
10009e94:	2014      	movs	r0, #20
10009e96:	47a8      	blx	r5
	gpio_pin_set_output_level(PIN_LP_GPIO_16, false);
10009e98:	2100      	movs	r1, #0
10009e9a:	2010      	movs	r0, #16
10009e9c:	4d1c      	ldr	r5, [pc, #112]	; (10009f10 <main+0xc0>)
10009e9e:	47a8      	blx	r5
	gpio_pin_set_output_level(PIN_LP_GPIO_20, false);
10009ea0:	2100      	movs	r1, #0
10009ea2:	2014      	movs	r0, #20
10009ea4:	47a8      	blx	r5


static void configure_dualtimer(void)
{
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
10009ea6:	0020      	movs	r0, r4
10009ea8:	4b1a      	ldr	r3, [pc, #104]	; (10009f14 <main+0xc4>)
10009eaa:	4798      	blx	r3
	config_dualtimer.timer1.load_value = 0;
10009eac:	2300      	movs	r3, #0
10009eae:	60a3      	str	r3, [r4, #8]
	config_dualtimer.timer2.load_value = 0;
10009eb0:	6163      	str	r3, [r4, #20]
	config_dualtimer.timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10009eb2:	70e3      	strb	r3, [r4, #3]
	config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009eb4:	7063      	strb	r3, [r4, #1]
	dualtimer_init(&config_dualtimer);
10009eb6:	0020      	movs	r0, r4
10009eb8:	4b17      	ldr	r3, [pc, #92]	; (10009f18 <main+0xc8>)
10009eba:	4798      	blx	r3
    system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
	configure_timer();
	configure_timer_callback();
	configure_gpio_pins();
	configure_dualtimer();
	Setup(&module);
10009ebc:	4817      	ldr	r0, [pc, #92]	; (10009f1c <main+0xcc>)
10009ebe:	4b18      	ldr	r3, [pc, #96]	; (10009f20 <main+0xd0>)
10009ec0:	4798      	blx	r3

	//delay_us(100000);
	//ClearDisplay(&module);
	//Transfer(frameBuffer,0,50,&module);
	//Display(&module);
	ClearBuffer(frameBuffer);
10009ec2:	4818      	ldr	r0, [pc, #96]	; (10009f24 <main+0xd4>)
10009ec4:	4b18      	ldr	r3, [pc, #96]	; (10009f28 <main+0xd8>)
10009ec6:	4798      	blx	r3
	//ClearDisplay(&module);
	while(1){
		ClearDisplay(&module);
10009ec8:	4e18      	ldr	r6, [pc, #96]	; (10009f2c <main+0xdc>)
		delay_us(1000000);
10009eca:	4d19      	ldr	r5, [pc, #100]	; (10009f30 <main+0xe0>)
	//Transfer(frameBuffer,0,50,&module);
	//Display(&module);
	ClearBuffer(frameBuffer);
	//ClearDisplay(&module);
	while(1){
		ClearDisplay(&module);
10009ecc:	4813      	ldr	r0, [pc, #76]	; (10009f1c <main+0xcc>)
10009ece:	47b0      	blx	r6
		delay_us(1000000);
10009ed0:	4c18      	ldr	r4, [pc, #96]	; (10009f34 <main+0xe4>)
10009ed2:	0020      	movs	r0, r4
10009ed4:	47a8      	blx	r5
		Transfer(frameBuffer,1,128,&module);
10009ed6:	4b11      	ldr	r3, [pc, #68]	; (10009f1c <main+0xcc>)
10009ed8:	2280      	movs	r2, #128	; 0x80
10009eda:	2101      	movs	r1, #1
10009edc:	4811      	ldr	r0, [pc, #68]	; (10009f24 <main+0xd4>)
10009ede:	4f16      	ldr	r7, [pc, #88]	; (10009f38 <main+0xe8>)
10009ee0:	47b8      	blx	r7
		delay_us(1000000);
10009ee2:	0020      	movs	r0, r4
10009ee4:	47a8      	blx	r5
10009ee6:	e7f1      	b.n	10009ecc <main+0x7c>
10009ee8:	100091bd 	.word	0x100091bd
10009eec:	10009d81 	.word	0x10009d81
10009ef0:	0027ac40 	.word	0x0027ac40
10009ef4:	10009de1 	.word	0x10009de1
10009ef8:	10009dc5 	.word	0x10009dc5
10009efc:	10009e1d 	.word	0x10009e1d
10009f00:	10009dd5 	.word	0x10009dd5
10009f04:	e000e100 	.word	0xe000e100
10009f08:	100085a1 	.word	0x100085a1
10009f0c:	100085b1 	.word	0x100085b1
10009f10:	10008769 	.word	0x10008769
10009f14:	1000812d 	.word	0x1000812d
10009f18:	100081b1 	.word	0x100081b1
10009f1c:	1000a2a0 	.word	0x1000a2a0
10009f20:	1000831d 	.word	0x1000831d
10009f24:	1000a2d0 	.word	0x1000a2d0
10009f28:	10008581 	.word	0x10008581
10009f2c:	10008541 	.word	0x10008541
10009f30:	10009e2d 	.word	0x10009e2d
10009f34:	000f4240 	.word	0x000f4240
10009f38:	10008465 	.word	0x10008465

10009f3c <__libc_init_array>:
10009f3c:	4b0e      	ldr	r3, [pc, #56]	; (10009f78 <__libc_init_array+0x3c>)
10009f3e:	b570      	push	{r4, r5, r6, lr}
10009f40:	2500      	movs	r5, #0
10009f42:	001e      	movs	r6, r3
10009f44:	4c0d      	ldr	r4, [pc, #52]	; (10009f7c <__libc_init_array+0x40>)
10009f46:	1ae4      	subs	r4, r4, r3
10009f48:	10a4      	asrs	r4, r4, #2
10009f4a:	42a5      	cmp	r5, r4
10009f4c:	d004      	beq.n	10009f58 <__libc_init_array+0x1c>
10009f4e:	00ab      	lsls	r3, r5, #2
10009f50:	58f3      	ldr	r3, [r6, r3]
10009f52:	4798      	blx	r3
10009f54:	3501      	adds	r5, #1
10009f56:	e7f8      	b.n	10009f4a <__libc_init_array+0xe>
10009f58:	f000 f976 	bl	1000a248 <_init>
10009f5c:	4b08      	ldr	r3, [pc, #32]	; (10009f80 <__libc_init_array+0x44>)
10009f5e:	2500      	movs	r5, #0
10009f60:	001e      	movs	r6, r3
10009f62:	4c08      	ldr	r4, [pc, #32]	; (10009f84 <__libc_init_array+0x48>)
10009f64:	1ae4      	subs	r4, r4, r3
10009f66:	10a4      	asrs	r4, r4, #2
10009f68:	42a5      	cmp	r5, r4
10009f6a:	d004      	beq.n	10009f76 <__libc_init_array+0x3a>
10009f6c:	00ab      	lsls	r3, r5, #2
10009f6e:	58f3      	ldr	r3, [r6, r3]
10009f70:	4798      	blx	r3
10009f72:	3501      	adds	r5, #1
10009f74:	e7f8      	b.n	10009f68 <__libc_init_array+0x2c>
10009f76:	bd70      	pop	{r4, r5, r6, pc}
10009f78:	1000a254 	.word	0x1000a254
10009f7c:	1000a254 	.word	0x1000a254
10009f80:	1000a254 	.word	0x1000a254
10009f84:	1000a258 	.word	0x1000a258
10009f88:	10009250 	.word	0x10009250
10009f8c:	1000925e 	.word	0x1000925e
10009f90:	1000926c 	.word	0x1000926c
10009f94:	1000927a 	.word	0x1000927a
10009f98:	10009288 	.word	0x10009288
10009f9c:	10009296 	.word	0x10009296
10009fa0:	100092a4 	.word	0x100092a4
10009fa4:	100092b4 	.word	0x100092b4
10009fa8:	100092c4 	.word	0x100092c4
10009fac:	100092d4 	.word	0x100092d4
10009fb0:	100092e4 	.word	0x100092e4
10009fb4:	100092f4 	.word	0x100092f4
10009fb8:	10009304 	.word	0x10009304
10009fbc:	10009314 	.word	0x10009314
10009fc0:	10009324 	.word	0x10009324
10009fc4:	10009334 	.word	0x10009334
10009fc8:	10009344 	.word	0x10009344
10009fcc:	10009354 	.word	0x10009354
10009fd0:	10009364 	.word	0x10009364
10009fd4:	10009374 	.word	0x10009374
10009fd8:	10009384 	.word	0x10009384
10009fdc:	10009394 	.word	0x10009394
10009fe0:	100093a4 	.word	0x100093a4
10009fe4:	100093b4 	.word	0x100093b4
10009fe8:	100093c4 	.word	0x100093c4
10009fec:	100093d4 	.word	0x100093d4
10009ff0:	100093e4 	.word	0x100093e4
10009ff4:	100093f4 	.word	0x100093f4
10009ff8:	10009402 	.word	0x10009402
10009ffc:	10009410 	.word	0x10009410
1000a000:	1000941e 	.word	0x1000941e
1000a004:	1000942c 	.word	0x1000942c
1000a008:	1000943a 	.word	0x1000943a
1000a00c:	10009448 	.word	0x10009448
1000a010:	10009456 	.word	0x10009456
1000a014:	10009464 	.word	0x10009464
1000a018:	10009474 	.word	0x10009474
1000a01c:	10009484 	.word	0x10009484
1000a020:	10009494 	.word	0x10009494
1000a024:	100094a4 	.word	0x100094a4
1000a028:	100094b4 	.word	0x100094b4
1000a02c:	100094c4 	.word	0x100094c4
1000a030:	100094d4 	.word	0x100094d4
1000a034:	100094e4 	.word	0x100094e4
1000a038:	100094f4 	.word	0x100094f4
1000a03c:	10009504 	.word	0x10009504
1000a040:	10009514 	.word	0x10009514
1000a044:	10009524 	.word	0x10009524
1000a048:	10009534 	.word	0x10009534
1000a04c:	10009544 	.word	0x10009544
1000a050:	10009554 	.word	0x10009554
1000a054:	10009564 	.word	0x10009564
1000a058:	10009572 	.word	0x10009572
1000a05c:	10009580 	.word	0x10009580
1000a060:	100095ac 	.word	0x100095ac
1000a064:	100095ba 	.word	0x100095ba
1000a068:	100095c8 	.word	0x100095c8
1000a06c:	100095d6 	.word	0x100095d6
1000a070:	100095e4 	.word	0x100095e4
1000a074:	100095f2 	.word	0x100095f2
1000a078:	10009600 	.word	0x10009600
1000a07c:	1000960e 	.word	0x1000960e
1000a080:	1000961c 	.word	0x1000961c
1000a084:	1000962a 	.word	0x1000962a
1000a088:	10009638 	.word	0x10009638
1000a08c:	10009646 	.word	0x10009646
1000a090:	10009654 	.word	0x10009654
1000a094:	10009662 	.word	0x10009662
1000a098:	10009670 	.word	0x10009670
1000a09c:	1000967e 	.word	0x1000967e
1000a0a0:	1000968c 	.word	0x1000968c
1000a0a4:	1000969a 	.word	0x1000969a
1000a0a8:	100096a8 	.word	0x100096a8
1000a0ac:	100096b6 	.word	0x100096b6
1000a0b0:	100096c4 	.word	0x100096c4
1000a0b4:	100096d2 	.word	0x100096d2
1000a0b8:	100096e0 	.word	0x100096e0
1000a0bc:	100096ee 	.word	0x100096ee
1000a0c0:	100096fc 	.word	0x100096fc
1000a0c4:	1000970a 	.word	0x1000970a
1000a0c8:	10009718 	.word	0x10009718
1000a0cc:	10009726 	.word	0x10009726
1000a0d0:	10009734 	.word	0x10009734
1000a0d4:	10009742 	.word	0x10009742
1000a0d8:	10009750 	.word	0x10009750
1000a0dc:	1000975e 	.word	0x1000975e
1000a0e0:	1000976c 	.word	0x1000976c
1000a0e4:	1000977a 	.word	0x1000977a
1000a0e8:	10009788 	.word	0x10009788
1000a0ec:	10009796 	.word	0x10009796
1000a0f0:	100097a4 	.word	0x100097a4
1000a0f4:	100097b2 	.word	0x100097b2
1000a0f8:	100097c0 	.word	0x100097c0
1000a0fc:	100097ce 	.word	0x100097ce
1000a100:	100097dc 	.word	0x100097dc
1000a104:	100097ea 	.word	0x100097ea
1000a108:	100097f8 	.word	0x100097f8
1000a10c:	10009806 	.word	0x10009806
1000a110:	10009814 	.word	0x10009814
1000a114:	10009822 	.word	0x10009822
1000a118:	10009830 	.word	0x10009830
1000a11c:	1000983e 	.word	0x1000983e
1000a120:	1000984c 	.word	0x1000984c
1000a124:	1000985a 	.word	0x1000985a
1000a128:	10009868 	.word	0x10009868
1000a12c:	10009876 	.word	0x10009876
1000a130:	10009884 	.word	0x10009884
1000a134:	10009892 	.word	0x10009892
1000a138:	1000992c 	.word	0x1000992c
1000a13c:	10009954 	.word	0x10009954
1000a140:	1000997c 	.word	0x1000997c
1000a144:	100099a4 	.word	0x100099a4
1000a148:	10009be4 	.word	0x10009be4
1000a14c:	100099d4 	.word	0x100099d4
1000a150:	100099ec 	.word	0x100099ec
1000a154:	10009a64 	.word	0x10009a64
1000a158:	10009a7c 	.word	0x10009a7c
1000a15c:	10009a04 	.word	0x10009a04
1000a160:	10009a1c 	.word	0x10009a1c
1000a164:	10009a34 	.word	0x10009a34
1000a168:	10009a4c 	.word	0x10009a4c
1000a16c:	10009a94 	.word	0x10009a94
1000a170:	10009d58 	.word	0x10009d58
1000a174:	10009d58 	.word	0x10009d58
1000a178:	10009d58 	.word	0x10009d58
1000a17c:	10009d58 	.word	0x10009d58
1000a180:	10009d58 	.word	0x10009d58
1000a184:	10009d58 	.word	0x10009d58
1000a188:	10009d58 	.word	0x10009d58
1000a18c:	10009d58 	.word	0x10009d58
1000a190:	10009b3c 	.word	0x10009b3c
1000a194:	10009b54 	.word	0x10009b54
1000a198:	10009b6c 	.word	0x10009b6c
1000a19c:	10009bfa 	.word	0x10009bfa
1000a1a0:	10009ac4 	.word	0x10009ac4
1000a1a4:	10009d58 	.word	0x10009d58
1000a1a8:	10009d58 	.word	0x10009d58
1000a1ac:	10009d58 	.word	0x10009d58
1000a1b0:	10009d58 	.word	0x10009d58
1000a1b4:	10009d58 	.word	0x10009d58
1000a1b8:	10009d58 	.word	0x10009d58
1000a1bc:	10009b84 	.word	0x10009b84
1000a1c0:	10009b9c 	.word	0x10009b9c
1000a1c4:	10009bb4 	.word	0x10009bb4
1000a1c8:	10009bcc 	.word	0x10009bcc
1000a1cc:	10009d58 	.word	0x10009d58
1000a1d0:	10009d10 	.word	0x10009d10
1000a1d4:	10009d28 	.word	0x10009d28
1000a1d8:	10009d58 	.word	0x10009d58
1000a1dc:	10009d58 	.word	0x10009d58
1000a1e0:	10009c26 	.word	0x10009c26
1000a1e4:	10009c3c 	.word	0x10009c3c
1000a1e8:	10009c52 	.word	0x10009c52
1000a1ec:	10009c68 	.word	0x10009c68
1000a1f0:	10009d58 	.word	0x10009d58
1000a1f4:	10009d58 	.word	0x10009d58
1000a1f8:	10009d58 	.word	0x10009d58
1000a1fc:	10009d58 	.word	0x10009d58
1000a200:	10009d58 	.word	0x10009d58
1000a204:	10009d58 	.word	0x10009d58
1000a208:	10009d58 	.word	0x10009d58
1000a20c:	10009d58 	.word	0x10009d58
1000a210:	10009918 	.word	0x10009918
1000a214:	10009940 	.word	0x10009940
1000a218:	10009968 	.word	0x10009968
1000a21c:	10009990 	.word	0x10009990
1000a220:	100099bc 	.word	0x100099bc
1000a224:	10009aac 	.word	0x10009aac
1000a228:	10009adc 	.word	0x10009adc
1000a22c:	10009af4 	.word	0x10009af4
1000a230:	10009b0c 	.word	0x10009b0c
1000a234:	10009b24 	.word	0x10009b24
1000a238:	10009c10 	.word	0x10009c10
1000a23c:	10009c7e 	.word	0x10009c7e
1000a240:	10009cf8 	.word	0x10009cf8
1000a244:	10009d40 	.word	0x10009d40

1000a248 <_init>:
1000a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a24a:	46c0      	nop			; (mov r8, r8)
1000a24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a24e:	bc08      	pop	{r3}
1000a250:	469e      	mov	lr, r3
1000a252:	4770      	bx	lr

1000a254 <__init_array_start>:
1000a254:	100080b1 	.word	0x100080b1

1000a258 <_fini>:
1000a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a25a:	46c0      	nop			; (mov r8, r8)
1000a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a25e:	bc08      	pop	{r3}
1000a260:	469e      	mov	lr, r3
1000a262:	4770      	bx	lr

1000a264 <__fini_array_start>:
1000a264:	10008089 	.word	0x10008089
