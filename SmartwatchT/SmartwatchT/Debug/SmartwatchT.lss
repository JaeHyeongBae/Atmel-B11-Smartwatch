
SmartwatchT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b14  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  1000ab14  1000ab14  0000ab14  2**0
                  CONTENTS
  2 .bss          00001868  1000ab14  1000ab14  0000ab14  2**2
                  ALLOC
  3 .stack        00000804  1000c37c  1000c37c  0000ab14  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0000ab14  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0000ab3c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001acd8  00000000  00000000  0000ab95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019fb  00000000  00000000  0002586d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002fb2  00000000  00000000  00027268  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000420  00000000  00000000  0002a21a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000420  00000000  00000000  0002a63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d619  00000000  00000000  0002aa5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006f83  00000000  00000000  00048073  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00123160  00000000  00000000  0004eff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000093c  00000000  00000000  00172158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1000ab14 	.word	0x1000ab14
10008068:	1000ab14 	.word	0x1000ab14
1000806c:	1000ab14 	.word	0x1000ab14
10008070:	1000c37c 	.word	0x1000c37c
10008074:	1000ab14 	.word	0x1000ab14
10008078:	1000ab18 	.word	0x1000ab18
1000807c:	1000ab18 	.word	0x1000ab18
10008080:	1000a185 	.word	0x1000a185
10008084:	10009fed 	.word	0x10009fed

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	1000ab14 	.word	0x1000ab14
100080a8:	00000000 	.word	0x00000000
100080ac:	1000ab14 	.word	0x1000ab14

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	1000ab18 	.word	0x1000ab18
100080dc:	1000ab14 	.word	0x1000ab14
100080e0:	1000ab14 	.word	0x1000ab14
100080e4:	00000000 	.word	0x00000000

100080e8 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
100080e8:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
100080ea:	4b0d      	ldr	r3, [pc, #52]	; (10008120 <dualtimer_isr_handler+0x38>)
100080ec:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
100080ee:	2b00      	cmp	r3, #0
100080f0:	d007      	beq.n	10008102 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
100080f2:	2201      	movs	r2, #1
100080f4:	4b0a      	ldr	r3, [pc, #40]	; (10008120 <dualtimer_isr_handler+0x38>)
100080f6:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
100080f8:	4b0a      	ldr	r3, [pc, #40]	; (10008124 <dualtimer_isr_handler+0x3c>)
100080fa:	681b      	ldr	r3, [r3, #0]
100080fc:	2b00      	cmp	r3, #0
100080fe:	d000      	beq.n	10008102 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008100:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008102:	2334      	movs	r3, #52	; 0x34
10008104:	4a06      	ldr	r2, [pc, #24]	; (10008120 <dualtimer_isr_handler+0x38>)
10008106:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008108:	2b00      	cmp	r3, #0
1000810a:	d007      	beq.n	1000811c <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000810c:	2101      	movs	r1, #1
1000810e:	232c      	movs	r3, #44	; 0x2c
10008110:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008112:	4b05      	ldr	r3, [pc, #20]	; (10008128 <dualtimer_isr_handler+0x40>)
10008114:	681b      	ldr	r3, [r3, #0]
10008116:	2b00      	cmp	r3, #0
10008118:	d000      	beq.n	1000811c <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000811a:	4798      	blx	r3
	}
}
1000811c:	bd10      	pop	{r4, pc}
1000811e:	46c0      	nop			; (mov r8, r8)
10008120:	40001000 	.word	0x40001000
10008124:	1000ab30 	.word	0x1000ab30
10008128:	1000ab34 	.word	0x1000ab34

1000812c <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000812c:	2301      	movs	r3, #1
1000812e:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008130:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008132:	2202      	movs	r2, #2
10008134:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008136:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008138:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000813a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000813c:	2200      	movs	r2, #0
1000813e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008140:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008142:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008144:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008146:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008148:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000814a:	7602      	strb	r2, [r0, #24]
}
1000814c:	4770      	bx	lr
1000814e:	46c0      	nop			; (mov r8, r8)

10008150 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008150:	2800      	cmp	r0, #0
10008152:	d102      	bne.n	1000815a <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
10008154:	4b02      	ldr	r3, [pc, #8]	; (10008160 <dualtimer_get_value+0x10>)
10008156:	6858      	ldr	r0, [r3, #4]
10008158:	e001      	b.n	1000815e <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000815a:	4b01      	ldr	r3, [pc, #4]	; (10008160 <dualtimer_get_value+0x10>)
1000815c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000815e:	4770      	bx	lr
10008160:	40001000 	.word	0x40001000

10008164 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10008164:	2800      	cmp	r0, #0
10008166:	d107      	bne.n	10008178 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008168:	2900      	cmp	r1, #0
1000816a:	d102      	bne.n	10008172 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000816c:	4b06      	ldr	r3, [pc, #24]	; (10008188 <dualtimer_set_counter+0x24>)
1000816e:	601a      	str	r2, [r3, #0]
10008170:	e009      	b.n	10008186 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
10008172:	4b05      	ldr	r3, [pc, #20]	; (10008188 <dualtimer_set_counter+0x24>)
10008174:	619a      	str	r2, [r3, #24]
10008176:	e006      	b.n	10008186 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008178:	2900      	cmp	r1, #0
1000817a:	d102      	bne.n	10008182 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000817c:	4b02      	ldr	r3, [pc, #8]	; (10008188 <dualtimer_set_counter+0x24>)
1000817e:	621a      	str	r2, [r3, #32]
10008180:	e001      	b.n	10008186 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008182:	4b01      	ldr	r3, [pc, #4]	; (10008188 <dualtimer_set_counter+0x24>)
10008184:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10008186:	4770      	bx	lr
10008188:	40001000 	.word	0x40001000

1000818c <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000818c:	2800      	cmp	r0, #0
1000818e:	d105      	bne.n	1000819c <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008190:	4a06      	ldr	r2, [pc, #24]	; (100081ac <dualtimer_enable+0x20>)
10008192:	7a11      	ldrb	r1, [r2, #8]
10008194:	2380      	movs	r3, #128	; 0x80
10008196:	430b      	orrs	r3, r1
10008198:	7213      	strb	r3, [r2, #8]
1000819a:	e005      	b.n	100081a8 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000819c:	4903      	ldr	r1, [pc, #12]	; (100081ac <dualtimer_enable+0x20>)
1000819e:	2228      	movs	r2, #40	; 0x28
100081a0:	5c88      	ldrb	r0, [r1, r2]
100081a2:	2380      	movs	r3, #128	; 0x80
100081a4:	4303      	orrs	r3, r0
100081a6:	548b      	strb	r3, [r1, r2]
	}
}
100081a8:	4770      	bx	lr
100081aa:	46c0      	nop			; (mov r8, r8)
100081ac:	40001000 	.word	0x40001000

100081b0 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081b0:	b570      	push	{r4, r5, r6, lr}
100081b2:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
100081b4:	2004      	movs	r0, #4
100081b6:	4b39      	ldr	r3, [pc, #228]	; (1000829c <dualtimer_init+0xec>)
100081b8:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100081ba:	7823      	ldrb	r3, [r4, #0]
100081bc:	2b00      	cmp	r3, #0
100081be:	d102      	bne.n	100081c6 <dualtimer_init+0x16>
100081c0:	7b23      	ldrb	r3, [r4, #12]
100081c2:	2b00      	cmp	r3, #0
100081c4:	d065      	beq.n	10008292 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081c6:	4936      	ldr	r1, [pc, #216]	; (100082a0 <dualtimer_init+0xf0>)
100081c8:	68ca      	ldr	r2, [r1, #12]
100081ca:	2320      	movs	r3, #32
100081cc:	4313      	orrs	r3, r2
100081ce:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
100081d0:	7e22      	ldrb	r2, [r4, #24]
100081d2:	698b      	ldr	r3, [r1, #24]
100081d4:	2003      	movs	r0, #3
100081d6:	4002      	ands	r2, r0
100081d8:	0112      	lsls	r2, r2, #4
100081da:	302d      	adds	r0, #45	; 0x2d
100081dc:	4383      	bics	r3, r0
100081de:	4313      	orrs	r3, r2
100081e0:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
100081e2:	7823      	ldrb	r3, [r4, #0]
100081e4:	2b00      	cmp	r3, #0
100081e6:	d026      	beq.n	10008236 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081e8:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
100081ea:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100081ec:	2b00      	cmp	r3, #0
100081ee:	d003      	beq.n	100081f8 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
100081f0:	3b02      	subs	r3, #2
100081f2:	425d      	negs	r5, r3
100081f4:	415d      	adcs	r5, r3
100081f6:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
100081f8:	78a2      	ldrb	r2, [r4, #2]
100081fa:	0052      	lsls	r2, r2, #1
100081fc:	2502      	movs	r5, #2
100081fe:	402a      	ands	r2, r5
10008200:	78e3      	ldrb	r3, [r4, #3]
10008202:	009b      	lsls	r3, r3, #2
10008204:	350a      	adds	r5, #10
10008206:	402b      	ands	r3, r5
10008208:	431a      	orrs	r2, r3
1000820a:	0015      	movs	r5, r2
1000820c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000820e:	7923      	ldrb	r3, [r4, #4]
10008210:	2b00      	cmp	r3, #0
10008212:	d001      	beq.n	10008218 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008214:	2320      	movs	r3, #32
10008216:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008218:	4b22      	ldr	r3, [pc, #136]	; (100082a4 <dualtimer_init+0xf4>)
1000821a:	68a2      	ldr	r2, [r4, #8]
1000821c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000821e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008220:	491f      	ldr	r1, [pc, #124]	; (100082a0 <dualtimer_init+0xf0>)
10008222:	22c4      	movs	r2, #196	; 0xc4
10008224:	0052      	lsls	r2, r2, #1
10008226:	5c88      	ldrb	r0, [r1, r2]
10008228:	2301      	movs	r3, #1
1000822a:	4303      	orrs	r3, r0
1000822c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000822e:	2000      	movs	r0, #0
10008230:	4b1d      	ldr	r3, [pc, #116]	; (100082a8 <dualtimer_init+0xf8>)
10008232:	4798      	blx	r3
10008234:	e000      	b.n	10008238 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008236:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008238:	7b23      	ldrb	r3, [r4, #12]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d029      	beq.n	10008292 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000823e:	7b63      	ldrb	r3, [r4, #13]
10008240:	2b00      	cmp	r3, #0
10008242:	d005      	beq.n	10008250 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008244:	2b01      	cmp	r3, #1
10008246:	d005      	beq.n	10008254 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008248:	2b02      	cmp	r3, #2
1000824a:	d104      	bne.n	10008256 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000824c:	2540      	movs	r5, #64	; 0x40
1000824e:	e002      	b.n	10008256 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008250:	2501      	movs	r5, #1
10008252:	e000      	b.n	10008256 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008254:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008256:	7ba3      	ldrb	r3, [r4, #14]
10008258:	005b      	lsls	r3, r3, #1
1000825a:	2102      	movs	r1, #2
1000825c:	4019      	ands	r1, r3
1000825e:	7be2      	ldrb	r2, [r4, #15]
10008260:	0092      	lsls	r2, r2, #2
10008262:	230c      	movs	r3, #12
10008264:	4013      	ands	r3, r2
10008266:	430b      	orrs	r3, r1
10008268:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000826a:	7c23      	ldrb	r3, [r4, #16]
1000826c:	2b00      	cmp	r3, #0
1000826e:	d001      	beq.n	10008274 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008270:	2320      	movs	r3, #32
10008272:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008274:	6962      	ldr	r2, [r4, #20]
10008276:	4b0b      	ldr	r3, [pc, #44]	; (100082a4 <dualtimer_init+0xf4>)
10008278:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000827a:	2228      	movs	r2, #40	; 0x28
1000827c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000827e:	4908      	ldr	r1, [pc, #32]	; (100082a0 <dualtimer_init+0xf0>)
10008280:	3261      	adds	r2, #97	; 0x61
10008282:	32ff      	adds	r2, #255	; 0xff
10008284:	5c88      	ldrb	r0, [r1, r2]
10008286:	2302      	movs	r3, #2
10008288:	4303      	orrs	r3, r0
1000828a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000828c:	2001      	movs	r0, #1
1000828e:	4b06      	ldr	r3, [pc, #24]	; (100082a8 <dualtimer_init+0xf8>)
10008290:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10008292:	4906      	ldr	r1, [pc, #24]	; (100082ac <dualtimer_init+0xfc>)
10008294:	201e      	movs	r0, #30
10008296:	4b06      	ldr	r3, [pc, #24]	; (100082b0 <dualtimer_init+0x100>)
10008298:	4798      	blx	r3
}
1000829a:	bd70      	pop	{r4, r5, r6, pc}
1000829c:	10009ac9 	.word	0x10009ac9
100082a0:	4000b000 	.word	0x4000b000
100082a4:	40001000 	.word	0x40001000
100082a8:	1000818d 	.word	0x1000818d
100082ac:	100080e9 	.word	0x100080e9
100082b0:	10009f31 	.word	0x10009f31

100082b4 <draw_pixel>:
const uint8_t BLUE	  = 0x20;
const uint8_t MAGENTA = 0xA0;
const uint8_t CYAN	  = 0x60;

static void draw_pixel(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t color) // Write single pixel to frameBuffer
{
100082b4:	b530      	push	{r4, r5, lr}
	uint8_t bit_offset = (x*3)&0x07;
100082b6:	004c      	lsls	r4, r1, #1
100082b8:	190c      	adds	r4, r1, r4
100082ba:	2507      	movs	r5, #7
100082bc:	402c      	ands	r4, r5
	frameBuffer[y][(x*3)>>3] = (frameBuffer[y][(x*3)>>3] & ~(0xE0>>bit_offset)) | (color>>bit_offset);
100082be:	0055      	lsls	r5, r2, #1
100082c0:	18aa      	adds	r2, r5, r2
100082c2:	0112      	lsls	r2, r2, #4
100082c4:	1880      	adds	r0, r0, r2
100082c6:	004a      	lsls	r2, r1, #1
100082c8:	1851      	adds	r1, r2, r1
100082ca:	10c9      	asrs	r1, r1, #3
100082cc:	25e0      	movs	r5, #224	; 0xe0
100082ce:	4125      	asrs	r5, r4
100082d0:	5c42      	ldrb	r2, [r0, r1]
100082d2:	43aa      	bics	r2, r5
100082d4:	001d      	movs	r5, r3
100082d6:	4125      	asrs	r5, r4
100082d8:	432a      	orrs	r2, r5
100082da:	5442      	strb	r2, [r0, r1]
	if (bit_offset > 5)
100082dc:	2c05      	cmp	r4, #5
100082de:	d90a      	bls.n	100082f6 <draw_pixel+0x42>
	{
		frameBuffer[y][((x*3)>>3)+1] = (frameBuffer[y][((x*3)>>3)+1] & (0xFF>>(bit_offset-5))) | (color << (8-bit_offset));
100082e0:	3101      	adds	r1, #1
100082e2:	1f65      	subs	r5, r4, #5
100082e4:	22ff      	movs	r2, #255	; 0xff
100082e6:	412a      	asrs	r2, r5
100082e8:	5c45      	ldrb	r5, [r0, r1]
100082ea:	402a      	ands	r2, r5
100082ec:	2508      	movs	r5, #8
100082ee:	1b2c      	subs	r4, r5, r4
100082f0:	40a3      	lsls	r3, r4
100082f2:	4313      	orrs	r3, r2
100082f4:	5443      	strb	r3, [r0, r1]
	}
}
100082f6:	bd30      	pop	{r4, r5, pc}

100082f8 <delay_us>:
	config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
	dualtimer_init(&config_dualtimer);
}

static void delay_us(uint32_t time)
{
100082f8:	b510      	push	{r4, lr}
	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG, time*26);
100082fa:	231a      	movs	r3, #26
100082fc:	4343      	muls	r3, r0
100082fe:	001a      	movs	r2, r3
10008300:	2100      	movs	r1, #0
10008302:	2000      	movs	r0, #0
10008304:	4b03      	ldr	r3, [pc, #12]	; (10008314 <delay_us+0x1c>)
10008306:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER1)){}
10008308:	4c03      	ldr	r4, [pc, #12]	; (10008318 <delay_us+0x20>)
1000830a:	2000      	movs	r0, #0
1000830c:	47a0      	blx	r4
1000830e:	2800      	cmp	r0, #0
10008310:	d1fb      	bne.n	1000830a <delay_us+0x12>
}
10008312:	bd10      	pop	{r4, pc}
10008314:	10008165 	.word	0x10008165
10008318:	10008151 	.word	0x10008151

1000831c <draw_string>:
		}
	}
}

void draw_string(char* string, uint8_t length, uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color)
{
1000831c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000831e:	465f      	mov	r7, fp
10008320:	4656      	mov	r6, sl
10008322:	464d      	mov	r5, r9
10008324:	4644      	mov	r4, r8
10008326:	b4f0      	push	{r4, r5, r6, r7}
10008328:	b093      	sub	sp, #76	; 0x4c
1000832a:	900d      	str	r0, [sp, #52]	; 0x34
1000832c:	9111      	str	r1, [sp, #68]	; 0x44
1000832e:	9201      	str	r2, [sp, #4]
10008330:	469a      	mov	sl, r3
10008332:	ab1c      	add	r3, sp, #112	; 0x70
10008334:	781b      	ldrb	r3, [r3, #0]
10008336:	0018      	movs	r0, r3
10008338:	9306      	str	r3, [sp, #24]
1000833a:	ab1d      	add	r3, sp, #116	; 0x74
1000833c:	781a      	ldrb	r2, [r3, #0]
1000833e:	9203      	str	r2, [sp, #12]
10008340:	ab1e      	add	r3, sp, #120	; 0x78
10008342:	781a      	ldrb	r2, [r3, #0]
10008344:	9202      	str	r2, [sp, #8]
	for(uint8_t cursor = x, i = 0 ; i < length ; i++)
10008346:	1e0b      	subs	r3, r1, #0
10008348:	d100      	bne.n	1000834c <draw_string+0x30>
1000834a:	e146      	b.n	100085da <draw_string+0x2be>
1000834c:	3b01      	subs	r3, #1
1000834e:	b2db      	uxtb	r3, r3
10008350:	3301      	adds	r3, #1
10008352:	9310      	str	r3, [sp, #64]	; 0x40
10008354:	2300      	movs	r3, #0
10008356:	930c      	str	r3, [sp, #48]	; 0x30
	}
}

static void draw_char(char c,uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color) // Write single character to frameBuffer
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
10008358:	4ba3      	ldr	r3, [pc, #652]	; (100085e8 <draw_string+0x2cc>)
1000835a:	781b      	ldrb	r3, [r3, #0]
1000835c:	9308      	str	r3, [sp, #32]
1000835e:	1e5a      	subs	r2, r3, #1
10008360:	4193      	sbcs	r3, r2
10008362:	b2db      	uxtb	r3, r3
10008364:	930f      	str	r3, [sp, #60]	; 0x3c
10008366:	0fc3      	lsrs	r3, r0, #31
10008368:	2700      	movs	r7, #0
1000836a:	217f      	movs	r1, #127	; 0x7f
1000836c:	4281      	cmp	r1, r0
1000836e:	417b      	adcs	r3, r7
10008370:	b2db      	uxtb	r3, r3
10008372:	930e      	str	r3, [sp, #56]	; 0x38

void draw_string(char* string, uint8_t length, uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color)
{
	for(uint8_t cursor = x, i = 0 ; i < length ; i++)
	{
		draw_char(string[i], frameBuffer, cursor, y, font_color, bg_color);
10008374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10008376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10008378:	5c9b      	ldrb	r3, [r3, r2]
	}
}

static void draw_char(char c,uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color) // Write single character to frameBuffer
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
1000837a:	9a06      	ldr	r2, [sp, #24]
1000837c:	9207      	str	r2, [sp, #28]
1000837e:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008380:	2900      	cmp	r1, #0
10008382:	d100      	bne.n	10008386 <draw_string+0x6a>
10008384:	e0e1      	b.n	1000854a <draw_string+0x22e>
10008386:	990e      	ldr	r1, [sp, #56]	; 0x38
10008388:	2900      	cmp	r1, #0
1000838a:	d100      	bne.n	1000838e <draw_string+0x72>
1000838c:	e0dd      	b.n	1000854a <draw_string+0x22e>
1000838e:	9200      	str	r2, [sp, #0]
10008390:	0039      	movs	r1, r7
	{
		if (microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits < 9)
10008392:	4a95      	ldr	r2, [pc, #596]	; (100085e8 <draw_string+0x2cc>)
10008394:	7852      	ldrb	r2, [r2, #1]
10008396:	1a9b      	subs	r3, r3, r2
10008398:	009b      	lsls	r3, r3, #2
1000839a:	001a      	movs	r2, r3
1000839c:	930a      	str	r3, [sp, #40]	; 0x28
1000839e:	4893      	ldr	r0, [pc, #588]	; (100085ec <draw_string+0x2d0>)
100083a0:	5c1b      	ldrb	r3, [r3, r0]
100083a2:	469b      	mov	fp, r3
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits) & ((x + bit_offset) < 128) ; bit_offset++)
100083a4:	0018      	movs	r0, r3
100083a6:	1e43      	subs	r3, r0, #1
100083a8:	4198      	sbcs	r0, r3
100083aa:	9009      	str	r0, [sp, #36]	; 0x24
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + bit_offset, y + line_count, font_color);
100083ac:	4b8f      	ldr	r3, [pc, #572]	; (100085ec <draw_string+0x2d0>)
100083ae:	4694      	mov	ip, r2
100083b0:	4463      	add	r3, ip
100083b2:	3302      	adds	r3, #2
100083b4:	930b      	str	r3, [sp, #44]	; 0x2c

static void draw_char(char c,uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color) // Write single character to frameBuffer
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
	{
		if (microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits < 9)
100083b6:	465b      	mov	r3, fp
100083b8:	2b08      	cmp	r3, #8
100083ba:	d904      	bls.n	100083c6 <draw_string+0xaa>
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
			}
		} 
		else
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < 8) & ((x + bit_offset) < 128) ; bit_offset++)
100083bc:	46d0      	mov	r8, sl
100083be:	4653      	mov	r3, sl
100083c0:	2b7f      	cmp	r3, #127	; 0x7f
100083c2:	dd3b      	ble.n	1000843c <draw_string+0x120>
100083c4:	e0ab      	b.n	1000851e <draw_string+0x202>
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
	{
		if (microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits < 9)
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits) & ((x + bit_offset) < 128) ; bit_offset++)
100083c6:	46d0      	mov	r8, sl
100083c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
100083ca:	2b00      	cmp	r3, #0
100083cc:	d100      	bne.n	100083d0 <draw_string+0xb4>
100083ce:	e0a6      	b.n	1000851e <draw_string+0x202>
100083d0:	4653      	mov	r3, sl
100083d2:	0fdb      	lsrs	r3, r3, #31
100083d4:	4652      	mov	r2, sl
100083d6:	207f      	movs	r0, #127	; 0x7f
100083d8:	4290      	cmp	r0, r2
100083da:	417b      	adcs	r3, r7
100083dc:	b2db      	uxtb	r3, r3
100083de:	2b00      	cmp	r3, #0
100083e0:	d100      	bne.n	100083e4 <draw_string+0xc8>
100083e2:	e09c      	b.n	1000851e <draw_string+0x202>
100083e4:	4655      	mov	r5, sl
100083e6:	003c      	movs	r4, r7
100083e8:	003a      	movs	r2, r7
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + bit_offset, y + line_count, font_color);
100083ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100083ec:	881b      	ldrh	r3, [r3, #0]
100083ee:	4880      	ldr	r0, [pc, #512]	; (100085f0 <draw_string+0x2d4>)
100083f0:	1841      	adds	r1, r0, r1
100083f2:	5ccb      	ldrb	r3, [r1, r3]
100083f4:	4699      	mov	r9, r3
100083f6:	2380      	movs	r3, #128	; 0x80
100083f8:	4113      	asrs	r3, r2
100083fa:	464a      	mov	r2, r9
100083fc:	4213      	tst	r3, r2
100083fe:	d006      	beq.n	1000840e <draw_string+0xf2>
10008400:	9b03      	ldr	r3, [sp, #12]
10008402:	9a00      	ldr	r2, [sp, #0]
10008404:	0029      	movs	r1, r5
10008406:	9801      	ldr	r0, [sp, #4]
10008408:	4e7a      	ldr	r6, [pc, #488]	; (100085f4 <draw_string+0x2d8>)
1000840a:	47b0      	blx	r6
1000840c:	e005      	b.n	1000841a <draw_string+0xfe>
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
1000840e:	9b02      	ldr	r3, [sp, #8]
10008410:	9a00      	ldr	r2, [sp, #0]
10008412:	0029      	movs	r1, r5
10008414:	9801      	ldr	r0, [sp, #4]
10008416:	4e77      	ldr	r6, [pc, #476]	; (100085f4 <draw_string+0x2d8>)
10008418:	47b0      	blx	r6
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
	{
		if (microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits < 9)
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits) & ((x + bit_offset) < 128) ; bit_offset++)
1000841a:	3401      	adds	r4, #1
1000841c:	b2e4      	uxtb	r4, r4
1000841e:	0022      	movs	r2, r4
10008420:	3501      	adds	r5, #1
10008422:	b2ed      	uxtb	r5, r5
10008424:	4643      	mov	r3, r8
10008426:	18e1      	adds	r1, r4, r3
10008428:	0fcb      	lsrs	r3, r1, #31
1000842a:	207f      	movs	r0, #127	; 0x7f
1000842c:	4288      	cmp	r0, r1
1000842e:	417b      	adcs	r3, r7
10008430:	b2db      	uxtb	r3, r3
10008432:	2b00      	cmp	r3, #0
10008434:	d073      	beq.n	1000851e <draw_string+0x202>
10008436:	455c      	cmp	r4, fp
10008438:	d3dd      	bcc.n	100083f6 <draw_string+0xda>
1000843a:	e070      	b.n	1000851e <draw_string+0x202>
		} 
		else
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < 8) & ((x + bit_offset) < 128) ; bit_offset++)
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count*2] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + bit_offset, y + line_count, font_color);
1000843c:	0049      	lsls	r1, r1, #1
1000843e:	4655      	mov	r5, sl
10008440:	003c      	movs	r4, r7
10008442:	003a      	movs	r2, r7
10008444:	4b69      	ldr	r3, [pc, #420]	; (100085ec <draw_string+0x2d0>)
10008446:	980a      	ldr	r0, [sp, #40]	; 0x28
10008448:	4684      	mov	ip, r0
1000844a:	4463      	add	r3, ip
1000844c:	885b      	ldrh	r3, [r3, #2]
1000844e:	185b      	adds	r3, r3, r1
10008450:	0019      	movs	r1, r3
10008452:	9305      	str	r3, [sp, #20]
10008454:	4b66      	ldr	r3, [pc, #408]	; (100085f0 <draw_string+0x2d4>)
10008456:	5c5b      	ldrb	r3, [r3, r1]
10008458:	4699      	mov	r9, r3
1000845a:	9b05      	ldr	r3, [sp, #20]
1000845c:	9304      	str	r3, [sp, #16]
1000845e:	2380      	movs	r3, #128	; 0x80
10008460:	4113      	asrs	r3, r2
10008462:	464a      	mov	r2, r9
10008464:	4213      	tst	r3, r2
10008466:	d006      	beq.n	10008476 <draw_string+0x15a>
10008468:	9b03      	ldr	r3, [sp, #12]
1000846a:	9a00      	ldr	r2, [sp, #0]
1000846c:	0029      	movs	r1, r5
1000846e:	9801      	ldr	r0, [sp, #4]
10008470:	4e60      	ldr	r6, [pc, #384]	; (100085f4 <draw_string+0x2d8>)
10008472:	47b0      	blx	r6
10008474:	e005      	b.n	10008482 <draw_string+0x166>
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
10008476:	9b02      	ldr	r3, [sp, #8]
10008478:	9a00      	ldr	r2, [sp, #0]
1000847a:	0029      	movs	r1, r5
1000847c:	9801      	ldr	r0, [sp, #4]
1000847e:	4e5d      	ldr	r6, [pc, #372]	; (100085f4 <draw_string+0x2d8>)
10008480:	47b0      	blx	r6
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
			}
		} 
		else
		{
			for (uint8_t bit_offset = 0 ; (bit_offset < 8) & ((x + bit_offset) < 128) ; bit_offset++)
10008482:	3401      	adds	r4, #1
10008484:	b2e4      	uxtb	r4, r4
10008486:	0022      	movs	r2, r4
10008488:	3501      	adds	r5, #1
1000848a:	b2ed      	uxtb	r5, r5
1000848c:	4643      	mov	r3, r8
1000848e:	18e1      	adds	r1, r4, r3
10008490:	0fcb      	lsrs	r3, r1, #31
10008492:	207f      	movs	r0, #127	; 0x7f
10008494:	4288      	cmp	r0, r1
10008496:	417b      	adcs	r3, r7
10008498:	b2db      	uxtb	r3, r3
1000849a:	2b00      	cmp	r3, #0
1000849c:	d006      	beq.n	100084ac <draw_string+0x190>
1000849e:	2307      	movs	r3, #7
100084a0:	0039      	movs	r1, r7
100084a2:	42a3      	cmp	r3, r4
100084a4:	4179      	adcs	r1, r7
100084a6:	b2cb      	uxtb	r3, r1
100084a8:	2b00      	cmp	r3, #0
100084aa:	d1d6      	bne.n	1000845a <draw_string+0x13e>
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count*2] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + bit_offset, y + line_count, font_color);
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
			}
			for (uint8_t bit_offset = 0 ; (bit_offset < microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits - 8) & ((x + bit_offset) < 128) ; bit_offset++)
100084ac:	465d      	mov	r5, fp
100084ae:	3d08      	subs	r5, #8
100084b0:	2d00      	cmp	r5, #0
100084b2:	dd34      	ble.n	1000851e <draw_string+0x202>
100084b4:	4654      	mov	r4, sl
100084b6:	3408      	adds	r4, #8
100084b8:	b2e4      	uxtb	r4, r4
100084ba:	003b      	movs	r3, r7
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count*2 + 1] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + 8 + bit_offset, y + line_count, font_color);
100084bc:	4a4c      	ldr	r2, [pc, #304]	; (100085f0 <draw_string+0x2d4>)
100084be:	9904      	ldr	r1, [sp, #16]
100084c0:	468c      	mov	ip, r1
100084c2:	4462      	add	r2, ip
100084c4:	7852      	ldrb	r2, [r2, #1]
100084c6:	4691      	mov	r9, r2
100084c8:	4642      	mov	r2, r8
100084ca:	46a8      	mov	r8, r5
100084cc:	0015      	movs	r5, r2
100084ce:	2280      	movs	r2, #128	; 0x80
100084d0:	411a      	asrs	r2, r3
100084d2:	0013      	movs	r3, r2
100084d4:	464a      	mov	r2, r9
100084d6:	4213      	tst	r3, r2
100084d8:	d006      	beq.n	100084e8 <draw_string+0x1cc>
100084da:	9b03      	ldr	r3, [sp, #12]
100084dc:	9a00      	ldr	r2, [sp, #0]
100084de:	0021      	movs	r1, r4
100084e0:	9801      	ldr	r0, [sp, #4]
100084e2:	4e44      	ldr	r6, [pc, #272]	; (100085f4 <draw_string+0x2d8>)
100084e4:	47b0      	blx	r6
100084e6:	e005      	b.n	100084f4 <draw_string+0x1d8>
				else draw_pixel(frameBuffer, x + 8 + bit_offset, y + line_count, bg_color);
100084e8:	9b02      	ldr	r3, [sp, #8]
100084ea:	9a00      	ldr	r2, [sp, #0]
100084ec:	0021      	movs	r1, r4
100084ee:	9801      	ldr	r0, [sp, #4]
100084f0:	4e40      	ldr	r6, [pc, #256]	; (100085f4 <draw_string+0x2d8>)
100084f2:	47b0      	blx	r6
			for (uint8_t bit_offset = 0 ; (bit_offset < 8) & ((x + bit_offset) < 128) ; bit_offset++)
			{
				if(microsoftSansSerif_8ptBitmaps[microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].offset + line_count*2] & (0x80>>bit_offset)) draw_pixel(frameBuffer, x + bit_offset, y + line_count, font_color);
				else draw_pixel(frameBuffer, x + bit_offset, y + line_count, bg_color);
			}
			for (uint8_t bit_offset = 0 ; (bit_offset < microsoftSansSerif_8ptDescriptors[c - microsoftSansSerif_8ptFontInfo.startChar].widthBits - 8) & ((x + bit_offset) < 128) ; bit_offset++)
100084f4:	4653      	mov	r3, sl
100084f6:	1ae3      	subs	r3, r4, r3
100084f8:	3b07      	subs	r3, #7
100084fa:	b2db      	uxtb	r3, r3
100084fc:	3401      	adds	r4, #1
100084fe:	b2e4      	uxtb	r4, r4
10008500:	1959      	adds	r1, r3, r5
10008502:	0fca      	lsrs	r2, r1, #31
10008504:	207f      	movs	r0, #127	; 0x7f
10008506:	4288      	cmp	r0, r1
10008508:	417a      	adcs	r2, r7
1000850a:	b2d2      	uxtb	r2, r2
1000850c:	2a00      	cmp	r2, #0
1000850e:	d006      	beq.n	1000851e <draw_string+0x202>
10008510:	2201      	movs	r2, #1
10008512:	4543      	cmp	r3, r8
10008514:	db00      	blt.n	10008518 <draw_string+0x1fc>
10008516:	2200      	movs	r2, #0
10008518:	b2d2      	uxtb	r2, r2
1000851a:	2a00      	cmp	r2, #0
1000851c:	d1d7      	bne.n	100084ce <draw_string+0x1b2>
1000851e:	9a00      	ldr	r2, [sp, #0]
10008520:	9906      	ldr	r1, [sp, #24]
10008522:	1a53      	subs	r3, r2, r1
10008524:	3301      	adds	r3, #1
10008526:	b2db      	uxtb	r3, r3
	}
}

static void draw_char(char c,uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color) // Write single character to frameBuffer
{
	for (uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT); line_count++)
10008528:	0019      	movs	r1, r3
1000852a:	3201      	adds	r2, #1
1000852c:	b2d2      	uxtb	r2, r2
1000852e:	9200      	str	r2, [sp, #0]
10008530:	9a07      	ldr	r2, [sp, #28]
10008532:	1898      	adds	r0, r3, r2
10008534:	0fc2      	lsrs	r2, r0, #31
10008536:	247f      	movs	r4, #127	; 0x7f
10008538:	4284      	cmp	r4, r0
1000853a:	417a      	adcs	r2, r7
1000853c:	b2d2      	uxtb	r2, r2
1000853e:	2a00      	cmp	r2, #0
10008540:	d003      	beq.n	1000854a <draw_string+0x22e>
10008542:	9a08      	ldr	r2, [sp, #32]
10008544:	4293      	cmp	r3, r2
10008546:	d200      	bcs.n	1000854a <draw_string+0x22e>
10008548:	e735      	b.n	100083b6 <draw_string+0x9a>
void draw_string(char* string, uint8_t length, uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color)
{
	for(uint8_t cursor = x, i = 0 ; i < length ; i++)
	{
		draw_char(string[i], frameBuffer, cursor, y, font_color, bg_color);
		cursor += microsoftSansSerif_8ptDescriptors[string[i] - microsoftSansSerif_8ptFontInfo.startChar].widthBits;
1000854a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000854c:	990c      	ldr	r1, [sp, #48]	; 0x30
1000854e:	5c53      	ldrb	r3, [r2, r1]
10008550:	4a25      	ldr	r2, [pc, #148]	; (100085e8 <draw_string+0x2cc>)
10008552:	7852      	ldrb	r2, [r2, #1]
10008554:	1a9b      	subs	r3, r3, r2
10008556:	009b      	lsls	r3, r3, #2
10008558:	4a24      	ldr	r2, [pc, #144]	; (100085ec <draw_string+0x2d0>)
1000855a:	5c9c      	ldrb	r4, [r3, r2]
1000855c:	4454      	add	r4, sl
1000855e:	b2e3      	uxtb	r3, r4
10008560:	1e1e      	subs	r6, r3, #0
		if(cursor < 127)
10008562:	2e7e      	cmp	r6, #126	; 0x7e
10008564:	d839      	bhi.n	100085da <draw_string+0x2be>
		{
			for(uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT) & (i < (length - 1)) ; line_count++)
10008566:	9b11      	ldr	r3, [sp, #68]	; 0x44
10008568:	3b01      	subs	r3, #1
1000856a:	2201      	movs	r2, #1
1000856c:	4299      	cmp	r1, r3
1000856e:	db00      	blt.n	10008572 <draw_string+0x256>
10008570:	2200      	movs	r2, #0
10008572:	b2d3      	uxtb	r3, r2
10008574:	4698      	mov	r8, r3
10008576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008578:	4642      	mov	r2, r8
1000857a:	4213      	tst	r3, r2
1000857c:	d022      	beq.n	100085c4 <draw_string+0x2a8>
1000857e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008580:	2b00      	cmp	r3, #0
10008582:	d01f      	beq.n	100085c4 <draw_string+0x2a8>
10008584:	003d      	movs	r5, r7
			{
				draw_pixel(frameBuffer, cursor, y + line_count, bg_color);
10008586:	4c1b      	ldr	r4, [pc, #108]	; (100085f4 <draw_string+0x2d8>)
10008588:	9b07      	ldr	r3, [sp, #28]
1000858a:	4699      	mov	r9, r3
1000858c:	9b06      	ldr	r3, [sp, #24]
1000858e:	469a      	mov	sl, r3
10008590:	9b08      	ldr	r3, [sp, #32]
10008592:	469b      	mov	fp, r3
10008594:	4653      	mov	r3, sl
10008596:	195a      	adds	r2, r3, r5
10008598:	b2d2      	uxtb	r2, r2
1000859a:	9b02      	ldr	r3, [sp, #8]
1000859c:	0031      	movs	r1, r6
1000859e:	9801      	ldr	r0, [sp, #4]
100085a0:	47a0      	blx	r4
	{
		draw_char(string[i], frameBuffer, cursor, y, font_color, bg_color);
		cursor += microsoftSansSerif_8ptDescriptors[string[i] - microsoftSansSerif_8ptFontInfo.startChar].widthBits;
		if(cursor < 127)
		{
			for(uint8_t line_count = 0 ; (line_count < microsoftSansSerif_8ptFontInfo.height) & ((y + line_count) < FRAME_HEIGHT) & (i < (length - 1)) ; line_count++)
100085a2:	3501      	adds	r5, #1
100085a4:	b2ed      	uxtb	r5, r5
100085a6:	464b      	mov	r3, r9
100085a8:	18ea      	adds	r2, r5, r3
100085aa:	0fd3      	lsrs	r3, r2, #31
100085ac:	217f      	movs	r1, #127	; 0x7f
100085ae:	4291      	cmp	r1, r2
100085b0:	417b      	adcs	r3, r7
100085b2:	b2db      	uxtb	r3, r3
100085b4:	2b00      	cmp	r3, #0
100085b6:	d005      	beq.n	100085c4 <draw_string+0x2a8>
100085b8:	455d      	cmp	r5, fp
100085ba:	419b      	sbcs	r3, r3
100085bc:	425b      	negs	r3, r3
100085be:	4642      	mov	r2, r8
100085c0:	4213      	tst	r3, r2
100085c2:	d1e7      	bne.n	10008594 <draw_string+0x278>
			{
				draw_pixel(frameBuffer, cursor, y + line_count, bg_color);
			}
			cursor++;
100085c4:	0034      	movs	r4, r6
100085c6:	3401      	adds	r4, #1
100085c8:	b2e3      	uxtb	r3, r4
100085ca:	469a      	mov	sl, r3
100085cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100085ce:	3301      	adds	r3, #1
100085d0:	930c      	str	r3, [sp, #48]	; 0x30
	}
}

void draw_string(char* string, uint8_t length, uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t x, uint8_t y, uint8_t font_color, uint8_t bg_color)
{
	for(uint8_t cursor = x, i = 0 ; i < length ; i++)
100085d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
100085d4:	429a      	cmp	r2, r3
100085d6:	d000      	beq.n	100085da <draw_string+0x2be>
100085d8:	e6cc      	b.n	10008374 <draw_string+0x58>
			}
			cursor++;
		}
		else return;
	}
}
100085da:	b013      	add	sp, #76	; 0x4c
100085dc:	bc3c      	pop	{r2, r3, r4, r5}
100085de:	4690      	mov	r8, r2
100085e0:	4699      	mov	r9, r3
100085e2:	46a2      	mov	sl, r4
100085e4:	46ab      	mov	fp, r5
100085e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100085e8:	1000a1d0 	.word	0x1000a1d0
100085ec:	1000a66c 	.word	0x1000a66c
100085f0:	1000a1dc 	.word	0x1000a1dc
100085f4:	100082b5 	.word	0x100082b5

100085f8 <Setup>:
	spi_enable(&(module->LCD_spi_master_instance));
	//! [enable]
}

void Setup(LCDSPIModule* module)
{
100085f8:	b530      	push	{r4, r5, lr}
100085fa:	b08d      	sub	sp, #52	; 0x34
100085fc:	0005      	movs	r5, r0
	//! [slave_config]
	struct spi_slave_inst_config slave_dev_config;
	//! [slave_config]
	/* Configure and initialize software device instance of peripheral slave */
	//! [slave_conf_defaults]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
100085fe:	ac01      	add	r4, sp, #4
10008600:	0020      	movs	r0, r4
10008602:	4b14      	ldr	r3, [pc, #80]	; (10008654 <Setup+0x5c>)
10008604:	4798      	blx	r3
	//! [slave_conf_defaults]
	//! [ss_pin]
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
10008606:	2310      	movs	r3, #16
10008608:	7023      	strb	r3, [r4, #0]
	//! [ss_pin]
	//! [slave_init]
	spi_attach_slave(&(module->LCD_slave), &slave_dev_config);
1000860a:	0028      	movs	r0, r5
1000860c:	302c      	adds	r0, #44	; 0x2c
1000860e:	0021      	movs	r1, r4
10008610:	4b11      	ldr	r3, [pc, #68]	; (10008658 <Setup+0x60>)
10008612:	4798      	blx	r3
	//! [slave_init]
	/* Configure, initialize and enable SPI module */
	//! [conf_defaults]
	spi_get_config_defaults(&config_spi_master);
10008614:	ac02      	add	r4, sp, #8
10008616:	0020      	movs	r0, r4
10008618:	4b10      	ldr	r3, [pc, #64]	; (1000865c <Setup+0x64>)
1000861a:	4798      	blx	r3
	//! [conf_defaults]
	//! [transfer_mode]
	config_spi_master.transfer_mode = CONF_SPI_TRANSFER_MODE;
1000861c:	2300      	movs	r3, #0
1000861e:	70a3      	strb	r3, [r4, #2]
	//! [transfer_mode]
	//! [clock_divider]
	config_spi_master.clock_divider = 154;
10008620:	339a      	adds	r3, #154	; 0x9a
10008622:	7123      	strb	r3, [r4, #4]
	//! [clock_divider]
	/* Configure pad 0 */
	//! [sck]
	config_spi_master.pin_number_pad[0] = CONF_SPI_PIN_SCK;
10008624:	3b89      	subs	r3, #137	; 0x89
10008626:	60a3      	str	r3, [r4, #8]
	config_spi_master.pinmux_sel_pad[0] = CONF_SPI_MUX_SCK;
10008628:	3b0d      	subs	r3, #13
1000862a:	61a3      	str	r3, [r4, #24]
	//! [sck]
	/* Configure pad 1 */
	//! [mosi]
	config_spi_master.pin_number_pad[1] = CONF_SPI_PIN_MOSI;
1000862c:	2213      	movs	r2, #19
1000862e:	60e2      	str	r2, [r4, #12]
	config_spi_master.pinmux_sel_pad[1] = CONF_SPI_MUX_MOSI;
10008630:	61e3      	str	r3, [r4, #28]
	//! [mosi]
	/* Configure pad 2 */
	//! [ssn]
	config_spi_master.pin_number_pad[2] = PINMUX_UNUSED;
10008632:	3a14      	subs	r2, #20
10008634:	6122      	str	r2, [r4, #16]
	config_spi_master.pinmux_sel_pad[2] = PINMUX_UNUSED;
10008636:	6222      	str	r2, [r4, #32]
	//! [ssn]
	/* Configure pad 3 */
	//! [miso]
	config_spi_master.pin_number_pad[3] = CONF_SPI_PIN_MISO;
10008638:	3213      	adds	r2, #19
1000863a:	6162      	str	r2, [r4, #20]
	config_spi_master.pinmux_sel_pad[3] = CONF_SPI_MUX_MISO;
1000863c:	6263      	str	r3, [r4, #36]	; 0x24
	//! [miso]
	//! [init]
	spi_init(&(module->LCD_spi_master_instance), CONF_SPI, &config_spi_master);
1000863e:	0022      	movs	r2, r4
10008640:	4907      	ldr	r1, [pc, #28]	; (10008660 <Setup+0x68>)
10008642:	0028      	movs	r0, r5
10008644:	4b07      	ldr	r3, [pc, #28]	; (10008664 <Setup+0x6c>)
10008646:	4798      	blx	r3
	//! [init]

	//! [enable]
	spi_enable(&(module->LCD_spi_master_instance));
10008648:	0028      	movs	r0, r5
1000864a:	4b07      	ldr	r3, [pc, #28]	; (10008668 <Setup+0x70>)
1000864c:	4798      	blx	r3

void Setup(LCDSPIModule* module)
{
	configure_spi_master(module);

}
1000864e:	b00d      	add	sp, #52	; 0x34
10008650:	bd30      	pop	{r4, r5, pc}
10008652:	46c0      	nop			; (mov r8, r8)
10008654:	10008b4d 	.word	0x10008b4d
10008658:	10008b85 	.word	0x10008b85
1000865c:	10008b59 	.word	0x10008b59
10008660:	40007000 	.word	0x40007000
10008664:	10008cad 	.word	0x10008cad
10008668:	10008bc5 	.word	0x10008bc5

1000866c <Transfer>:
		}
	}
}

void Transfer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH], uint8_t startLine, uint8_t endLine, LCDSPIModule* module)
{
1000866c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000866e:	465f      	mov	r7, fp
10008670:	464e      	mov	r6, r9
10008672:	4645      	mov	r5, r8
10008674:	b4e0      	push	{r5, r6, r7}
10008676:	b082      	sub	sp, #8
10008678:	4681      	mov	r9, r0
1000867a:	000d      	movs	r5, r1
1000867c:	4690      	mov	r8, r2
1000867e:	001c      	movs	r4, r3
10008680:	9301      	str	r3, [sp, #4]
	//generate_color_test_pattern(frameBuffer);

	//! [select_slave]
	gpio_pin_set_output_level(PIN_LP_GPIO_16, true);
10008682:	2101      	movs	r1, #1
10008684:	2010      	movs	r0, #16
10008686:	4b2a      	ldr	r3, [pc, #168]	; (10008730 <Transfer+0xc4>)
10008688:	4798      	blx	r3
	//! [select_slave]

	//! [delay]
	delay_us(5); //tsSCS
1000868a:	2005      	movs	r0, #5
1000868c:	4b29      	ldr	r3, [pc, #164]	; (10008734 <Transfer+0xc8>)
1000868e:	4798      	blx	r3
	//! [delay]

	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0
10008690:	9400      	str	r4, [sp, #0]
10008692:	2180      	movs	r1, #128	; 0x80
10008694:	0020      	movs	r0, r4
10008696:	4b28      	ldr	r3, [pc, #160]	; (10008738 <Transfer+0xcc>)
10008698:	4798      	blx	r3

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
1000869a:	3d01      	subs	r5, #1
1000869c:	b2ed      	uxtb	r5, r5
1000869e:	4545      	cmp	r5, r8
100086a0:	d231      	bcs.n	10008706 <Transfer+0x9a>
	res = res | ((foo & 0x02) << 5);
	res = res | ((foo & 0x04) << 3);
	res = res | ((foo & 0x08) << 1);
	res = res | ((foo & 0x10) >> 1);
	res = res | ((foo & 0x20) >> 3);
	res = res | ((foo & 0x40) >> 5);
100086a2:	2340      	movs	r3, #64	; 0x40
100086a4:	469b      	mov	fp, r3
	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
	{
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
100086a6:	4f24      	ldr	r7, [pc, #144]	; (10008738 <Transfer+0xcc>)
		spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
100086a8:	4e24      	ldr	r6, [pc, #144]	; (1000873c <Transfer+0xd0>)
	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
	{
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
100086aa:	1c6c      	adds	r4, r5, #1
100086ac:	b2e4      	uxtb	r4, r4
	res = res | ((foo & 0x02) << 5);
	res = res | ((foo & 0x04) << 3);
	res = res | ((foo & 0x08) << 1);
	res = res | ((foo & 0x10) >> 1);
	res = res | ((foo & 0x20) >> 3);
	res = res | ((foo & 0x40) >> 5);
100086ae:	0163      	lsls	r3, r4, #5
100086b0:	4659      	mov	r1, fp
100086b2:	4019      	ands	r1, r3
100086b4:	00e2      	lsls	r2, r4, #3
100086b6:	2320      	movs	r3, #32
100086b8:	4013      	ands	r3, r2
100086ba:	430b      	orrs	r3, r1
100086bc:	01e2      	lsls	r2, r4, #7
100086be:	4313      	orrs	r3, r2
100086c0:	0062      	lsls	r2, r4, #1
100086c2:	2110      	movs	r1, #16
100086c4:	400a      	ands	r2, r1
100086c6:	4313      	orrs	r3, r2
100086c8:	1062      	asrs	r2, r4, #1
100086ca:	3908      	subs	r1, #8
100086cc:	400a      	ands	r2, r1
100086ce:	4313      	orrs	r3, r2
100086d0:	10e2      	asrs	r2, r4, #3
100086d2:	3904      	subs	r1, #4
100086d4:	400a      	ands	r2, r1
100086d6:	4313      	orrs	r3, r2
100086d8:	1162      	asrs	r2, r4, #5
100086da:	3902      	subs	r1, #2
100086dc:	400a      	ands	r2, r1
100086de:	4313      	orrs	r3, r2
100086e0:	b2db      	uxtb	r3, r3
	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
	{
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
100086e2:	09e1      	lsrs	r1, r4, #7
100086e4:	4319      	orrs	r1, r3
100086e6:	9800      	ldr	r0, [sp, #0]
100086e8:	47b8      	blx	r7
		spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
100086ea:	0069      	lsls	r1, r5, #1
100086ec:	1949      	adds	r1, r1, r5
100086ee:	0109      	lsls	r1, r1, #4
100086f0:	4449      	add	r1, r9
100086f2:	2230      	movs	r2, #48	; 0x30
100086f4:	9d00      	ldr	r5, [sp, #0]
100086f6:	0028      	movs	r0, r5
100086f8:	47b0      	blx	r6
		spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
100086fa:	2100      	movs	r1, #0
100086fc:	0028      	movs	r0, r5
100086fe:	47b8      	blx	r7
	//! [delay]

	//! [write]
	spi_write(&(module->LCD_spi_master_instance), 0x80);// M0=1 M1=0 M2=0 DMY=0

	for(uint8_t line_count = startLine - 1; line_count < endLine; line_count++)
10008700:	0025      	movs	r5, r4
10008702:	45a0      	cmp	r8, r4
10008704:	d8d1      	bhi.n	100086aa <Transfer+0x3e>
		spi_write(&(module->LCD_spi_master_instance), swap(line_count + 1)); //Gate line address transfer
		spi_write_buffer_wait(&(module->LCD_spi_master_instance), frameBuffer[line_count], FRAME_WIDTH); //Data transfer
		spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
	}

	spi_write(&(module->LCD_spi_master_instance), 0); // Dummy
10008706:	2100      	movs	r1, #0
10008708:	9801      	ldr	r0, [sp, #4]
1000870a:	4b0b      	ldr	r3, [pc, #44]	; (10008738 <Transfer+0xcc>)
1000870c:	4798      	blx	r3
	//! [write]
	//! [delay]
	delay_us(220);
1000870e:	20dc      	movs	r0, #220	; 0xdc
10008710:	4c08      	ldr	r4, [pc, #32]	; (10008734 <Transfer+0xc8>)
10008712:	47a0      	blx	r4
	//! [delay]
	//! [deselect_slave]
	gpio_pin_set_output_level(PIN_LP_GPIO_16, false);
10008714:	2100      	movs	r1, #0
10008716:	2010      	movs	r0, #16
10008718:	4b05      	ldr	r3, [pc, #20]	; (10008730 <Transfer+0xc4>)
1000871a:	4798      	blx	r3
	//! [deselect_slave]
	delay_us(1000);
1000871c:	20fa      	movs	r0, #250	; 0xfa
1000871e:	0080      	lsls	r0, r0, #2
10008720:	47a0      	blx	r4
}
10008722:	b002      	add	sp, #8
10008724:	bc1c      	pop	{r2, r3, r4}
10008726:	4690      	mov	r8, r2
10008728:	4699      	mov	r9, r3
1000872a:	46a3      	mov	fp, r4
1000872c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000872e:	46c0      	nop			; (mov r8, r8)
10008730:	10008929 	.word	0x10008929
10008734:	100082f9 	.word	0x100082f9
10008738:	10008e79 	.word	0x10008e79
1000873c:	10008f0d 	.word	0x10008f0d

10008740 <ClearBuffer>:
	//! [deselect_slave]
	delay_us(1000);
}

void ClearBuffer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
10008740:	23c0      	movs	r3, #192	; 0xc0
10008742:	015b      	lsls	r3, r3, #5
10008744:	18c1      	adds	r1, r0, r3
	for(uint8_t i=0;i<FRAME_HEIGHT;i++)
		for(uint8_t j=0;j<FRAME_WIDTH;j++)
			frameBuffer[i][j] = 0xFF;
10008746:	22ff      	movs	r2, #255	; 0xff
10008748:	e006      	b.n	10008758 <ClearBuffer+0x18>
1000874a:	7002      	strb	r2, [r0, #0]
1000874c:	3001      	adds	r0, #1
}

void ClearBuffer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
	for(uint8_t i=0;i<FRAME_HEIGHT;i++)
		for(uint8_t j=0;j<FRAME_WIDTH;j++)
1000874e:	4298      	cmp	r0, r3
10008750:	d1fb      	bne.n	1000874a <ClearBuffer+0xa>
10008752:	0018      	movs	r0, r3
	delay_us(1000);
}

void ClearBuffer(uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH])
{
	for(uint8_t i=0;i<FRAME_HEIGHT;i++)
10008754:	4299      	cmp	r1, r3
10008756:	d002      	beq.n	1000875e <ClearBuffer+0x1e>
10008758:	0003      	movs	r3, r0
1000875a:	3330      	adds	r3, #48	; 0x30
1000875c:	e7f5      	b.n	1000874a <ClearBuffer+0xa>
		for(uint8_t j=0;j<FRAME_WIDTH;j++)
			frameBuffer[i][j] = 0xFF;

1000875e:	4770      	bx	lr

10008760 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008760:	2300      	movs	r3, #0
10008762:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008764:	2201      	movs	r2, #1
10008766:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008768:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000876a:	70c3      	strb	r3, [r0, #3]
}
1000876c:	4770      	bx	lr
1000876e:	46c0      	nop			; (mov r8, r8)

10008770 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008770:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
10008772:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008774:	2801      	cmp	r0, #1
10008776:	d800      	bhi.n	1000877a <gpio_pin_set_config+0xa>
10008778:	e0c8      	b.n	1000890c <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000877a:	2807      	cmp	r0, #7
1000877c:	d809      	bhi.n	10008792 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000877e:	4d64      	ldr	r5, [pc, #400]	; (10008910 <gpio_pin_set_config+0x1a0>)
10008780:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10008782:	3b10      	subs	r3, #16
10008784:	4003      	ands	r3, r0
10008786:	009b      	lsls	r3, r3, #2
10008788:	2407      	movs	r4, #7
1000878a:	409c      	lsls	r4, r3
1000878c:	43a2      	bics	r2, r4
1000878e:	646a      	str	r2, [r5, #68]	; 0x44
10008790:	e029      	b.n	100087e6 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
10008792:	280f      	cmp	r0, #15
10008794:	d809      	bhi.n	100087aa <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008796:	4d5e      	ldr	r5, [pc, #376]	; (10008910 <gpio_pin_set_config+0x1a0>)
10008798:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000879a:	2307      	movs	r3, #7
1000879c:	4003      	ands	r3, r0
1000879e:	009b      	lsls	r3, r3, #2
100087a0:	2407      	movs	r4, #7
100087a2:	409c      	lsls	r4, r3
100087a4:	43a2      	bics	r2, r4
100087a6:	64aa      	str	r2, [r5, #72]	; 0x48
100087a8:	e01d      	b.n	100087e6 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
100087aa:	2817      	cmp	r0, #23
100087ac:	d809      	bhi.n	100087c2 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100087ae:	4d58      	ldr	r5, [pc, #352]	; (10008910 <gpio_pin_set_config+0x1a0>)
100087b0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
100087b2:	2307      	movs	r3, #7
100087b4:	4003      	ands	r3, r0
100087b6:	009b      	lsls	r3, r3, #2
100087b8:	2407      	movs	r4, #7
100087ba:	409c      	lsls	r4, r3
100087bc:	43a2      	bics	r2, r4
100087be:	64ea      	str	r2, [r5, #76]	; 0x4c
100087c0:	e011      	b.n	100087e6 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
100087c2:	0003      	movs	r3, r0
100087c4:	3b2c      	subs	r3, #44	; 0x2c
100087c6:	2b03      	cmp	r3, #3
100087c8:	d80d      	bhi.n	100087e6 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
100087ca:	4d52      	ldr	r5, [pc, #328]	; (10008914 <gpio_pin_set_config+0x1a4>)
100087cc:	2482      	movs	r4, #130	; 0x82
100087ce:	00e4      	lsls	r4, r4, #3
100087d0:	5d2a      	ldrb	r2, [r5, r4]
100087d2:	0712      	lsls	r2, r2, #28
100087d4:	2601      	movs	r6, #1
100087d6:	409e      	lsls	r6, r3
100087d8:	0f12      	lsrs	r2, r2, #28
100087da:	5d2b      	ldrb	r3, [r5, r4]
100087dc:	43b2      	bics	r2, r6
100087de:	260f      	movs	r6, #15
100087e0:	43b3      	bics	r3, r6
100087e2:	4313      	orrs	r3, r2
100087e4:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
100087e6:	0003      	movs	r3, r0
100087e8:	3b1d      	subs	r3, #29
100087ea:	2b02      	cmp	r3, #2
100087ec:	d829      	bhi.n	10008842 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
100087ee:	784b      	ldrb	r3, [r1, #1]
100087f0:	2b01      	cmp	r3, #1
100087f2:	d108      	bne.n	10008806 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
100087f4:	4d47      	ldr	r5, [pc, #284]	; (10008914 <gpio_pin_set_config+0x1a4>)
100087f6:	7d2b      	ldrb	r3, [r5, #20]
100087f8:	241f      	movs	r4, #31
100087fa:	1a24      	subs	r4, r4, r0
100087fc:	2201      	movs	r2, #1
100087fe:	40a2      	lsls	r2, r4
10008800:	4393      	bics	r3, r2
10008802:	752b      	strb	r3, [r5, #20]
10008804:	e008      	b.n	10008818 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
10008806:	4c43      	ldr	r4, [pc, #268]	; (10008914 <gpio_pin_set_config+0x1a4>)
10008808:	7d25      	ldrb	r5, [r4, #20]
1000880a:	221f      	movs	r2, #31
1000880c:	1a12      	subs	r2, r2, r0
1000880e:	2301      	movs	r3, #1
10008810:	4093      	lsls	r3, r2
10008812:	432b      	orrs	r3, r5
10008814:	b2db      	uxtb	r3, r3
10008816:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
10008818:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000881a:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000881c:	2a00      	cmp	r2, #0
1000881e:	d075      	beq.n	1000890c <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10008820:	493c      	ldr	r1, [pc, #240]	; (10008914 <gpio_pin_set_config+0x1a4>)
10008822:	880c      	ldrh	r4, [r1, #0]
10008824:	221f      	movs	r2, #31
10008826:	1a10      	subs	r0, r2, r0
10008828:	0080      	lsls	r0, r0, #2
1000882a:	3301      	adds	r3, #1
1000882c:	4083      	lsls	r3, r0
1000882e:	4323      	orrs	r3, r4
10008830:	b29b      	uxth	r3, r3
10008832:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008834:	4a38      	ldr	r2, [pc, #224]	; (10008918 <gpio_pin_set_config+0x1a8>)
10008836:	7811      	ldrb	r1, [r2, #0]
10008838:	2302      	movs	r3, #2
1000883a:	430b      	orrs	r3, r1
1000883c:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000883e:	2300      	movs	r3, #0
10008840:	e064      	b.n	1000890c <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
10008842:	780a      	ldrb	r2, [r1, #0]
10008844:	2a00      	cmp	r2, #0
10008846:	d140      	bne.n	100088ca <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10008848:	280f      	cmp	r0, #15
1000884a:	d808      	bhi.n	1000885e <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000884c:	2301      	movs	r3, #1
1000884e:	4083      	lsls	r3, r0
10008850:	b29b      	uxth	r3, r3
10008852:	4a32      	ldr	r2, [pc, #200]	; (1000891c <gpio_pin_set_config+0x1ac>)
10008854:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008856:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008858:	281f      	cmp	r0, #31
1000885a:	d857      	bhi.n	1000890c <gpio_pin_set_config+0x19c>
1000885c:	e012      	b.n	10008884 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000885e:	281f      	cmp	r0, #31
10008860:	d807      	bhi.n	10008872 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008862:	220f      	movs	r2, #15
10008864:	4002      	ands	r2, r0
10008866:	2301      	movs	r3, #1
10008868:	4093      	lsls	r3, r2
1000886a:	b29b      	uxth	r3, r3
1000886c:	4a2c      	ldr	r2, [pc, #176]	; (10008920 <gpio_pin_set_config+0x1b0>)
1000886e:	8293      	strh	r3, [r2, #20]
10008870:	e008      	b.n	10008884 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008872:	230f      	movs	r3, #15
10008874:	4018      	ands	r0, r3
10008876:	3b0e      	subs	r3, #14
10008878:	4083      	lsls	r3, r0
1000887a:	b29b      	uxth	r3, r3
1000887c:	4a29      	ldr	r2, [pc, #164]	; (10008924 <gpio_pin_set_config+0x1b4>)
1000887e:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008880:	2300      	movs	r3, #0
10008882:	e043      	b.n	1000890c <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10008884:	784b      	ldrb	r3, [r1, #1]
10008886:	2b01      	cmp	r3, #1
10008888:	d00c      	beq.n	100088a4 <gpio_pin_set_config+0x134>
1000888a:	2b00      	cmp	r3, #0
1000888c:	d002      	beq.n	10008894 <gpio_pin_set_config+0x124>
1000888e:	2b02      	cmp	r3, #2
10008890:	d010      	beq.n	100088b4 <gpio_pin_set_config+0x144>
10008892:	e03a      	b.n	1000890a <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008894:	491e      	ldr	r1, [pc, #120]	; (10008910 <gpio_pin_set_config+0x1a0>)
10008896:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008898:	2301      	movs	r3, #1
1000889a:	4083      	lsls	r3, r0
1000889c:	4313      	orrs	r3, r2
1000889e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100088a0:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
100088a2:	e033      	b.n	1000890c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
100088a4:	491a      	ldr	r1, [pc, #104]	; (10008910 <gpio_pin_set_config+0x1a0>)
100088a6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
100088a8:	2201      	movs	r2, #1
100088aa:	4082      	lsls	r2, r0
100088ac:	4393      	bics	r3, r2
100088ae:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100088b0:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
100088b2:	e02b      	b.n	1000890c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
100088b4:	4b16      	ldr	r3, [pc, #88]	; (10008910 <gpio_pin_set_config+0x1a0>)
100088b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
100088b8:	2201      	movs	r2, #1
100088ba:	4082      	lsls	r2, r0
100088bc:	4311      	orrs	r1, r2
100088be:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
100088c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
100088c2:	4391      	bics	r1, r2
100088c4:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100088c6:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
100088c8:	e020      	b.n	1000890c <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100088ca:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
100088cc:	2a01      	cmp	r2, #1
100088ce:	d11d      	bne.n	1000890c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
100088d0:	280f      	cmp	r0, #15
100088d2:	d806      	bhi.n	100088e2 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
100088d4:	3301      	adds	r3, #1
100088d6:	4083      	lsls	r3, r0
100088d8:	b29b      	uxth	r3, r3
100088da:	4a10      	ldr	r2, [pc, #64]	; (1000891c <gpio_pin_set_config+0x1ac>)
100088dc:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100088de:	2300      	movs	r3, #0
100088e0:	e014      	b.n	1000890c <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
100088e2:	281f      	cmp	r0, #31
100088e4:	d808      	bhi.n	100088f8 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
100088e6:	230f      	movs	r3, #15
100088e8:	4018      	ands	r0, r3
100088ea:	3b0e      	subs	r3, #14
100088ec:	4083      	lsls	r3, r0
100088ee:	b29b      	uxth	r3, r3
100088f0:	4a0b      	ldr	r2, [pc, #44]	; (10008920 <gpio_pin_set_config+0x1b0>)
100088f2:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100088f4:	2300      	movs	r3, #0
100088f6:	e009      	b.n	1000890c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
100088f8:	230f      	movs	r3, #15
100088fa:	4018      	ands	r0, r3
100088fc:	3b0e      	subs	r3, #14
100088fe:	4083      	lsls	r3, r0
10008900:	b29b      	uxth	r3, r3
10008902:	4a08      	ldr	r2, [pc, #32]	; (10008924 <gpio_pin_set_config+0x1b4>)
10008904:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008906:	2300      	movs	r3, #0
10008908:	e000      	b.n	1000890c <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000890a:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000890c:	0018      	movs	r0, r3
1000890e:	bd70      	pop	{r4, r5, r6, pc}
10008910:	4000b000 	.word	0x4000b000
10008914:	4000f000 	.word	0x4000f000
10008918:	4000e000 	.word	0x4000e000
1000891c:	40010000 	.word	0x40010000
10008920:	40011000 	.word	0x40011000
10008924:	40013000 	.word	0x40013000

10008928 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
10008928:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000892a:	280f      	cmp	r0, #15
1000892c:	d810      	bhi.n	10008950 <gpio_pin_set_output_level+0x28>
		if(level) {
1000892e:	2900      	cmp	r1, #0
10008930:	d007      	beq.n	10008942 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
10008932:	4a1d      	ldr	r2, [pc, #116]	; (100089a8 <gpio_pin_set_output_level+0x80>)
10008934:	8891      	ldrh	r1, [r2, #4]
10008936:	2301      	movs	r3, #1
10008938:	4083      	lsls	r3, r0
1000893a:	430b      	orrs	r3, r1
1000893c:	b29b      	uxth	r3, r3
1000893e:	8093      	strh	r3, [r2, #4]
10008940:	e031      	b.n	100089a6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
10008942:	4919      	ldr	r1, [pc, #100]	; (100089a8 <gpio_pin_set_output_level+0x80>)
10008944:	888b      	ldrh	r3, [r1, #4]
10008946:	2201      	movs	r2, #1
10008948:	4082      	lsls	r2, r0
1000894a:	4393      	bics	r3, r2
1000894c:	808b      	strh	r3, [r1, #4]
1000894e:	e02a      	b.n	100089a6 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
10008950:	281f      	cmp	r0, #31
10008952:	d814      	bhi.n	1000897e <gpio_pin_set_output_level+0x56>
		if(level) {
10008954:	2900      	cmp	r1, #0
10008956:	d009      	beq.n	1000896c <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008958:	4914      	ldr	r1, [pc, #80]	; (100089ac <gpio_pin_set_output_level+0x84>)
1000895a:	888c      	ldrh	r4, [r1, #4]
1000895c:	220f      	movs	r2, #15
1000895e:	4010      	ands	r0, r2
10008960:	2301      	movs	r3, #1
10008962:	4083      	lsls	r3, r0
10008964:	4323      	orrs	r3, r4
10008966:	b29b      	uxth	r3, r3
10008968:	808b      	strh	r3, [r1, #4]
1000896a:	e01c      	b.n	100089a6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000896c:	490f      	ldr	r1, [pc, #60]	; (100089ac <gpio_pin_set_output_level+0x84>)
1000896e:	888b      	ldrh	r3, [r1, #4]
10008970:	220f      	movs	r2, #15
10008972:	4010      	ands	r0, r2
10008974:	3a0e      	subs	r2, #14
10008976:	4082      	lsls	r2, r0
10008978:	4393      	bics	r3, r2
1000897a:	808b      	strh	r3, [r1, #4]
1000897c:	e013      	b.n	100089a6 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000897e:	2900      	cmp	r1, #0
10008980:	d009      	beq.n	10008996 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008982:	490b      	ldr	r1, [pc, #44]	; (100089b0 <gpio_pin_set_output_level+0x88>)
10008984:	888c      	ldrh	r4, [r1, #4]
10008986:	220f      	movs	r2, #15
10008988:	4010      	ands	r0, r2
1000898a:	2301      	movs	r3, #1
1000898c:	4083      	lsls	r3, r0
1000898e:	4323      	orrs	r3, r4
10008990:	b29b      	uxth	r3, r3
10008992:	808b      	strh	r3, [r1, #4]
10008994:	e007      	b.n	100089a6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008996:	4906      	ldr	r1, [pc, #24]	; (100089b0 <gpio_pin_set_output_level+0x88>)
10008998:	888b      	ldrh	r3, [r1, #4]
1000899a:	220f      	movs	r2, #15
1000899c:	4010      	ands	r0, r2
1000899e:	3a0e      	subs	r2, #14
100089a0:	4082      	lsls	r2, r0
100089a2:	4393      	bics	r3, r2
100089a4:	808b      	strh	r3, [r1, #4]
		}
	}
}
100089a6:	bd10      	pop	{r4, pc}
100089a8:	40010000 	.word	0x40010000
100089ac:	40011000 	.word	0x40011000
100089b0:	40013000 	.word	0x40013000

100089b4 <gpio_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle.
 */
void gpio_pin_toggle_output_level(const uint8_t gpio_pin)
{
	if (gpio_pin < 16) {
100089b4:	280f      	cmp	r0, #15
100089b6:	d807      	bhi.n	100089c8 <gpio_pin_toggle_output_level+0x14>
		GPIO0->DATAOUT.reg ^= (1 << gpio_pin);
100089b8:	4a0e      	ldr	r2, [pc, #56]	; (100089f4 <gpio_pin_toggle_output_level+0x40>)
100089ba:	8891      	ldrh	r1, [r2, #4]
100089bc:	2301      	movs	r3, #1
100089be:	4083      	lsls	r3, r0
100089c0:	404b      	eors	r3, r1
100089c2:	b29b      	uxth	r3, r3
100089c4:	8093      	strh	r3, [r2, #4]
100089c6:	e014      	b.n	100089f2 <gpio_pin_toggle_output_level+0x3e>
	} else if (gpio_pin < 32) {
100089c8:	281f      	cmp	r0, #31
100089ca:	d809      	bhi.n	100089e0 <gpio_pin_toggle_output_level+0x2c>
		GPIO1->DATAOUT.reg ^= (1 << (gpio_pin % 16));
100089cc:	4a0a      	ldr	r2, [pc, #40]	; (100089f8 <gpio_pin_toggle_output_level+0x44>)
100089ce:	8891      	ldrh	r1, [r2, #4]
100089d0:	230f      	movs	r3, #15
100089d2:	4018      	ands	r0, r3
100089d4:	3b0e      	subs	r3, #14
100089d6:	4083      	lsls	r3, r0
100089d8:	404b      	eors	r3, r1
100089da:	b29b      	uxth	r3, r3
100089dc:	8093      	strh	r3, [r2, #4]
100089de:	e008      	b.n	100089f2 <gpio_pin_toggle_output_level+0x3e>
	} else {
		GPIO2->DATAOUT.reg ^= (1 << (gpio_pin % 16));
100089e0:	4a06      	ldr	r2, [pc, #24]	; (100089fc <gpio_pin_toggle_output_level+0x48>)
100089e2:	8891      	ldrh	r1, [r2, #4]
100089e4:	230f      	movs	r3, #15
100089e6:	4018      	ands	r0, r3
100089e8:	3b0e      	subs	r3, #14
100089ea:	4083      	lsls	r3, r0
100089ec:	404b      	eors	r3, r1
100089ee:	b29b      	uxth	r3, r3
100089f0:	8093      	strh	r3, [r2, #4]
	}
}
100089f2:	4770      	bx	lr
100089f4:	40010000 	.word	0x40010000
100089f8:	40011000 	.word	0x40011000
100089fc:	40013000 	.word	0x40013000

10008a00 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008a00:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008a02:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008a04:	23ff      	movs	r3, #255	; 0xff
10008a06:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008a08:	2807      	cmp	r0, #7
10008a0a:	d833      	bhi.n	10008a74 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008a0c:	4a4e      	ldr	r2, [pc, #312]	; (10008b48 <gpio_pinmux_cofiguration+0x148>)
10008a0e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008a10:	3bf8      	subs	r3, #248	; 0xf8
10008a12:	4003      	ands	r3, r0
10008a14:	009b      	lsls	r3, r3, #2
10008a16:	2607      	movs	r6, #7
10008a18:	409e      	lsls	r6, r3
10008a1a:	43b4      	bics	r4, r6
10008a1c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008a1e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008a20:	000e      	movs	r6, r1
10008a22:	409e      	lsls	r6, r3
10008a24:	0033      	movs	r3, r6
10008a26:	4323      	orrs	r3, r4
10008a28:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008a2a:	2901      	cmp	r1, #1
10008a2c:	d000      	beq.n	10008a30 <gpio_pinmux_cofiguration+0x30>
10008a2e:	e08a      	b.n	10008b46 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10008a30:	2803      	cmp	r0, #3
10008a32:	d80f      	bhi.n	10008a54 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008a34:	0011      	movs	r1, r2
10008a36:	22d0      	movs	r2, #208	; 0xd0
10008a38:	0052      	lsls	r2, r2, #1
10008a3a:	588c      	ldr	r4, [r1, r2]
10008a3c:	2303      	movs	r3, #3
10008a3e:	4018      	ands	r0, r3
10008a40:	00c0      	lsls	r0, r0, #3
10008a42:	333c      	adds	r3, #60	; 0x3c
10008a44:	4083      	lsls	r3, r0
10008a46:	439c      	bics	r4, r3
10008a48:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008a4a:	588b      	ldr	r3, [r1, r2]
10008a4c:	4085      	lsls	r5, r0
10008a4e:	431d      	orrs	r5, r3
10008a50:	508d      	str	r5, [r1, r2]
10008a52:	e078      	b.n	10008b46 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008a54:	493c      	ldr	r1, [pc, #240]	; (10008b48 <gpio_pinmux_cofiguration+0x148>)
10008a56:	22d2      	movs	r2, #210	; 0xd2
10008a58:	0052      	lsls	r2, r2, #1
10008a5a:	588c      	ldr	r4, [r1, r2]
10008a5c:	2303      	movs	r3, #3
10008a5e:	4018      	ands	r0, r3
10008a60:	00c0      	lsls	r0, r0, #3
10008a62:	333c      	adds	r3, #60	; 0x3c
10008a64:	4083      	lsls	r3, r0
10008a66:	439c      	bics	r4, r3
10008a68:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008a6a:	588b      	ldr	r3, [r1, r2]
10008a6c:	4085      	lsls	r5, r0
10008a6e:	431d      	orrs	r5, r3
10008a70:	508d      	str	r5, [r1, r2]
10008a72:	e068      	b.n	10008b46 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008a74:	280f      	cmp	r0, #15
10008a76:	d832      	bhi.n	10008ade <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008a78:	4a33      	ldr	r2, [pc, #204]	; (10008b48 <gpio_pinmux_cofiguration+0x148>)
10008a7a:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008a7c:	2307      	movs	r3, #7
10008a7e:	4003      	ands	r3, r0
10008a80:	009b      	lsls	r3, r3, #2
10008a82:	2607      	movs	r6, #7
10008a84:	409e      	lsls	r6, r3
10008a86:	43b4      	bics	r4, r6
10008a88:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008a8a:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008a8c:	000e      	movs	r6, r1
10008a8e:	409e      	lsls	r6, r3
10008a90:	0033      	movs	r3, r6
10008a92:	4323      	orrs	r3, r4
10008a94:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008a96:	2901      	cmp	r1, #1
10008a98:	d155      	bne.n	10008b46 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10008a9a:	280b      	cmp	r0, #11
10008a9c:	d80f      	bhi.n	10008abe <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008a9e:	0011      	movs	r1, r2
10008aa0:	22d4      	movs	r2, #212	; 0xd4
10008aa2:	0052      	lsls	r2, r2, #1
10008aa4:	588c      	ldr	r4, [r1, r2]
10008aa6:	2303      	movs	r3, #3
10008aa8:	4018      	ands	r0, r3
10008aaa:	00c0      	lsls	r0, r0, #3
10008aac:	333c      	adds	r3, #60	; 0x3c
10008aae:	4083      	lsls	r3, r0
10008ab0:	439c      	bics	r4, r3
10008ab2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008ab4:	588b      	ldr	r3, [r1, r2]
10008ab6:	4085      	lsls	r5, r0
10008ab8:	431d      	orrs	r5, r3
10008aba:	508d      	str	r5, [r1, r2]
10008abc:	e043      	b.n	10008b46 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008abe:	4922      	ldr	r1, [pc, #136]	; (10008b48 <gpio_pinmux_cofiguration+0x148>)
10008ac0:	22d6      	movs	r2, #214	; 0xd6
10008ac2:	0052      	lsls	r2, r2, #1
10008ac4:	588c      	ldr	r4, [r1, r2]
10008ac6:	2303      	movs	r3, #3
10008ac8:	4018      	ands	r0, r3
10008aca:	00c0      	lsls	r0, r0, #3
10008acc:	333c      	adds	r3, #60	; 0x3c
10008ace:	4083      	lsls	r3, r0
10008ad0:	439c      	bics	r4, r3
10008ad2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008ad4:	588b      	ldr	r3, [r1, r2]
10008ad6:	4085      	lsls	r5, r0
10008ad8:	431d      	orrs	r5, r3
10008ada:	508d      	str	r5, [r1, r2]
10008adc:	e033      	b.n	10008b46 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
10008ade:	2817      	cmp	r0, #23
10008ae0:	d831      	bhi.n	10008b46 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008ae2:	4a19      	ldr	r2, [pc, #100]	; (10008b48 <gpio_pinmux_cofiguration+0x148>)
10008ae4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008ae6:	2307      	movs	r3, #7
10008ae8:	4003      	ands	r3, r0
10008aea:	009b      	lsls	r3, r3, #2
10008aec:	2607      	movs	r6, #7
10008aee:	409e      	lsls	r6, r3
10008af0:	43b4      	bics	r4, r6
10008af2:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008af4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008af6:	000e      	movs	r6, r1
10008af8:	409e      	lsls	r6, r3
10008afa:	0033      	movs	r3, r6
10008afc:	4323      	orrs	r3, r4
10008afe:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008b00:	2901      	cmp	r1, #1
10008b02:	d120      	bne.n	10008b46 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008b04:	2813      	cmp	r0, #19
10008b06:	d80f      	bhi.n	10008b28 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008b08:	0011      	movs	r1, r2
10008b0a:	22d8      	movs	r2, #216	; 0xd8
10008b0c:	0052      	lsls	r2, r2, #1
10008b0e:	588c      	ldr	r4, [r1, r2]
10008b10:	2303      	movs	r3, #3
10008b12:	4018      	ands	r0, r3
10008b14:	00c0      	lsls	r0, r0, #3
10008b16:	333c      	adds	r3, #60	; 0x3c
10008b18:	4083      	lsls	r3, r0
10008b1a:	439c      	bics	r4, r3
10008b1c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008b1e:	588b      	ldr	r3, [r1, r2]
10008b20:	4085      	lsls	r5, r0
10008b22:	431d      	orrs	r5, r3
10008b24:	508d      	str	r5, [r1, r2]
10008b26:	e00e      	b.n	10008b46 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008b28:	4a07      	ldr	r2, [pc, #28]	; (10008b48 <gpio_pinmux_cofiguration+0x148>)
10008b2a:	23da      	movs	r3, #218	; 0xda
10008b2c:	005b      	lsls	r3, r3, #1
10008b2e:	58d1      	ldr	r1, [r2, r3]
10008b30:	2403      	movs	r4, #3
10008b32:	4020      	ands	r0, r4
10008b34:	00c0      	lsls	r0, r0, #3
10008b36:	343c      	adds	r4, #60	; 0x3c
10008b38:	4084      	lsls	r4, r0
10008b3a:	43a1      	bics	r1, r4
10008b3c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008b3e:	58d1      	ldr	r1, [r2, r3]
10008b40:	4085      	lsls	r5, r0
10008b42:	430d      	orrs	r5, r1
10008b44:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008b46:	bd70      	pop	{r4, r5, r6, pc}
10008b48:	4000b000 	.word	0x4000b000

10008b4c <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
10008b4c:	230c      	movs	r3, #12
10008b4e:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
10008b50:	2300      	movs	r3, #0
10008b52:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
10008b54:	7083      	strb	r3, [r0, #2]
}
10008b56:	4770      	bx	lr

10008b58 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
10008b58:	2301      	movs	r3, #1
10008b5a:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
10008b5c:	2300      	movs	r3, #0
10008b5e:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
10008b60:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
10008b62:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 255;
10008b64:	33ff      	adds	r3, #255	; 0xff
10008b66:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
10008b68:	3bf5      	subs	r3, #245	; 0xf5
10008b6a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
10008b6c:	3301      	adds	r3, #1
10008b6e:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
10008b70:	3301      	adds	r3, #1
10008b72:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
10008b74:	3301      	adds	r3, #1
10008b76:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
10008b78:	3b0b      	subs	r3, #11
10008b7a:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
10008b7c:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
10008b7e:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
10008b80:	6243      	str	r3, [r0, #36]	; 0x24
};
10008b82:	4770      	bx	lr

10008b84 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
10008b84:	b530      	push	{r4, r5, lr}
10008b86:	b083      	sub	sp, #12
10008b88:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
10008b8a:	780b      	ldrb	r3, [r1, #0]
10008b8c:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
10008b8e:	784b      	ldrb	r3, [r1, #1]
10008b90:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
10008b92:	788b      	ldrb	r3, [r1, #2]
10008b94:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10008b96:	ad01      	add	r5, sp, #4
10008b98:	0028      	movs	r0, r5
10008b9a:	4b07      	ldr	r3, [pc, #28]	; (10008bb8 <spi_attach_slave+0x34>)
10008b9c:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10008b9e:	2301      	movs	r3, #1
10008ba0:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
10008ba2:	7820      	ldrb	r0, [r4, #0]
10008ba4:	0029      	movs	r1, r5
10008ba6:	4b05      	ldr	r3, [pc, #20]	; (10008bbc <spi_attach_slave+0x38>)
10008ba8:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
10008baa:	7820      	ldrb	r0, [r4, #0]
10008bac:	2101      	movs	r1, #1
10008bae:	4b04      	ldr	r3, [pc, #16]	; (10008bc0 <spi_attach_slave+0x3c>)
10008bb0:	4798      	blx	r3
}
10008bb2:	b003      	add	sp, #12
10008bb4:	bd30      	pop	{r4, r5, pc}
10008bb6:	46c0      	nop			; (mov r8, r8)
10008bb8:	10008761 	.word	0x10008761
10008bbc:	10008771 	.word	0x10008771
10008bc0:	10008929 	.word	0x10008929

10008bc4 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
10008bc4:	6803      	ldr	r3, [r0, #0]

#if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
10008bc6:	4a0a      	ldr	r2, [pc, #40]	; (10008bf0 <spi_enable+0x2c>)
10008bc8:	4293      	cmp	r3, r2
10008bca:	d105      	bne.n	10008bd8 <spi_enable+0x14>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008bcc:	4a09      	ldr	r2, [pc, #36]	; (10008bf4 <spi_enable+0x30>)
10008bce:	2110      	movs	r1, #16
10008bd0:	6011      	str	r1, [r2, #0]
10008bd2:	3110      	adds	r1, #16
10008bd4:	6011      	str	r1, [r2, #0]
10008bd6:	e007      	b.n	10008be8 <spi_enable+0x24>
		NVIC_EnableIRQ(SPI0_RX_IRQn);
		NVIC_EnableIRQ(SPI0_TX_IRQn);
	} else if(spi_module == SPI1) {
10008bd8:	4a07      	ldr	r2, [pc, #28]	; (10008bf8 <spi_enable+0x34>)
10008bda:	4293      	cmp	r3, r2
10008bdc:	d104      	bne.n	10008be8 <spi_enable+0x24>
10008bde:	4a05      	ldr	r2, [pc, #20]	; (10008bf4 <spi_enable+0x30>)
10008be0:	2140      	movs	r1, #64	; 0x40
10008be2:	6011      	str	r1, [r2, #0]
10008be4:	3140      	adds	r1, #64	; 0x40
10008be6:	6011      	str	r1, [r2, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
10008be8:	2201      	movs	r2, #1
10008bea:	761a      	strb	r2, [r3, #24]
}
10008bec:	4770      	bx	lr
10008bee:	46c0      	nop			; (mov r8, r8)
10008bf0:	40006000 	.word	0x40006000
10008bf4:	e000e100 	.word	0xe000e100
10008bf8:	40007000 	.word	0x40007000

10008bfc <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
10008bfc:	b510      	push	{r4, lr}
	Spi *const spi_module = (module->hw);
10008bfe:	6803      	ldr	r3, [r0, #0]

#  if SPI_CALLBACK_MODE == true
	if(spi_module == SPI0) {
10008c00:	4a17      	ldr	r2, [pc, #92]	; (10008c60 <spi_disable+0x64>)
10008c02:	4293      	cmp	r3, r2
10008c04:	d106      	bne.n	10008c14 <spi_disable+0x18>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008c06:	4917      	ldr	r1, [pc, #92]	; (10008c64 <spi_disable+0x68>)
10008c08:	2280      	movs	r2, #128	; 0x80
10008c0a:	2410      	movs	r4, #16
10008c0c:	508c      	str	r4, [r1, r2]
10008c0e:	3410      	adds	r4, #16
10008c10:	508c      	str	r4, [r1, r2]
10008c12:	e007      	b.n	10008c24 <spi_disable+0x28>
		NVIC_DisableIRQ(SPI0_RX_IRQn);
		NVIC_DisableIRQ(SPI0_TX_IRQn);
	} else if(spi_module == SPI1) {
10008c14:	4a14      	ldr	r2, [pc, #80]	; (10008c68 <spi_disable+0x6c>)
10008c16:	4293      	cmp	r3, r2
10008c18:	d104      	bne.n	10008c24 <spi_disable+0x28>
10008c1a:	4912      	ldr	r1, [pc, #72]	; (10008c64 <spi_disable+0x68>)
10008c1c:	2280      	movs	r2, #128	; 0x80
10008c1e:	2440      	movs	r4, #64	; 0x40
10008c20:	508c      	str	r4, [r1, r2]
10008c22:	508a      	str	r2, [r1, r2]
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10008c24:	2200      	movs	r2, #0
10008c26:	761a      	strb	r2, [r3, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10008c28:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
10008c2a:	4a0d      	ldr	r2, [pc, #52]	; (10008c60 <spi_disable+0x64>)
10008c2c:	4293      	cmp	r3, r2
10008c2e:	d109      	bne.n	10008c44 <spi_disable+0x48>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
10008c30:	2041      	movs	r0, #65	; 0x41
10008c32:	4c0e      	ldr	r4, [pc, #56]	; (10008c6c <spi_disable+0x70>)
10008c34:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
10008c36:	2026      	movs	r0, #38	; 0x26
10008c38:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
10008c3a:	2038      	movs	r0, #56	; 0x38
10008c3c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
10008c3e:	2001      	movs	r0, #1
10008c40:	47a0      	blx	r4
10008c42:	e00b      	b.n	10008c5c <spi_disable+0x60>
	} else if (spi_module == (void *)SPI1) {
10008c44:	4a08      	ldr	r2, [pc, #32]	; (10008c68 <spi_disable+0x6c>)
10008c46:	4293      	cmp	r3, r2
10008c48:	d108      	bne.n	10008c5c <spi_disable+0x60>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
10008c4a:	2042      	movs	r0, #66	; 0x42
10008c4c:	4c07      	ldr	r4, [pc, #28]	; (10008c6c <spi_disable+0x70>)
10008c4e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
10008c50:	2027      	movs	r0, #39	; 0x27
10008c52:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
10008c54:	2039      	movs	r0, #57	; 0x39
10008c56:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
10008c58:	2002      	movs	r0, #2
10008c5a:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
10008c5c:	bd10      	pop	{r4, pc}
10008c5e:	46c0      	nop			; (mov r8, r8)
10008c60:	40006000 	.word	0x40006000
10008c64:	e000e100 	.word	0xe000e100
10008c68:	40007000 	.word	0x40007000
10008c6c:	1000975d 	.word	0x1000975d

10008c70 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
10008c70:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
10008c72:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
10008c74:	4b09      	ldr	r3, [pc, #36]	; (10008c9c <spi_reset+0x2c>)
10008c76:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
10008c78:	4b09      	ldr	r3, [pc, #36]	; (10008ca0 <spi_reset+0x30>)
10008c7a:	429c      	cmp	r4, r3
10008c7c:	d105      	bne.n	10008c8a <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
10008c7e:	2001      	movs	r0, #1
10008c80:	4c08      	ldr	r4, [pc, #32]	; (10008ca4 <spi_reset+0x34>)
10008c82:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
10008c84:	2038      	movs	r0, #56	; 0x38
10008c86:	47a0      	blx	r4
10008c88:	e007      	b.n	10008c9a <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
10008c8a:	4b07      	ldr	r3, [pc, #28]	; (10008ca8 <spi_reset+0x38>)
10008c8c:	429c      	cmp	r4, r3
10008c8e:	d104      	bne.n	10008c9a <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
10008c90:	2002      	movs	r0, #2
10008c92:	4c04      	ldr	r4, [pc, #16]	; (10008ca4 <spi_reset+0x34>)
10008c94:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
10008c96:	2039      	movs	r0, #57	; 0x39
10008c98:	47a0      	blx	r4
	}
}
10008c9a:	bd10      	pop	{r4, pc}
10008c9c:	10008bfd 	.word	0x10008bfd
10008ca0:	40006000 	.word	0x40006000
10008ca4:	10009ac9 	.word	0x10009ac9
10008ca8:	40007000 	.word	0x40007000

10008cac <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
10008cac:	b5f0      	push	{r4, r5, r6, r7, lr}
10008cae:	4657      	mov	r7, sl
10008cb0:	4646      	mov	r6, r8
10008cb2:	b4c0      	push	{r6, r7}
10008cb4:	b083      	sub	sp, #12
10008cb6:	0005      	movs	r5, r0
10008cb8:	4688      	mov	r8, r1
10008cba:	0016      	movs	r6, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
10008cbc:	6029      	str	r1, [r5, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
10008cbe:	7e0b      	ldrb	r3, [r1, #24]
10008cc0:	07db      	lsls	r3, r3, #31
10008cc2:	d501      	bpl.n	10008cc8 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10008cc4:	2300      	movs	r3, #0
10008cc6:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
10008cc8:	0028      	movs	r0, r5
10008cca:	4b5e      	ldr	r3, [pc, #376]	; (10008e44 <spi_init+0x198>)
10008ccc:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10008cce:	682b      	ldr	r3, [r5, #0]

	if (spi_module == (void *)SPI0) {
10008cd0:	4a5d      	ldr	r2, [pc, #372]	; (10008e48 <spi_init+0x19c>)
10008cd2:	4293      	cmp	r3, r2
10008cd4:	d109      	bne.n	10008cea <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
10008cd6:	2041      	movs	r0, #65	; 0x41
10008cd8:	4c5c      	ldr	r4, [pc, #368]	; (10008e4c <spi_init+0x1a0>)
10008cda:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
10008cdc:	2026      	movs	r0, #38	; 0x26
10008cde:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
10008ce0:	2038      	movs	r0, #56	; 0x38
10008ce2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
10008ce4:	2001      	movs	r0, #1
10008ce6:	47a0      	blx	r4
10008ce8:	e00b      	b.n	10008d02 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
10008cea:	4a59      	ldr	r2, [pc, #356]	; (10008e50 <spi_init+0x1a4>)
10008cec:	4293      	cmp	r3, r2
10008cee:	d122      	bne.n	10008d36 <spi_init+0x8a>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
10008cf0:	2042      	movs	r0, #66	; 0x42
10008cf2:	4c56      	ldr	r4, [pc, #344]	; (10008e4c <spi_init+0x1a0>)
10008cf4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
10008cf6:	2027      	movs	r0, #39	; 0x27
10008cf8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
10008cfa:	2039      	movs	r0, #57	; 0x39
10008cfc:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
10008cfe:	2002      	movs	r0, #2
10008d00:	47a0      	blx	r4

	spi_reset(module);
	_spi_clock_enable(module);

#if SPI_CALLBACK_MODE == true
	if (module->hw == SPI0) {
10008d02:	682b      	ldr	r3, [r5, #0]
10008d04:	4a50      	ldr	r2, [pc, #320]	; (10008e48 <spi_init+0x19c>)
10008d06:	4293      	cmp	r3, r2
10008d08:	d109      	bne.n	10008d1e <spi_init+0x72>
		_spi_instances[0] = module;
10008d0a:	4b52      	ldr	r3, [pc, #328]	; (10008e54 <spi_init+0x1a8>)
10008d0c:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_SPIRX0_INDEX, (uint32_t)spi_rx0_isr_handler);
10008d0e:	4952      	ldr	r1, [pc, #328]	; (10008e58 <spi_init+0x1ac>)
10008d10:	2014      	movs	r0, #20
10008d12:	4c52      	ldr	r4, [pc, #328]	; (10008e5c <spi_init+0x1b0>)
10008d14:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_SPITX0_INDEX, (uint32_t)spi_tx0_isr_handler);
10008d16:	4952      	ldr	r1, [pc, #328]	; (10008e60 <spi_init+0x1b4>)
10008d18:	2015      	movs	r0, #21
10008d1a:	47a0      	blx	r4
10008d1c:	e00b      	b.n	10008d36 <spi_init+0x8a>
	} else if (module->hw == SPI1) {
10008d1e:	4a4c      	ldr	r2, [pc, #304]	; (10008e50 <spi_init+0x1a4>)
10008d20:	4293      	cmp	r3, r2
10008d22:	d108      	bne.n	10008d36 <spi_init+0x8a>
		_spi_instances[1] = module;
10008d24:	4b4b      	ldr	r3, [pc, #300]	; (10008e54 <spi_init+0x1a8>)
10008d26:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_SPIRX1_INDEX, (uint32_t)spi_rx1_isr_handler);
10008d28:	494e      	ldr	r1, [pc, #312]	; (10008e64 <spi_init+0x1b8>)
10008d2a:	2016      	movs	r0, #22
10008d2c:	4c4b      	ldr	r4, [pc, #300]	; (10008e5c <spi_init+0x1b0>)
10008d2e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_SPITX1_INDEX, (uint32_t)spi_tx1_isr_handler);
10008d30:	494d      	ldr	r1, [pc, #308]	; (10008e68 <spi_init+0x1bc>)
10008d32:	2017      	movs	r0, #23
10008d34:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10008d36:	a801      	add	r0, sp, #4
10008d38:	4b4c      	ldr	r3, [pc, #304]	; (10008e6c <spi_init+0x1c0>)
10008d3a:	4798      	blx	r3
10008d3c:	0034      	movs	r4, r6
10008d3e:	3408      	adds	r4, #8
10008d40:	2318      	movs	r3, #24
10008d42:	469a      	mov	sl, r3
10008d44:	44b2      	add	sl, r6
10008d46:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
10008d48:	6820      	ldr	r0, [r4, #0]
10008d4a:	1c43      	adds	r3, r0, #1
10008d4c:	d011      	beq.n	10008d72 <spi_init+0xc6>
			if (config->mode == SPI_MODE_MASTER) {
10008d4e:	7833      	ldrb	r3, [r6, #0]
10008d50:	2b01      	cmp	r3, #1
10008d52:	d102      	bne.n	10008d5a <spi_init+0xae>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10008d54:	466a      	mov	r2, sp
10008d56:	7113      	strb	r3, [r2, #4]
10008d58:	e003      	b.n	10008d62 <spi_init+0xb6>
			} else if (config->mode == SPI_MODE_SLAVE) {
10008d5a:	2b00      	cmp	r3, #0
10008d5c:	d101      	bne.n	10008d62 <spi_init+0xb6>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
10008d5e:	466a      	mov	r2, sp
10008d60:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
10008d62:	b2c0      	uxtb	r0, r0
10008d64:	a901      	add	r1, sp, #4
10008d66:	4b42      	ldr	r3, [pc, #264]	; (10008e70 <spi_init+0x1c4>)
10008d68:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
10008d6a:	8a39      	ldrh	r1, [r7, #16]
10008d6c:	7838      	ldrb	r0, [r7, #0]
10008d6e:	4b41      	ldr	r3, [pc, #260]	; (10008e74 <spi_init+0x1c8>)
10008d70:	4798      	blx	r3
10008d72:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
10008d74:	4554      	cmp	r4, sl
10008d76:	d1e6      	bne.n	10008d46 <spi_init+0x9a>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008d78:	78f3      	ldrb	r3, [r6, #3]
10008d7a:	4642      	mov	r2, r8
10008d7c:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
10008d7e:	7833      	ldrb	r3, [r6, #0]
10008d80:	2b01      	cmp	r3, #1
10008d82:	d100      	bne.n	10008d86 <spi_init+0xda>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
10008d84:	7713      	strb	r3, [r2, #28]
	/* Temporary variables */
	uint8_t i;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
10008d86:	2300      	movs	r3, #0
10008d88:	60ab      	str	r3, [r5, #8]
10008d8a:	60eb      	str	r3, [r5, #12]
10008d8c:	612b      	str	r3, [r5, #16]
10008d8e:	616b      	str	r3, [r5, #20]
	}
	module->tx_buffer_ptr              = NULL;
10008d90:	61eb      	str	r3, [r5, #28]
	module->rx_buffer_ptr              = NULL;
10008d92:	61ab      	str	r3, [r5, #24]
	module->remaining_tx_buffer_length = 0x0000;
10008d94:	2200      	movs	r2, #0
10008d96:	84ab      	strh	r3, [r5, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
10008d98:	842b      	strh	r3, [r5, #32]
	module->registered_callback        = 0x00;
10008d9a:	3326      	adds	r3, #38	; 0x26
10008d9c:	54ea      	strb	r2, [r5, r3]
	module->enabled_callback           = 0x00;
10008d9e:	3301      	adds	r3, #1
10008da0:	54ea      	strb	r2, [r5, r3]
	module->status                     = STATUS_OK;
10008da2:	3301      	adds	r3, #1
10008da4:	54ea      	strb	r2, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
10008da6:	3b25      	subs	r3, #37	; 0x25
10008da8:	71eb      	strb	r3, [r5, #7]
	module->locked                     = 0;
10008daa:	712a      	strb	r2, [r5, #4]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
10008dac:	682b      	ldr	r3, [r5, #0]

	module->mode  = config->mode;
10008dae:	7832      	ldrb	r2, [r6, #0]
10008db0:	716a      	strb	r2, [r5, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
10008db2:	7832      	ldrb	r2, [r6, #0]
10008db4:	2a01      	cmp	r2, #1
10008db6:	d101      	bne.n	10008dbc <spi_init+0x110>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
10008db8:	7932      	ldrb	r2, [r6, #4]
10008dba:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
10008dbc:	7872      	ldrb	r2, [r6, #1]
10008dbe:	2a04      	cmp	r2, #4
10008dc0:	d104      	bne.n	10008dcc <spi_init+0x120>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
10008dc2:	2124      	movs	r1, #36	; 0x24
10008dc4:	5c58      	ldrb	r0, [r3, r1]
10008dc6:	4302      	orrs	r2, r0
10008dc8:	545a      	strb	r2, [r3, r1]
10008dca:	e004      	b.n	10008dd6 <spi_init+0x12a>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
10008dcc:	2124      	movs	r1, #36	; 0x24
10008dce:	5c5a      	ldrb	r2, [r3, r1]
10008dd0:	2004      	movs	r0, #4
10008dd2:	4382      	bics	r2, r0
10008dd4:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
10008dd6:	78b2      	ldrb	r2, [r6, #2]
10008dd8:	2a01      	cmp	r2, #1
10008dda:	d01a      	beq.n	10008e12 <spi_init+0x166>
10008ddc:	2a00      	cmp	r2, #0
10008dde:	d004      	beq.n	10008dea <spi_init+0x13e>
10008de0:	2a02      	cmp	r2, #2
10008de2:	d00c      	beq.n	10008dfe <spi_init+0x152>
10008de4:	2a03      	cmp	r2, #3
10008de6:	d01e      	beq.n	10008e26 <spi_init+0x17a>
10008de8:	e026      	b.n	10008e38 <spi_init+0x18c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10008dea:	2224      	movs	r2, #36	; 0x24
10008dec:	5c99      	ldrb	r1, [r3, r2]
10008dee:	2002      	movs	r0, #2
10008df0:	4381      	bics	r1, r0
10008df2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10008df4:	5c99      	ldrb	r1, [r3, r2]
10008df6:	3801      	subs	r0, #1
10008df8:	4381      	bics	r1, r0
10008dfa:	5499      	strb	r1, [r3, r2]
10008dfc:	e01c      	b.n	10008e38 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10008dfe:	2224      	movs	r2, #36	; 0x24
10008e00:	5c98      	ldrb	r0, [r3, r2]
10008e02:	2102      	movs	r1, #2
10008e04:	4301      	orrs	r1, r0
10008e06:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10008e08:	5c99      	ldrb	r1, [r3, r2]
10008e0a:	2001      	movs	r0, #1
10008e0c:	4381      	bics	r1, r0
10008e0e:	5499      	strb	r1, [r3, r2]
10008e10:	e012      	b.n	10008e38 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10008e12:	2224      	movs	r2, #36	; 0x24
10008e14:	5c99      	ldrb	r1, [r3, r2]
10008e16:	2002      	movs	r0, #2
10008e18:	4381      	bics	r1, r0
10008e1a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10008e1c:	5c98      	ldrb	r0, [r3, r2]
10008e1e:	2101      	movs	r1, #1
10008e20:	4301      	orrs	r1, r0
10008e22:	5499      	strb	r1, [r3, r2]
10008e24:	e008      	b.n	10008e38 <spi_init+0x18c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10008e26:	2224      	movs	r2, #36	; 0x24
10008e28:	5c98      	ldrb	r0, [r3, r2]
10008e2a:	2102      	movs	r1, #2
10008e2c:	4301      	orrs	r1, r0
10008e2e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10008e30:	5c98      	ldrb	r0, [r3, r2]
10008e32:	2101      	movs	r1, #1
10008e34:	4301      	orrs	r1, r0
10008e36:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
10008e38:	2000      	movs	r0, #0
10008e3a:	b003      	add	sp, #12
10008e3c:	bc0c      	pop	{r2, r3}
10008e3e:	4690      	mov	r8, r2
10008e40:	469a      	mov	sl, r3
10008e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008e44:	10008c71 	.word	0x10008c71
10008e48:	40006000 	.word	0x40006000
10008e4c:	10009401 	.word	0x10009401
10008e50:	40007000 	.word	0x40007000
10008e54:	1000ab40 	.word	0x1000ab40
10008e58:	10008f1d 	.word	0x10008f1d
10008e5c:	10009f31 	.word	0x10009f31
10008e60:	10009049 	.word	0x10009049
10008e64:	1000914d 	.word	0x1000914d
10008e68:	10009279 	.word	0x10009279
10008e6c:	10008761 	.word	0x10008761
10008e70:	10008771 	.word	0x10008771
10008e74:	10008a01 	.word	0x10008a01

10008e78 <spi_write>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Spi *const spi_module = (module->hw);
10008e78:	6803      	ldr	r3, [r0, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10008e7a:	7a1a      	ldrb	r2, [r3, #8]
	Spi *const spi_module = (module->hw);

	/* Check if the data register has been copied to the shift register */
	if (!_spi_is_ready_to_write(spi_module)) {
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
10008e7c:	2005      	movs	r0, #5
	Assert(module->hw);

	Spi *const spi_module = (module->hw);

	/* Check if the data register has been copied to the shift register */
	if (!_spi_is_ready_to_write(spi_module)) {
10008e7e:	07d2      	lsls	r2, r2, #31
10008e80:	d501      	bpl.n	10008e86 <spi_write+0xe>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->TRANSMIT_DATA.reg = tx_data & SPI_TRANSMIT_DATA_MASK;
10008e82:	7019      	strb	r1, [r3, #0]

	return STATUS_OK;
10008e84:	2000      	movs	r0, #0
}
10008e86:	4770      	bx	lr

10008e88 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
10008e88:	b5f0      	push	{r4, r5, r6, r7, lr}
10008e8a:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
10008e8c:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
10008e8e:	2600      	movs	r6, #0
10008e90:	466d      	mov	r5, sp
10008e92:	71ee      	strb	r6, [r5, #7]
10008e94:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
10008e96:	2c00      	cmp	r4, #0
10008e98:	d034      	beq.n	10008f04 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
10008e9a:	2900      	cmp	r1, #0
10008e9c:	d104      	bne.n	10008ea8 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
10008e9e:	0029      	movs	r1, r5
10008ea0:	7980      	ldrb	r0, [r0, #6]
10008ea2:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
10008ea4:	2701      	movs	r7, #1
10008ea6:	e00b      	b.n	10008ec0 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
10008ea8:	2a00      	cmp	r2, #0
10008eaa:	d005      	beq.n	10008eb8 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008eac:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
10008eae:	2b00      	cmp	r3, #0
10008eb0:	d029      	beq.n	10008f06 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
10008eb2:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10008eb4:	2700      	movs	r7, #0
10008eb6:	e003      	b.n	10008ec0 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
10008eb8:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10008eba:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
10008ebc:	466a      	mov	r2, sp
10008ebe:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
10008ec0:	2528      	movs	r5, #40	; 0x28
10008ec2:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
10008ec4:	07c0      	lsls	r0, r0, #31
10008ec6:	d4fc      	bmi.n	10008ec2 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
10008ec8:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
10008eca:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
10008ecc:	2b00      	cmp	r3, #0
10008ece:	d014      	beq.n	10008efa <spi_transceive_buffer_wait+0x72>
10008ed0:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
10008ed2:	4278      	negs	r0, r7
10008ed4:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
10008ed6:	4270      	negs	r0, r6
10008ed8:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10008eda:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
10008edc:	07c0      	lsls	r0, r0, #31
10008ede:	d5fc      	bpl.n	10008eda <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
10008ee0:	7808      	ldrb	r0, [r1, #0]
10008ee2:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
10008ee4:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
10008ee6:	07c0      	lsls	r0, r0, #31
10008ee8:	d5fc      	bpl.n	10008ee4 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
10008eea:	7920      	ldrb	r0, [r4, #4]
10008eec:	7010      	strb	r0, [r2, #0]
		transfer_len++;
10008eee:	3501      	adds	r5, #1
10008ef0:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
10008ef2:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
10008ef4:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
10008ef6:	42ab      	cmp	r3, r5
10008ef8:	d1ef      	bne.n	10008eda <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
10008efa:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
10008efc:	06db      	lsls	r3, r3, #27
10008efe:	d5fc      	bpl.n	10008efa <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
10008f00:	2000      	movs	r0, #0
10008f02:	e000      	b.n	10008f06 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
10008f04:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
10008f06:	b003      	add	sp, #12
10008f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008f0a:	46c0      	nop			; (mov r8, r8)

10008f0c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
10008f0c:	b510      	push	{r4, lr}
10008f0e:	0013      	movs	r3, r2
	return spi_transceive_buffer_wait(module, tx_data, NULL, length);
10008f10:	2200      	movs	r2, #0
10008f12:	4c01      	ldr	r4, [pc, #4]	; (10008f18 <spi_write_buffer_wait+0xc>)
10008f14:	47a0      	blx	r4
}
10008f16:	bd10      	pop	{r4, pc}
10008f18:	10008e89 	.word	0x10008e89

10008f1c <spi_rx0_isr_handler>:
	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
}

void spi_rx0_isr_handler(void)
{
10008f1c:	b510      	push	{r4, lr}
	struct spi_module *module = _spi_instances[0];
10008f1e:	4b48      	ldr	r3, [pc, #288]	; (10009040 <spi_rx0_isr_handler+0x124>)
10008f20:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10008f22:	6823      	ldr	r3, [r4, #0]
10008f24:	7b1a      	ldrb	r2, [r3, #12]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
10008f26:	2130      	movs	r1, #48	; 0x30
10008f28:	5c59      	ldrb	r1, [r3, r1]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008f2a:	400a      	ands	r2, r1
10008f2c:	07d2      	lsls	r2, r2, #31
10008f2e:	d400      	bmi.n	10008f32 <spi_rx0_isr_handler+0x16>
10008f30:	e085      	b.n	1000903e <spi_rx0_isr_handler+0x122>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
10008f32:	7b1a      	ldrb	r2, [r3, #12]
10008f34:	0692      	lsls	r2, r2, #26
10008f36:	d523      	bpl.n	10008f80 <spi_rx0_isr_handler+0x64>
			if (module->dir != SPI_DIRECTION_WRITE) {
10008f38:	79e2      	ldrb	r2, [r4, #7]
10008f3a:	2a01      	cmp	r2, #1
10008f3c:	d01d      	beq.n	10008f7a <spi_rx0_isr_handler+0x5e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
10008f3e:	211e      	movs	r1, #30
10008f40:	2228      	movs	r2, #40	; 0x28
10008f42:	54a1      	strb	r1, [r4, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
10008f44:	3a25      	subs	r2, #37	; 0x25
10008f46:	71e2      	strb	r2, [r4, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
10008f48:	3112      	adds	r1, #18
10008f4a:	5c5a      	ldrb	r2, [r3, r1]
10008f4c:	2021      	movs	r0, #33	; 0x21
10008f4e:	4382      	bics	r2, r0
10008f50:	545a      	strb	r2, [r3, r1]
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10008f52:	2327      	movs	r3, #39	; 0x27
10008f54:	5ce3      	ldrb	r3, [r4, r3]
10008f56:	071b      	lsls	r3, r3, #28
10008f58:	d50f      	bpl.n	10008f7a <spi_rx0_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
10008f5a:	2326      	movs	r3, #38	; 0x26

				module->hw->RX_INTERRUPT_MASK.reg &=
					~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
					SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10008f5c:	5ce3      	ldrb	r3, [r4, r3]
10008f5e:	071b      	lsls	r3, r3, #28
10008f60:	d50b      	bpl.n	10008f7a <spi_rx0_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
10008f62:	221e      	movs	r2, #30
10008f64:	2328      	movs	r3, #40	; 0x28
10008f66:	54e2      	strb	r2, [r4, r3]
					module->hw->RX_INTERRUPT_MASK.reg &=
10008f68:	6821      	ldr	r1, [r4, #0]
10008f6a:	3212      	adds	r2, #18
10008f6c:	5c8b      	ldrb	r3, [r1, r2]
10008f6e:	3801      	subs	r0, #1
10008f70:	4383      	bics	r3, r0
10008f72:	548b      	strb	r3, [r1, r2]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
10008f74:	0020      	movs	r0, r4
10008f76:	6963      	ldr	r3, [r4, #20]
10008f78:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
10008f7a:	6823      	ldr	r3, [r4, #0]
10008f7c:	791b      	ldrb	r3, [r3, #4]
10008f7e:	e05e      	b.n	1000903e <spi_rx0_isr_handler+0x122>
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
10008f80:	79e2      	ldrb	r2, [r4, #7]
10008f82:	2a01      	cmp	r2, #1
10008f84:	d113      	bne.n	10008fae <spi_rx0_isr_handler+0x92>
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->RECEIVE_DATA.reg;
10008f86:	791a      	ldrb	r2, [r3, #4]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
10008f88:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10008f8a:	3a01      	subs	r2, #1
10008f8c:	b292      	uxth	r2, r2
10008f8e:	8462      	strh	r2, [r4, #34]	; 0x22
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
10008f90:	8c62      	ldrh	r2, [r4, #34]	; 0x22
10008f92:	b292      	uxth	r2, r2
10008f94:	2a00      	cmp	r2, #0
10008f96:	d152      	bne.n	1000903e <spi_rx0_isr_handler+0x122>
					module->hw->RX_INTERRUPT_MASK.reg &=
10008f98:	2130      	movs	r1, #48	; 0x30
10008f9a:	5c5a      	ldrb	r2, [r3, r1]
10008f9c:	2020      	movs	r0, #32
10008f9e:	4382      	bics	r2, r0
10008fa0:	545a      	strb	r2, [r3, r1]
						~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
10008fa2:	2200      	movs	r2, #0
10008fa4:	2328      	movs	r3, #40	; 0x28
10008fa6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
10008fa8:	3b25      	subs	r3, #37	; 0x25
10008faa:	71e3      	strb	r3, [r4, #7]
10008fac:	e047      	b.n	1000903e <spi_rx0_isr_handler+0x122>
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	uint16_t received_data = (spi_hw->RECEIVE_DATA.reg & SPI_RECEIVE_DATA_MASK);
10008fae:	791b      	ldrb	r3, [r3, #4]
10008fb0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10008fb2:	69a2      	ldr	r2, [r4, #24]
10008fb4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008fb6:	69a3      	ldr	r3, [r4, #24]
10008fb8:	3301      	adds	r3, #1
10008fba:	61a3      	str	r3, [r4, #24]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008fbc:	8c23      	ldrh	r3, [r4, #32]
10008fbe:	3b01      	subs	r3, #1
10008fc0:	b29b      	uxth	r3, r3
10008fc2:	8423      	strh	r3, [r4, #32]
						//(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
					//}
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
10008fc4:	8c23      	ldrh	r3, [r4, #32]
10008fc6:	b29b      	uxth	r3, r3
10008fc8:	2b00      	cmp	r3, #0
10008fca:	d138      	bne.n	1000903e <spi_rx0_isr_handler+0x122>
					if(module->dir == SPI_DIRECTION_READ) {
10008fcc:	79e3      	ldrb	r3, [r4, #7]
10008fce:	2b00      	cmp	r3, #0
10008fd0:	d114      	bne.n	10008ffc <spi_rx0_isr_handler+0xe0>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
10008fd2:	3327      	adds	r3, #39	; 0x27
10008fd4:	5ce3      	ldrb	r3, [r4, r3]
10008fd6:	079b      	lsls	r3, r3, #30
10008fd8:	d531      	bpl.n	1000903e <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
10008fda:	2326      	movs	r3, #38	; 0x26
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
10008fdc:	5ce3      	ldrb	r3, [r4, r3]
10008fde:	079b      	lsls	r3, r3, #30
10008fe0:	d52d      	bpl.n	1000903e <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
10008fe2:	2200      	movs	r2, #0
10008fe4:	2328      	movs	r3, #40	; 0x28
10008fe6:	54e2      	strb	r2, [r4, r3]
							module->hw->RX_INTERRUPT_MASK.reg &=
10008fe8:	6821      	ldr	r1, [r4, #0]
10008fea:	3230      	adds	r2, #48	; 0x30
10008fec:	5c8b      	ldrb	r3, [r1, r2]
10008fee:	2001      	movs	r0, #1
10008ff0:	4383      	bics	r3, r0
10008ff2:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
10008ff4:	68e3      	ldr	r3, [r4, #12]
10008ff6:	0020      	movs	r0, r4
10008ff8:	4798      	blx	r3
10008ffa:	e020      	b.n	1000903e <spi_rx0_isr_handler+0x122>
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
10008ffc:	79e3      	ldrb	r3, [r4, #7]
10008ffe:	2b02      	cmp	r3, #2
10009000:	d11d      	bne.n	1000903e <spi_rx0_isr_handler+0x122>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10009002:	3325      	adds	r3, #37	; 0x25
10009004:	5ce3      	ldrb	r3, [r4, r3]
10009006:	075b      	lsls	r3, r3, #29
10009008:	d519      	bpl.n	1000903e <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000900a:	2326      	movs	r3, #38	; 0x26
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000900c:	5ce3      	ldrb	r3, [r4, r3]
1000900e:	075b      	lsls	r3, r3, #29
10009010:	d515      	bpl.n	1000903e <spi_rx0_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
								module->hw->RX_INTERRUPT_MASK.reg &=
10009012:	6821      	ldr	r1, [r4, #0]
10009014:	2230      	movs	r2, #48	; 0x30
10009016:	5c8b      	ldrb	r3, [r1, r2]
10009018:	2001      	movs	r0, #1
1000901a:	4383      	bics	r3, r0
1000901c:	548b      	strb	r3, [r1, r2]
										~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
								if (flag_direction_both[0]) {
1000901e:	4b09      	ldr	r3, [pc, #36]	; (10009044 <spi_rx0_isr_handler+0x128>)
10009020:	781b      	ldrb	r3, [r3, #0]
10009022:	2b00      	cmp	r3, #0
10009024:	d008      	beq.n	10009038 <spi_rx0_isr_handler+0x11c>
									module->status = STATUS_OK;
10009026:	2300      	movs	r3, #0
10009028:	3a08      	subs	r2, #8
1000902a:	54a3      	strb	r3, [r4, r2]
									flag_direction_both[0] = false;
1000902c:	4a05      	ldr	r2, [pc, #20]	; (10009044 <spi_rx0_isr_handler+0x128>)
1000902e:	7013      	strb	r3, [r2, #0]
									(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
10009030:	6923      	ldr	r3, [r4, #16]
10009032:	0020      	movs	r0, r4
10009034:	4798      	blx	r3
10009036:	e002      	b.n	1000903e <spi_rx0_isr_handler+0x122>
								} else {
									flag_direction_both[0] = true;
10009038:	2201      	movs	r2, #1
1000903a:	4b02      	ldr	r3, [pc, #8]	; (10009044 <spi_rx0_isr_handler+0x128>)
1000903c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
1000903e:	bd10      	pop	{r4, pc}
10009040:	1000ab40 	.word	0x1000ab40
10009044:	1000ab38 	.word	0x1000ab38

10009048 <spi_tx0_isr_handler>:

void spi_tx0_isr_handler(void)
{
10009048:	b570      	push	{r4, r5, r6, lr}
	struct spi_module *module = _spi_instances[0];
1000904a:	4b3d      	ldr	r3, [pc, #244]	; (10009140 <spi_tx0_isr_handler+0xf8>)
1000904c:	6818      	ldr	r0, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000904e:	6802      	ldr	r2, [r0, #0]
10009050:	7a13      	ldrb	r3, [r2, #8]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
10009052:	212c      	movs	r1, #44	; 0x2c
10009054:	5c51      	ldrb	r1, [r2, r1]
10009056:	400b      	ands	r3, r1

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
10009058:	07d9      	lsls	r1, r3, #31
1000905a:	d536      	bpl.n	100090ca <spi_tx0_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
1000905c:	7941      	ldrb	r1, [r0, #5]
1000905e:	2901      	cmp	r1, #1
10009060:	d133      	bne.n	100090ca <spi_tx0_isr_handler+0x82>
			(module->dir == SPI_DIRECTION_READ)) {
10009062:	79c1      	ldrb	r1, [r0, #7]
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
10009064:	2900      	cmp	r1, #0
10009066:	d113      	bne.n	10009090 <spi_tx0_isr_handler+0x48>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write dummy byte */
	spi_hw->TRANSMIT_DATA.reg = dummy_write;
10009068:	4936      	ldr	r1, [pc, #216]	; (10009144 <spi_tx0_isr_handler+0xfc>)
1000906a:	7809      	ldrb	r1, [r1, #0]
1000906c:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
1000906e:	8c42      	ldrh	r2, [r0, #34]	; 0x22
10009070:	3a01      	subs	r2, #1
10009072:	b292      	uxth	r2, r2
10009074:	8442      	strh	r2, [r0, #34]	; 0x22
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
10009076:	8c42      	ldrh	r2, [r0, #34]	; 0x22
10009078:	b292      	uxth	r2, r2
1000907a:	2a00      	cmp	r2, #0
1000907c:	d105      	bne.n	1000908a <spi_tx0_isr_handler+0x42>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000907e:	6804      	ldr	r4, [r0, #0]
10009080:	212c      	movs	r1, #44	; 0x2c
10009082:	5c62      	ldrb	r2, [r4, r1]
10009084:	2501      	movs	r5, #1
10009086:	43aa      	bics	r2, r5
10009088:	5462      	strb	r2, [r4, r1]
					~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
1000908a:	7942      	ldrb	r2, [r0, #5]
1000908c:	2a01      	cmp	r2, #1
1000908e:	d11c      	bne.n	100090ca <spi_tx0_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
10009090:	79c2      	ldrb	r2, [r0, #7]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
10009092:	2a00      	cmp	r2, #0
10009094:	d019      	beq.n	100090ca <spi_tx0_isr_handler+0x82>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
10009096:	69c2      	ldr	r2, [r0, #28]
10009098:	7811      	ldrb	r1, [r2, #0]
1000909a:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000909c:	3201      	adds	r2, #1
1000909e:	61c2      	str	r2, [r0, #28]

	/* Write the data to send*/
	spi_hw->TRANSMIT_DATA.reg = data_to_send & SPI_TRANSMIT_DATA_MASK;
100090a0:	6802      	ldr	r2, [r0, #0]
100090a2:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
100090a4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
100090a6:	3a01      	subs	r2, #1
100090a8:	b292      	uxth	r2, r2
100090aa:	8482      	strh	r2, [r0, #36]	; 0x24
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
100090ac:	8c82      	ldrh	r2, [r0, #36]	; 0x24
100090ae:	b292      	uxth	r2, r2
100090b0:	2a00      	cmp	r2, #0
100090b2:	d10a      	bne.n	100090ca <spi_tx0_isr_handler+0x82>
				module->hw->TX_INTERRUPT_MASK.reg &=
100090b4:	6804      	ldr	r4, [r0, #0]
100090b6:	322c      	adds	r2, #44	; 0x2c
100090b8:	5ca1      	ldrb	r1, [r4, r2]
100090ba:	2501      	movs	r5, #1
100090bc:	43a9      	bics	r1, r5
100090be:	54a1      	strb	r1, [r4, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
100090c0:	6804      	ldr	r4, [r0, #0]
100090c2:	5ca5      	ldrb	r5, [r4, r2]
100090c4:	2110      	movs	r1, #16
100090c6:	4329      	orrs	r1, r5
100090c8:	54a1      	strb	r1, [r4, r2]
						SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100090ca:	06db      	lsls	r3, r3, #27
100090cc:	d536      	bpl.n	1000913c <spi_tx0_isr_handler+0xf4>
		if (module->dir == SPI_DIRECTION_WRITE) {
100090ce:	79c3      	ldrb	r3, [r0, #7]
100090d0:	2b01      	cmp	r3, #1
100090d2:	d113      	bne.n	100090fc <spi_tx0_isr_handler+0xb4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
100090d4:	3326      	adds	r3, #38	; 0x26
100090d6:	5cc3      	ldrb	r3, [r0, r3]
100090d8:	07db      	lsls	r3, r3, #31
100090da:	d52f      	bpl.n	1000913c <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
100090dc:	2326      	movs	r3, #38	; 0x26
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
100090de:	5cc3      	ldrb	r3, [r0, r3]
100090e0:	07db      	lsls	r3, r3, #31
100090e2:	d52b      	bpl.n	1000913c <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
					module->status = STATUS_OK;
100090e4:	2200      	movs	r2, #0
100090e6:	2328      	movs	r3, #40	; 0x28
100090e8:	54c2      	strb	r2, [r0, r3]
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
100090ea:	6801      	ldr	r1, [r0, #0]
100090ec:	322c      	adds	r2, #44	; 0x2c
100090ee:	5c8b      	ldrb	r3, [r1, r2]
100090f0:	2410      	movs	r4, #16
100090f2:	43a3      	bics	r3, r4
100090f4:	548b      	strb	r3, [r1, r2]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
100090f6:	6883      	ldr	r3, [r0, #8]
100090f8:	4798      	blx	r3
100090fa:	e01f      	b.n	1000913c <spi_tx0_isr_handler+0xf4>
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
100090fc:	79c3      	ldrb	r3, [r0, #7]
100090fe:	2b02      	cmp	r3, #2
10009100:	d11c      	bne.n	1000913c <spi_tx0_isr_handler+0xf4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10009102:	3325      	adds	r3, #37	; 0x25
10009104:	5cc3      	ldrb	r3, [r0, r3]
10009106:	075b      	lsls	r3, r3, #29
10009108:	d518      	bpl.n	1000913c <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000910a:	2326      	movs	r3, #38	; 0x26
					module->hw->TX_INTERRUPT_MASK.reg &=
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
				}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000910c:	5cc3      	ldrb	r3, [r0, r3]
1000910e:	075b      	lsls	r3, r3, #29
10009110:	d514      	bpl.n	1000913c <spi_tx0_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
					/* Disable interrupt */
					module->hw->TX_INTERRUPT_MASK.reg &=
10009112:	6801      	ldr	r1, [r0, #0]
10009114:	222c      	movs	r2, #44	; 0x2c
10009116:	5c8b      	ldrb	r3, [r1, r2]
10009118:	2410      	movs	r4, #16
1000911a:	43a3      	bics	r3, r4
1000911c:	548b      	strb	r3, [r1, r2]
							~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
					if (flag_direction_both[0]) {
1000911e:	4b0a      	ldr	r3, [pc, #40]	; (10009148 <spi_tx0_isr_handler+0x100>)
10009120:	781b      	ldrb	r3, [r3, #0]
10009122:	2b00      	cmp	r3, #0
10009124:	d007      	beq.n	10009136 <spi_tx0_isr_handler+0xee>
						module->status = STATUS_OK;
10009126:	2300      	movs	r3, #0
10009128:	3a04      	subs	r2, #4
1000912a:	5483      	strb	r3, [r0, r2]
						flag_direction_both[0] = false;
1000912c:	4a06      	ldr	r2, [pc, #24]	; (10009148 <spi_tx0_isr_handler+0x100>)
1000912e:	7013      	strb	r3, [r2, #0]
						(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
10009130:	6903      	ldr	r3, [r0, #16]
10009132:	4798      	blx	r3
10009134:	e002      	b.n	1000913c <spi_tx0_isr_handler+0xf4>
					} else {
						flag_direction_both[0] = true;
10009136:	2201      	movs	r2, #1
10009138:	4b03      	ldr	r3, [pc, #12]	; (10009148 <spi_tx0_isr_handler+0x100>)
1000913a:	701a      	strb	r2, [r3, #0]
					}
			}
		}
	}
}
1000913c:	bd70      	pop	{r4, r5, r6, pc}
1000913e:	46c0      	nop			; (mov r8, r8)
10009140:	1000ab40 	.word	0x1000ab40
10009144:	1000ab3a 	.word	0x1000ab3a
10009148:	1000ab38 	.word	0x1000ab38

1000914c <spi_rx1_isr_handler>:

void spi_rx1_isr_handler(void)
{
1000914c:	b510      	push	{r4, lr}
	struct spi_module *module = _spi_instances[1];
1000914e:	4b48      	ldr	r3, [pc, #288]	; (10009270 <spi_rx1_isr_handler+0x124>)
10009150:	685c      	ldr	r4, [r3, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009152:	6823      	ldr	r3, [r4, #0]
10009154:	7b1a      	ldrb	r2, [r3, #12]
	flags &= module->hw->RX_INTERRUPT_MASK.reg;
10009156:	2130      	movs	r1, #48	; 0x30
10009158:	5c59      	ldrb	r1, [r3, r1]

	if (flags & SPI_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000915a:	400a      	ands	r2, r1
1000915c:	07d2      	lsls	r2, r2, #31
1000915e:	d400      	bmi.n	10009162 <spi_rx1_isr_handler+0x16>
10009160:	e085      	b.n	1000926e <spi_rx1_isr_handler+0x122>
		if (module->hw->RECEIVE_STATUS.reg & SPI_RECEIVE_STATUS_FIFO_OVERRUN) {
10009162:	7b1a      	ldrb	r2, [r3, #12]
10009164:	0692      	lsls	r2, r2, #26
10009166:	d523      	bpl.n	100091b0 <spi_rx1_isr_handler+0x64>
			if (module->dir != SPI_DIRECTION_WRITE) {
10009168:	79e2      	ldrb	r2, [r4, #7]
1000916a:	2a01      	cmp	r2, #1
1000916c:	d01d      	beq.n	100091aa <spi_rx1_isr_handler+0x5e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
1000916e:	211e      	movs	r1, #30
10009170:	2228      	movs	r2, #40	; 0x28
10009172:	54a1      	strb	r1, [r4, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
10009174:	3a25      	subs	r2, #37	; 0x25
10009176:	71e2      	strb	r2, [r4, #7]

				module->hw->RX_INTERRUPT_MASK.reg &=
10009178:	3112      	adds	r1, #18
1000917a:	5c5a      	ldrb	r2, [r3, r1]
1000917c:	2021      	movs	r0, #33	; 0x21
1000917e:	4382      	bics	r2, r0
10009180:	545a      	strb	r2, [r3, r1]
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
10009182:	2327      	movs	r3, #39	; 0x27
10009184:	5ce3      	ldrb	r3, [r4, r3]
10009186:	071b      	lsls	r3, r3, #28
10009188:	d50f      	bpl.n	100091aa <spi_rx1_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
1000918a:	2326      	movs	r3, #38	; 0x26

				module->hw->RX_INTERRUPT_MASK.reg &=
						~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
						SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				/* Run callback if registered and enabled */
				if ((module->enabled_callback & (1 << SPI_CALLBACK_ERROR)) &&
1000918c:	5ce3      	ldrb	r3, [r4, r3]
1000918e:	071b      	lsls	r3, r3, #28
10009190:	d50b      	bpl.n	100091aa <spi_rx1_isr_handler+0x5e>
					(module->registered_callback & (1 << SPI_CALLBACK_ERROR))) {
					module->status = STATUS_ERR_OVERFLOW;
10009192:	221e      	movs	r2, #30
10009194:	2328      	movs	r3, #40	; 0x28
10009196:	54e2      	strb	r2, [r4, r3]
					module->hw->RX_INTERRUPT_MASK.reg &=
10009198:	6821      	ldr	r1, [r4, #0]
1000919a:	3212      	adds	r2, #18
1000919c:	5c8b      	ldrb	r3, [r1, r2]
1000919e:	3801      	subs	r0, #1
100091a0:	4383      	bics	r3, r0
100091a2:	548b      	strb	r3, [r1, r2]
							~(SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK);
					(module->callback[SPI_CALLBACK_ERROR])(module);
100091a4:	0020      	movs	r0, r4
100091a6:	6963      	ldr	r3, [r4, #20]
100091a8:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = module->hw->RECEIVE_DATA.reg;
100091aa:	6823      	ldr	r3, [r4, #0]
100091ac:	791b      	ldrb	r3, [r3, #4]
100091ae:	e05e      	b.n	1000926e <spi_rx1_isr_handler+0x122>
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
100091b0:	79e2      	ldrb	r2, [r4, #7]
100091b2:	2a01      	cmp	r2, #1
100091b4:	d113      	bne.n	100091de <spi_rx1_isr_handler+0x92>
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->RECEIVE_DATA.reg;
100091b6:	791a      	ldrb	r2, [r3, #4]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
100091b8:	8c62      	ldrh	r2, [r4, #34]	; 0x22
100091ba:	3a01      	subs	r2, #1
100091bc:	b292      	uxth	r2, r2
100091be:	8462      	strh	r2, [r4, #34]	; 0x22
			UNUSED(flush);
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
100091c0:	8c62      	ldrh	r2, [r4, #34]	; 0x22
100091c2:	b292      	uxth	r2, r2
100091c4:	2a00      	cmp	r2, #0
100091c6:	d152      	bne.n	1000926e <spi_rx1_isr_handler+0x122>
					module->hw->RX_INTERRUPT_MASK.reg &=
100091c8:	2130      	movs	r1, #48	; 0x30
100091ca:	5c5a      	ldrb	r2, [r3, r1]
100091cc:	2020      	movs	r0, #32
100091ce:	4382      	bics	r2, r0
100091d0:	545a      	strb	r2, [r3, r1]
							~SPI_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK;
					module->status = STATUS_OK;
100091d2:	2200      	movs	r2, #0
100091d4:	2328      	movs	r3, #40	; 0x28
100091d6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
100091d8:	3b25      	subs	r3, #37	; 0x25
100091da:	71e3      	strb	r3, [r4, #7]
100091dc:	e047      	b.n	1000926e <spi_rx1_isr_handler+0x122>
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	uint16_t received_data = (spi_hw->RECEIVE_DATA.reg & SPI_RECEIVE_DATA_MASK);
100091de:	791b      	ldrb	r3, [r3, #4]
100091e0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
100091e2:	69a2      	ldr	r2, [r4, #24]
100091e4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
100091e6:	69a3      	ldr	r3, [r4, #24]
100091e8:	3301      	adds	r3, #1
100091ea:	61a3      	str	r3, [r4, #24]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
100091ec:	8c23      	ldrh	r3, [r4, #32]
100091ee:	3b01      	subs	r3, #1
100091f0:	b29b      	uxth	r3, r3
100091f2:	8423      	strh	r3, [r4, #32]
					module->status = STATUS_OK;
					module->dir = SPI_DIRECTION_IDLE;
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
100091f4:	8c23      	ldrh	r3, [r4, #32]
100091f6:	b29b      	uxth	r3, r3
100091f8:	2b00      	cmp	r3, #0
100091fa:	d138      	bne.n	1000926e <spi_rx1_isr_handler+0x122>
					if(module->dir == SPI_DIRECTION_READ) {
100091fc:	79e3      	ldrb	r3, [r4, #7]
100091fe:	2b00      	cmp	r3, #0
10009200:	d114      	bne.n	1000922c <spi_rx1_isr_handler+0xe0>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
10009202:	3327      	adds	r3, #39	; 0x27
10009204:	5ce3      	ldrb	r3, [r4, r3]
10009206:	079b      	lsls	r3, r3, #30
10009208:	d531      	bpl.n	1000926e <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
1000920a:	2326      	movs	r3, #38	; 0x26
				}
			} else {
				_spi_read(module);
				if (module->remaining_rx_buffer_length == 0) {
					if(module->dir == SPI_DIRECTION_READ) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) &&
1000920c:	5ce3      	ldrb	r3, [r4, r3]
1000920e:	079b      	lsls	r3, r3, #30
10009210:	d52d      	bpl.n	1000926e <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_RECEIVED))) {
							module->status = STATUS_OK;
10009212:	2200      	movs	r2, #0
10009214:	2328      	movs	r3, #40	; 0x28
10009216:	54e2      	strb	r2, [r4, r3]
							module->hw->RX_INTERRUPT_MASK.reg &=
10009218:	6821      	ldr	r1, [r4, #0]
1000921a:	3230      	adds	r2, #48	; 0x30
1000921c:	5c8b      	ldrb	r3, [r1, r2]
1000921e:	2001      	movs	r0, #1
10009220:	4383      	bics	r3, r0
10009222:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
10009224:	68e3      	ldr	r3, [r4, #12]
10009226:	0020      	movs	r0, r4
10009228:	4798      	blx	r3
1000922a:	e020      	b.n	1000926e <spi_rx1_isr_handler+0x122>
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
1000922c:	79e3      	ldrb	r3, [r4, #7]
1000922e:	2b02      	cmp	r3, #2
10009230:	d11d      	bne.n	1000926e <spi_rx1_isr_handler+0x122>
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10009232:	3325      	adds	r3, #37	; 0x25
10009234:	5ce3      	ldrb	r3, [r4, r3]
10009236:	075b      	lsls	r3, r3, #29
10009238:	d519      	bpl.n	1000926e <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000923a:	2326      	movs	r3, #38	; 0x26
							module->hw->RX_INTERRUPT_MASK.reg &=
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
						}
					} else if (module->dir == SPI_DIRECTION_BOTH) {
						if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000923c:	5ce3      	ldrb	r3, [r4, r3]
1000923e:	075b      	lsls	r3, r3, #29
10009240:	d515      	bpl.n	1000926e <spi_rx1_isr_handler+0x122>
							(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
							module->hw->RX_INTERRUPT_MASK.reg &=
10009242:	6821      	ldr	r1, [r4, #0]
10009244:	2230      	movs	r2, #48	; 0x30
10009246:	5c8b      	ldrb	r3, [r1, r2]
10009248:	2001      	movs	r0, #1
1000924a:	4383      	bics	r3, r0
1000924c:	548b      	strb	r3, [r1, r2]
									~(SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
							if (flag_direction_both[1]) {
1000924e:	4b09      	ldr	r3, [pc, #36]	; (10009274 <spi_rx1_isr_handler+0x128>)
10009250:	785b      	ldrb	r3, [r3, #1]
10009252:	2b00      	cmp	r3, #0
10009254:	d008      	beq.n	10009268 <spi_rx1_isr_handler+0x11c>
								module->status = STATUS_OK;
10009256:	2300      	movs	r3, #0
10009258:	3a08      	subs	r2, #8
1000925a:	54a3      	strb	r3, [r4, r2]
								flag_direction_both[1] = false;
1000925c:	4a05      	ldr	r2, [pc, #20]	; (10009274 <spi_rx1_isr_handler+0x128>)
1000925e:	7053      	strb	r3, [r2, #1]
								(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
10009260:	6923      	ldr	r3, [r4, #16]
10009262:	0020      	movs	r0, r4
10009264:	4798      	blx	r3
10009266:	e002      	b.n	1000926e <spi_rx1_isr_handler+0x122>
							} else {
								flag_direction_both[1] = true;
10009268:	2201      	movs	r2, #1
1000926a:	4b02      	ldr	r3, [pc, #8]	; (10009274 <spi_rx1_isr_handler+0x128>)
1000926c:	705a      	strb	r2, [r3, #1]
					}
				}
			}
		}
	}
}
1000926e:	bd10      	pop	{r4, pc}
10009270:	1000ab40 	.word	0x1000ab40
10009274:	1000ab38 	.word	0x1000ab38

10009278 <spi_tx1_isr_handler>:

void spi_tx1_isr_handler(void)
{
10009278:	b570      	push	{r4, r5, r6, lr}
	struct spi_module *module = _spi_instances[1];
1000927a:	4b3d      	ldr	r3, [pc, #244]	; (10009370 <spi_tx1_isr_handler+0xf8>)
1000927c:	6858      	ldr	r0, [r3, #4]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000927e:	6802      	ldr	r2, [r0, #0]
10009280:	7a13      	ldrb	r3, [r2, #8]
	flags &= module->hw->TX_INTERRUPT_MASK.reg;
10009282:	212c      	movs	r1, #44	; 0x2c
10009284:	5c51      	ldrb	r1, [r2, r1]
10009286:	400b      	ands	r3, r1

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
10009288:	07d9      	lsls	r1, r3, #31
1000928a:	d536      	bpl.n	100092fa <spi_tx1_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
1000928c:	7941      	ldrb	r1, [r0, #5]
1000928e:	2901      	cmp	r1, #1
10009290:	d133      	bne.n	100092fa <spi_tx1_isr_handler+0x82>
		(module->dir == SPI_DIRECTION_READ)) {
10009292:	79c1      	ldrb	r1, [r0, #7]
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	flags &= module->hw->TX_INTERRUPT_MASK.reg;

	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_1) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
10009294:	2900      	cmp	r1, #0
10009296:	d113      	bne.n	100092c0 <spi_tx1_isr_handler+0x48>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write dummy byte */
	spi_hw->TRANSMIT_DATA.reg = dummy_write;
10009298:	4936      	ldr	r1, [pc, #216]	; (10009374 <spi_tx1_isr_handler+0xfc>)
1000929a:	7809      	ldrb	r1, [r1, #0]
1000929c:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
1000929e:	8c42      	ldrh	r2, [r0, #34]	; 0x22
100092a0:	3a01      	subs	r2, #1
100092a2:	b292      	uxth	r2, r2
100092a4:	8442      	strh	r2, [r0, #34]	; 0x22
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
		(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
100092a6:	8c42      	ldrh	r2, [r0, #34]	; 0x22
100092a8:	b292      	uxth	r2, r2
100092aa:	2a00      	cmp	r2, #0
100092ac:	d105      	bne.n	100092ba <spi_tx1_isr_handler+0x42>
				/* Disable the Data Register Empty Interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
100092ae:	6804      	ldr	r4, [r0, #0]
100092b0:	212c      	movs	r1, #44	; 0x2c
100092b2:	5c62      	ldrb	r2, [r4, r1]
100092b4:	2501      	movs	r5, #1
100092b6:	43aa      	bics	r2, r5
100092b8:	5462      	strb	r2, [r4, r1]
				~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			}
		}
#  endif
		if (0
100092ba:	7942      	ldrb	r2, [r0, #5]
100092bc:	2a01      	cmp	r2, #1
100092be:	d11c      	bne.n	100092fa <spi_tx1_isr_handler+0x82>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
		(module->dir != SPI_DIRECTION_READ))
100092c0:	79c2      	ldrb	r2, [r0, #7]
			}
		}
#  endif
		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
100092c2:	2a00      	cmp	r2, #0
100092c4:	d019      	beq.n	100092fa <spi_tx1_isr_handler+0x82>
{
	/* Pointer to the hardware module instance */
	Spi *const spi_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
100092c6:	69c2      	ldr	r2, [r0, #28]
100092c8:	7811      	ldrb	r1, [r2, #0]
100092ca:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
100092cc:	3201      	adds	r2, #1
100092ce:	61c2      	str	r2, [r0, #28]

	/* Write the data to send*/
	spi_hw->TRANSMIT_DATA.reg = data_to_send & SPI_TRANSMIT_DATA_MASK;
100092d0:	6802      	ldr	r2, [r0, #0]
100092d2:	7011      	strb	r1, [r2, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
100092d4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
100092d6:	3a01      	subs	r2, #1
100092d8:	b292      	uxth	r2, r2
100092da:	8482      	strh	r2, [r0, #36]	; 0x24
		|| ((module->mode == SPI_MODE_SLAVE) &&
		(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
100092dc:	8c82      	ldrh	r2, [r0, #36]	; 0x24
100092de:	b292      	uxth	r2, r2
100092e0:	2a00      	cmp	r2, #0
100092e2:	d10a      	bne.n	100092fa <spi_tx1_isr_handler+0x82>
				module->hw->TX_INTERRUPT_MASK.reg &=
100092e4:	6804      	ldr	r4, [r0, #0]
100092e6:	322c      	adds	r2, #44	; 0x2c
100092e8:	5ca1      	ldrb	r1, [r4, r2]
100092ea:	2501      	movs	r5, #1
100092ec:	43a9      	bics	r1, r5
100092ee:	54a1      	strb	r1, [r4, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
				module->hw->TX_INTERRUPT_MASK.reg |=
100092f0:	6804      	ldr	r4, [r0, #0]
100092f2:	5ca5      	ldrb	r5, [r4, r2]
100092f4:	2110      	movs	r1, #16
100092f6:	4329      	orrs	r1, r5
100092f8:	54a1      	strb	r1, [r4, r2]
				SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100092fa:	06db      	lsls	r3, r3, #27
100092fc:	d536      	bpl.n	1000936c <spi_tx1_isr_handler+0xf4>
		if (module->dir == SPI_DIRECTION_WRITE) {
100092fe:	79c3      	ldrb	r3, [r0, #7]
10009300:	2b01      	cmp	r3, #1
10009302:	d113      	bne.n	1000932c <spi_tx1_isr_handler+0xb4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
10009304:	3326      	adds	r3, #38	; 0x26
10009306:	5cc3      	ldrb	r3, [r0, r3]
10009308:	07db      	lsls	r3, r3, #31
1000930a:	d52f      	bpl.n	1000936c <spi_tx1_isr_handler+0xf4>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
1000930c:	2326      	movs	r3, #38	; 0x26
			}
		}
	}
	if (flags & SPI_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if (module->dir == SPI_DIRECTION_WRITE) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)) &&
1000930e:	5cc3      	ldrb	r3, [r0, r3]
10009310:	07db      	lsls	r3, r3, #31
10009312:	d52b      	bpl.n	1000936c <spi_tx1_isr_handler+0xf4>
			(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED))) {
				module->status = STATUS_OK;
10009314:	2200      	movs	r2, #0
10009316:	2328      	movs	r3, #40	; 0x28
10009318:	54c2      	strb	r2, [r0, r3]
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
1000931a:	6801      	ldr	r1, [r0, #0]
1000931c:	322c      	adds	r2, #44	; 0x2c
1000931e:	5c8b      	ldrb	r3, [r1, r2]
10009320:	2410      	movs	r4, #16
10009322:	43a3      	bics	r3, r4
10009324:	548b      	strb	r3, [r1, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
10009326:	6883      	ldr	r3, [r0, #8]
10009328:	4798      	blx	r3
1000932a:	e01f      	b.n	1000936c <spi_tx1_isr_handler+0xf4>
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
1000932c:	79c3      	ldrb	r3, [r0, #7]
1000932e:	2b02      	cmp	r3, #2
10009330:	d11c      	bne.n	1000936c <spi_tx1_isr_handler+0xf4>
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
10009332:	3325      	adds	r3, #37	; 0x25
10009334:	5cc3      	ldrb	r3, [r0, r3]
10009336:	075b      	lsls	r3, r3, #29
10009338:	d518      	bpl.n	1000936c <spi_tx1_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
1000933a:	2326      	movs	r3, #38	; 0x26
				module->hw->TX_INTERRUPT_MASK.reg &=
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
			}
		} else if (module->dir == SPI_DIRECTION_BOTH) {
			if ((module->enabled_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) &&
1000933c:	5cc3      	ldrb	r3, [r0, r3]
1000933e:	075b      	lsls	r3, r3, #29
10009340:	d514      	bpl.n	1000936c <spi_tx1_isr_handler+0xf4>
				(module->registered_callback & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED))) {
				/* Disable interrupt */
				module->hw->TX_INTERRUPT_MASK.reg &=
10009342:	6801      	ldr	r1, [r0, #0]
10009344:	222c      	movs	r2, #44	; 0x2c
10009346:	5c8b      	ldrb	r3, [r1, r2]
10009348:	2410      	movs	r4, #16
1000934a:	43a3      	bics	r3, r4
1000934c:	548b      	strb	r3, [r1, r2]
						~SPI_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
				if (flag_direction_both[1]) {
1000934e:	4b0a      	ldr	r3, [pc, #40]	; (10009378 <spi_tx1_isr_handler+0x100>)
10009350:	785b      	ldrb	r3, [r3, #1]
10009352:	2b00      	cmp	r3, #0
10009354:	d007      	beq.n	10009366 <spi_tx1_isr_handler+0xee>
					module->status = STATUS_OK;
10009356:	2300      	movs	r3, #0
10009358:	3a04      	subs	r2, #4
1000935a:	5483      	strb	r3, [r0, r2]
					flag_direction_both[1] = false;
1000935c:	4a06      	ldr	r2, [pc, #24]	; (10009378 <spi_tx1_isr_handler+0x100>)
1000935e:	7053      	strb	r3, [r2, #1]
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
10009360:	6903      	ldr	r3, [r0, #16]
10009362:	4798      	blx	r3
10009364:	e002      	b.n	1000936c <spi_tx1_isr_handler+0xf4>
				} else {
					flag_direction_both[1] = true;
10009366:	2201      	movs	r2, #1
10009368:	4b03      	ldr	r3, [pc, #12]	; (10009378 <spi_tx1_isr_handler+0x100>)
1000936a:	705a      	strb	r2, [r3, #1]
				}
			}
		}
	}
}
1000936c:	bd70      	pop	{r4, r5, r6, pc}
1000936e:	46c0      	nop			; (mov r8, r8)
10009370:	1000ab40 	.word	0x1000ab40
10009374:	1000ab3a 	.word	0x1000ab3a
10009378:	1000ab38 	.word	0x1000ab38

1000937c <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000937c:	2801      	cmp	r0, #1
1000937e:	d00d      	beq.n	1000939c <system_clock_config+0x20>
10009380:	2800      	cmp	r0, #0
10009382:	d002      	beq.n	1000938a <system_clock_config+0xe>
10009384:	2802      	cmp	r0, #2
10009386:	d01c      	beq.n	100093c2 <system_clock_config+0x46>
10009388:	e02e      	b.n	100093e8 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000938a:	4a18      	ldr	r2, [pc, #96]	; (100093ec <system_clock_config+0x70>)
1000938c:	6990      	ldr	r0, [r2, #24]
1000938e:	230c      	movs	r3, #12
10009390:	4303      	orrs	r3, r0
10009392:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10009394:	4a16      	ldr	r2, [pc, #88]	; (100093f0 <system_clock_config+0x74>)
10009396:	4b17      	ldr	r3, [pc, #92]	; (100093f4 <system_clock_config+0x78>)
10009398:	601a      	str	r2, [r3, #0]
			break;
1000939a:	e01a      	b.n	100093d2 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000939c:	4b13      	ldr	r3, [pc, #76]	; (100093ec <system_clock_config+0x70>)
1000939e:	6998      	ldr	r0, [r3, #24]
100093a0:	2208      	movs	r2, #8
100093a2:	4302      	orrs	r2, r0
100093a4:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
100093a6:	699a      	ldr	r2, [r3, #24]
100093a8:	2004      	movs	r0, #4
100093aa:	4382      	bics	r2, r0
100093ac:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
100093ae:	4a12      	ldr	r2, [pc, #72]	; (100093f8 <system_clock_config+0x7c>)
100093b0:	6853      	ldr	r3, [r2, #4]
100093b2:	2080      	movs	r0, #128	; 0x80
100093b4:	0300      	lsls	r0, r0, #12
100093b6:	4303      	orrs	r3, r0
100093b8:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
100093ba:	4a10      	ldr	r2, [pc, #64]	; (100093fc <system_clock_config+0x80>)
100093bc:	4b0d      	ldr	r3, [pc, #52]	; (100093f4 <system_clock_config+0x78>)
100093be:	601a      	str	r2, [r3, #0]
			break;
100093c0:	e007      	b.n	100093d2 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
100093c2:	4a0a      	ldr	r2, [pc, #40]	; (100093ec <system_clock_config+0x70>)
100093c4:	6993      	ldr	r3, [r2, #24]
100093c6:	200c      	movs	r0, #12
100093c8:	4383      	bics	r3, r0
100093ca:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
100093cc:	4a08      	ldr	r2, [pc, #32]	; (100093f0 <system_clock_config+0x74>)
100093ce:	4b09      	ldr	r3, [pc, #36]	; (100093f4 <system_clock_config+0x78>)
100093d0:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
100093d2:	4b06      	ldr	r3, [pc, #24]	; (100093ec <system_clock_config+0x70>)
100093d4:	699a      	ldr	r2, [r3, #24]
100093d6:	2003      	movs	r0, #3
100093d8:	4382      	bics	r2, r0
100093da:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
100093dc:	699a      	ldr	r2, [r3, #24]
100093de:	4001      	ands	r1, r0
100093e0:	4311      	orrs	r1, r2
100093e2:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
100093e4:	2000      	movs	r0, #0
100093e6:	e000      	b.n	100093ea <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
100093e8:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
100093ea:	4770      	bx	lr
100093ec:	4000b000 	.word	0x4000b000
100093f0:	018cba80 	.word	0x018cba80
100093f4:	1000ab48 	.word	0x1000ab48
100093f8:	4000f000 	.word	0x4000f000
100093fc:	001e8480 	.word	0x001e8480

10009400 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10009400:	b500      	push	{lr}
	switch (peripheral) {
10009402:	2835      	cmp	r0, #53	; 0x35
10009404:	d900      	bls.n	10009408 <system_clock_peripheral_enable+0x8>
10009406:	e1a2      	b.n	1000974e <system_clock_peripheral_enable+0x34e>
10009408:	0080      	lsls	r0, r0, #2
1000940a:	4bd2      	ldr	r3, [pc, #840]	; (10009754 <system_clock_peripheral_enable+0x354>)
1000940c:	581b      	ldr	r3, [r3, r0]
1000940e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009410:	4ad1      	ldr	r2, [pc, #836]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009412:	68d1      	ldr	r1, [r2, #12]
10009414:	2302      	movs	r3, #2
10009416:	430b      	orrs	r3, r1
10009418:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000941a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000941c:	e198      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000941e:	4ace      	ldr	r2, [pc, #824]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009420:	68d1      	ldr	r1, [r2, #12]
10009422:	2304      	movs	r3, #4
10009424:	430b      	orrs	r3, r1
10009426:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009428:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000942a:	e191      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000942c:	4aca      	ldr	r2, [pc, #808]	; (10009758 <system_clock_peripheral_enable+0x358>)
1000942e:	68d1      	ldr	r1, [r2, #12]
10009430:	2308      	movs	r3, #8
10009432:	430b      	orrs	r3, r1
10009434:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009436:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
10009438:	e18a      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000943a:	4ac7      	ldr	r2, [pc, #796]	; (10009758 <system_clock_peripheral_enable+0x358>)
1000943c:	68d1      	ldr	r1, [r2, #12]
1000943e:	2310      	movs	r3, #16
10009440:	430b      	orrs	r3, r1
10009442:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009444:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
10009446:	e183      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009448:	4ac3      	ldr	r2, [pc, #780]	; (10009758 <system_clock_peripheral_enable+0x358>)
1000944a:	68d1      	ldr	r1, [r2, #12]
1000944c:	2320      	movs	r3, #32
1000944e:	430b      	orrs	r3, r1
10009450:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009452:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
10009454:	e17c      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009456:	4ac0      	ldr	r2, [pc, #768]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009458:	68d1      	ldr	r1, [r2, #12]
1000945a:	2380      	movs	r3, #128	; 0x80
1000945c:	430b      	orrs	r3, r1
1000945e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009460:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10009462:	e175      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009464:	4abc      	ldr	r2, [pc, #752]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009466:	68d3      	ldr	r3, [r2, #12]
10009468:	2180      	movs	r1, #128	; 0x80
1000946a:	0049      	lsls	r1, r1, #1
1000946c:	430b      	orrs	r3, r1
1000946e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009470:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
10009472:	e16d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009474:	4ab8      	ldr	r2, [pc, #736]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009476:	68d3      	ldr	r3, [r2, #12]
10009478:	2180      	movs	r1, #128	; 0x80
1000947a:	0109      	lsls	r1, r1, #4
1000947c:	430b      	orrs	r3, r1
1000947e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009480:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
10009482:	e165      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009484:	4ab4      	ldr	r2, [pc, #720]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009486:	68d3      	ldr	r3, [r2, #12]
10009488:	2180      	movs	r1, #128	; 0x80
1000948a:	0149      	lsls	r1, r1, #5
1000948c:	430b      	orrs	r3, r1
1000948e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009490:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
10009492:	e15d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009494:	4ab0      	ldr	r2, [pc, #704]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009496:	68d3      	ldr	r3, [r2, #12]
10009498:	2180      	movs	r1, #128	; 0x80
1000949a:	0189      	lsls	r1, r1, #6
1000949c:	430b      	orrs	r3, r1
1000949e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
100094a2:	e155      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094a4:	4aac      	ldr	r2, [pc, #688]	; (10009758 <system_clock_peripheral_enable+0x358>)
100094a6:	68d3      	ldr	r3, [r2, #12]
100094a8:	2180      	movs	r1, #128	; 0x80
100094aa:	01c9      	lsls	r1, r1, #7
100094ac:	430b      	orrs	r3, r1
100094ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
100094b2:	e14d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094b4:	4aa8      	ldr	r2, [pc, #672]	; (10009758 <system_clock_peripheral_enable+0x358>)
100094b6:	68d3      	ldr	r3, [r2, #12]
100094b8:	2180      	movs	r1, #128	; 0x80
100094ba:	0209      	lsls	r1, r1, #8
100094bc:	430b      	orrs	r3, r1
100094be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
100094c2:	e145      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094c4:	4aa4      	ldr	r2, [pc, #656]	; (10009758 <system_clock_peripheral_enable+0x358>)
100094c6:	68d3      	ldr	r3, [r2, #12]
100094c8:	2180      	movs	r1, #128	; 0x80
100094ca:	0249      	lsls	r1, r1, #9
100094cc:	430b      	orrs	r3, r1
100094ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
100094d2:	e13d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094d4:	4aa0      	ldr	r2, [pc, #640]	; (10009758 <system_clock_peripheral_enable+0x358>)
100094d6:	68d3      	ldr	r3, [r2, #12]
100094d8:	2180      	movs	r1, #128	; 0x80
100094da:	0289      	lsls	r1, r1, #10
100094dc:	430b      	orrs	r3, r1
100094de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
100094e2:	e135      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094e4:	4a9c      	ldr	r2, [pc, #624]	; (10009758 <system_clock_peripheral_enable+0x358>)
100094e6:	68d3      	ldr	r3, [r2, #12]
100094e8:	2180      	movs	r1, #128	; 0x80
100094ea:	02c9      	lsls	r1, r1, #11
100094ec:	430b      	orrs	r3, r1
100094ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
100094f2:	e12d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094f4:	4a98      	ldr	r2, [pc, #608]	; (10009758 <system_clock_peripheral_enable+0x358>)
100094f6:	68d3      	ldr	r3, [r2, #12]
100094f8:	2180      	movs	r1, #128	; 0x80
100094fa:	0309      	lsls	r1, r1, #12
100094fc:	430b      	orrs	r3, r1
100094fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009500:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10009502:	e125      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009504:	4a94      	ldr	r2, [pc, #592]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009506:	68d3      	ldr	r3, [r2, #12]
10009508:	2180      	movs	r1, #128	; 0x80
1000950a:	0349      	lsls	r1, r1, #13
1000950c:	430b      	orrs	r3, r1
1000950e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009510:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10009512:	e11d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009514:	4a90      	ldr	r2, [pc, #576]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009516:	68d3      	ldr	r3, [r2, #12]
10009518:	2180      	movs	r1, #128	; 0x80
1000951a:	0389      	lsls	r1, r1, #14
1000951c:	430b      	orrs	r3, r1
1000951e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009520:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10009522:	e115      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009524:	4a8c      	ldr	r2, [pc, #560]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009526:	68d3      	ldr	r3, [r2, #12]
10009528:	2180      	movs	r1, #128	; 0x80
1000952a:	03c9      	lsls	r1, r1, #15
1000952c:	430b      	orrs	r3, r1
1000952e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009530:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10009532:	e10d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009534:	4a88      	ldr	r2, [pc, #544]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009536:	68d3      	ldr	r3, [r2, #12]
10009538:	2180      	movs	r1, #128	; 0x80
1000953a:	0409      	lsls	r1, r1, #16
1000953c:	430b      	orrs	r3, r1
1000953e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009540:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10009542:	e105      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009544:	4a84      	ldr	r2, [pc, #528]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009546:	68d3      	ldr	r3, [r2, #12]
10009548:	2180      	movs	r1, #128	; 0x80
1000954a:	0449      	lsls	r1, r1, #17
1000954c:	430b      	orrs	r3, r1
1000954e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009550:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10009552:	e0fd      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009554:	4a80      	ldr	r2, [pc, #512]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009556:	68d3      	ldr	r3, [r2, #12]
10009558:	2180      	movs	r1, #128	; 0x80
1000955a:	0489      	lsls	r1, r1, #18
1000955c:	430b      	orrs	r3, r1
1000955e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009560:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10009562:	e0f5      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009564:	4a7c      	ldr	r2, [pc, #496]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009566:	68d3      	ldr	r3, [r2, #12]
10009568:	2180      	movs	r1, #128	; 0x80
1000956a:	04c9      	lsls	r1, r1, #19
1000956c:	430b      	orrs	r3, r1
1000956e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009570:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
10009572:	e0ed      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009574:	4a78      	ldr	r2, [pc, #480]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009576:	68d3      	ldr	r3, [r2, #12]
10009578:	2180      	movs	r1, #128	; 0x80
1000957a:	0509      	lsls	r1, r1, #20
1000957c:	430b      	orrs	r3, r1
1000957e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009580:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
10009582:	e0e5      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009584:	4a74      	ldr	r2, [pc, #464]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009586:	68d3      	ldr	r3, [r2, #12]
10009588:	2180      	movs	r1, #128	; 0x80
1000958a:	0549      	lsls	r1, r1, #21
1000958c:	430b      	orrs	r3, r1
1000958e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009590:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
10009592:	e0dd      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009594:	4a70      	ldr	r2, [pc, #448]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009596:	68d3      	ldr	r3, [r2, #12]
10009598:	2180      	movs	r1, #128	; 0x80
1000959a:	0589      	lsls	r1, r1, #22
1000959c:	430b      	orrs	r3, r1
1000959e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
100095a2:	e0d5      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100095a4:	4a6c      	ldr	r2, [pc, #432]	; (10009758 <system_clock_peripheral_enable+0x358>)
100095a6:	68d3      	ldr	r3, [r2, #12]
100095a8:	2180      	movs	r1, #128	; 0x80
100095aa:	05c9      	lsls	r1, r1, #23
100095ac:	430b      	orrs	r3, r1
100095ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
100095b2:	e0cd      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095b4:	4a68      	ldr	r2, [pc, #416]	; (10009758 <system_clock_peripheral_enable+0x358>)
100095b6:	6911      	ldr	r1, [r2, #16]
100095b8:	2301      	movs	r3, #1
100095ba:	430b      	orrs	r3, r1
100095bc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095be:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
100095c0:	e0c6      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095c2:	4a65      	ldr	r2, [pc, #404]	; (10009758 <system_clock_peripheral_enable+0x358>)
100095c4:	6911      	ldr	r1, [r2, #16]
100095c6:	2302      	movs	r3, #2
100095c8:	430b      	orrs	r3, r1
100095ca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
100095ce:	e0bf      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095d0:	4a61      	ldr	r2, [pc, #388]	; (10009758 <system_clock_peripheral_enable+0x358>)
100095d2:	6911      	ldr	r1, [r2, #16]
100095d4:	2304      	movs	r3, #4
100095d6:	430b      	orrs	r3, r1
100095d8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095da:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
100095dc:	e0b8      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095de:	4a5e      	ldr	r2, [pc, #376]	; (10009758 <system_clock_peripheral_enable+0x358>)
100095e0:	6911      	ldr	r1, [r2, #16]
100095e2:	2308      	movs	r3, #8
100095e4:	430b      	orrs	r3, r1
100095e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
100095ea:	e0b1      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095ec:	4a5a      	ldr	r2, [pc, #360]	; (10009758 <system_clock_peripheral_enable+0x358>)
100095ee:	6911      	ldr	r1, [r2, #16]
100095f0:	2310      	movs	r3, #16
100095f2:	430b      	orrs	r3, r1
100095f4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095f6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
100095f8:	e0aa      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095fa:	4a57      	ldr	r2, [pc, #348]	; (10009758 <system_clock_peripheral_enable+0x358>)
100095fc:	6911      	ldr	r1, [r2, #16]
100095fe:	2320      	movs	r3, #32
10009600:	430b      	orrs	r3, r1
10009602:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009604:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
10009606:	e0a3      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009608:	4a53      	ldr	r2, [pc, #332]	; (10009758 <system_clock_peripheral_enable+0x358>)
1000960a:	6911      	ldr	r1, [r2, #16]
1000960c:	2340      	movs	r3, #64	; 0x40
1000960e:	430b      	orrs	r3, r1
10009610:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009612:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
10009614:	e09c      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009616:	4a50      	ldr	r2, [pc, #320]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009618:	6911      	ldr	r1, [r2, #16]
1000961a:	2380      	movs	r3, #128	; 0x80
1000961c:	430b      	orrs	r3, r1
1000961e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009620:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
10009622:	e095      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009624:	4a4c      	ldr	r2, [pc, #304]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009626:	6913      	ldr	r3, [r2, #16]
10009628:	2180      	movs	r1, #128	; 0x80
1000962a:	0049      	lsls	r1, r1, #1
1000962c:	430b      	orrs	r3, r1
1000962e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009630:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
10009632:	e08d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009634:	4a48      	ldr	r2, [pc, #288]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009636:	6913      	ldr	r3, [r2, #16]
10009638:	2180      	movs	r1, #128	; 0x80
1000963a:	0089      	lsls	r1, r1, #2
1000963c:	430b      	orrs	r3, r1
1000963e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009640:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
10009642:	e085      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009644:	4a44      	ldr	r2, [pc, #272]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009646:	6913      	ldr	r3, [r2, #16]
10009648:	2180      	movs	r1, #128	; 0x80
1000964a:	00c9      	lsls	r1, r1, #3
1000964c:	430b      	orrs	r3, r1
1000964e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009650:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10009652:	e07d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009654:	4a40      	ldr	r2, [pc, #256]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009656:	6913      	ldr	r3, [r2, #16]
10009658:	2180      	movs	r1, #128	; 0x80
1000965a:	0109      	lsls	r1, r1, #4
1000965c:	430b      	orrs	r3, r1
1000965e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009660:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10009662:	e075      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009664:	4a3c      	ldr	r2, [pc, #240]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009666:	6913      	ldr	r3, [r2, #16]
10009668:	2180      	movs	r1, #128	; 0x80
1000966a:	0149      	lsls	r1, r1, #5
1000966c:	430b      	orrs	r3, r1
1000966e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009670:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10009672:	e06d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009674:	4a38      	ldr	r2, [pc, #224]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009676:	6913      	ldr	r3, [r2, #16]
10009678:	2180      	movs	r1, #128	; 0x80
1000967a:	0189      	lsls	r1, r1, #6
1000967c:	430b      	orrs	r3, r1
1000967e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009680:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10009682:	e065      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009684:	4a34      	ldr	r2, [pc, #208]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009686:	6913      	ldr	r3, [r2, #16]
10009688:	2180      	movs	r1, #128	; 0x80
1000968a:	01c9      	lsls	r1, r1, #7
1000968c:	430b      	orrs	r3, r1
1000968e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009690:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
10009692:	e05d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009694:	4a30      	ldr	r2, [pc, #192]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009696:	6913      	ldr	r3, [r2, #16]
10009698:	2180      	movs	r1, #128	; 0x80
1000969a:	0209      	lsls	r1, r1, #8
1000969c:	430b      	orrs	r3, r1
1000969e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
100096a2:	e055      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096a4:	4a2c      	ldr	r2, [pc, #176]	; (10009758 <system_clock_peripheral_enable+0x358>)
100096a6:	6913      	ldr	r3, [r2, #16]
100096a8:	2180      	movs	r1, #128	; 0x80
100096aa:	0249      	lsls	r1, r1, #9
100096ac:	430b      	orrs	r3, r1
100096ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
100096b2:	e04d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096b4:	4a28      	ldr	r2, [pc, #160]	; (10009758 <system_clock_peripheral_enable+0x358>)
100096b6:	6913      	ldr	r3, [r2, #16]
100096b8:	2180      	movs	r1, #128	; 0x80
100096ba:	0289      	lsls	r1, r1, #10
100096bc:	430b      	orrs	r3, r1
100096be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
100096c2:	e045      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096c4:	4a24      	ldr	r2, [pc, #144]	; (10009758 <system_clock_peripheral_enable+0x358>)
100096c6:	6913      	ldr	r3, [r2, #16]
100096c8:	2180      	movs	r1, #128	; 0x80
100096ca:	02c9      	lsls	r1, r1, #11
100096cc:	430b      	orrs	r3, r1
100096ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
100096d2:	e03d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096d4:	4a20      	ldr	r2, [pc, #128]	; (10009758 <system_clock_peripheral_enable+0x358>)
100096d6:	6913      	ldr	r3, [r2, #16]
100096d8:	2180      	movs	r1, #128	; 0x80
100096da:	0309      	lsls	r1, r1, #12
100096dc:	430b      	orrs	r3, r1
100096de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
100096e2:	e035      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096e4:	4a1c      	ldr	r2, [pc, #112]	; (10009758 <system_clock_peripheral_enable+0x358>)
100096e6:	6913      	ldr	r3, [r2, #16]
100096e8:	2180      	movs	r1, #128	; 0x80
100096ea:	0349      	lsls	r1, r1, #13
100096ec:	430b      	orrs	r3, r1
100096ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
100096f2:	e02d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096f4:	4a18      	ldr	r2, [pc, #96]	; (10009758 <system_clock_peripheral_enable+0x358>)
100096f6:	6913      	ldr	r3, [r2, #16]
100096f8:	2180      	movs	r1, #128	; 0x80
100096fa:	0389      	lsls	r1, r1, #14
100096fc:	430b      	orrs	r3, r1
100096fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009700:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10009702:	e025      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009704:	4a14      	ldr	r2, [pc, #80]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009706:	6913      	ldr	r3, [r2, #16]
10009708:	2180      	movs	r1, #128	; 0x80
1000970a:	03c9      	lsls	r1, r1, #15
1000970c:	430b      	orrs	r3, r1
1000970e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009710:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10009712:	e01d      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009714:	4a10      	ldr	r2, [pc, #64]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009716:	6913      	ldr	r3, [r2, #16]
10009718:	2180      	movs	r1, #128	; 0x80
1000971a:	0409      	lsls	r1, r1, #16
1000971c:	430b      	orrs	r3, r1
1000971e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009720:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009722:	e015      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10009724:	4a0c      	ldr	r2, [pc, #48]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009726:	7d11      	ldrb	r1, [r2, #20]
10009728:	2301      	movs	r3, #1
1000972a:	430b      	orrs	r3, r1
1000972c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000972e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
10009730:	e00e      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10009732:	4a09      	ldr	r2, [pc, #36]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009734:	7d11      	ldrb	r1, [r2, #20]
10009736:	2302      	movs	r3, #2
10009738:	430b      	orrs	r3, r1
1000973a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000973c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000973e:	e007      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10009740:	4a05      	ldr	r2, [pc, #20]	; (10009758 <system_clock_peripheral_enable+0x358>)
10009742:	7d11      	ldrb	r1, [r2, #20]
10009744:	2304      	movs	r3, #4
10009746:	430b      	orrs	r3, r1
10009748:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000974a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000974c:	e000      	b.n	10009750 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000974e:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009750:	bd00      	pop	{pc}
10009752:	46c0      	nop			; (mov r8, r8)
10009754:	1000a7f0 	.word	0x1000a7f0
10009758:	4000b000 	.word	0x4000b000

1000975c <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000975c:	b500      	push	{lr}
	switch (peripheral) {
1000975e:	2835      	cmp	r0, #53	; 0x35
10009760:	d900      	bls.n	10009764 <system_clock_peripheral_disable+0x8>
10009762:	e17d      	b.n	10009a60 <system_clock_peripheral_disable+0x304>
10009764:	0080      	lsls	r0, r0, #2
10009766:	4bbf      	ldr	r3, [pc, #764]	; (10009a64 <system_clock_peripheral_disable+0x308>)
10009768:	581b      	ldr	r3, [r3, r0]
1000976a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000976c:	4abe      	ldr	r2, [pc, #760]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
1000976e:	68d3      	ldr	r3, [r2, #12]
10009770:	2102      	movs	r1, #2
10009772:	438b      	bics	r3, r1
10009774:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009776:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
10009778:	e173      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000977a:	4abb      	ldr	r2, [pc, #748]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
1000977c:	68d3      	ldr	r3, [r2, #12]
1000977e:	2104      	movs	r1, #4
10009780:	438b      	bics	r3, r1
10009782:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009784:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
10009786:	e16c      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009788:	4ab7      	ldr	r2, [pc, #732]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
1000978a:	68d3      	ldr	r3, [r2, #12]
1000978c:	2108      	movs	r1, #8
1000978e:	438b      	bics	r3, r1
10009790:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009792:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
10009794:	e165      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009796:	4ab4      	ldr	r2, [pc, #720]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009798:	68d3      	ldr	r3, [r2, #12]
1000979a:	2110      	movs	r1, #16
1000979c:	438b      	bics	r3, r1
1000979e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
100097a2:	e15e      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100097a4:	4ab0      	ldr	r2, [pc, #704]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100097a6:	68d3      	ldr	r3, [r2, #12]
100097a8:	2120      	movs	r1, #32
100097aa:	438b      	bics	r3, r1
100097ac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
100097b0:	e157      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100097b2:	4aad      	ldr	r2, [pc, #692]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100097b4:	68d3      	ldr	r3, [r2, #12]
100097b6:	2180      	movs	r1, #128	; 0x80
100097b8:	438b      	bics	r3, r1
100097ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
100097be:	e150      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100097c0:	4aa9      	ldr	r2, [pc, #676]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100097c2:	68d1      	ldr	r1, [r2, #12]
100097c4:	4ba9      	ldr	r3, [pc, #676]	; (10009a6c <system_clock_peripheral_disable+0x310>)
100097c6:	400b      	ands	r3, r1
100097c8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
100097cc:	e149      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100097ce:	4aa6      	ldr	r2, [pc, #664]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100097d0:	68d1      	ldr	r1, [r2, #12]
100097d2:	4ba7      	ldr	r3, [pc, #668]	; (10009a70 <system_clock_peripheral_disable+0x314>)
100097d4:	400b      	ands	r3, r1
100097d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
100097da:	e142      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100097dc:	4aa2      	ldr	r2, [pc, #648]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100097de:	68d1      	ldr	r1, [r2, #12]
100097e0:	4ba4      	ldr	r3, [pc, #656]	; (10009a74 <system_clock_peripheral_disable+0x318>)
100097e2:	400b      	ands	r3, r1
100097e4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
100097e8:	e13b      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100097ea:	4a9f      	ldr	r2, [pc, #636]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100097ec:	68d1      	ldr	r1, [r2, #12]
100097ee:	4ba2      	ldr	r3, [pc, #648]	; (10009a78 <system_clock_peripheral_disable+0x31c>)
100097f0:	400b      	ands	r3, r1
100097f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
100097f6:	e134      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100097f8:	4a9b      	ldr	r2, [pc, #620]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100097fa:	68d1      	ldr	r1, [r2, #12]
100097fc:	4b9f      	ldr	r3, [pc, #636]	; (10009a7c <system_clock_peripheral_disable+0x320>)
100097fe:	400b      	ands	r3, r1
10009800:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009802:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
10009804:	e12d      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009806:	4a98      	ldr	r2, [pc, #608]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009808:	68d1      	ldr	r1, [r2, #12]
1000980a:	4b9d      	ldr	r3, [pc, #628]	; (10009a80 <system_clock_peripheral_disable+0x324>)
1000980c:	400b      	ands	r3, r1
1000980e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009810:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
10009812:	e126      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009814:	4a94      	ldr	r2, [pc, #592]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009816:	68d1      	ldr	r1, [r2, #12]
10009818:	4b9a      	ldr	r3, [pc, #616]	; (10009a84 <system_clock_peripheral_disable+0x328>)
1000981a:	400b      	ands	r3, r1
1000981c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000981e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
10009820:	e11f      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009822:	4a91      	ldr	r2, [pc, #580]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009824:	68d1      	ldr	r1, [r2, #12]
10009826:	4b98      	ldr	r3, [pc, #608]	; (10009a88 <system_clock_peripheral_disable+0x32c>)
10009828:	400b      	ands	r3, r1
1000982a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000982c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000982e:	e118      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009830:	4a8d      	ldr	r2, [pc, #564]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009832:	68d1      	ldr	r1, [r2, #12]
10009834:	4b95      	ldr	r3, [pc, #596]	; (10009a8c <system_clock_peripheral_disable+0x330>)
10009836:	400b      	ands	r3, r1
10009838:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000983a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000983c:	e111      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000983e:	4a8a      	ldr	r2, [pc, #552]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009840:	68d1      	ldr	r1, [r2, #12]
10009842:	4b93      	ldr	r3, [pc, #588]	; (10009a90 <system_clock_peripheral_disable+0x334>)
10009844:	400b      	ands	r3, r1
10009846:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009848:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000984a:	e10a      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000984c:	4a86      	ldr	r2, [pc, #536]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
1000984e:	68d1      	ldr	r1, [r2, #12]
10009850:	4b90      	ldr	r3, [pc, #576]	; (10009a94 <system_clock_peripheral_disable+0x338>)
10009852:	400b      	ands	r3, r1
10009854:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009856:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10009858:	e103      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000985a:	4a83      	ldr	r2, [pc, #524]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
1000985c:	68d1      	ldr	r1, [r2, #12]
1000985e:	4b8e      	ldr	r3, [pc, #568]	; (10009a98 <system_clock_peripheral_disable+0x33c>)
10009860:	400b      	ands	r3, r1
10009862:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009864:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10009866:	e0fc      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009868:	4a7f      	ldr	r2, [pc, #508]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
1000986a:	68d1      	ldr	r1, [r2, #12]
1000986c:	4b8b      	ldr	r3, [pc, #556]	; (10009a9c <system_clock_peripheral_disable+0x340>)
1000986e:	400b      	ands	r3, r1
10009870:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009872:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10009874:	e0f5      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009876:	4a7c      	ldr	r2, [pc, #496]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009878:	68d1      	ldr	r1, [r2, #12]
1000987a:	4b89      	ldr	r3, [pc, #548]	; (10009aa0 <system_clock_peripheral_disable+0x344>)
1000987c:	400b      	ands	r3, r1
1000987e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009880:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10009882:	e0ee      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009884:	4a78      	ldr	r2, [pc, #480]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009886:	68d1      	ldr	r1, [r2, #12]
10009888:	4b86      	ldr	r3, [pc, #536]	; (10009aa4 <system_clock_peripheral_disable+0x348>)
1000988a:	400b      	ands	r3, r1
1000988c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000988e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10009890:	e0e7      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009892:	4a75      	ldr	r2, [pc, #468]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009894:	68d1      	ldr	r1, [r2, #12]
10009896:	4b84      	ldr	r3, [pc, #528]	; (10009aa8 <system_clock_peripheral_disable+0x34c>)
10009898:	400b      	ands	r3, r1
1000989a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000989c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000989e:	e0e0      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098a0:	4a71      	ldr	r2, [pc, #452]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100098a2:	68d1      	ldr	r1, [r2, #12]
100098a4:	4b81      	ldr	r3, [pc, #516]	; (10009aac <system_clock_peripheral_disable+0x350>)
100098a6:	400b      	ands	r3, r1
100098a8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
100098ac:	e0d9      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098ae:	4a6e      	ldr	r2, [pc, #440]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100098b0:	68d1      	ldr	r1, [r2, #12]
100098b2:	4b7f      	ldr	r3, [pc, #508]	; (10009ab0 <system_clock_peripheral_disable+0x354>)
100098b4:	400b      	ands	r3, r1
100098b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
100098ba:	e0d2      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098bc:	4a6a      	ldr	r2, [pc, #424]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100098be:	68d1      	ldr	r1, [r2, #12]
100098c0:	4b7c      	ldr	r3, [pc, #496]	; (10009ab4 <system_clock_peripheral_disable+0x358>)
100098c2:	400b      	ands	r3, r1
100098c4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
100098c8:	e0cb      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098ca:	4a67      	ldr	r2, [pc, #412]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100098cc:	68d1      	ldr	r1, [r2, #12]
100098ce:	4b7a      	ldr	r3, [pc, #488]	; (10009ab8 <system_clock_peripheral_disable+0x35c>)
100098d0:	400b      	ands	r3, r1
100098d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
100098d6:	e0c4      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100098d8:	4a63      	ldr	r2, [pc, #396]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100098da:	68d1      	ldr	r1, [r2, #12]
100098dc:	4b77      	ldr	r3, [pc, #476]	; (10009abc <system_clock_peripheral_disable+0x360>)
100098de:	400b      	ands	r3, r1
100098e0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
100098e4:	e0bd      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100098e6:	4a60      	ldr	r2, [pc, #384]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100098e8:	6913      	ldr	r3, [r2, #16]
100098ea:	2101      	movs	r1, #1
100098ec:	438b      	bics	r3, r1
100098ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
100098f2:	e0b6      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100098f4:	4a5c      	ldr	r2, [pc, #368]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100098f6:	6913      	ldr	r3, [r2, #16]
100098f8:	2102      	movs	r1, #2
100098fa:	438b      	bics	r3, r1
100098fc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
10009900:	e0af      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009902:	4a59      	ldr	r2, [pc, #356]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009904:	6913      	ldr	r3, [r2, #16]
10009906:	2104      	movs	r1, #4
10009908:	438b      	bics	r3, r1
1000990a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000990c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000990e:	e0a8      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009910:	4a55      	ldr	r2, [pc, #340]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009912:	6913      	ldr	r3, [r2, #16]
10009914:	2108      	movs	r1, #8
10009916:	438b      	bics	r3, r1
10009918:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000991a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000991c:	e0a1      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000991e:	4a52      	ldr	r2, [pc, #328]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009920:	6913      	ldr	r3, [r2, #16]
10009922:	2110      	movs	r1, #16
10009924:	438b      	bics	r3, r1
10009926:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009928:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000992a:	e09a      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000992c:	4a4e      	ldr	r2, [pc, #312]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
1000992e:	6913      	ldr	r3, [r2, #16]
10009930:	2120      	movs	r1, #32
10009932:	438b      	bics	r3, r1
10009934:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009936:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
10009938:	e093      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000993a:	4a4b      	ldr	r2, [pc, #300]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
1000993c:	6913      	ldr	r3, [r2, #16]
1000993e:	2140      	movs	r1, #64	; 0x40
10009940:	438b      	bics	r3, r1
10009942:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009944:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
10009946:	e08c      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009948:	4a47      	ldr	r2, [pc, #284]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
1000994a:	6913      	ldr	r3, [r2, #16]
1000994c:	2180      	movs	r1, #128	; 0x80
1000994e:	438b      	bics	r3, r1
10009950:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009952:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
10009954:	e085      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009956:	4a44      	ldr	r2, [pc, #272]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009958:	6911      	ldr	r1, [r2, #16]
1000995a:	4b44      	ldr	r3, [pc, #272]	; (10009a6c <system_clock_peripheral_disable+0x310>)
1000995c:	400b      	ands	r3, r1
1000995e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009960:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
10009962:	e07e      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009964:	4a40      	ldr	r2, [pc, #256]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009966:	6911      	ldr	r1, [r2, #16]
10009968:	4b55      	ldr	r3, [pc, #340]	; (10009ac0 <system_clock_peripheral_disable+0x364>)
1000996a:	400b      	ands	r3, r1
1000996c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000996e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
10009970:	e077      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009972:	4a3d      	ldr	r2, [pc, #244]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009974:	6911      	ldr	r1, [r2, #16]
10009976:	4b53      	ldr	r3, [pc, #332]	; (10009ac4 <system_clock_peripheral_disable+0x368>)
10009978:	400b      	ands	r3, r1
1000997a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000997c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000997e:	e070      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009980:	4a39      	ldr	r2, [pc, #228]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009982:	6911      	ldr	r1, [r2, #16]
10009984:	4b3a      	ldr	r3, [pc, #232]	; (10009a70 <system_clock_peripheral_disable+0x314>)
10009986:	400b      	ands	r3, r1
10009988:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000998a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000998c:	e069      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000998e:	4a36      	ldr	r2, [pc, #216]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009990:	6911      	ldr	r1, [r2, #16]
10009992:	4b38      	ldr	r3, [pc, #224]	; (10009a74 <system_clock_peripheral_disable+0x318>)
10009994:	400b      	ands	r3, r1
10009996:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009998:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000999a:	e062      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000999c:	4a32      	ldr	r2, [pc, #200]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
1000999e:	6911      	ldr	r1, [r2, #16]
100099a0:	4b35      	ldr	r3, [pc, #212]	; (10009a78 <system_clock_peripheral_disable+0x31c>)
100099a2:	400b      	ands	r3, r1
100099a4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
100099a8:	e05b      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099aa:	4a2f      	ldr	r2, [pc, #188]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100099ac:	6911      	ldr	r1, [r2, #16]
100099ae:	4b33      	ldr	r3, [pc, #204]	; (10009a7c <system_clock_peripheral_disable+0x320>)
100099b0:	400b      	ands	r3, r1
100099b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
100099b6:	e054      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099b8:	4a2b      	ldr	r2, [pc, #172]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100099ba:	6911      	ldr	r1, [r2, #16]
100099bc:	4b30      	ldr	r3, [pc, #192]	; (10009a80 <system_clock_peripheral_disable+0x324>)
100099be:	400b      	ands	r3, r1
100099c0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099c2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
100099c4:	e04d      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099c6:	4a28      	ldr	r2, [pc, #160]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100099c8:	6911      	ldr	r1, [r2, #16]
100099ca:	4b2e      	ldr	r3, [pc, #184]	; (10009a84 <system_clock_peripheral_disable+0x328>)
100099cc:	400b      	ands	r3, r1
100099ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
100099d2:	e046      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099d4:	4a24      	ldr	r2, [pc, #144]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100099d6:	6911      	ldr	r1, [r2, #16]
100099d8:	4b2b      	ldr	r3, [pc, #172]	; (10009a88 <system_clock_peripheral_disable+0x32c>)
100099da:	400b      	ands	r3, r1
100099dc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099de:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
100099e0:	e03f      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099e2:	4a21      	ldr	r2, [pc, #132]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100099e4:	6911      	ldr	r1, [r2, #16]
100099e6:	4b29      	ldr	r3, [pc, #164]	; (10009a8c <system_clock_peripheral_disable+0x330>)
100099e8:	400b      	ands	r3, r1
100099ea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
100099ee:	e038      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099f0:	4a1d      	ldr	r2, [pc, #116]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
100099f2:	6911      	ldr	r1, [r2, #16]
100099f4:	4b26      	ldr	r3, [pc, #152]	; (10009a90 <system_clock_peripheral_disable+0x334>)
100099f6:	400b      	ands	r3, r1
100099f8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
100099fc:	e031      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100099fe:	4a1a      	ldr	r2, [pc, #104]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009a00:	6911      	ldr	r1, [r2, #16]
10009a02:	4b24      	ldr	r3, [pc, #144]	; (10009a94 <system_clock_peripheral_disable+0x338>)
10009a04:	400b      	ands	r3, r1
10009a06:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10009a0a:	e02a      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a0c:	4a16      	ldr	r2, [pc, #88]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009a0e:	6911      	ldr	r1, [r2, #16]
10009a10:	4b21      	ldr	r3, [pc, #132]	; (10009a98 <system_clock_peripheral_disable+0x33c>)
10009a12:	400b      	ands	r3, r1
10009a14:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a16:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10009a18:	e023      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a1a:	4a13      	ldr	r2, [pc, #76]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009a1c:	6911      	ldr	r1, [r2, #16]
10009a1e:	4b1f      	ldr	r3, [pc, #124]	; (10009a9c <system_clock_peripheral_disable+0x340>)
10009a20:	400b      	ands	r3, r1
10009a22:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10009a26:	e01c      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009a28:	4a0f      	ldr	r2, [pc, #60]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009a2a:	6911      	ldr	r1, [r2, #16]
10009a2c:	4b1c      	ldr	r3, [pc, #112]	; (10009aa0 <system_clock_peripheral_disable+0x344>)
10009a2e:	400b      	ands	r3, r1
10009a30:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a32:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009a34:	e015      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009a36:	4a0c      	ldr	r2, [pc, #48]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009a38:	7d13      	ldrb	r3, [r2, #20]
10009a3a:	2101      	movs	r1, #1
10009a3c:	438b      	bics	r3, r1
10009a3e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
10009a42:	e00e      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009a44:	4a08      	ldr	r2, [pc, #32]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009a46:	7d13      	ldrb	r3, [r2, #20]
10009a48:	2102      	movs	r1, #2
10009a4a:	438b      	bics	r3, r1
10009a4c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a4e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
10009a50:	e007      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009a52:	4a05      	ldr	r2, [pc, #20]	; (10009a68 <system_clock_peripheral_disable+0x30c>)
10009a54:	7d13      	ldrb	r3, [r2, #20]
10009a56:	2104      	movs	r1, #4
10009a58:	438b      	bics	r3, r1
10009a5a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
10009a5e:	e000      	b.n	10009a62 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
10009a60:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009a62:	bd00      	pop	{pc}
10009a64:	1000a8c8 	.word	0x1000a8c8
10009a68:	4000b000 	.word	0x4000b000
10009a6c:	fffffeff 	.word	0xfffffeff
10009a70:	fffff7ff 	.word	0xfffff7ff
10009a74:	ffffefff 	.word	0xffffefff
10009a78:	ffffdfff 	.word	0xffffdfff
10009a7c:	ffffbfff 	.word	0xffffbfff
10009a80:	ffff7fff 	.word	0xffff7fff
10009a84:	fffeffff 	.word	0xfffeffff
10009a88:	fffdffff 	.word	0xfffdffff
10009a8c:	fffbffff 	.word	0xfffbffff
10009a90:	fff7ffff 	.word	0xfff7ffff
10009a94:	ffefffff 	.word	0xffefffff
10009a98:	ffdfffff 	.word	0xffdfffff
10009a9c:	ffbfffff 	.word	0xffbfffff
10009aa0:	ff7fffff 	.word	0xff7fffff
10009aa4:	feffffff 	.word	0xfeffffff
10009aa8:	fdffffff 	.word	0xfdffffff
10009aac:	fbffffff 	.word	0xfbffffff
10009ab0:	f7ffffff 	.word	0xf7ffffff
10009ab4:	efffffff 	.word	0xefffffff
10009ab8:	dfffffff 	.word	0xdfffffff
10009abc:	bfffffff 	.word	0xbfffffff
10009ac0:	fffffdff 	.word	0xfffffdff
10009ac4:	fffffbff 	.word	0xfffffbff

10009ac8 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10009ac8:	b500      	push	{lr}
	switch (peripheral) {
10009aca:	2843      	cmp	r0, #67	; 0x43
10009acc:	d900      	bls.n	10009ad0 <system_peripheral_reset+0x8>
10009ace:	e223      	b.n	10009f18 <system_peripheral_reset+0x450>
10009ad0:	0080      	lsls	r0, r0, #2
10009ad2:	4be0      	ldr	r3, [pc, #896]	; (10009e54 <system_peripheral_reset+0x38c>)
10009ad4:	581b      	ldr	r3, [r3, r0]
10009ad6:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009ad8:	4bdf      	ldr	r3, [pc, #892]	; (10009e58 <system_peripheral_reset+0x390>)
10009ada:	6859      	ldr	r1, [r3, #4]
10009adc:	2202      	movs	r2, #2
10009ade:	4391      	bics	r1, r2
10009ae0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009ae2:	6859      	ldr	r1, [r3, #4]
10009ae4:	430a      	orrs	r2, r1
10009ae6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ae8:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10009aea:	e216      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009aec:	4bda      	ldr	r3, [pc, #872]	; (10009e58 <system_peripheral_reset+0x390>)
10009aee:	6859      	ldr	r1, [r3, #4]
10009af0:	2204      	movs	r2, #4
10009af2:	4391      	bics	r1, r2
10009af4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009af6:	6859      	ldr	r1, [r3, #4]
10009af8:	430a      	orrs	r2, r1
10009afa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009afc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
10009afe:	e20c      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b00:	4bd5      	ldr	r3, [pc, #852]	; (10009e58 <system_peripheral_reset+0x390>)
10009b02:	6859      	ldr	r1, [r3, #4]
10009b04:	2208      	movs	r2, #8
10009b06:	4391      	bics	r1, r2
10009b08:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b0a:	6859      	ldr	r1, [r3, #4]
10009b0c:	430a      	orrs	r2, r1
10009b0e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b10:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
10009b12:	e202      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b14:	4bd0      	ldr	r3, [pc, #832]	; (10009e58 <system_peripheral_reset+0x390>)
10009b16:	6859      	ldr	r1, [r3, #4]
10009b18:	2210      	movs	r2, #16
10009b1a:	4391      	bics	r1, r2
10009b1c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b1e:	6859      	ldr	r1, [r3, #4]
10009b20:	430a      	orrs	r2, r1
10009b22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b24:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
10009b26:	e1f8      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b28:	4bcb      	ldr	r3, [pc, #812]	; (10009e58 <system_peripheral_reset+0x390>)
10009b2a:	6859      	ldr	r1, [r3, #4]
10009b2c:	2220      	movs	r2, #32
10009b2e:	4391      	bics	r1, r2
10009b30:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b32:	6859      	ldr	r1, [r3, #4]
10009b34:	430a      	orrs	r2, r1
10009b36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b38:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
10009b3a:	e1ee      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b3c:	4bc6      	ldr	r3, [pc, #792]	; (10009e58 <system_peripheral_reset+0x390>)
10009b3e:	6859      	ldr	r1, [r3, #4]
10009b40:	2240      	movs	r2, #64	; 0x40
10009b42:	4391      	bics	r1, r2
10009b44:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b46:	6859      	ldr	r1, [r3, #4]
10009b48:	430a      	orrs	r2, r1
10009b4a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b4c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
10009b4e:	e1e4      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b50:	4bc1      	ldr	r3, [pc, #772]	; (10009e58 <system_peripheral_reset+0x390>)
10009b52:	6859      	ldr	r1, [r3, #4]
10009b54:	2280      	movs	r2, #128	; 0x80
10009b56:	4391      	bics	r1, r2
10009b58:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b5a:	6859      	ldr	r1, [r3, #4]
10009b5c:	430a      	orrs	r2, r1
10009b5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b60:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
10009b62:	e1da      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b64:	4bbc      	ldr	r3, [pc, #752]	; (10009e58 <system_peripheral_reset+0x390>)
10009b66:	6859      	ldr	r1, [r3, #4]
10009b68:	4abc      	ldr	r2, [pc, #752]	; (10009e5c <system_peripheral_reset+0x394>)
10009b6a:	400a      	ands	r2, r1
10009b6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b6e:	685a      	ldr	r2, [r3, #4]
10009b70:	2180      	movs	r1, #128	; 0x80
10009b72:	0049      	lsls	r1, r1, #1
10009b74:	430a      	orrs	r2, r1
10009b76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b78:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
10009b7a:	e1ce      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b7c:	4bb6      	ldr	r3, [pc, #728]	; (10009e58 <system_peripheral_reset+0x390>)
10009b7e:	6859      	ldr	r1, [r3, #4]
10009b80:	4ab7      	ldr	r2, [pc, #732]	; (10009e60 <system_peripheral_reset+0x398>)
10009b82:	400a      	ands	r2, r1
10009b84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b86:	685a      	ldr	r2, [r3, #4]
10009b88:	2180      	movs	r1, #128	; 0x80
10009b8a:	0089      	lsls	r1, r1, #2
10009b8c:	430a      	orrs	r2, r1
10009b8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b90:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
10009b92:	e1c2      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009b94:	4bb0      	ldr	r3, [pc, #704]	; (10009e58 <system_peripheral_reset+0x390>)
10009b96:	6859      	ldr	r1, [r3, #4]
10009b98:	4ab2      	ldr	r2, [pc, #712]	; (10009e64 <system_peripheral_reset+0x39c>)
10009b9a:	400a      	ands	r2, r1
10009b9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009b9e:	685a      	ldr	r2, [r3, #4]
10009ba0:	2180      	movs	r1, #128	; 0x80
10009ba2:	00c9      	lsls	r1, r1, #3
10009ba4:	430a      	orrs	r2, r1
10009ba6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ba8:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10009baa:	e1b6      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009bac:	4baa      	ldr	r3, [pc, #680]	; (10009e58 <system_peripheral_reset+0x390>)
10009bae:	6859      	ldr	r1, [r3, #4]
10009bb0:	4aad      	ldr	r2, [pc, #692]	; (10009e68 <system_peripheral_reset+0x3a0>)
10009bb2:	400a      	ands	r2, r1
10009bb4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009bb6:	685a      	ldr	r2, [r3, #4]
10009bb8:	2180      	movs	r1, #128	; 0x80
10009bba:	0109      	lsls	r1, r1, #4
10009bbc:	430a      	orrs	r2, r1
10009bbe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bc0:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
10009bc2:	e1aa      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009bc4:	4ba4      	ldr	r3, [pc, #656]	; (10009e58 <system_peripheral_reset+0x390>)
10009bc6:	6859      	ldr	r1, [r3, #4]
10009bc8:	4aa8      	ldr	r2, [pc, #672]	; (10009e6c <system_peripheral_reset+0x3a4>)
10009bca:	400a      	ands	r2, r1
10009bcc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009bce:	685a      	ldr	r2, [r3, #4]
10009bd0:	2180      	movs	r1, #128	; 0x80
10009bd2:	0149      	lsls	r1, r1, #5
10009bd4:	430a      	orrs	r2, r1
10009bd6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bd8:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
10009bda:	e19e      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009bdc:	4b9e      	ldr	r3, [pc, #632]	; (10009e58 <system_peripheral_reset+0x390>)
10009bde:	6859      	ldr	r1, [r3, #4]
10009be0:	4aa3      	ldr	r2, [pc, #652]	; (10009e70 <system_peripheral_reset+0x3a8>)
10009be2:	400a      	ands	r2, r1
10009be4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009be6:	685a      	ldr	r2, [r3, #4]
10009be8:	2180      	movs	r1, #128	; 0x80
10009bea:	0189      	lsls	r1, r1, #6
10009bec:	430a      	orrs	r2, r1
10009bee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009bf0:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
10009bf2:	e192      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009bf4:	4b98      	ldr	r3, [pc, #608]	; (10009e58 <system_peripheral_reset+0x390>)
10009bf6:	6859      	ldr	r1, [r3, #4]
10009bf8:	4a9e      	ldr	r2, [pc, #632]	; (10009e74 <system_peripheral_reset+0x3ac>)
10009bfa:	400a      	ands	r2, r1
10009bfc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009bfe:	685a      	ldr	r2, [r3, #4]
10009c00:	2180      	movs	r1, #128	; 0x80
10009c02:	01c9      	lsls	r1, r1, #7
10009c04:	430a      	orrs	r2, r1
10009c06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c08:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
10009c0a:	e186      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c0c:	4b92      	ldr	r3, [pc, #584]	; (10009e58 <system_peripheral_reset+0x390>)
10009c0e:	6859      	ldr	r1, [r3, #4]
10009c10:	4a99      	ldr	r2, [pc, #612]	; (10009e78 <system_peripheral_reset+0x3b0>)
10009c12:	400a      	ands	r2, r1
10009c14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c16:	685a      	ldr	r2, [r3, #4]
10009c18:	2180      	movs	r1, #128	; 0x80
10009c1a:	0209      	lsls	r1, r1, #8
10009c1c:	430a      	orrs	r2, r1
10009c1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c20:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
10009c22:	e17a      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c24:	4b8c      	ldr	r3, [pc, #560]	; (10009e58 <system_peripheral_reset+0x390>)
10009c26:	6859      	ldr	r1, [r3, #4]
10009c28:	4a94      	ldr	r2, [pc, #592]	; (10009e7c <system_peripheral_reset+0x3b4>)
10009c2a:	400a      	ands	r2, r1
10009c2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c2e:	685a      	ldr	r2, [r3, #4]
10009c30:	2180      	movs	r1, #128	; 0x80
10009c32:	0249      	lsls	r1, r1, #9
10009c34:	430a      	orrs	r2, r1
10009c36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c38:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
10009c3a:	e16e      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c3c:	4b86      	ldr	r3, [pc, #536]	; (10009e58 <system_peripheral_reset+0x390>)
10009c3e:	6859      	ldr	r1, [r3, #4]
10009c40:	4a8f      	ldr	r2, [pc, #572]	; (10009e80 <system_peripheral_reset+0x3b8>)
10009c42:	400a      	ands	r2, r1
10009c44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c46:	685a      	ldr	r2, [r3, #4]
10009c48:	2180      	movs	r1, #128	; 0x80
10009c4a:	0289      	lsls	r1, r1, #10
10009c4c:	430a      	orrs	r2, r1
10009c4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c50:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
10009c52:	e162      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c54:	4b80      	ldr	r3, [pc, #512]	; (10009e58 <system_peripheral_reset+0x390>)
10009c56:	6859      	ldr	r1, [r3, #4]
10009c58:	4a8a      	ldr	r2, [pc, #552]	; (10009e84 <system_peripheral_reset+0x3bc>)
10009c5a:	400a      	ands	r2, r1
10009c5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c5e:	685a      	ldr	r2, [r3, #4]
10009c60:	2180      	movs	r1, #128	; 0x80
10009c62:	02c9      	lsls	r1, r1, #11
10009c64:	430a      	orrs	r2, r1
10009c66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c68:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10009c6a:	e156      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c6c:	4b7a      	ldr	r3, [pc, #488]	; (10009e58 <system_peripheral_reset+0x390>)
10009c6e:	6859      	ldr	r1, [r3, #4]
10009c70:	4a85      	ldr	r2, [pc, #532]	; (10009e88 <system_peripheral_reset+0x3c0>)
10009c72:	400a      	ands	r2, r1
10009c74:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c76:	685a      	ldr	r2, [r3, #4]
10009c78:	2180      	movs	r1, #128	; 0x80
10009c7a:	0309      	lsls	r1, r1, #12
10009c7c:	430a      	orrs	r2, r1
10009c7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c80:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10009c82:	e14a      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c84:	4b74      	ldr	r3, [pc, #464]	; (10009e58 <system_peripheral_reset+0x390>)
10009c86:	6859      	ldr	r1, [r3, #4]
10009c88:	4a80      	ldr	r2, [pc, #512]	; (10009e8c <system_peripheral_reset+0x3c4>)
10009c8a:	400a      	ands	r2, r1
10009c8c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009c8e:	685a      	ldr	r2, [r3, #4]
10009c90:	2180      	movs	r1, #128	; 0x80
10009c92:	0349      	lsls	r1, r1, #13
10009c94:	430a      	orrs	r2, r1
10009c96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009c98:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10009c9a:	e13e      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009c9c:	4b6e      	ldr	r3, [pc, #440]	; (10009e58 <system_peripheral_reset+0x390>)
10009c9e:	6859      	ldr	r1, [r3, #4]
10009ca0:	4a7b      	ldr	r2, [pc, #492]	; (10009e90 <system_peripheral_reset+0x3c8>)
10009ca2:	400a      	ands	r2, r1
10009ca4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009ca6:	685a      	ldr	r2, [r3, #4]
10009ca8:	2180      	movs	r1, #128	; 0x80
10009caa:	0389      	lsls	r1, r1, #14
10009cac:	430a      	orrs	r2, r1
10009cae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009cb0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10009cb2:	e132      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009cb4:	4b68      	ldr	r3, [pc, #416]	; (10009e58 <system_peripheral_reset+0x390>)
10009cb6:	6859      	ldr	r1, [r3, #4]
10009cb8:	4a76      	ldr	r2, [pc, #472]	; (10009e94 <system_peripheral_reset+0x3cc>)
10009cba:	400a      	ands	r2, r1
10009cbc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009cbe:	685a      	ldr	r2, [r3, #4]
10009cc0:	2180      	movs	r1, #128	; 0x80
10009cc2:	03c9      	lsls	r1, r1, #15
10009cc4:	430a      	orrs	r2, r1
10009cc6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009cc8:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10009cca:	e126      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009ccc:	4b62      	ldr	r3, [pc, #392]	; (10009e58 <system_peripheral_reset+0x390>)
10009cce:	6859      	ldr	r1, [r3, #4]
10009cd0:	4a71      	ldr	r2, [pc, #452]	; (10009e98 <system_peripheral_reset+0x3d0>)
10009cd2:	400a      	ands	r2, r1
10009cd4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009cd6:	685a      	ldr	r2, [r3, #4]
10009cd8:	2180      	movs	r1, #128	; 0x80
10009cda:	0409      	lsls	r1, r1, #16
10009cdc:	430a      	orrs	r2, r1
10009cde:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ce0:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10009ce2:	e11a      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009ce4:	4b5c      	ldr	r3, [pc, #368]	; (10009e58 <system_peripheral_reset+0x390>)
10009ce6:	6859      	ldr	r1, [r3, #4]
10009ce8:	4a6c      	ldr	r2, [pc, #432]	; (10009e9c <system_peripheral_reset+0x3d4>)
10009cea:	400a      	ands	r2, r1
10009cec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009cee:	685a      	ldr	r2, [r3, #4]
10009cf0:	2180      	movs	r1, #128	; 0x80
10009cf2:	0449      	lsls	r1, r1, #17
10009cf4:	430a      	orrs	r2, r1
10009cf6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009cf8:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10009cfa:	e10e      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009cfc:	4b56      	ldr	r3, [pc, #344]	; (10009e58 <system_peripheral_reset+0x390>)
10009cfe:	6859      	ldr	r1, [r3, #4]
10009d00:	4a67      	ldr	r2, [pc, #412]	; (10009ea0 <system_peripheral_reset+0x3d8>)
10009d02:	400a      	ands	r2, r1
10009d04:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d06:	685a      	ldr	r2, [r3, #4]
10009d08:	2180      	movs	r1, #128	; 0x80
10009d0a:	0489      	lsls	r1, r1, #18
10009d0c:	430a      	orrs	r2, r1
10009d0e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d10:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
10009d12:	e102      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d14:	4b50      	ldr	r3, [pc, #320]	; (10009e58 <system_peripheral_reset+0x390>)
10009d16:	6859      	ldr	r1, [r3, #4]
10009d18:	4a62      	ldr	r2, [pc, #392]	; (10009ea4 <system_peripheral_reset+0x3dc>)
10009d1a:	400a      	ands	r2, r1
10009d1c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d1e:	685a      	ldr	r2, [r3, #4]
10009d20:	2180      	movs	r1, #128	; 0x80
10009d22:	04c9      	lsls	r1, r1, #19
10009d24:	430a      	orrs	r2, r1
10009d26:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d28:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
10009d2a:	e0f6      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d2c:	4b4a      	ldr	r3, [pc, #296]	; (10009e58 <system_peripheral_reset+0x390>)
10009d2e:	6859      	ldr	r1, [r3, #4]
10009d30:	4a5d      	ldr	r2, [pc, #372]	; (10009ea8 <system_peripheral_reset+0x3e0>)
10009d32:	400a      	ands	r2, r1
10009d34:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d36:	685a      	ldr	r2, [r3, #4]
10009d38:	2180      	movs	r1, #128	; 0x80
10009d3a:	0509      	lsls	r1, r1, #20
10009d3c:	430a      	orrs	r2, r1
10009d3e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d40:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
10009d42:	e0ea      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d44:	4b44      	ldr	r3, [pc, #272]	; (10009e58 <system_peripheral_reset+0x390>)
10009d46:	6859      	ldr	r1, [r3, #4]
10009d48:	4a58      	ldr	r2, [pc, #352]	; (10009eac <system_peripheral_reset+0x3e4>)
10009d4a:	400a      	ands	r2, r1
10009d4c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d4e:	685a      	ldr	r2, [r3, #4]
10009d50:	2180      	movs	r1, #128	; 0x80
10009d52:	0549      	lsls	r1, r1, #21
10009d54:	430a      	orrs	r2, r1
10009d56:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d58:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
10009d5a:	e0de      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d5c:	4b3e      	ldr	r3, [pc, #248]	; (10009e58 <system_peripheral_reset+0x390>)
10009d5e:	6859      	ldr	r1, [r3, #4]
10009d60:	4a53      	ldr	r2, [pc, #332]	; (10009eb0 <system_peripheral_reset+0x3e8>)
10009d62:	400a      	ands	r2, r1
10009d64:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d66:	685a      	ldr	r2, [r3, #4]
10009d68:	2180      	movs	r1, #128	; 0x80
10009d6a:	0589      	lsls	r1, r1, #22
10009d6c:	430a      	orrs	r2, r1
10009d6e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d70:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
10009d72:	e0d2      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d74:	4b38      	ldr	r3, [pc, #224]	; (10009e58 <system_peripheral_reset+0x390>)
10009d76:	6859      	ldr	r1, [r3, #4]
10009d78:	4a4e      	ldr	r2, [pc, #312]	; (10009eb4 <system_peripheral_reset+0x3ec>)
10009d7a:	400a      	ands	r2, r1
10009d7c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d7e:	685a      	ldr	r2, [r3, #4]
10009d80:	2180      	movs	r1, #128	; 0x80
10009d82:	05c9      	lsls	r1, r1, #23
10009d84:	430a      	orrs	r2, r1
10009d86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009d88:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
10009d8a:	e0c6      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009d8c:	4a32      	ldr	r2, [pc, #200]	; (10009e58 <system_peripheral_reset+0x390>)
10009d8e:	6853      	ldr	r3, [r2, #4]
10009d90:	005b      	lsls	r3, r3, #1
10009d92:	085b      	lsrs	r3, r3, #1
10009d94:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009d96:	6853      	ldr	r3, [r2, #4]
10009d98:	2180      	movs	r1, #128	; 0x80
10009d9a:	0609      	lsls	r1, r1, #24
10009d9c:	430b      	orrs	r3, r1
10009d9e:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009da0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
10009da2:	e0ba      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009da4:	4b2c      	ldr	r3, [pc, #176]	; (10009e58 <system_peripheral_reset+0x390>)
10009da6:	891a      	ldrh	r2, [r3, #8]
10009da8:	2101      	movs	r1, #1
10009daa:	438a      	bics	r2, r1
10009dac:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009dae:	8919      	ldrh	r1, [r3, #8]
10009db0:	2201      	movs	r2, #1
10009db2:	430a      	orrs	r2, r1
10009db4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009db6:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
10009db8:	e0af      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009dba:	4b27      	ldr	r3, [pc, #156]	; (10009e58 <system_peripheral_reset+0x390>)
10009dbc:	891a      	ldrh	r2, [r3, #8]
10009dbe:	2102      	movs	r1, #2
10009dc0:	438a      	bics	r2, r1
10009dc2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009dc4:	8919      	ldrh	r1, [r3, #8]
10009dc6:	2202      	movs	r2, #2
10009dc8:	430a      	orrs	r2, r1
10009dca:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009dcc:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
10009dce:	e0a4      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009dd0:	4b21      	ldr	r3, [pc, #132]	; (10009e58 <system_peripheral_reset+0x390>)
10009dd2:	891a      	ldrh	r2, [r3, #8]
10009dd4:	2104      	movs	r1, #4
10009dd6:	438a      	bics	r2, r1
10009dd8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009dda:	8919      	ldrh	r1, [r3, #8]
10009ddc:	2204      	movs	r2, #4
10009dde:	430a      	orrs	r2, r1
10009de0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009de2:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
10009de4:	e099      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009de6:	4b1c      	ldr	r3, [pc, #112]	; (10009e58 <system_peripheral_reset+0x390>)
10009de8:	891a      	ldrh	r2, [r3, #8]
10009dea:	2108      	movs	r1, #8
10009dec:	438a      	bics	r2, r1
10009dee:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009df0:	8919      	ldrh	r1, [r3, #8]
10009df2:	2208      	movs	r2, #8
10009df4:	430a      	orrs	r2, r1
10009df6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009df8:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10009dfa:	e08e      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009dfc:	4b16      	ldr	r3, [pc, #88]	; (10009e58 <system_peripheral_reset+0x390>)
10009dfe:	891a      	ldrh	r2, [r3, #8]
10009e00:	2110      	movs	r1, #16
10009e02:	438a      	bics	r2, r1
10009e04:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009e06:	8919      	ldrh	r1, [r3, #8]
10009e08:	2210      	movs	r2, #16
10009e0a:	430a      	orrs	r2, r1
10009e0c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e0e:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10009e10:	e083      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009e12:	4b11      	ldr	r3, [pc, #68]	; (10009e58 <system_peripheral_reset+0x390>)
10009e14:	891a      	ldrh	r2, [r3, #8]
10009e16:	2120      	movs	r1, #32
10009e18:	438a      	bics	r2, r1
10009e1a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009e1c:	8919      	ldrh	r1, [r3, #8]
10009e1e:	2220      	movs	r2, #32
10009e20:	430a      	orrs	r2, r1
10009e22:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e24:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10009e26:	e078      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009e28:	4b0b      	ldr	r3, [pc, #44]	; (10009e58 <system_peripheral_reset+0x390>)
10009e2a:	891a      	ldrh	r2, [r3, #8]
10009e2c:	2140      	movs	r1, #64	; 0x40
10009e2e:	438a      	bics	r2, r1
10009e30:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009e32:	8919      	ldrh	r1, [r3, #8]
10009e34:	2240      	movs	r2, #64	; 0x40
10009e36:	430a      	orrs	r2, r1
10009e38:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e3a:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10009e3c:	e06d      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009e3e:	4b06      	ldr	r3, [pc, #24]	; (10009e58 <system_peripheral_reset+0x390>)
10009e40:	891a      	ldrh	r2, [r3, #8]
10009e42:	2180      	movs	r1, #128	; 0x80
10009e44:	438a      	bics	r2, r1
10009e46:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009e48:	8919      	ldrh	r1, [r3, #8]
10009e4a:	2280      	movs	r2, #128	; 0x80
10009e4c:	430a      	orrs	r2, r1
10009e4e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009e50:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
10009e52:	e062      	b.n	10009f1a <system_peripheral_reset+0x452>
10009e54:	1000a9a0 	.word	0x1000a9a0
10009e58:	4000b000 	.word	0x4000b000
10009e5c:	fffffeff 	.word	0xfffffeff
10009e60:	fffffdff 	.word	0xfffffdff
10009e64:	fffffbff 	.word	0xfffffbff
10009e68:	fffff7ff 	.word	0xfffff7ff
10009e6c:	ffffefff 	.word	0xffffefff
10009e70:	ffffdfff 	.word	0xffffdfff
10009e74:	ffffbfff 	.word	0xffffbfff
10009e78:	ffff7fff 	.word	0xffff7fff
10009e7c:	fffeffff 	.word	0xfffeffff
10009e80:	fffdffff 	.word	0xfffdffff
10009e84:	fffbffff 	.word	0xfffbffff
10009e88:	fff7ffff 	.word	0xfff7ffff
10009e8c:	ffefffff 	.word	0xffefffff
10009e90:	ffdfffff 	.word	0xffdfffff
10009e94:	ffbfffff 	.word	0xffbfffff
10009e98:	ff7fffff 	.word	0xff7fffff
10009e9c:	feffffff 	.word	0xfeffffff
10009ea0:	fdffffff 	.word	0xfdffffff
10009ea4:	fbffffff 	.word	0xfbffffff
10009ea8:	f7ffffff 	.word	0xf7ffffff
10009eac:	efffffff 	.word	0xefffffff
10009eb0:	dfffffff 	.word	0xdfffffff
10009eb4:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009eb8:	4b18      	ldr	r3, [pc, #96]	; (10009f1c <system_peripheral_reset+0x454>)
10009eba:	8919      	ldrh	r1, [r3, #8]
10009ebc:	4a18      	ldr	r2, [pc, #96]	; (10009f20 <system_peripheral_reset+0x458>)
10009ebe:	400a      	ands	r2, r1
10009ec0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009ec2:	8919      	ldrh	r1, [r3, #8]
10009ec4:	2280      	movs	r2, #128	; 0x80
10009ec6:	0052      	lsls	r2, r2, #1
10009ec8:	430a      	orrs	r2, r1
10009eca:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ecc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
10009ece:	e024      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009ed0:	4b12      	ldr	r3, [pc, #72]	; (10009f1c <system_peripheral_reset+0x454>)
10009ed2:	8919      	ldrh	r1, [r3, #8]
10009ed4:	4a13      	ldr	r2, [pc, #76]	; (10009f24 <system_peripheral_reset+0x45c>)
10009ed6:	400a      	ands	r2, r1
10009ed8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009eda:	8919      	ldrh	r1, [r3, #8]
10009edc:	2280      	movs	r2, #128	; 0x80
10009ede:	0092      	lsls	r2, r2, #2
10009ee0:	430a      	orrs	r2, r1
10009ee2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009ee4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10009ee6:	e018      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009ee8:	4b0c      	ldr	r3, [pc, #48]	; (10009f1c <system_peripheral_reset+0x454>)
10009eea:	8919      	ldrh	r1, [r3, #8]
10009eec:	4a0e      	ldr	r2, [pc, #56]	; (10009f28 <system_peripheral_reset+0x460>)
10009eee:	400a      	ands	r2, r1
10009ef0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009ef2:	8919      	ldrh	r1, [r3, #8]
10009ef4:	2280      	movs	r2, #128	; 0x80
10009ef6:	00d2      	lsls	r2, r2, #3
10009ef8:	430a      	orrs	r2, r1
10009efa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009efc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
10009efe:	e00c      	b.n	10009f1a <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009f00:	4b06      	ldr	r3, [pc, #24]	; (10009f1c <system_peripheral_reset+0x454>)
10009f02:	8919      	ldrh	r1, [r3, #8]
10009f04:	4a09      	ldr	r2, [pc, #36]	; (10009f2c <system_peripheral_reset+0x464>)
10009f06:	400a      	ands	r2, r1
10009f08:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009f0a:	8919      	ldrh	r1, [r3, #8]
10009f0c:	2280      	movs	r2, #128	; 0x80
10009f0e:	0112      	lsls	r2, r2, #4
10009f10:	430a      	orrs	r2, r1
10009f12:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009f14:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
10009f16:	e000      	b.n	10009f1a <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009f18:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009f1a:	bd00      	pop	{pc}
10009f1c:	4000b000 	.word	0x4000b000
10009f20:	fffffeff 	.word	0xfffffeff
10009f24:	fffffdff 	.word	0xfffffdff
10009f28:	fffffbff 	.word	0xfffffbff
10009f2c:	fffff7ff 	.word	0xfffff7ff

10009f30 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10009f30:	2380      	movs	r3, #128	; 0x80
10009f32:	04db      	lsls	r3, r3, #19
10009f34:	469c      	mov	ip, r3
10009f36:	4460      	add	r0, ip
10009f38:	0080      	lsls	r0, r0, #2
10009f3a:	6001      	str	r1, [r0, #0]
}
10009f3c:	4770      	bx	lr
10009f3e:	46c0      	nop			; (mov r8, r8)

10009f40 <timer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TIMER module configuration structure to set
 */
void timer_get_config_defaults(struct timer_config *config)
{
	config->reload_value = 0;
10009f40:	2300      	movs	r3, #0
10009f42:	6003      	str	r3, [r0, #0]
	config->interrupt_enable = true;
10009f44:	3301      	adds	r3, #1
10009f46:	7103      	strb	r3, [r0, #4]
}
10009f48:	4770      	bx	lr
10009f4a:	46c0      	nop			; (mov r8, r8)

10009f4c <timer_clear_interrupt_status>:
 *
 * Clear the TIMER0 module interrupt status
 */
void timer_clear_interrupt_status(void)
{
	TIMER0->INTSTATUSCLEAR.reg = 1;
10009f4c:	2201      	movs	r2, #1
10009f4e:	2380      	movs	r3, #128	; 0x80
10009f50:	05db      	lsls	r3, r3, #23
10009f52:	731a      	strb	r2, [r3, #12]
	/* Wait for operation finish */
	while (TIMER0->INTSTATUSCLEAR.reg);
10009f54:	001a      	movs	r2, r3
10009f56:	7b13      	ldrb	r3, [r2, #12]
10009f58:	2b00      	cmp	r3, #0
10009f5a:	d1fc      	bne.n	10009f56 <timer_clear_interrupt_status+0xa>
}
10009f5c:	4770      	bx	lr
10009f5e:	46c0      	nop			; (mov r8, r8)

10009f60 <timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void timer_isr_handler(void)
{
10009f60:	b510      	push	{r4, lr}
 *
 * \retval The status of module
 */
uint32_t timer_get_interrupt_status(void)
{
	return TIMER0->INTSTATUSCLEAR.reg;
10009f62:	2380      	movs	r3, #128	; 0x80
10009f64:	05db      	lsls	r3, r3, #23
10009f66:	7b1b      	ldrb	r3, [r3, #12]
 * Timer ISR handler.
 *
 */
static void timer_isr_handler(void)
{
	if (timer_get_interrupt_status()) {
10009f68:	2b00      	cmp	r3, #0
10009f6a:	d006      	beq.n	10009f7a <timer_isr_handler+0x1a>
		timer_clear_interrupt_status();
10009f6c:	4b03      	ldr	r3, [pc, #12]	; (10009f7c <timer_isr_handler+0x1c>)
10009f6e:	4798      	blx	r3
		
		if (timer_callback) {
10009f70:	4b03      	ldr	r3, [pc, #12]	; (10009f80 <timer_isr_handler+0x20>)
10009f72:	681b      	ldr	r3, [r3, #0]
10009f74:	2b00      	cmp	r3, #0
10009f76:	d000      	beq.n	10009f7a <timer_isr_handler+0x1a>
			timer_callback();
10009f78:	4798      	blx	r3
		}
	}
}
10009f7a:	bd10      	pop	{r4, pc}
10009f7c:	10009f4d 	.word	0x10009f4d
10009f80:	1000ab3c 	.word	0x1000ab3c

10009f84 <timer_enable>:
 *
 * Enable the TIMER0 module
 */
void timer_enable(void)
{
	TIMER0->CTRL.reg |= TIMER_CTRL_ENABLE;
10009f84:	2280      	movs	r2, #128	; 0x80
10009f86:	05d2      	lsls	r2, r2, #23
10009f88:	7811      	ldrb	r1, [r2, #0]
10009f8a:	2301      	movs	r3, #1
10009f8c:	430b      	orrs	r3, r1
10009f8e:	7013      	strb	r3, [r2, #0]
}
10009f90:	4770      	bx	lr
10009f92:	46c0      	nop			; (mov r8, r8)

10009f94 <timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void timer_register_callback(timer_callback_t fun)
{
	timer_callback = fun; 
10009f94:	4b01      	ldr	r3, [pc, #4]	; (10009f9c <timer_register_callback+0x8>)
10009f96:	6018      	str	r0, [r3, #0]
}
10009f98:	4770      	bx	lr
10009f9a:	46c0      	nop			; (mov r8, r8)
10009f9c:	1000ab3c 	.word	0x1000ab3c

10009fa0 <timer_init>:
 * \param[in]     config       Pointer to the TIMER configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void timer_init(const struct timer_config *config)
{
10009fa0:	b510      	push	{r4, lr}
10009fa2:	0004      	movs	r4, r0
	/* Global reset */
	system_peripheral_reset(PERIPHERAL_TIMER);
10009fa4:	2006      	movs	r0, #6
10009fa6:	4b09      	ldr	r3, [pc, #36]	; (10009fcc <timer_init+0x2c>)
10009fa8:	4798      	blx	r3

	TIMER0->CTRL.reg = config->interrupt_enable << TIMER_CTRL_INTERRUPT_ENABLE_Pos;
10009faa:	7923      	ldrb	r3, [r4, #4]
10009fac:	00db      	lsls	r3, r3, #3
10009fae:	b2db      	uxtb	r3, r3
10009fb0:	2280      	movs	r2, #128	; 0x80
10009fb2:	05d2      	lsls	r2, r2, #23
10009fb4:	7013      	strb	r3, [r2, #0]
	TIMER0->RELOAD.reg = config->reload_value;
10009fb6:	6823      	ldr	r3, [r4, #0]
10009fb8:	6093      	str	r3, [r2, #8]
	
	timer_callback = NULL;
10009fba:	2200      	movs	r2, #0
10009fbc:	4b04      	ldr	r3, [pc, #16]	; (10009fd0 <timer_init+0x30>)
10009fbe:	601a      	str	r2, [r3, #0]
	system_register_isr(RAM_ISR_TABLE_TIMER0_INDEX, (uint32_t)timer_isr_handler);
10009fc0:	4904      	ldr	r1, [pc, #16]	; (10009fd4 <timer_init+0x34>)
10009fc2:	202a      	movs	r0, #42	; 0x2a
10009fc4:	4b04      	ldr	r3, [pc, #16]	; (10009fd8 <timer_init+0x38>)
10009fc6:	4798      	blx	r3
10009fc8:	bd10      	pop	{r4, pc}
10009fca:	46c0      	nop			; (mov r8, r8)
10009fcc:	10009ac9 	.word	0x10009ac9
10009fd0:	1000ab3c 	.word	0x1000ab3c
10009fd4:	10009f61 	.word	0x10009f61
10009fd8:	10009f31 	.word	0x10009f31

10009fdc <timer_callback>:

LCDSPIModule module;
uint8_t frameBuffer[FRAME_HEIGHT][FRAME_WIDTH];

static void timer_callback(void)
{
10009fdc:	b510      	push	{r4, lr}
	gpio_pin_toggle_output_level(PIN_LP_GPIO_20);
10009fde:	2014      	movs	r0, #20
10009fe0:	4b01      	ldr	r3, [pc, #4]	; (10009fe8 <timer_callback+0xc>)
10009fe2:	4798      	blx	r3
}
10009fe4:	bd10      	pop	{r4, pc}
10009fe6:	46c0      	nop			; (mov r8, r8)
10009fe8:	100089b5 	.word	0x100089b5

10009fec <main>:
		}
	}
}

int main(void)
{
10009fec:	b5f0      	push	{r4, r5, r6, r7, lr}
10009fee:	b08d      	sub	sp, #52	; 0x34
    /* Initialize the SAM system */
    system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
10009ff0:	2100      	movs	r1, #0
10009ff2:	2000      	movs	r0, #0
10009ff4:	4b42      	ldr	r3, [pc, #264]	; (1000a100 <main+0x114>)
10009ff6:	4798      	blx	r3
}

static void configure_timer(void)
{
	struct timer_config config_timer;
	timer_get_config_defaults(&config_timer);
10009ff8:	ac05      	add	r4, sp, #20
10009ffa:	0020      	movs	r0, r4
10009ffc:	4b41      	ldr	r3, [pc, #260]	; (1000a104 <main+0x118>)
10009ffe:	4798      	blx	r3
	config_timer.reload_value = 2600000;
1000a000:	4b41      	ldr	r3, [pc, #260]	; (1000a108 <main+0x11c>)
1000a002:	9305      	str	r3, [sp, #20]
	timer_init(&config_timer);
1000a004:	0020      	movs	r0, r4
1000a006:	4b41      	ldr	r3, [pc, #260]	; (1000a10c <main+0x120>)
1000a008:	4798      	blx	r3
	timer_enable();
1000a00a:	4b41      	ldr	r3, [pc, #260]	; (1000a110 <main+0x124>)
1000a00c:	4798      	blx	r3
}
 static void configure_timer_callback(void)
 {
	 timer_register_callback(timer_callback);
1000a00e:	4841      	ldr	r0, [pc, #260]	; (1000a114 <main+0x128>)
1000a010:	4b41      	ldr	r3, [pc, #260]	; (1000a118 <main+0x12c>)
1000a012:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a014:	2280      	movs	r2, #128	; 0x80
1000a016:	04d2      	lsls	r2, r2, #19
1000a018:	4b40      	ldr	r3, [pc, #256]	; (1000a11c <main+0x130>)
1000a01a:	601a      	str	r2, [r3, #0]
 }

static void configure_gpio_pins(void)
{
	struct gpio_config config_gpio_pin;
	gpio_get_config_defaults(&config_gpio_pin);
1000a01c:	0020      	movs	r0, r4
1000a01e:	4b40      	ldr	r3, [pc, #256]	; (1000a120 <main+0x134>)
1000a020:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a022:	2501      	movs	r5, #1
1000a024:	7025      	strb	r5, [r4, #0]
	gpio_pin_set_config(PIN_LP_GPIO_16 , &config_gpio_pin);
1000a026:	0021      	movs	r1, r4
1000a028:	2010      	movs	r0, #16
1000a02a:	4e3e      	ldr	r6, [pc, #248]	; (1000a124 <main+0x138>)
1000a02c:	47b0      	blx	r6
	gpio_pin_set_config(PIN_LP_GPIO_20 , &config_gpio_pin);
1000a02e:	0021      	movs	r1, r4
1000a030:	2014      	movs	r0, #20
1000a032:	47b0      	blx	r6
	gpio_pin_set_output_level(PIN_LP_GPIO_16, false);
1000a034:	2100      	movs	r1, #0
1000a036:	2010      	movs	r0, #16
1000a038:	4e3b      	ldr	r6, [pc, #236]	; (1000a128 <main+0x13c>)
1000a03a:	47b0      	blx	r6
	gpio_pin_set_output_level(PIN_LP_GPIO_20, false);
1000a03c:	2100      	movs	r1, #0
1000a03e:	2014      	movs	r0, #20
1000a040:	47b0      	blx	r6


static void configure_dualtimer(void)
{
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000a042:	0020      	movs	r0, r4
1000a044:	4b39      	ldr	r3, [pc, #228]	; (1000a12c <main+0x140>)
1000a046:	4798      	blx	r3
	config_dualtimer.timer1.load_value = 0;
1000a048:	2300      	movs	r3, #0
1000a04a:	60a3      	str	r3, [r4, #8]
	config_dualtimer.timer2.load_value = 0;
1000a04c:	6163      	str	r3, [r4, #20]
	config_dualtimer.timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a04e:	70e3      	strb	r3, [r4, #3]
	config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a050:	7063      	strb	r3, [r4, #1]
	dualtimer_init(&config_dualtimer);
1000a052:	0020      	movs	r0, r4
1000a054:	4b36      	ldr	r3, [pc, #216]	; (1000a130 <main+0x144>)
1000a056:	4798      	blx	r3
    system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
	configure_timer();
	configure_timer_callback();
	configure_gpio_pins();
	configure_dualtimer();
	Setup(&module);
1000a058:	4836      	ldr	r0, [pc, #216]	; (1000a134 <main+0x148>)
1000a05a:	4b37      	ldr	r3, [pc, #220]	; (1000a138 <main+0x14c>)
1000a05c:	4798      	blx	r3

	//delay_us(100000);
	//ClearDisplay(&module);
	//Transfer(frameBuffer,0,50,&module);
	//Display(&module);
	ClearBuffer(frameBuffer);
1000a05e:	4c37      	ldr	r4, [pc, #220]	; (1000a13c <main+0x150>)
1000a060:	0020      	movs	r0, r4
1000a062:	4b37      	ldr	r3, [pc, #220]	; (1000a140 <main+0x154>)
1000a064:	4798      	blx	r3
	char* str = "Hello World!";
	char* str1 = "albireo@khu.ac.kr";
	char* str2 = "KHLUG";
	char* str3 = "12:11 am";
	char* str4 = "2017-02-06";
	draw_string(str, strlen(str), frameBuffer, 1, 1, BLACK, WHITE);
1000a066:	4b37      	ldr	r3, [pc, #220]	; (1000a144 <main+0x158>)
1000a068:	781f      	ldrb	r7, [r3, #0]
1000a06a:	4b37      	ldr	r3, [pc, #220]	; (1000a148 <main+0x15c>)
1000a06c:	781e      	ldrb	r6, [r3, #0]
1000a06e:	9602      	str	r6, [sp, #8]
1000a070:	9701      	str	r7, [sp, #4]
1000a072:	9500      	str	r5, [sp, #0]
1000a074:	2301      	movs	r3, #1
1000a076:	0022      	movs	r2, r4
1000a078:	210c      	movs	r1, #12
1000a07a:	4834      	ldr	r0, [pc, #208]	; (1000a14c <main+0x160>)
1000a07c:	4d34      	ldr	r5, [pc, #208]	; (1000a150 <main+0x164>)
1000a07e:	47a8      	blx	r5
	draw_string(str1, strlen(str1), frameBuffer, 1, 17, RED, WHITE);
1000a080:	9602      	str	r6, [sp, #8]
1000a082:	4b34      	ldr	r3, [pc, #208]	; (1000a154 <main+0x168>)
1000a084:	781b      	ldrb	r3, [r3, #0]
1000a086:	9301      	str	r3, [sp, #4]
1000a088:	2311      	movs	r3, #17
1000a08a:	9300      	str	r3, [sp, #0]
1000a08c:	3b10      	subs	r3, #16
1000a08e:	0022      	movs	r2, r4
1000a090:	2111      	movs	r1, #17
1000a092:	4831      	ldr	r0, [pc, #196]	; (1000a158 <main+0x16c>)
1000a094:	47a8      	blx	r5
	draw_string(str2, strlen(str2), frameBuffer, 1, 33, WHITE, BLUE);
1000a096:	4b31      	ldr	r3, [pc, #196]	; (1000a15c <main+0x170>)
1000a098:	781b      	ldrb	r3, [r3, #0]
1000a09a:	9302      	str	r3, [sp, #8]
1000a09c:	9601      	str	r6, [sp, #4]
1000a09e:	2321      	movs	r3, #33	; 0x21
1000a0a0:	9300      	str	r3, [sp, #0]
1000a0a2:	3b20      	subs	r3, #32
1000a0a4:	0022      	movs	r2, r4
1000a0a6:	2105      	movs	r1, #5
1000a0a8:	482d      	ldr	r0, [pc, #180]	; (1000a160 <main+0x174>)
1000a0aa:	47a8      	blx	r5
	draw_string(str3, strlen(str3), frameBuffer, 1, 49, GREEN, WHITE);
1000a0ac:	9602      	str	r6, [sp, #8]
1000a0ae:	4b2d      	ldr	r3, [pc, #180]	; (1000a164 <main+0x178>)
1000a0b0:	781b      	ldrb	r3, [r3, #0]
1000a0b2:	9301      	str	r3, [sp, #4]
1000a0b4:	2331      	movs	r3, #49	; 0x31
1000a0b6:	9300      	str	r3, [sp, #0]
1000a0b8:	3b30      	subs	r3, #48	; 0x30
1000a0ba:	0022      	movs	r2, r4
1000a0bc:	2108      	movs	r1, #8
1000a0be:	482a      	ldr	r0, [pc, #168]	; (1000a168 <main+0x17c>)
1000a0c0:	47a8      	blx	r5
	draw_string(str4, strlen(str4), frameBuffer, 1, 65, CYAN, BLACK);
1000a0c2:	9702      	str	r7, [sp, #8]
1000a0c4:	4b29      	ldr	r3, [pc, #164]	; (1000a16c <main+0x180>)
1000a0c6:	781b      	ldrb	r3, [r3, #0]
1000a0c8:	9301      	str	r3, [sp, #4]
1000a0ca:	2341      	movs	r3, #65	; 0x41
1000a0cc:	9300      	str	r3, [sp, #0]
1000a0ce:	3b40      	subs	r3, #64	; 0x40
1000a0d0:	0022      	movs	r2, r4
1000a0d2:	210a      	movs	r1, #10
1000a0d4:	4826      	ldr	r0, [pc, #152]	; (1000a170 <main+0x184>)
1000a0d6:	47a8      	blx	r5

	while(1){
		//ClearDisplay(&module);
		//delay_us(1000000);
		Transfer(frameBuffer,1,128,&module);
1000a0d8:	4e16      	ldr	r6, [pc, #88]	; (1000a134 <main+0x148>)
1000a0da:	4d18      	ldr	r5, [pc, #96]	; (1000a13c <main+0x150>)
1000a0dc:	4f25      	ldr	r7, [pc, #148]	; (1000a174 <main+0x188>)
1000a0de:	0033      	movs	r3, r6
1000a0e0:	2280      	movs	r2, #128	; 0x80
1000a0e2:	2101      	movs	r1, #1
1000a0e4:	0028      	movs	r0, r5
1000a0e6:	47b8      	blx	r7
	dualtimer_init(&config_dualtimer);
}

static void delay_us(uint32_t time)
{
	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG, time*26);
1000a0e8:	4a23      	ldr	r2, [pc, #140]	; (1000a178 <main+0x18c>)
1000a0ea:	2100      	movs	r1, #0
1000a0ec:	2000      	movs	r0, #0
1000a0ee:	4b23      	ldr	r3, [pc, #140]	; (1000a17c <main+0x190>)
1000a0f0:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER1)){}
1000a0f2:	4c23      	ldr	r4, [pc, #140]	; (1000a180 <main+0x194>)
1000a0f4:	2000      	movs	r0, #0
1000a0f6:	47a0      	blx	r4
1000a0f8:	2800      	cmp	r0, #0
1000a0fa:	d1fb      	bne.n	1000a0f4 <main+0x108>
1000a0fc:	e7ef      	b.n	1000a0de <main+0xf2>
1000a0fe:	46c0      	nop			; (mov r8, r8)
1000a100:	1000937d 	.word	0x1000937d
1000a104:	10009f41 	.word	0x10009f41
1000a108:	0027ac40 	.word	0x0027ac40
1000a10c:	10009fa1 	.word	0x10009fa1
1000a110:	10009f85 	.word	0x10009f85
1000a114:	10009fdd 	.word	0x10009fdd
1000a118:	10009f95 	.word	0x10009f95
1000a11c:	e000e100 	.word	0xe000e100
1000a120:	10008761 	.word	0x10008761
1000a124:	10008771 	.word	0x10008771
1000a128:	10008929 	.word	0x10008929
1000a12c:	1000812d 	.word	0x1000812d
1000a130:	100081b1 	.word	0x100081b1
1000a134:	1000ab4c 	.word	0x1000ab4c
1000a138:	100085f9 	.word	0x100085f9
1000a13c:	1000ab7c 	.word	0x1000ab7c
1000a140:	10008741 	.word	0x10008741
1000a144:	1000a7eb 	.word	0x1000a7eb
1000a148:	1000a7ed 	.word	0x1000a7ed
1000a14c:	1000aab0 	.word	0x1000aab0
1000a150:	1000831d 	.word	0x1000831d
1000a154:	1000a7ea 	.word	0x1000a7ea
1000a158:	1000aac0 	.word	0x1000aac0
1000a15c:	1000a7e9 	.word	0x1000a7e9
1000a160:	1000aad4 	.word	0x1000aad4
1000a164:	1000a7e8 	.word	0x1000a7e8
1000a168:	1000aadc 	.word	0x1000aadc
1000a16c:	1000a7ec 	.word	0x1000a7ec
1000a170:	1000aae8 	.word	0x1000aae8
1000a174:	1000866d 	.word	0x1000866d
1000a178:	018cba80 	.word	0x018cba80
1000a17c:	10008165 	.word	0x10008165
1000a180:	10008151 	.word	0x10008151

1000a184 <__libc_init_array>:
1000a184:	4b0e      	ldr	r3, [pc, #56]	; (1000a1c0 <__libc_init_array+0x3c>)
1000a186:	b570      	push	{r4, r5, r6, lr}
1000a188:	2500      	movs	r5, #0
1000a18a:	001e      	movs	r6, r3
1000a18c:	4c0d      	ldr	r4, [pc, #52]	; (1000a1c4 <__libc_init_array+0x40>)
1000a18e:	1ae4      	subs	r4, r4, r3
1000a190:	10a4      	asrs	r4, r4, #2
1000a192:	42a5      	cmp	r5, r4
1000a194:	d004      	beq.n	1000a1a0 <__libc_init_array+0x1c>
1000a196:	00ab      	lsls	r3, r5, #2
1000a198:	58f3      	ldr	r3, [r6, r3]
1000a19a:	4798      	blx	r3
1000a19c:	3501      	adds	r5, #1
1000a19e:	e7f8      	b.n	1000a192 <__libc_init_array+0xe>
1000a1a0:	f000 fca8 	bl	1000aaf4 <_init>
1000a1a4:	4b08      	ldr	r3, [pc, #32]	; (1000a1c8 <__libc_init_array+0x44>)
1000a1a6:	2500      	movs	r5, #0
1000a1a8:	001e      	movs	r6, r3
1000a1aa:	4c08      	ldr	r4, [pc, #32]	; (1000a1cc <__libc_init_array+0x48>)
1000a1ac:	1ae4      	subs	r4, r4, r3
1000a1ae:	10a4      	asrs	r4, r4, #2
1000a1b0:	42a5      	cmp	r5, r4
1000a1b2:	d004      	beq.n	1000a1be <__libc_init_array+0x3a>
1000a1b4:	00ab      	lsls	r3, r5, #2
1000a1b6:	58f3      	ldr	r3, [r6, r3]
1000a1b8:	4798      	blx	r3
1000a1ba:	3501      	adds	r5, #1
1000a1bc:	e7f8      	b.n	1000a1b0 <__libc_init_array+0x2c>
1000a1be:	bd70      	pop	{r4, r5, r6, pc}
1000a1c0:	1000ab00 	.word	0x1000ab00
1000a1c4:	1000ab00 	.word	0x1000ab00
1000a1c8:	1000ab00 	.word	0x1000ab00
1000a1cc:	1000ab04 	.word	0x1000ab04

1000a1d0 <microsoftSansSerif_8ptFontInfo>:
1000a1d0:	007e200c 1000a66c 1000a1dc              . ~.l.......

1000a1dc <microsoftSansSerif_8ptBitmaps>:
	...
1000a1e8:	80808000 80808080 00008000 90909000     ................
	...
1000a200:	fc484800 fc484848 00004848 a8702000     .HH.HHH.HH... p.
1000a210:	283060a0 002070a8 64926000 4c201008     .`0(.p ..`.d.. L
1000a220:	00000c92 a0a04000 90a84040 00006890     .....@..@@...h..
1000a230:	80808000 00000000 00000000 80804000     .............@..
1000a240:	80808080 40808080 40408000 40404040     .......@..@@@@@@
1000a250:	80404040 a040a000 00000000 00000000     @@@...@.........
1000a260:	00000000 20f82020 00000020 00000000     ....  .  .......
1000a270:	00000000 00804000 00000000 00c00000     .....@..........
	...
1000a28c:	00008000 10101000 40402020 00008080     ........  @@....
1000a29c:	88887000 88888888 00007088 20e02000     .p.......p... . 
1000a2ac:	20202020 00002020 08887000 40201008           ...p.... @
1000a2bc:	0000f880 08887000 08083008 00007088     .....p...0...p..
1000a2cc:	30301000 f8905050 00001010 8080f800     ..00PP..........
1000a2dc:	080888f0 00007088 80887000 8888f080     .....p...p......
1000a2ec:	00007088 1008f800 40202010 00004040     .p.......  @@@..
1000a2fc:	88887000 88887088 00007088 88887000     .p...p...p...p..
1000a30c:	08087888 00007088 00000000 00000080     .x...p..........
1000a31c:	00008000 00000000 00000040 00804000     ........@....@..
1000a32c:	10000000 40804020 00001020 00000000     .... @.@ .......
1000a33c:	f800f800 00000000 80000000 20102040     ............@ . 
1000a34c:	00008040 08887000 20201008 00002000     @....p....  . ..
1000a35c:	001e0000 80408061 4092408e c08d4092     ....a.@..@.@.@..
1000a36c:	00600040 0000001f 28101000 7c444428     @.`........((DD|
1000a37c:	00008282 8888f000 8888f088 0000f088     ................
1000a38c:	80847800 80808080 00007884 8488f000     .x.......x......
1000a39c:	84848484 0000f088 8080f800 8080f080     ................
1000a3ac:	0000f880 8080f800 8080f080 00008080     ................
1000a3bc:	80847800 84849c80 0000748c 84848400     .x.......t......
1000a3cc:	8484fc84 00008484 80808000 80808080     ................
1000a3dc:	00008080 10101000 90101010 00006090     .............`..
1000a3ec:	a0908800 90a0c0c0 00008488 80808000     ................
1000a3fc:	80808080 0000f880 c6828200 92aaaac6     ................
1000a40c:	00008292 c4c48400 8c94a4a4 0000848c     ................
1000a41c:	84847800 84848484 00007884 8484f800     .x.......x......
1000a42c:	8080f884 00008080 84847800 94848484     .........x......
1000a43c:	0004788c 8484f800 8484f884 00008484     .x..............
1000a44c:	80887000 08087080 00007088 2020f800     .p...p...p....  
1000a45c:	20202020 00002020 84848400 84848484           ..........
1000a46c:	00007884 44828200 28284444 00001010     .x.....DDD((....
1000a47c:	20800000 40442080 40444044 802a802a     ... . D@D@D@*.*.
1000a48c:	00110011 00000000 44828200 44281028     ...........D(.(D
1000a49c:	00008282 44828200 10101028 00001010     .......D(.......
1000a4ac:	0402fe00 40201008 0000fe80 8080c000     ...... @........
1000a4bc:	80808080 c0808080 80808000 20204040     ............@@  
1000a4cc:	00001010 4040c000 40404040 c0404040     ......@@@@@@@@@.
1000a4dc:	00885020 00000000 00000000 00000000      P..............
1000a4ec:	00000000 fc000000 00408000 00000000     ..........@.....
	...
1000a504:	88780870 00007888 80808000 888888f0     p.x..x..........
1000a514:	0000f088 00000000 80808870 00007088     ........p....p..
1000a524:	08080800 88888878 00007888 00000000     ....x....x......
1000a534:	80f88870 00007088 80804000 808080c0     p....p...@......
1000a544:	00008080 00000000 88888878 f0087888     ........x....x..
1000a554:	80808000 8888c8b0 00008888 00008000     ................
1000a564:	80808080 00008080 00008000 80808080     ................
1000a574:	80808080 80808000 a0c0a090 00008890     ................
1000a584:	80808000 80808080 00008080 00000000     ................
1000a594:	929292ec 00009292 00000000 8888c8b0     ................
1000a5a4:	00008888 00000000 88888870 00007088     ........p....p..
1000a5b4:	00000000 888888f0 8080f088 00000000     ................
1000a5c4:	88888878 08087888 00000000 808080c0     x....x..........
1000a5d4:	00008080 00000000 20409060 00006090     ........`.@ .`..
1000a5e4:	80800000 808080c0 00004080 00000000     .........@......
1000a5f4:	88888888 00006898 00000000 50508888     .....h........PP
1000a604:	00002020 00000000 aaaa9292 00004444       ..........DD..
1000a614:	00000000 60609090 00009090 00000000     ......``........
1000a624:	48484848 c0202030 00000000 402010f0     HHHH0  ....... @
1000a634:	0000f080 40404020 40408040 00204040     .... @@@@.@@@@ .
1000a644:	80808000 80808080 00808080 40404080     .............@@@
1000a654:	40402040 00804040 98640000 00000000     @ @@@@....d.....
	...

1000a66c <microsoftSansSerif_8ptDescriptors>:
1000a66c:	00000002 000c0001 00180004 00240006     ..............$.
1000a67c:	00300005 003c0007 00480005 00540001     ..0...<...H...T.
1000a68c:	00600002 006c0002 00780003 00840005     ..`...l...x.....
1000a69c:	00900002 009c0002 00a80001 00b40004     ................
1000a6ac:	00c00005 00cc0003 00d80005 00e40005     ................
1000a6bc:	00f00005 00fc0005 01080005 01140005     ................
1000a6cc:	01200005 012c0005 01380001 01440002     .. ...,...8...D.
1000a6dc:	01500004 015c0005 01680004 01740005     ..P...\...h...t.
1000a6ec:	0180000a 01980007 01a40005 01b00006     ................
1000a6fc:	01bc0006 01c80005 01d40005 01e00006     ................
1000a70c:	01ec0006 01f80001 02040004 02100006     ................
1000a71c:	021c0005 02280007 02340006 02400006     ......(...4...@.
1000a72c:	024c0006 02580006 02640006 02700005     ..L...X...d...p.
1000a73c:	027c0005 02880006 02940007 02a0000b     ..|.............
1000a74c:	02b80007 02c40007 02d00007 02dc0002     ................
1000a75c:	02e80004 02f40002 03000005 030c0006     ................
1000a76c:	03180002 03240005 03300005 033c0005     ......$...0...<.
1000a77c:	03480005 03540005 03600002 036c0005     ..H...T...`...l.
1000a78c:	03780005 03840001 03900001 039c0005     ..x.............
1000a79c:	03a80001 03b40007 03c00005 03cc0005     ................
1000a7ac:	03d80005 03e40005 03f00002 03fc0004     ................
1000a7bc:	04080002 04140005 04200005 042c0007     .......... ...,.
1000a7cc:	04380004 04440005 04500004 045c0003     ..8...D...P...\.
1000a7dc:	04680001 04740003 04800006              ..h...t.....

1000a7e8 <GREEN>:
1000a7e8:	00802040                                         @

1000a7e9 <BLUE>:
1000a7e9:	60008020                                          

1000a7ea <RED>:
1000a7ea:	e0600080                                         .

1000a7eb <BLACK>:
	...

1000a7ec <CYAN>:
1000a7ec:	0000e060                                         `

1000a7ed <WHITE>:
1000a7ed:	100000e0 1e100094 2c100094 3a100094     ...........,...:
1000a7fd:	48100094 56100094 64100094 74100094     ...H...V...d...t
1000a80d:	84100094 94100094 a4100094 b4100094     ................
1000a81d:	c4100094 d4100094 e4100094 f4100094     ................
1000a82d:	04100094 14100095 24100095 34100095     ...........$...4
1000a83d:	44100095 54100095 64100095 74100095     ...D...T...d...t
1000a84d:	84100095 94100095 a4100095 b4100095     ................
1000a85d:	c2100095 d0100095 de100095 ec100095     ................
1000a86d:	fa100095 08100095 16100096 24100096     ...............$
1000a87d:	34100096 44100096 54100096 64100096     ...4...D...T...d
1000a88d:	74100096 84100096 94100096 a4100096     ...t............
1000a89d:	b4100096 c4100096 d4100096 e4100096     ................
1000a8ad:	f4100096 04100096 14100097 24100097     ...............$
1000a8bd:	32100097 40100097 6c100097 7a100097     ...2...@...l...z
1000a8cd:	88100097 96100097 a4100097 b2100097     ................
1000a8dd:	c0100097 ce100097 dc100097 ea100097     ................
1000a8ed:	f8100097 06100097 14100098 22100098     ..............."
1000a8fd:	30100098 3e100098 4c100098 5a100098     ...0...>...L...Z
1000a90d:	68100098 76100098 84100098 92100098     ...h...v........
1000a91d:	a0100098 ae100098 bc100098 ca100098     ................
1000a92d:	d8100098 e6100098 f4100098 02100098     ................
1000a93d:	10100099 1e100099 2c100099 3a100099     ...........,...:
1000a94d:	48100099 56100099 64100099 72100099     ...H...V...d...r
1000a95d:	80100099 8e100099 9c100099 aa100099     ................
1000a96d:	b8100099 c6100099 d4100099 e2100099     ................
1000a97d:	f0100099 fe100099 0c100099 1a10009a     ................
1000a98d:	2810009a 3610009a 4410009a 5210009a     ...(...6...D...R
1000a99d:	ec10009a 1410009a 3c10009b 6410009b     ...........<...d
1000a9ad:	a410009b 9410009d ac10009b 2410009b     ...............$
1000a9bd:	3c10009c c410009c dc10009b f410009b     ...<............
1000a9cd:	0c10009b 5410009c 1810009c 1810009f     .......T........
1000a9dd:	1810009f 1810009f 1810009f 1810009f     ................
1000a9ed:	1810009f 1810009f fc10009f 1410009c     ................
1000a9fd:	2c10009d ba10009d 8410009d 1810009c     ...,............
1000aa0d:	1810009f 1810009f 1810009f 1810009f     ................
1000aa1d:	1810009f 4410009f 5c10009d 7410009d     .......D...\...t
1000aa2d:	8c10009d 1810009d d010009f e810009e     ................
1000aa3d:	1810009e 1810009f e610009f fc10009d     ................
1000aa4d:	1210009d 2810009e 1810009e 1810009f     .......(........
1000aa5d:	1810009f 1810009f 1810009f 1810009f     ................
1000aa6d:	1810009f 1810009f d810009f 0010009a     ................
1000aa7d:	2810009b 5010009b 7c10009b 6c10009b     ...(...P...|...l
1000aa8d:	9c10009c b410009c cc10009c e410009c     ................
1000aa9d:	d010009c 3e10009d b810009e 0010009e     .......>........
1000aaad:	4810009f 6f6c6c65 726f5720 0021646c     ...Hello World!.
1000aabd:	61000000 7269626c 6b406f65 612e7568     ...albireo@khu.a
1000aacd:	726b2e63 4b000000 47554c48 31000000     c.kr...KHLUG...1
1000aadd:	31313a32 006d6120 32000000 2d373130     2:11 am....2017-
1000aaed:	302d3230 f8000036                                02-06..

1000aaf4 <_init>:
1000aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aaf6:	46c0      	nop			; (mov r8, r8)
1000aaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000aafa:	bc08      	pop	{r3}
1000aafc:	469e      	mov	lr, r3
1000aafe:	4770      	bx	lr

1000ab00 <__init_array_start>:
1000ab00:	100080b1 	.word	0x100080b1

1000ab04 <_fini>:
1000ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ab06:	46c0      	nop			; (mov r8, r8)
1000ab08:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000ab0a:	bc08      	pop	{r3}
1000ab0c:	469e      	mov	lr, r3
1000ab0e:	4770      	bx	lr

1000ab10 <__fini_array_start>:
1000ab10:	10008089 	.word	0x10008089
